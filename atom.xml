<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡心小筑</title>
  
  <subtitle>随笔   |   札记</subtitle>
  <link href="https://blog.mhxcalfred.com/atom.xml" rel="self"/>
  
  <link href="https://blog.mhxcalfred.com/"/>
  <updated>2019-12-31T16:00:00.000Z</updated>
  <id>https://blog.mhxcalfred.com/</id>
  
  <author>
    <name>_mhxcAlfred</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020元旦</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/afac844da433/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/afac844da433/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2019-12-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><style>  #biaoti {    text-align: center;    padding: 20px;    font-size: 48px;  }</style><div id="biaoti">  <p>元旦快乐</p></div><div style="text-align:center;">  <img src="/zh-CN/afac844da433/202001010001.png" class="" title="纪念日"></div><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;日常、元旦&lt;/center&gt;</summary>
    
    
    
    <category term="纪念日" scheme="https://blog.mhxcalfred.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
    <category term="日常" scheme="https://blog.mhxcalfred.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="元旦" scheme="https://blog.mhxcalfred.com/tags/%E5%85%83%E6%97%A6/"/>
    
  </entry>
  
  <entry>
    <title>力扣00029.两数相除</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/fa0a28cc6910/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/fa0a28cc6910/</id>
    <published>2019-12-31T03:15:00.000Z</published>
    <updated>2019-12-31T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。</p><p>整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。</p><p>返回被除数 dividend 除以除数 divisor 得到的 商 。</p><p><strong>注意：</strong>假设我们的环境只能存储 32 位 有符号整数，其数值范围是 $[−2^{31},  2^{31 − 1}]$ 。本题中，如果商 严格大于 $2^{31 − 1}$ ，则返回 $2^{31 − 1}$ ；如果商 严格小于 $−2^{31}$ ，则返回 $−2^{31}$ 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><p>输入: dividend &#x3D; 10, divisor &#x3D; 3<br>输出: 3<br>解释: 10&#x2F;3 &#x3D; 3.33333.. ，向零截断后得到 3 。</p><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><p>输入: dividend &#x3D; 7, divisor &#x3D; -3<br>输出: -2<br>解释: 7&#x2F;-3 &#x3D; -2.33333.. ，向零截断后得到 -2 。</p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$−2^{31} &lt;&#x3D; dividend, divisor &lt;&#x3D; 2^{31 − 1}$</li><li>divisor !&#x3D; 0</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(dividend));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(divisor));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(std::<span class="built_in">min</span>(std::<span class="built_in">max</span>(result, <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MIN)), <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MAX)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 7.50 MB, 击败 5.02% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDividend</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)dividend);</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDivisor</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)divisor);</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.min(Math.max(result, (<span class="type">long</span>)Integer.MIN_VALUE), (<span class="type">long</span>)Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 72.66% 使用 Java 的用户</p><p>内存消耗 : 39.83 MB, 击败 20.23% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend, divisor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 89.54% 使用 Python 的用户</p><p>内存消耗 : 11.37 MB, 击败 92.81% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend: <span class="built_in">int</span>, divisor: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 98.48% 使用 Python3 的用户</p><p>内存消耗 : 16.41 MB, 击败 32.61% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> MAX_INT = INT_MAX;</span><br><span class="line">    <span class="type">int</span> MIN_INT = INT_MIN;</span><br><span class="line">    <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)dividend);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)divisor);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        absDividend -= temp;</span><br><span class="line">        quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = sign * quotient;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)fmin(fmax(result, (<span class="type">long</span> <span class="type">long</span>)MIN_INT), (<span class="type">long</span> <span class="type">long</span>)MAX_INT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.20 MB, 击败 98.80% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Divide</span>(<span class="params"><span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> MAX_INT = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="built_in">int</span> MIN_INT = <span class="built_in">int</span>.MinValue;</span><br><span class="line">        <span class="built_in">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">long</span> absDividend = Math.Abs((<span class="built_in">long</span>)dividend);</span><br><span class="line">        <span class="built_in">long</span> absDivisor = Math.Abs((<span class="built_in">long</span>)divisor);</span><br><span class="line">        <span class="built_in">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="built_in">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            quotient += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">long</span> result = sign * quotient;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)Math.Min(Math.Max(result, (<span class="built_in">long</span>)MIN_INT), (<span class="built_in">long</span>)MAX_INT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 70.97% 使用 C# 的用户</p><p>内存消耗 : 26.63 MB, 击败 12.90% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">dividend</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">divisor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> divide = <span class="keyword">function</span>(<span class="params">dividend, divisor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    dividend &gt; <span class="number">0</span> ? (dividend = -dividend) : (sign = <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    divisor &gt; <span class="number">0</span> ? (divisor = -divisor) : (sign = sign ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dividend) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">            i &lt;= <span class="number">31</span> &amp;&amp;</span><br><span class="line">            divisor &gt;= (-<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i)) &amp;&amp;</span><br><span class="line">            divisor &lt;&lt; i &gt;= dividend &amp;&amp;</span><br><span class="line">            ++i</span><br><span class="line">        ) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dividend = dividend - (divisor &lt;&lt; --i);</span><br><span class="line">        quotient += <span class="number">2</span> ** i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(sign + (!sign &amp;&amp; quotient &gt;= <span class="number">2147483648</span> ? <span class="number">2147483647</span> : quotient));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 64.44% 使用 JavaScript 的用户</p><p>内存消耗 : 53.24 MB, 击败 5.34% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">sign</span>: <span class="built_in">number</span> = (<span class="title class_">Number</span>(a &gt; <span class="number">0</span>) ^ <span class="title class_">Number</span>(b &gt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="title class_">Math</span>.<span class="title function_">abs</span>(a);</span><br><span class="line">    b = <span class="title class_">Math</span>.<span class="title function_">abs</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">31</span>; x &gt;= <span class="number">0</span>; x--) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a &gt;&gt;&gt; x) &gt;= b) &#123;</span><br><span class="line">            a -= (b &lt;&lt; x);</span><br><span class="line">            result += (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign === <span class="number">1</span> ? result : -result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 98 ms, 击败 7.81% 使用 TypeScript 的用户</p><p>内存消耗 : 53.46 MB, 击败 6.25% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $dividend</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $divisor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params"><span class="variable">$dividend</span>, <span class="variable">$divisor</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$INT_MAX</span> = <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$INT_MIN</span> = <span class="title function_ invoke__">pow</span>(-<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$dividend</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sign</span> = (<span class="variable">$dividend</span> &gt; <span class="number">0</span>) ^ (<span class="variable">$divisor</span> &gt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$dividend</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$dividend</span>);</span><br><span class="line">        <span class="variable">$divisor</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$divisor</span>);</span><br><span class="line">        <span class="variable">$quotient</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$divisor</span>) &#123;</span><br><span class="line">            <span class="variable">$tempDivisor</span> = <span class="variable">$divisor</span>;</span><br><span class="line">            <span class="variable">$multiple</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$tempDivisor</span> &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$tempDivisor</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$multiple</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$dividend</span> -= <span class="variable">$tempDivisor</span>;</span><br><span class="line">            <span class="variable">$quotient</span> += <span class="variable">$multiple</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$sign</span> * <span class="variable">$quotient</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> &gt; <span class="variable">$INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MAX</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$result</span> &lt; <span class="variable">$INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MIN</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 40.00% 使用 PHP 的用户</p><p>内存消耗 : 19.82 MB, 击败 -% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">dividend</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">divisor</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MAX</span> <span class="operator">=</span> <span class="type">Int32</span>.max</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MIN</span> <span class="operator">=</span> <span class="type">Int32</span>.min</span><br><span class="line">        <span class="keyword">if</span> dividend <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sign <span class="operator">=</span> (dividend <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">!=</span> (divisor <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">?</span> <span class="operator">-</span><span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> dividend <span class="operator">=</span> <span class="built_in">abs</span>(dividend)</span><br><span class="line">        <span class="keyword">let</span> divisor <span class="operator">=</span> <span class="built_in">abs</span>(divisor)</span><br><span class="line">        <span class="keyword">var</span> quotient <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> divisor &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor <span class="operator">=</span> divisor</span><br><span class="line">            <span class="keyword">var</span> multiple <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> tempDivisor <span class="operator">&lt;&lt;</span> <span class="number">1</span> &#123;</span><br><span class="line">                tempDivisor <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">                multiple <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend <span class="operator">-=</span> tempDivisor</span><br><span class="line">            quotient <span class="operator">+=</span> multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> sign <span class="operator">*</span> quotient</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">&gt;</span> <span class="type">Int32</span>(<span class="type">INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MAX</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> result <span class="operator">&lt;</span> <span class="type">Int32</span>(<span class="type">INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MIN</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 90.00% 使用 Swift 的用户</p><p>内存消耗 : 15.00 MB, 击败 10.00% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">divide</span><span class="params">(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> sign = (dividend &gt; <span class="number">0</span>) xor (divisor &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> dividend = Math.abs(dividend.toLong())</span><br><span class="line">        <span class="keyword">val</span> divisor = Math.abs(divisor.toLong())</span><br><span class="line">        <span class="keyword">var</span> quotient = <span class="number">0L</span></span><br><span class="line">        <span class="keyword">while</span> (dividend &gt;= divisor) &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor = divisor</span><br><span class="line">            <span class="keyword">var</span> multiple = <span class="number">1L</span></span><br><span class="line">            <span class="keyword">while</span> (dividend &gt;= tempDivisor shl <span class="number">1</span>) &#123;</span><br><span class="line">                tempDivisor = tempDivisor shl <span class="number">1</span></span><br><span class="line">                multiple = multiple shl <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend -= tempDivisor</span><br><span class="line">            quotient += multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="keyword">if</span> (sign) -quotient <span class="keyword">else</span> quotient</span><br><span class="line">        <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 155 ms, 击败 40.00% 使用 Kotlin 的用户</p><p>内存消耗 : 33.58 MB, 击败 8.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> divide(<span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MAX = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MIN = <span class="number">-2147483648</span>;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> isNegative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">int</span> longDividend = dividend.abs();</span><br><span class="line">    <span class="built_in">int</span> longDivisor = divisor.abs();</span><br><span class="line">    <span class="built_in">int</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (longDividend &gt;= longDivisor) &#123;</span><br><span class="line">      <span class="built_in">int</span> tempDivisor = longDivisor;</span><br><span class="line">      <span class="built_in">int</span> multiple = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (longDividend &gt;= tempDivisor &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">        tempDivisor &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      longDividend -= tempDivisor;</span><br><span class="line">      quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> result = isNegative ? -quotient : quotient;</span><br><span class="line">    <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MAX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MIN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 327 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 147.92 MB, 击败 50.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="type">int</span>, divisor <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">const</span> INT_MAX = <span class="type">int</span>(^<span class="type">uint32</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> INT_MIN = ^INT_MAX</span><br><span class="line"><span class="keyword">if</span> dividend == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">isNegative := (dividend &gt; <span class="number">0</span>) != (divisor &gt; <span class="number">0</span>)</span><br><span class="line">longDividend := abs(dividend)</span><br><span class="line">longDivisor := abs(divisor)</span><br><span class="line">quotient := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> longDividend &gt;= longDivisor &#123;</span><br><span class="line">tempDivisor := longDivisor</span><br><span class="line">multiple := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> longDividend &gt;= tempDivisor&lt;&lt;<span class="number">1</span> &#123;</span><br><span class="line">tempDivisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">longDividend -= tempDivisor</span><br><span class="line">quotient += multiple</span><br><span class="line">&#125;</span><br><span class="line">result := quotient</span><br><span class="line"><span class="keyword">if</span> isNegative &#123;</span><br><span class="line">result = -quotient</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> result &gt; INT_MAX &#123;</span><br><span class="line"><span class="keyword">return</span> INT_MAX</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> result &lt; INT_MIN &#123;</span><br><span class="line"><span class="keyword">return</span> INT_MIN</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.20 MB, 击败 69.90% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; dividend</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; divisor</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">dividend, divisor</span>)</span><br><span class="line">  int_max = (<span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>)</span><br><span class="line">  int_min = -(<span class="number">2</span>**<span class="number">31</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> dividend == <span class="number">0</span></span><br><span class="line">  is_negative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)</span><br><span class="line">  long_dividend = dividend.abs</span><br><span class="line">  long_divisor = divisor.abs</span><br><span class="line">  quotient = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> long_dividend &gt;= long_divisor</span><br><span class="line">    temp_divisor = long_divisor</span><br><span class="line">    multiple = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> long_dividend &gt;= temp_divisor &lt;&lt; <span class="number">1</span></span><br><span class="line">      temp_divisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">      multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    long_dividend -= temp_divisor</span><br><span class="line">    quotient += multiple</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result = is_negative ? -quotient : quotient</span><br><span class="line">  <span class="keyword">if</span> result &gt; int_max</span><br><span class="line">    <span class="keyword">return</span> int_max</span><br><span class="line">  <span class="keyword">elsif</span> result &lt; int_min</span><br><span class="line">    <span class="keyword">return</span> int_min</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 75.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.44 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divide</span></span>(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MAX</span> = <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MIN</span> = <span class="type">Int</span>.<span class="type">MinValue</span></span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="type">INT_MIN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (divisor == <span class="number">1</span>) <span class="keyword">return</span> <span class="type">INT_MIN</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (divisor == <span class="number">-1</span>) <span class="keyword">return</span> <span class="type">INT_MAX</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rev = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> dividendVar = dividend</span><br><span class="line">    <span class="keyword">var</span> divisorVar = divisor</span><br><span class="line">    <span class="keyword">if</span> (dividend &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      dividendVar = -dividend</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      divisorVar = -divisor</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> right = <span class="type">INT_MAX</span></span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> check = quickAdd(divisorVar, mid, dividendVar)</span><br><span class="line">      <span class="keyword">if</span> (check) &#123;</span><br><span class="line">        ans = mid</span><br><span class="line">        <span class="keyword">if</span> (mid == <span class="type">INT_MAX</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">        &#125;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quickAdd</span></span>(y: <span class="type">Int</span>, z: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> add = y</span><br><span class="line">    <span class="keyword">var</span> zVar = z</span><br><span class="line">    <span class="keyword">while</span> (zVar != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((zVar &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        result += add</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (zVar != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (add &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        add += add</span><br><span class="line">      &#125;</span><br><span class="line">      zVar &gt;&gt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 51.39 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">divide</span>(dividend: <span class="type">i32</span>, divisor: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> INT_MAX: <span class="type">i32</span> = <span class="type">i32</span>::MAX;</span><br><span class="line">        <span class="keyword">const</span> INT_MIN: <span class="type">i32</span> = <span class="type">i32</span>::MIN;</span><br><span class="line">        <span class="keyword">if</span> dividend == INT_MIN &#123;</span><br><span class="line">            <span class="keyword">if</span> divisor == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> divisor == -<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rev</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dividend_var</span> = dividend;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">divisor_var</span> = divisor;</span><br><span class="line">        <span class="keyword">if</span> dividend &gt; <span class="number">0</span> &#123;</span><br><span class="line">            dividend_var = -dividend;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor &gt; <span class="number">0</span> &#123;</span><br><span class="line">            divisor_var = -divisor;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = INT_MAX;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">check</span> = Solution::<span class="title function_ invoke__">quick_add</span>(divisor_var, mid, dividend_var);</span><br><span class="line">            <span class="keyword">if</span> check &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                <span class="keyword">if</span> mid == INT_MAX &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">if</span> rev &#123; -ans &#125; <span class="keyword">else</span> &#123; ans &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> rev &#123;</span><br><span class="line">            -ans</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">quick_add</span>(y: <span class="type">i32</span>, z: <span class="type">i32</span>, x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">add</span> = y;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z_var</span> = z;</span><br><span class="line">        <span class="keyword">while</span> z_var != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> z_var &amp; <span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> result &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> z_var != <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> add &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add += add;</span><br><span class="line">            &#125;</span><br><span class="line">            z_var &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.14 MB, 击败 18.92% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;两数相除、位运算、数学、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00028.找出字符串中第一个匹配项的下标</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/137d1a1dff7f/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/137d1a1dff7f/</id>
    <published>2019-12-30T03:15:00.000Z</published>
    <updated>2019-12-30T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; haystack.length, needle.length &lt;&#x3D; 10^4$</li><li>haystack 和 needle 仅由小写英文字符组成</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(std::string haystack, std::string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> pos = haystack.<span class="built_in">find</span>(needle);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 32.03% 使用 C++ 的用户</p><p>内存消耗 : 7.45 MB, 击败 5.03% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> haystack.indexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 40.36 MB, 击败 20.59% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack, needle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index = haystack.find(needle)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 76.06% 使用 Python 的用户</p><p>内存消耗 : 11.54 MB, 击败 92.21% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        index = haystack.find(needle)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 38 ms, 击败 73.98% 使用 Python3 的用户</p><p>内存消耗 : 16.38 MB, 击败 33.01% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strStr</span><span class="params">(<span class="type">char</span>* haystack, <span class="type">char</span>* needle)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* result = <span class="built_in">strstr</span>(haystack, needle);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result - haystack;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.25 MB, 击败 99.47% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">StrStr</span>(<span class="params"><span class="built_in">string</span> haystack, <span class="built_in">string</span> needle</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> index = haystack.IndexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 50 ms, 击败 77.71% 使用 C# 的用户</p><p>内存消耗 : 39.58 MB, 击败 5.22% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = haystack.<span class="title function_">indexOf</span>(needle);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 58 ms, 击败 69.67% 使用 JavaScript 的用户</p><p>内存消耗 : 48.68 MB, 击败 10.90% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">index</span>: <span class="built_in">number</span> = haystack.<span class="title function_">indexOf</span>(needle);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 43.15% 使用 TypeScript 的用户</p><p>内存消耗 : 50.23 MB, 击败 13.29% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $haystack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $needle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">strStr</span>(<span class="params"><span class="variable">$haystack</span>, <span class="variable">$needle</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$index</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$haystack</span>, <span class="variable">$needle</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$index</span> !== <span class="literal">false</span> ? <span class="variable">$index</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 92.96% 使用 PHP 的用户</p><p>内存消耗 : 19.80 MB, 击败 5.63% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">strStr</span>(<span class="keyword">_</span> <span class="params">haystack</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">needle</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> range <span class="operator">=</span> haystack.range(of: needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> haystack.distance(from: haystack.startIndex, to: range.lowerBound)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 75.25% 使用 Swift 的用户</p><p>内存消耗 : 16.25 MB, 击败 5.94% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">strStr</span><span class="params">(haystack: <span class="type">String</span>, needle: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> index = haystack.indexOf(needle)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (index != -<span class="number">1</span>) index <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 157 ms, 击败 24.11% 使用 Kotlin 的用户</p><p>内存消耗 : 34.41 MB, 击败 16.96% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int</span> strStr(<span class="built_in">String</span> haystack, <span class="built_in">String</span> needle) &#123;</span><br><span class="line">        <span class="built_in">int</span> index = haystack.indexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 292 ms, 击败 23.08% 使用 Dart 的用户</p><p>内存消耗 : 143.05 MB, 击败 92.31% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    index := strings.Index(haystack, needle)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 1.87 MB, 击败 47.87% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; haystack</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; needle</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_str</span>(<span class="params">haystack, needle</span>)</span><br><span class="line">    index = haystack.index(needle)</span><br><span class="line">    <span class="keyword">return</span> index.<span class="literal">nil</span>? ? -<span class="number">1</span> : index</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 85.71% 使用 Ruby 的用户</p><p>内存消耗 : 206.23 MB, 击败 71.43% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strStr</span></span>(haystack: <span class="type">String</span>, needle: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> index = haystack.indexOf(needle)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 453 ms, 击败 53.85% 使用 Scala 的用户</p><p>内存消耗 : 52.46 MB, 击败 46.15% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">str_str</span>(haystack: <span class="type">String</span>, needle: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(index) = haystack.<span class="title function_ invoke__">find</span>(&amp;needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> index <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 1.95 MB, 击败 92.17% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;找出字符串中第一个匹配项的下标、双指针、字符串、字符串匹配、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00027.移除元素</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/00adedf73cca/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/00adedf73cca/</id>
    <published>2019-12-27T03:15:00.000Z</published>
    <updated>2019-12-27T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,3,0,4]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>0 &lt;&#x3D; nums.length &lt;&#x3D; 100</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 50</li><li>0 &lt;&#x3D; val &lt;&#x3D; 100</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 44.36% 使用 C++ 的用户</p><p>内存消耗 : 10.24 MB, 击败 5.12% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 41.04 MB, 击败 5.14% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums, val</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 94.27% 使用 Python 的用户</p><p>内存消耗 : 11.30 MB, 击败 99.31% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 23 ms, 击败 99.89% 使用 Python3 的用户</p><p>内存消耗 : 16.32 MB, 击败 34.59% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numsSize; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 5.58% 使用 C 的用户</p><p>内存消耗 : 5.76 MB, 击败 95.20% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveElement</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums.Length; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 107 ms, 击败 75.62% 使用 C# 的用户</p><p>内存消耗 : 45.52 MB, 击败 5.23% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] !== val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 58 ms, 击败 70.84% 使用 JavaScript 的用户</p><p>内存消耗 : 49.11 MB, 击败 6.76% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums: <span class="built_in">number</span>[], val: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] !== val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 24.71% 使用 TypeScript 的用户</p><p>内存消耗 : 51.71 MB, 击败 5.21% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">&amp;<span class="variable">$nums</span>, <span class="variable">$val</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$nums</span> <span class="keyword">as</span> <span class="variable">$j</span> =&gt; <span class="variable">$num</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> !== <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$nums</span>[<span class="variable">$i</span>] = <span class="variable">$num</span>;</span><br><span class="line">                ++<span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 70.04% 使用 PHP 的用户</p><p>内存消耗 : 20.02 MB, 击败 5.29% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeElement</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] <span class="operator">!=</span> val &#123;</span><br><span class="line">                nums[i] <span class="operator">=</span> nums[j]</span><br><span class="line">                i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 48.38% 使用 Swift 的用户</p><p>内存消耗 : 15.58 MB, 击败 5.19% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeElement</span><span class="params">(nums: <span class="type">IntArray</span>, `<span class="keyword">val</span>`: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != `<span class="keyword">val</span>`) &#123;</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 164 ms, 击败 79.06% 使用 Kotlin 的用户</p><p>内存消耗 : 34.39 MB, 击败 11.96% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> removeElement(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> val) &#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 25.00% 使用 Dart 的用户</p><p>内存消耗 : 146.96 MB, 击败 50.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.01 MB, 击败 68.18% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; val</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_element</span>(<span class="params">nums, val</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    nums.each_with_index <span class="keyword">do</span> |<span class="params">num, j</span>|</span><br><span class="line">        <span class="keyword">if</span> num != val</span><br><span class="line">            nums[i] = num</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 62 ms, 击败 62.50% 使用 Ruby 的用户</p><p>内存消耗 : 206.46 MB, 击败 25.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], `<span class="keyword">val</span>`: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (j &lt;- nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums(j) != `<span class="keyword">val</span>`) &#123;</span><br><span class="line">                nums(i) = nums(j)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 483 ms, 击败 30.77% 使用 Scala 的用户</p><p>内存消耗 : 54.35 MB, 击败 30.77% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_element</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, val: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.03 MB, 击败 62.39% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;移除元素、数组、双指针、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
  </entry>
  
  <entry>
    <title>力扣00026.删除有序数组中的重复项</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/dee940c08134/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/dee940c08134/</id>
    <published>2019-12-26T03:15:00.000Z</published>
    <updated>2019-12-26T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。</li><li>返回 k 。</li></ul><p>判题标准:</p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 通过。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4$</li><li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li><li>nums 已按 非严格递增 排列</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.81% 使用 C++ 的用户</p><p>内存消耗 : 20.66 MB, 击败 5.12% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 43.79 MB, 击败 18.76% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 49.67% 使用 Python 的用户</p><p>内存消耗 : 12.79 MB, 击败 95.46% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 41.19% 使用 Python3 的用户</p><p>内存消耗 : 17.69 MB, 击败 30.93% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 83.02% 使用 C 的用户</p><p>内存消耗 : 7.13 MB, 击败 97.58% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveDuplicates</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 117 ms, 击败 86.81% 使用 C# 的用户</p><p>内存消耗 : 49.80 MB, 击败 5.20% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 66.38% 使用 JavaScript 的用户</p><p>内存消耗 : 52.09 MB, 击败 5.05% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 99.11% 使用 TypeScript 的用户</p><p>内存消耗 : 52.73 MB, 击败 5.47% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span>(<span class="params">&amp;<span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$nums</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$k</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$count</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="variable">$nums</span>[<span class="variable">$k</span>++] = <span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$k</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 23 ms, 击败 67.26% 使用 PHP 的用户</p><p>内存消耗 : 21.22 MB, 击败 5.36% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeDuplicates</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> k <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="operator">!=</span> nums[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                nums[k] <span class="operator">=</span> nums[i]</span><br><span class="line">                k <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 59.11% 使用 Swift 的用户</p><p>内存消耗 : 16.09 MB, 击败 6.07% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeDuplicates</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until nums.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 230 ms, 击败 67.37% 使用 Kotlin 的用户</p><p>内存消耗 : 40.41 MB, 击败 23.69% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> removeDuplicates(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        nums[k++] = nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 306 ms, 击败 100.00% 使用 Dart 的用户</p><p>内存消耗 : 144.93 MB, 击败 88.24% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    k := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] != nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            nums[k] = nums[i]</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 60.74% 使用 Go 的用户</p><p>内存消耗 : 4.26 MB, 击败 91.32% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_duplicates</span>(<span class="params">nums</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> nums.empty?</span><br><span class="line">  k = <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>...nums.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]</span><br><span class="line">      nums[k] = nums[i]</span><br><span class="line">      k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  k</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 68.75% 使用 Ruby 的用户</p><p>内存消耗 : 207.35 MB, 击败 50.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until nums.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != nums(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        nums(k) = nums(i)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 68.00% 使用 Scala 的用户</p><p>内存消耗 : 55.28 MB, 击败 84.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_duplicates</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">k</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>] &#123;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">                k += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.39 MB, 击败 6.05% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;删除有序数组中的重复项、数组、双指针、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
  </entry>
  
  <entry>
    <title>力扣00025.K 个一组翻转链表</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/a3c61776c6a9/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/a3c61776c6a9/</id>
    <published>2019-12-25T03:15:00.000Z</published>
    <updated>2019-12-25T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/a3c61776c6a9/201912250001.jpg" class="" title="示例1"><blockquote><p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[2,1,4,3,5]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/a3c61776c6a9/201912250002.jpg" class="" title="示例2"><blockquote><p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 3<br>输出：[3,2,1,4,5]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>链表中的节点数目为 n</li><li>1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 5000</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 1000</li></ul><p><strong>进阶：</strong>你可以设计一个只用 O(1) 额外内存空间的算法解决此问题吗？</p><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* prev_group_end = dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ListNode* group_start = prev_group_end-&gt;next;</span><br><span class="line">            ListNode* group_end = <span class="built_in">getGroupEnd</span>(group_start, k);</span><br><span class="line">            <span class="keyword">if</span> (!group_end) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode* next_group_start = group_end-&gt;next;</span><br><span class="line">            group_end-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            prev_group_end-&gt;next = <span class="built_in">reverseList</span>(group_start);</span><br><span class="line">            group_start-&gt;next = next_group_start;</span><br><span class="line">            prev_group_end = group_start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getGroupEnd</span><span class="params">(ListNode* start, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            ListNode* next_node = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next_node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 29.79% 使用 C++ 的用户</p><p>内存消耗 : 14.58 MB, 击败 7.15% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prevGroupEnd</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">groupStart</span> <span class="operator">=</span> prevGroupEnd.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">groupEnd</span> <span class="operator">=</span> getGroupEnd(groupStart, k);</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextGroupStart</span> <span class="operator">=</span> groupEnd.next;</span><br><span class="line">            groupEnd.next = <span class="literal">null</span>;</span><br><span class="line">            prevGroupEnd.next = reverseList(groupStart);</span><br><span class="line">            groupStart.next = nextGroupStart;</span><br><span class="line">            prevGroupEnd = groupStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">getGroupEnd</span><span class="params">(ListNode start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">null</span>; ++i) &#123;</span><br><span class="line">            start = start.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 43.32 MB, 击败 5.99% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head, k</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        prev_group_end = dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            group_start = prev_group_end.<span class="built_in">next</span></span><br><span class="line">            group_end = self.get_group_end(group_start, k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> group_end:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            next_group_start = group_end.<span class="built_in">next</span></span><br><span class="line">            group_end.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            prev_group_end.<span class="built_in">next</span> = self.reverse_list(group_start)</span><br><span class="line">            group_start.<span class="built_in">next</span> = next_group_start</span><br><span class="line">            prev_group_end = group_start</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">self, start, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k):</span><br><span class="line">            <span class="keyword">if</span> start:</span><br><span class="line">                start = start.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">self, head</span>):</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            next_node = curr.<span class="built_in">next</span></span><br><span class="line">            curr.<span class="built_in">next</span> = prev</span><br><span class="line">            prev, curr = curr, next_node</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 67.63% 使用 Python 的用户</p><p>内存消耗 : 13.03 MB, 击败 97.28% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], k: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        prev_group_end = dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            group_start = prev_group_end.<span class="built_in">next</span></span><br><span class="line">            group_end = self.get_group_end(group_start, k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> group_end:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            next_group_start = group_end.<span class="built_in">next</span></span><br><span class="line">            group_end.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            prev_group_end.<span class="built_in">next</span> = self.reverse_list(group_start)</span><br><span class="line">            group_start.<span class="built_in">next</span> = next_group_start</span><br><span class="line">            prev_group_end = group_start</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">self, start, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k):</span><br><span class="line">            <span class="keyword">if</span> start:</span><br><span class="line">                start = start.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">self, head</span>):</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            next_node = curr.<span class="built_in">next</span></span><br><span class="line">            curr.<span class="built_in">next</span> = prev</span><br><span class="line">            prev, curr = curr, next_node</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 87.58% 使用 Python3 的用户</p><p>内存消耗 : 17.23 MB, 击败 40.79% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">getGroupEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* start, <span class="type">int</span> k)</span>;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseKGroup</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev_group_end</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">group_start</span> =</span> prev_group_end-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">group_end</span> =</span> getGroupEnd(group_start, k);</span><br><span class="line">        <span class="keyword">if</span> (!group_end) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next_group_start</span> =</span> group_end-&gt;next;</span><br><span class="line">        group_end-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        prev_group_end-&gt;next = reverseList(group_start);</span><br><span class="line">        group_start-&gt;next = next_group_start;</span><br><span class="line">        prev_group_end = group_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">getGroupEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">        start = start-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">curr</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next_node</span> =</span> curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 60.44% 使用 C 的用户</p><p>内存消耗 : 6.59 MB, 击败 99.47% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseKGroup</span>(<span class="params">ListNode head, <span class="built_in">int</span> k</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode prevGroupEnd = dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ListNode groupStart = prevGroupEnd.next;</span><br><span class="line">            ListNode groupEnd = GetGroupEnd(groupStart, k);</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode nextGroupStart = groupEnd.next;</span><br><span class="line">            groupEnd.next = <span class="literal">null</span>;</span><br><span class="line">            prevGroupEnd.next = ReverseList(groupStart);</span><br><span class="line">            groupStart.next = nextGroupStart;</span><br><span class="line">            prevGroupEnd = groupStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">GetGroupEnd</span>(<span class="params">ListNode start, <span class="built_in">int</span> k</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">null</span>; ++i) &#123;</span><br><span class="line">            start = start.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">ReverseList</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        ListNode prev = <span class="literal">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            ListNode nextNode = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 81 ms, 击败 50.00% 使用 C# 的用户</p><p>内存消耗 : 43.74 MB, 击败 5.55% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseKGroup = <span class="keyword">function</span>(<span class="params">head, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> prevGroupEnd = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> groupStart = prevGroupEnd.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> groupEnd = <span class="title function_">getGroupEnd</span>(groupStart, k);</span><br><span class="line">        <span class="keyword">if</span> (!groupEnd) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> nextGroupStart = groupEnd.<span class="property">next</span>;</span><br><span class="line">        groupEnd.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        prevGroupEnd.<span class="property">next</span> = <span class="title function_">reverseList</span>(groupStart);</span><br><span class="line">        groupStart.<span class="property">next</span> = nextGroupStart;</span><br><span class="line">        prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getGroupEnd</span>(<span class="params">start, k</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">let</span> nextNode = curr.<span class="property">next</span>;</span><br><span class="line">            curr.<span class="property">next</span> = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 34.35% 使用 JavaScript 的用户</p><p>内存消耗 : 52.97 MB, 击败 10.36% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseKGroup</span>(<span class="params">head: ListNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">dummy</span>: <span class="title class_">ListNode</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">prevGroupEnd</span>: <span class="title class_">ListNode</span> = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">groupStart</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = prevGroupEnd.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">groupEnd</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = <span class="title function_">getGroupEnd</span>(groupStart, k);</span><br><span class="line">        <span class="keyword">if</span> (!groupEnd) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">nextGroupStart</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = groupEnd.<span class="property">next</span>;</span><br><span class="line">        groupEnd.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        prevGroupEnd.<span class="property">next</span> = <span class="title function_">reverseList</span>(groupStart);</span><br><span class="line">        groupStart.<span class="property">next</span> = nextGroupStart;</span><br><span class="line">        prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getGroupEnd</span>(<span class="params">start: ListNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">prev</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curr</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">nextNode</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = curr.<span class="property">next</span>;</span><br><span class="line">            curr.<span class="property">next</span> = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 79 ms, 击败 79.55% 使用 TypeScript 的用户</p><p>内存消耗 : 54.74 MB, 击败 10.46% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reverseKGroup</span>(<span class="params"><span class="variable">$head</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$prevGroupEnd</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable">$groupStart</span> = <span class="variable">$prevGroupEnd</span>-&gt;next;</span><br><span class="line">            <span class="variable">$groupEnd</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getGroupEnd</span>(<span class="variable">$groupStart</span>, <span class="variable">$k</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$groupEnd</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$nextGroupStart</span> = <span class="variable">$groupEnd</span>-&gt;next;</span><br><span class="line">            <span class="variable">$groupEnd</span>-&gt;next = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable">$prevGroupEnd</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverseList</span>(<span class="variable">$groupStart</span>);</span><br><span class="line">            <span class="variable">$groupStart</span>-&gt;next = <span class="variable">$nextGroupStart</span>;</span><br><span class="line">            <span class="variable">$prevGroupEnd</span> = <span class="variable">$groupStart</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroupEnd</span>(<span class="params"><span class="variable">$start</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$k</span> &amp;&amp; <span class="variable">$start</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$start</span> = <span class="variable">$start</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reverseList</span>(<span class="params"><span class="variable">$head</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$prev</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$curr</span> = <span class="variable">$head</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$curr</span>) &#123;</span><br><span class="line">            <span class="variable">$nextNode</span> = <span class="variable">$curr</span>-&gt;next;</span><br><span class="line">            <span class="variable">$curr</span>-&gt;next = <span class="variable">$prev</span>;</span><br><span class="line">            <span class="variable">$prev</span> = <span class="variable">$curr</span>;</span><br><span class="line">            <span class="variable">$curr</span> = <span class="variable">$nextNode</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$prev</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 13 ms, 击败 35.71% 使用 PHP 的用户</p><p>内存消耗 : 21.41 MB, 击败 7.14% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">reverseKGroup</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">k</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> prevGroupEnd: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> groupStart: <span class="type">ListNode</span>? <span class="operator">=</span> prevGroupEnd<span class="operator">?</span>.next</span><br><span class="line">            <span class="keyword">let</span> groupEnd: <span class="type">ListNode</span>? <span class="operator">=</span> getGroupEnd(groupStart, k)</span><br><span class="line">            <span class="keyword">if</span> groupEnd <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> nextGroupStart: <span class="type">ListNode</span>? <span class="operator">=</span> groupEnd<span class="operator">?</span>.next</span><br><span class="line">            groupEnd<span class="operator">?</span>.next <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            prevGroupEnd<span class="operator">?</span>.next <span class="operator">=</span> reverseList(groupStart)</span><br><span class="line">            groupStart<span class="operator">?</span>.next <span class="operator">=</span> nextGroupStart</span><br><span class="line">            prevGroupEnd <span class="operator">=</span> groupStart</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">getGroupEnd</span>(<span class="keyword">_</span> <span class="params">start</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">k</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> start</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>k <span class="keyword">where</span> start <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            start <span class="operator">=</span> start<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">reverseList</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">var</span> curr: <span class="type">ListNode</span>? <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">while</span> curr <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> nextNode: <span class="type">ListNode</span>? <span class="operator">=</span> curr<span class="operator">?</span>.next</span><br><span class="line">            curr<span class="operator">?</span>.next <span class="operator">=</span> prev</span><br><span class="line">            prev <span class="operator">=</span> curr</span><br><span class="line">            curr <span class="operator">=</span> nextNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 18.75% 使用 Swift 的用户</p><p>内存消耗 : 15.75 MB, 击败 6.25% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reverseKGroup</span><span class="params">(head: <span class="type">ListNode</span>?, k: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> prevGroupEnd: ListNode? = dummy</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> groupStart: ListNode? = prevGroupEnd?.next</span><br><span class="line">            <span class="keyword">val</span> groupEnd: ListNode? = getGroupEnd(groupStart, k)</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> nextGroupStart: ListNode? = groupEnd?.next</span><br><span class="line">            groupEnd?.next = <span class="literal">null</span></span><br><span class="line">            prevGroupEnd?.next = reverseList(groupStart)</span><br><span class="line">            groupStart?.next = nextGroupStart</span><br><span class="line">            prevGroupEnd = groupStart</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getGroupEnd</span><span class="params">(start: <span class="type">ListNode</span>?, k: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">var</span> start = start</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            start = start.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">reverseList</span><span class="params">(head: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: ListNode? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> curr: ListNode? = head</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> nextNode: ListNode? = curr?.next</span><br><span class="line">            curr?.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = nextNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 177 ms, 击败 87.88% 使用 Kotlin 的用户</p><p>内存消耗 : 36.66 MB, 击败 90.91% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? reverseKGroup(ListNode? head, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    ListNode dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode? prevGroupEnd = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      ListNode? groupStart = prevGroupEnd?.next;</span><br><span class="line">      ListNode? groupEnd = getGroupEnd(groupStart, k);</span><br><span class="line">      <span class="keyword">if</span> (groupEnd == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ListNode? nextGroupStart = groupEnd.next;</span><br><span class="line">      groupEnd.next = <span class="keyword">null</span>;</span><br><span class="line">      prevGroupEnd?.next = reverseList(groupStart);</span><br><span class="line">      groupStart?.next = nextGroupStart;</span><br><span class="line">      prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? getGroupEnd(ListNode? start, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="keyword">null</span>; ++i) &#123;</span><br><span class="line">      start = start.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? reverseList(ListNode? head) &#123;</span><br><span class="line">    ListNode? prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode? curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">      ListNode? nextNode = curr.next;</span><br><span class="line">      curr.next = prev;</span><br><span class="line">      prev = curr;</span><br><span class="line">      curr = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 287 ms, 击败 33.33% 使用 Dart 的用户</p><p>内存消耗 : 148.09 MB, 击败 66.67% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;<span class="number">0</span>, head&#125;</span><br><span class="line">    prevGroupEnd := dummy</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        groupStart := prevGroupEnd.Next</span><br><span class="line">        groupEnd := getGroupEnd(groupStart, k)</span><br><span class="line">        <span class="keyword">if</span> groupEnd == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        nextGroupStart := groupEnd.Next</span><br><span class="line">        groupEnd.Next = <span class="literal">nil</span></span><br><span class="line">        prevGroupEnd.Next = reverseList(groupStart)</span><br><span class="line">        groupStart.Next = nextGroupStart</span><br><span class="line">        prevGroupEnd = groupStart</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGroupEnd</span><span class="params">(start *ListNode, k <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">nil</span>; i++ &#123;</span><br><span class="line">        start = start.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">var</span> prev, curr *ListNode = <span class="literal">nil</span>, head</span><br><span class="line">    <span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line">        nextNode := curr.Next</span><br><span class="line">        curr.Next = prev</span><br><span class="line">        prev, curr = curr, nextNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 72.33% 使用 Go 的用户</p><p>内存消耗 : 3.39 MB, 击败 60.50% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; k</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_k_group</span>(<span class="params">head, k</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  prev_group_end = dummy</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    group_start = prev_group_end.<span class="keyword">next</span></span><br><span class="line">    group_end = get_group_end(group_start, k)</span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">unless</span> group_end</span><br><span class="line">    next_group_start = group_end.<span class="keyword">next</span></span><br><span class="line">    group_end.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    prev_group_end.<span class="keyword">next</span> = reverse_list(group_start)</span><br><span class="line">    group_start.<span class="keyword">next</span> = next_group_start</span><br><span class="line">    prev_group_end = group_start</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">start, k</span>)</span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; k &amp;&amp; start</span><br><span class="line">    start = start.<span class="keyword">next</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  start</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">head</span>)</span><br><span class="line">  prev = <span class="literal">nil</span></span><br><span class="line">  curr = head</span><br><span class="line">  <span class="keyword">while</span> curr</span><br><span class="line">    next_node = curr.<span class="keyword">next</span></span><br><span class="line">    curr.<span class="keyword">next</span> = prev</span><br><span class="line">    prev = curr</span><br><span class="line">    curr = next_node</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  prev</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.84 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span></span>(head: <span class="type">ListNode</span>, k: <span class="type">Int</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> current = head</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class="line">      current = current.next</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == k) &#123;</span><br><span class="line">      <span class="keyword">var</span> prev: <span class="type">ListNode</span> = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">var</span> nextGroupStart = current</span><br><span class="line">      current = head</span><br><span class="line">      <span class="keyword">for</span> (_ &lt;- <span class="number">0</span> until k) &#123;</span><br><span class="line">        <span class="keyword">val</span> nextNode = current.next</span><br><span class="line">        current.next = prev</span><br><span class="line">        prev = current</span><br><span class="line">        current = nextNode</span><br><span class="line">      &#125;</span><br><span class="line">      head.next = reverseKGroup(nextGroupStart, k)</span><br><span class="line">      prev</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 565 ms, 击败 20.00% 使用 Scala 的用户</p><p>内存消耗 : 57.17 MB, 击败 20.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>暂时未解决</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;K 个一组翻转链表、递归、链表、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00024.两两交换链表中的节点</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/34f10df720ca/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/34f10df720ca/</id>
    <published>2019-12-24T03:15:00.000Z</published>
    <updated>2019-12-24T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/34f10df720ca/201912240001.jpg" class="" title="示例1"><blockquote><p>输入：head &#x3D; [1,2,3,4]<br>输出：[2,1,4,3]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：head &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：head &#x3D; [1]<br>输出：[1]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>链表中节点的数目在范围 [0, 100] 内</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (current-&gt;next &amp;&amp; current-&gt;next-&gt;next) &#123;</span><br><span class="line">            ListNode* node1 = current-&gt;next;</span><br><span class="line">            ListNode* node2 = current-&gt;next-&gt;next;</span><br><span class="line">            current-&gt;next = node2;</span><br><span class="line">            node1-&gt;next = node2-&gt;next;</span><br><span class="line">            node2-&gt;next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 9.32 MB, 击败 5.03% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> current.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> current.next.next;</span><br><span class="line">            current.next = node2;</span><br><span class="line">            node1.next = node2.next;</span><br><span class="line">            node2.next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 40.38 MB, 击败 5.18% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span> <span class="keyword">and</span> current.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            node1 = current.<span class="built_in">next</span></span><br><span class="line">            node2 = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = node2</span><br><span class="line">            node1.<span class="built_in">next</span> = node2.<span class="built_in">next</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            current = node1</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 75.45% 使用 Python 的用户</p><p>内存消耗 : 11.44 MB, 击败 97.48% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span> <span class="keyword">and</span> current.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            node1 = current.<span class="built_in">next</span></span><br><span class="line">            node2 = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = node2</span><br><span class="line">            node1.<span class="built_in">next</span> = node2.<span class="built_in">next</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            current = node1</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 33 ms, 击败 90.27% 使用 Python3 的用户</p><p>内存消耗 : 16.45 MB, 击败 30.15% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">swapPairs</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">current</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (current-&gt;next &amp;&amp; current-&gt;next-&gt;next) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">node1</span> =</span> current-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">node2</span> =</span> current-&gt;next-&gt;next;</span><br><span class="line">        current-&gt;next = node2;</span><br><span class="line">        node1-&gt;next = node2-&gt;next;</span><br><span class="line">        node2-&gt;next = node1;</span><br><span class="line">        current = node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.71 MB, 击败 95.91% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">SwapPairs</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            ListNode node1 = current.next;</span><br><span class="line">            ListNode node2 = current.next.next;</span><br><span class="line">            current.next = node2;</span><br><span class="line">            node1.next = node2.next;</span><br><span class="line">            node2.next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 88.57% 使用 C# 的用户</p><p>内存消耗 : 39.66 MB, 击败 5.71% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (current.<span class="property">next</span> &amp;&amp; current.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> node2 = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        current.<span class="property">next</span> = node2;</span><br><span class="line">        node1.<span class="property">next</span> = node2.<span class="property">next</span>;</span><br><span class="line">        node2.<span class="property">next</span> = node1;</span><br><span class="line">        current = node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 37 ms, 击败 100.00% 使用 JavaScript 的用户</p><p>内存消耗 : 49.33 MB, 击败 5.29% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapPairs</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">dummy</span>: <span class="title class_">ListNode</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">while</span> (current?.<span class="property">next</span> &amp;&amp; current?.<span class="property">next</span>?.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">node1</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">node2</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1 &amp;&amp; node2) &#123;</span><br><span class="line">            current.<span class="property">next</span> = node2;</span><br><span class="line">            node1.<span class="property">next</span> = node2.<span class="property">next</span>;</span><br><span class="line">            node2.<span class="property">next</span> = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 86.10% 使用 TypeScript 的用户</p><p>内存消耗 : 51.79 MB, 击败 5.02% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapPairs</span>(<span class="params"><span class="variable">$head</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$current</span>-&gt;next &amp;&amp; <span class="variable">$current</span>-&gt;next-&gt;next) &#123;</span><br><span class="line">            <span class="variable">$node1</span> = <span class="variable">$current</span>-&gt;next;</span><br><span class="line">            <span class="variable">$node2</span> = <span class="variable">$current</span>-&gt;next-&gt;next;</span><br><span class="line">            <span class="variable">$current</span>-&gt;next = <span class="variable">$node2</span>;</span><br><span class="line">            <span class="variable">$node1</span>-&gt;next = <span class="variable">$node2</span>-&gt;next;</span><br><span class="line">            <span class="variable">$node2</span>-&gt;next = <span class="variable">$node1</span>;</span><br><span class="line">            <span class="variable">$current</span> = <span class="variable">$node1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 16.67% 使用 PHP 的用户</p><p>内存消耗 : 19.93 MB, 击败 5.55% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swapPairs</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> current: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">while</span> current<span class="operator">?</span>.next <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">&amp;&amp;</span> current<span class="operator">?</span>.next<span class="operator">?</span>.next <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> node1 <span class="operator">=</span> current<span class="operator">?</span>.next</span><br><span class="line">            <span class="keyword">let</span> node2 <span class="operator">=</span> current<span class="operator">?</span>.next<span class="operator">?</span>.next</span><br><span class="line">            current<span class="operator">?</span>.next <span class="operator">=</span> node2</span><br><span class="line">            node1<span class="operator">?</span>.next <span class="operator">=</span> node2<span class="operator">?</span>.next</span><br><span class="line">            node2<span class="operator">?</span>.next <span class="operator">=</span> node1</span><br><span class="line">            current <span class="operator">=</span> node1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 15.22 MB, 击败 20.67% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">swapPairs</span><span class="params">(head: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> current: ListNode? = dummy</span><br><span class="line">        <span class="keyword">while</span> (current?.next != <span class="literal">null</span> &amp;&amp; current.next?.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> node1 = current.next</span><br><span class="line">            <span class="keyword">val</span> node2 = current.next?.next</span><br><span class="line">            current.next = node2</span><br><span class="line">            node1?.next = node2?.next</span><br><span class="line">            node2?.next = node1</span><br><span class="line">            current = node1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 138 ms, 击败 81.08% 使用 Kotlin 的用户</p><p>内存消耗 : 33.44 MB, 击败 32.43% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? swapPairs(ListNode? head) &#123;</span><br><span class="line">    ListNode? tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line">      tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode? pre;</span><br><span class="line">    ListNode? cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != tail) &#123;</span><br><span class="line">      ListNode? temp = cur?.next;</span><br><span class="line">      cur?.next = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    head?.next = swapPairs(tail);</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 302 ms, 击败 22.22% 使用 Dart 的用户</p><p>内存消耗 : 147.56 MB, 击败 55.56% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">dummy := &amp;ListNode&#123;Val: <span class="number">0</span>, Next: head&#125;</span><br><span class="line">current := dummy</span><br><span class="line"><span class="keyword">for</span> current.Next != <span class="literal">nil</span> &amp;&amp; current.Next.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">node1 := current.Next</span><br><span class="line">node2 := current.Next.Next</span><br><span class="line">current.Next = node2</span><br><span class="line">node1.Next = node2.Next</span><br><span class="line">node2.Next = node1</span><br><span class="line">current = node1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 1.97 MB, 击败 26.06% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_pairs</span>(<span class="params">head</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  current = dummy</span><br><span class="line">  <span class="keyword">while</span> current.<span class="keyword">next</span> &amp;&amp; current.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">    node1 = current.<span class="keyword">next</span></span><br><span class="line">    node2 = current.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">    current.<span class="keyword">next</span> = node2</span><br><span class="line">    node1.<span class="keyword">next</span> = node2.<span class="keyword">next</span></span><br><span class="line">    node2.<span class="keyword">next</span> = node1</span><br><span class="line">    current = node1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.64 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span></span>(head: <span class="type">ListNode</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> t1 = head.next</span><br><span class="line">    <span class="keyword">val</span> t2 = head.next.next</span><br><span class="line">    t1.next = head</span><br><span class="line">    head.next = swapPairs(t2)</span><br><span class="line">    t1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 460 ms, 击败 85.71% 使用 Scala 的用户</p><p>内存消耗 : 56.41 MB, 击败 14.29% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">swap_pairs</span>(head: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">mut</span> node) = head &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">mut</span> next) = node.next.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">                node.next = <span class="keyword">Self</span>::<span class="title function_ invoke__">swap_pairs</span>(next.next.<span class="title function_ invoke__">take</span>());</span><br><span class="line">                next.next = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(next)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.15 MB, 击败 21.54% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; Definition for singly-linked list:</span></span><br><span class="line"><span class="comment">#|</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; val : integer?</span></span><br><span class="line"><span class="comment">; next : (or/c list-node? #f)</span></span><br><span class="line"><span class="comment">(struct list-node</span></span><br><span class="line"><span class="comment">  (val next) #:mutable #:transparent)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; constructor</span></span><br><span class="line"><span class="comment">(define (make-list-node [val 0])</span></span><br><span class="line"><span class="comment">  (list-node val #f))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|#</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">swap-pairs</span> head)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">    ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">not</span></span> head) (<span class="name"><span class="built_in">not</span></span> (<span class="name">list-node?</span> head)) (<span class="name"><span class="built_in">not</span></span> (<span class="name">list-node?</span> (<span class="name">list-node-next</span> head))))</span><br><span class="line">     head)</span><br><span class="line">    (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">     (<span class="name"><span class="built_in">let</span></span> ((<span class="name">node1</span> head)</span><br><span class="line">           (<span class="name">node2</span> (<span class="name">list-node-next</span> head))</span><br><span class="line">           (<span class="name">rest</span> (<span class="name">list-node-next</span> (<span class="name">list-node-next</span> head))))</span><br><span class="line">       (<span class="name">set-list-node-next!</span> node1 (<span class="name">swap-pairs</span> rest))</span><br><span class="line">       (<span class="name">set-list-node-next!</span> node2 node1)</span><br><span class="line">       node2))))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 175 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 98.80 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%% -record(list_node, &#123;val = 0 :: integer(),</span></span><br><span class="line"><span class="comment">%%                     next = null :: &#x27;null&#x27; | #list_node&#123;&#125;&#125;).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">-spec</span> swap_pairs<span class="params">(Head :: #list_node&#123;&#125; | null)</span> -&gt; #list_node&#123;&#125; | null.</span><br><span class="line"><span class="function"><span class="title">swap_pairs</span><span class="params">(Head)</span> <span class="title">when</span> H<span class="title">ead</span> =:= <span class="title">null</span> -&gt;</span> null;</span><br><span class="line"><span class="function"><span class="title">swap_pairs</span><span class="params">(Head)</span> <span class="title">when</span> <span class="title">is_record</span><span class="params">(Head, list_node)</span> -&gt;</span> </span><br><span class="line">    <span class="keyword">case</span> Head#list_node.next <span class="keyword">of</span></span><br><span class="line">        null -&gt; Head;</span><br><span class="line">        Next -&gt; </span><br><span class="line">            NewNext = swap_pairs(Next#list_node.next),</span><br><span class="line">            NewHead = Head#list_node&#123;next = NewNext&#125;,</span><br><span class="line">            Next#list_node&#123;next = NewHead&#125;</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 222 ms, 击败 -% 使用 Erlang 的用户</p><p>内存消耗 : 59.48 MB, 击败 -% 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;两两交换链表中的节点、递归、链表、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00023.合并 K 个升序链表</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/d5c97aacd860/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/d5c97aacd860/</id>
    <published>2019-12-23T03:15:00.000Z</published>
    <updated>2019-12-23T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：lists &#x3D; [[1,4,5],[1,3,4],[2,6]]<br>输出：[1,1,2,3,4,4,5,6]<br>解释：链表数组如下：<br>[<br> 1-&gt;4-&gt;5,<br> 1-&gt;3-&gt;4,<br> 2-&gt;6<br>]<br>将它们合并到一个有序链表中得到。<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：lists &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：lists &#x3D; [[]]<br>输出：[]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$k &#x3D;&#x3D; lists.length$</li><li>$0 &lt;&#x3D; k &lt;&#x3D; 10^4$</li><li>$0 &lt;&#x3D; lists[i].length &lt;&#x3D; 500$</li><li>$-10^4 &lt;&#x3D; lists[i][j] &lt;&#x3D; 10^4$</li><li>$lists[i] 按 升序 排列$</li><li>$lists[i].length 的总和不超过 10^4$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(std::vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeLists</span><span class="params">(std::vector&lt;ListNode*&gt;&amp; lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        ListNode* l1 = <span class="built_in">mergeLists</span>(lists, left, mid);</span><br><span class="line">        ListNode* l2 = <span class="built_in">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            l1-&gt;next = <span class="built_in">mergeTwoLists</span>(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2-&gt;next = <span class="built_in">mergeTwoLists</span>(l1, l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 89.11% 使用 C++ 的用户</p><p>内存消耗 : 16.66 MB, 击败 14.97% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">mergeLists</span><span class="params">(ListNode[] lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> mergeLists(lists, left, mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> mergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 79.3% 使用 Java 的用户</p><p>内存消耗 : 43.41 MB, 击败 14.48% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.merge_lists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">self, lists, left, right</span>):</span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        l1 = self.merge_lists(lists, left, mid)</span><br><span class="line">        l2 = self.merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> self.merge_two_lists(l1, l2)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            l1.<span class="built_in">next</span> = self.merge_two_lists(l1.<span class="built_in">next</span>, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.<span class="built_in">next</span> = self.merge_two_lists(l1, l2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 98 ms, 击败 35.65% 使用 Python 的用户</p><p>内存消耗 : 23.25 MB, 击败 12.82% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.merge_lists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        l1 = self.merge_lists(lists, left, mid)</span><br><span class="line">        l2 = self.merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> self.merge_two_lists(l1, l2)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            l1.<span class="built_in">next</span> = self.merge_two_lists(l1.<span class="built_in">next</span>, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.<span class="built_in">next</span> = self.merge_two_lists(l1, l2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 76.55% 使用 Python3 的用户</p><p>内存消耗 : 20.19 MB, 击败 17.06% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">        l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeKLists</span><span class="params">(<span class="keyword">struct</span> ListNode** lists, <span class="type">int</span> listsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (listsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (listsSize == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = listsSize / <span class="number">2</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">l1</span> =</span> mergeKLists(lists, mid);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">l2</span> =</span> mergeKLists(lists + mid, listsSize - mid);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 97.55% 使用 C 的用户</p><p>内存消耗 : 8.04 MB, 击败 98.02% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeKLists</span>(<span class="params">ListNode[] lists</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MergeLists(lists, <span class="number">0</span>, lists.Length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">MergeLists</span>(<span class="params">ListNode[] lists, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        ListNode l1 = MergeLists(lists, left, mid);</span><br><span class="line">        ListNode l2 = MergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> MergeTwoLists(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode l1, ListNode l2</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = MergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = MergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 73 ms, 击败 98.76% 使用 C# 的用户</p><p>内存消耗 : 46.32 MB, 击败 7.46% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode[]</span>&#125; <span class="variable">lists</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeKLists = <span class="keyword">function</span>(<span class="params">lists</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lists || lists.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mergeLists = <span class="keyword">function</span>(<span class="params">lists, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> l1 = <span class="title function_">mergeLists</span>(lists, left, mid);</span><br><span class="line">    <span class="keyword">var</span> l2 = <span class="title function_">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeTwoLists</span>(l1, l2);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>) &#123;</span><br><span class="line">        l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 77 ms, 击败 92.51% 使用 JavaScript 的用户</p><p>内存消耗 : 55.14 MB, 击败 11.95% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeKLists</span>(<span class="params">lists: <span class="built_in">Array</span>&lt;ListNode | <span class="literal">null</span>&gt;</span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lists || lists.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeLists</span>(<span class="params">lists: <span class="built_in">Array</span>&lt;ListNode | <span class="literal">null</span>&gt;, left: <span class="built_in">number</span>, right: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> l1 = <span class="title function_">mergeLists</span>(lists, left, mid);</span><br><span class="line">    <span class="keyword">const</span> l2 = <span class="title function_">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeTwoLists</span>(l1, l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">l1: ListNode | <span class="literal">null</span>, l2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>) &#123;</span><br><span class="line">        l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 95.94% 使用 TypeScript 的用户</p><p>内存消耗 : 56.80 MB, 击败 10.66% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode[] $lists</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeKLists</span>(<span class="params"><span class="variable">$lists</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$lists</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$lists</span>) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeLists</span>(<span class="params"><span class="variable">$lists</span>, <span class="variable">$left</span>, <span class="variable">$right</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$left</span> == <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$lists</span>[<span class="variable">$left</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>(<span class="variable">$right</span> - <span class="variable">$left</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$l1</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="variable">$left</span>, <span class="variable">$mid</span>);</span><br><span class="line">        <span class="variable">$l2</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="variable">$mid</span> + <span class="number">1</span>, <span class="variable">$right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>, <span class="variable">$l2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeTwoLists</span>(<span class="params"><span class="variable">$l1</span>, <span class="variable">$l2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$l1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$l2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$l1</span>-&gt;val &lt; <span class="variable">$l2</span>-&gt;val) &#123;</span><br><span class="line">            <span class="variable">$l1</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>-&gt;next, <span class="variable">$l2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$l2</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>, <span class="variable">$l2</span>-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 100.00% 使用 PHP 的用户</p><p>内存消耗 : 26.56 MB, 击败 27.27% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mergeKLists</span>(<span class="keyword">_</span> <span class="params">lists</span>: [<span class="type">ListNode</span>?]) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> lists.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">mergeLists</span>(<span class="keyword">_</span> <span class="params">lists</span>: [<span class="type">ListNode</span>?], <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> left <span class="operator">==</span> right &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> l1 <span class="operator">=</span> mergeLists(lists, left, mid)</span><br><span class="line">        <span class="keyword">let</span> l2 <span class="operator">=</span> mergeLists(lists, mid <span class="operator">+</span> <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">mergeTwoLists</span>(<span class="keyword">_</span> <span class="params">l1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">l2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l1 <span class="operator">=</span> l1 <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l2 <span class="operator">=</span> l2 <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l1.val <span class="operator">&lt;</span> l2.val &#123;</span><br><span class="line">            l1.next <span class="operator">=</span> mergeTwoLists(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next <span class="operator">=</span> mergeTwoLists(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 77.22% 使用 Swift 的用户</p><p>内存消耗 : 16.79 MB, 击败 5.06% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mergeKLists</span><span class="params">(lists: <span class="type">Array</span>&lt;<span class="type">ListNode</span>?&gt;)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.size - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">mergeLists</span><span class="params">(lists: <span class="type">Array</span>&lt;<span class="type">ListNode</span>?&gt;, left: <span class="type">Int</span>, right: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> l1 = mergeLists(lists, left, mid)</span><br><span class="line">        <span class="keyword">val</span> l2 = mergeLists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">mergeTwoLists</span><span class="params">(l1: <span class="type">ListNode</span>?, l2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (l1.`<span class="keyword">val</span>` &lt; l2.`<span class="keyword">val</span>`) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2)</span><br><span class="line">            l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next)</span><br><span class="line">            l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 191 ms, 击败 98.00% 使用 Kotlin 的用户</p><p>内存消耗 : 37.37 MB, 击败 98.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? mergeKLists(<span class="built_in">List</span>&lt;ListNode?&gt; lists) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? mergeLists(<span class="built_in">List</span>&lt;ListNode?&gt; lists, <span class="built_in">int</span> left, <span class="built_in">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">      <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">    ListNode? l1 = mergeLists(lists, left, mid);</span><br><span class="line">    ListNode? l2 = mergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? mergeTwoLists(ListNode? l1, ListNode? l2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">      l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">      <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">      <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 341 ms, 击败 71.43% 使用 Dart 的用户</p><p>内存消耗 : 149.57 MB, 击败 57.14% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeLists</span><span class="params">(lists []*ListNode, left <span class="type">int</span>, right <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> left == right &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left]</span><br><span class="line">    &#125;</span><br><span class="line">    mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">    l1 := mergeLists(lists, left, mid)</span><br><span class="line">    l2 := mergeLists(lists, mid+<span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l1.Val &lt; l2.Val &#123;</span><br><span class="line">        l1.Next = mergeTwoLists(l1.Next, l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.Next = mergeTwoLists(l1, l2.Next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 70.42% 使用 Go 的用户</p><p>内存消耗 : 5.17 MB, 击败 22.50% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode[]&#125; lists</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_k_lists</span>(<span class="params">lists</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> lists.<span class="literal">nil</span>? |<span class="params"></span>| lists.empty?</span><br><span class="line">  merge_lists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">lists, left, right</span>)</span><br><span class="line">  <span class="keyword">return</span> lists[left] <span class="keyword">if</span> left == right</span><br><span class="line">  mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">  l1 = merge_lists(lists, left, mid)</span><br><span class="line">  l2 = merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">  merge_two_lists(l1, l2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">l1, l2</span>)</span><br><span class="line">  <span class="keyword">return</span> l2 <span class="keyword">if</span> l1.<span class="literal">nil</span>?</span><br><span class="line">  <span class="keyword">return</span> l1 <span class="keyword">if</span> l2.<span class="literal">nil</span>?</span><br><span class="line">  <span class="keyword">if</span> l1.val &lt; l2.val</span><br><span class="line">    l1.<span class="keyword">next</span> = merge_two_lists(l1.<span class="keyword">next</span>, l2)</span><br><span class="line">    l1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    l2.<span class="keyword">next</span> = merge_two_lists(l1, l2.<span class="keyword">next</span>)</span><br><span class="line">    l2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 208.77 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span></span>(lists: <span class="type">Array</span>[precompiled.<span class="type">ListNode</span>]): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeLists</span></span>(lists: <span class="type">Array</span>[precompiled.<span class="type">ListNode</span>], left: <span class="type">Int</span>, right: <span class="type">Int</span>): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">      <span class="keyword">return</span> lists(left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> l1 = mergeLists(lists, left, mid)</span><br><span class="line">    <span class="keyword">val</span> l2 = mergeLists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">    mergeTwoLists(l1, l2)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span></span>(l1: precompiled.<span class="type">ListNode</span>, l2: precompiled.<span class="type">ListNode</span>): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.x &lt; l2.x) &#123; <span class="comment">// assuming x is the field for value</span></span><br><span class="line">      l1.next = mergeTwoLists(l1.next, l2)</span><br><span class="line">      l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      l2.next = mergeTwoLists(l1, l2.next)</span><br><span class="line">      l2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 594 ms, 击败 75.00% 使用 Scala 的用户</p><p>内存消耗 : 58.96 MB, 击败 37.50% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>暂时未解决</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;合并 K 个升序链表、链表、分治、堆（优先队列）、归并排序、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00022.括号生成</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/154e5d511e4c/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/154e5d511e4c/</id>
    <published>2019-12-20T03:15:00.000Z</published>
    <updated>2019-12-20T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：n &#x3D; 3<br>输出：[“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：n &#x3D; 1<br>输出：[“()”]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 8</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;std::string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        <span class="built_in">generate</span>(<span class="string">&quot;&quot;</span>, n, n, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generate</span><span class="params">(string current, <span class="type">int</span> left, <span class="type">int</span> right, vector&lt;string&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">            <span class="built_in">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 70.78% 使用 C++ 的用户</p><p>内存消耗 : 15.12 MB, 击败 31.77% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(String current, <span class="type">int</span> left, <span class="type">int</span> right, List&lt;String&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">            generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 71.45% 使用 Java 的用户</p><p>内存消耗 : 42.19 MB, 击败 31.97% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">current, left, right, result</span>):</span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">and</span> right == <span class="number">0</span>:</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; <span class="number">0</span>:</span><br><span class="line">                generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result)</span><br><span class="line">            <span class="keyword">if</span> right &gt; left:</span><br><span class="line">                generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result)</span><br><span class="line">        result = []</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 61.89% 使用 Python 的用户</p><p>内存消耗 : 13.23 MB, 击败 66.19% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">current, left, right, result</span>):</span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">and</span> right == <span class="number">0</span>:</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; <span class="number">0</span>:</span><br><span class="line">                generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result)</span><br><span class="line">            <span class="keyword">if</span> right &gt; left:</span><br><span class="line">                generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result)</span><br><span class="line">        result = []</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 99.93% 使用 Python3 的用户</p><p>内存消耗 : 17.18 MB, 击败 13.63% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">backTarck</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> *returnSize, <span class="type">char</span> **returnStr, <span class="type">int</span> leftNum, <span class="type">int</span> rightNum, <span class="type">char</span> *<span class="built_in">stack</span>, <span class="type">int</span> top)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((rightNum + leftNum) &gt;= <span class="number">2</span> * n) &#123; </span><br><span class="line">        <span class="comment">// 当前长度已达2n</span></span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        returnStr[*returnSize] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (top + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(returnStr[*returnSize], <span class="built_in">stack</span>);</span><br><span class="line">        (*returnSize)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftNum &lt; n) &#123;</span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        backTarck(n, returnSize, returnStr, leftNum + <span class="number">1</span>, rightNum, <span class="built_in">stack</span>, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rightNum &lt; leftNum) &#123;</span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        backTarck(n, returnSize, returnStr, leftNum, rightNum + <span class="number">1</span>, <span class="built_in">stack</span>, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>** <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> *returnSize)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **returnStr = (<span class="type">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span> *) * <span class="number">2000</span>);</span><br><span class="line">    <span class="type">char</span> *<span class="built_in">stack</span> = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    backTarck(n, returnSize, returnStr, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">stack</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> returnStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 7.05 MB, 击败 72.42% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">GenerateParenthesis</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Generate(result, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Generate</span>(<span class="params">IList&lt;<span class="built_in">string</span>&gt; result, <span class="built_in">string</span> current, <span class="built_in">int</span> left, <span class="built_in">int</span> right, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.Length == <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.Add(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            Generate(result, current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            Generate(result, current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 98.27% 使用 C# 的用户</p><p>内存消耗 : 48.10 MB, 击败 12.14% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">current, left, right</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">length</span> === <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">generate</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 33.89% 使用 JavaScript 的用户</p><p>内存消耗 : 49.30 MB, 击败 9.30% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateParenthesis</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">current: <span class="built_in">string</span>, left: <span class="built_in">number</span>, right: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">length</span> === <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">generate</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 13.04% 使用 TypeScript 的用户</p><p>内存消耗 : 50.48 MB, 击败 9.88% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateParenthesis</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$current</span>, <span class="variable">$left</span>, <span class="variable">$right</span>, <span class="variable">$n</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$current</span>) === <span class="number">2</span> * <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$result</span>, <span class="variable">$current</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$left</span> &lt; <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$current</span> . <span class="string">&#x27;(&#x27;</span>, <span class="variable">$left</span> + <span class="number">1</span>, <span class="variable">$right</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$right</span> &lt; <span class="variable">$left</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$current</span> . <span class="string">&#x27;)&#x27;</span>, <span class="variable">$left</span>, <span class="variable">$right</span> + <span class="number">1</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 25.00% 使用 PHP 的用户</p><p>内存消耗 : 19.68 MB, 击败 18.75% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">generateParenthesis</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line">        backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">current</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">result</span>: <span class="keyword">inout</span> [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> current.count <span class="operator">==</span> <span class="number">2</span> <span class="operator">*</span> n &#123;</span><br><span class="line">            result.append(current)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left <span class="operator">&lt;</span> n &#123;</span><br><span class="line">            backtrack(current <span class="operator">+</span> <span class="string">&quot;(&quot;</span>, left <span class="operator">+</span> <span class="number">1</span>, right, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right <span class="operator">&lt;</span> left &#123;</span><br><span class="line">            backtrack(current <span class="operator">+</span> <span class="string">&quot;)&quot;</span>, left, right <span class="operator">+</span> <span class="number">1</span>, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 8.82% 使用 Swift 的用户</p><p>内存消耗 : 15.61 MB, 击败 7.84% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">generateParenthesis</span><span class="params">(n: <span class="type">Int</span>)</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result: MutableList&lt;String&gt; = mutableListOf()</span><br><span class="line">        backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(current: <span class="type">String</span>, left: <span class="type">Int</span>, right: <span class="type">Int</span>, n: <span class="type">Int</span>, result: <span class="type">MutableList</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.add(current)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            backtrack(<span class="string">&quot;<span class="variable">$current</span>(&quot;</span>, left + <span class="number">1</span>, right, n, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            backtrack(<span class="string">&quot;<span class="variable">$current</span>)&quot;</span>, left, right + <span class="number">1</span>, n, result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 204 ms, 击败 15.38% 使用 Kotlin 的用户</p><p>内存消耗 : 36.29 MB, 击败 75.38% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; generateParenthesis(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; result = [];</span><br><span class="line">    _backtrack(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _backtrack(<span class="built_in">String</span> current, <span class="built_in">int</span> left, <span class="built_in">int</span> right, <span class="built_in">int</span> n, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; result) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">      result.add(current);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">      _backtrack(<span class="string">&#x27;<span class="subst">$current</span>(&#x27;</span>, left + <span class="number">1</span>, right, n, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">      _backtrack(<span class="string">&#x27;<span class="subst">$current</span>)&#x27;</span>, left, right + <span class="number">1</span>, n, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 288 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 147.64 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="type">int</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result []<span class="type">string</span></span><br><span class="line">backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, &amp;result)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(current <span class="type">string</span>, left <span class="type">int</span>, right <span class="type">int</span>, n <span class="type">int</span>, result *[]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(current) == <span class="number">2</span>*n &#123;</span><br><span class="line">*result = <span class="built_in">append</span>(*result, current)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> left &lt; n &#123;</span><br><span class="line">backtrack(current+<span class="string">&quot;(&quot;</span>, left+<span class="number">1</span>, right, n, result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> right &lt; left &#123;</span><br><span class="line">backtrack(current+<span class="string">&quot;)&quot;</span>, left, right+<span class="number">1</span>, n, result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.61 MB, 击败 62.59% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_parenthesis</span>(<span class="params">n</span>)</span><br><span class="line">  result = []</span><br><span class="line">  backtrack(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result)</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">current, left, right, n, result</span>)</span><br><span class="line">  <span class="keyword">if</span> current.length == <span class="number">2</span> * n</span><br><span class="line">    result &lt;&lt; current</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> left &lt; n</span><br><span class="line">    backtrack(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right, n, result)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> right &lt; left</span><br><span class="line">    backtrack(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>, n, result)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.92 MB, 击败 12.50% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span></span>(n: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(current: <span class="type">String</span>, left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">        result = current :: result</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">        backtrack(current + <span class="string">&quot;(&quot;</span>, left + <span class="number">1</span>, right)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">        backtrack(current + <span class="string">&quot;)&quot;</span>, left, right + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 452 ms, 击败 -% 使用 Scala 的用户</p><p>内存消耗 : 52.77 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">generate_parenthesis</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(<span class="type">String</span>::<span class="title function_ invoke__">new</span>(), <span class="number">0</span>, <span class="number">0</span>, n, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">backtrack</span>(current: <span class="type">String</span>, left: <span class="type">i32</span>, right: <span class="type">i32</span>, n: <span class="type">i32</span>, result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">if</span> current.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> == <span class="number">2</span> * n &#123;</span><br><span class="line">            result.<span class="title function_ invoke__">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left &lt; n &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_current</span> = current.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">            new_current.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(new_current, left + <span class="number">1</span>, right, n, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right &lt; left &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_current</span> = current.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">            new_current.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(new_current, left, right + <span class="number">1</span>, n, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.31 MB, 击败 18.09% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;括号生成、字符串、动态规划、回溯、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00021.合并两个有序链表</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/81e995f7d3f7/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/81e995f7d3f7/</id>
    <published>2019-12-19T03:15:00.000Z</published>
    <updated>2019-12-19T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/81e995f7d3f7/201912190001.jpg" class="" title="示例1"><blockquote><p>输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>两个链表的节点数目范围是 [0, 50]</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li><li>l1 和 l2 均按 非递减顺序 排列</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">                current-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;next = list1 ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 55.64% 使用 C++ 的用户</p><p>内存消耗 : 14.73 MB, 击败 77.93% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                current.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 41.36 MB, 击败 9.94% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1, list2</span>):</span><br><span class="line">        dummy = ListNode(-<span class="number">1</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                current.<span class="built_in">next</span> = list1</span><br><span class="line">                list1 = list1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.<span class="built_in">next</span> = list2</span><br><span class="line">                list2 = list2.<span class="built_in">next</span></span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = list1 <span class="keyword">if</span> list1 <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 94.38% 使用 Python 的用户</p><p>内存消耗 : 12.98 MB, 击败 77.98% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list1:</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list2:</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">            list1.<span class="built_in">next</span> = self.mergeTwoLists(list1.<span class="built_in">next</span>, list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list2.<span class="built_in">next</span> = self.mergeTwoLists(list1, list2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 47.07% 使用 Python3 的用户</p><p>内存消耗 : 16.86 MB, 击败 15.63% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode* list1, <span class="keyword">struct</span> ListNode* list2)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> <span class="title">dummy</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">current</span> =</span> &amp;dummy;</span><br><span class="line">    dummy.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">            current-&gt;next = list1;</span><br><span class="line">            list1 = list1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;next = list2;</span><br><span class="line">            list2 = list2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;next = (list1 != <span class="literal">NULL</span>) ? list1 : list2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 70.71% 使用 C 的用户</p><p>内存消耗 : 6.79 MB, 击败 33.43% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode list1, ListNode list2</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                current.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 87.27% 使用 C# 的用户</p><p>内存消耗 : 40.66 MB, 击败 15.22% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">list1, list2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (list1 !== <span class="literal">null</span> &amp;&amp; list2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1.<span class="property">val</span> &lt;= list2.<span class="property">val</span>) &#123;</span><br><span class="line">            current.<span class="property">next</span> = list1;</span><br><span class="line">            list1 = list1.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.<span class="property">next</span> = list2;</span><br><span class="line">            list2 = list2.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current.<span class="property">next</span> = list1 !== <span class="literal">null</span> ? list1 : list2;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 16.68% 使用 JavaScript 的用户</p><p>内存消耗 : 49.72 MB, 击败 13.06% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">list1: ListNode | <span class="literal">null</span>, list2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.<span class="property">val</span> &lt;= list2.<span class="property">val</span>) &#123;</span><br><span class="line">        list1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1.<span class="property">next</span>, list2);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1, list2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 28.31% 使用 TypeScript 的用户</p><p>内存消耗 : 50.95 MB, 击败 8.20% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeTwoLists</span>(<span class="params"><span class="variable">$list1</span>, <span class="variable">$list2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$list1</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable">$list2</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$list1</span>-&gt;val &lt;= <span class="variable">$list2</span>-&gt;val) &#123;</span><br><span class="line">                <span class="variable">$current</span>-&gt;next = <span class="variable">$list1</span>;</span><br><span class="line">                <span class="variable">$list1</span> = <span class="variable">$list1</span>-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$current</span>-&gt;next = <span class="variable">$list2</span>;</span><br><span class="line">                <span class="variable">$list2</span> = <span class="variable">$list2</span>-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$current</span> = <span class="variable">$current</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$current</span>-&gt;next = (<span class="variable">$list1</span> !== <span class="literal">null</span>) ? <span class="variable">$list1</span> : <span class="variable">$list2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 73.13% 使用 PHP 的用户</p><p>内存消耗 : 19.55 MB, 击败 5.97% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mergeTwoLists</span>(<span class="keyword">_</span> <span class="params">list1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">list2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l1 <span class="operator">=</span> list1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> list2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l2 <span class="operator">=</span> list2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> list1 &#125;</span><br><span class="line">        <span class="keyword">if</span> l1.val <span class="operator">&lt;</span> l2.val &#123;</span><br><span class="line">            l1.next <span class="operator">=</span> mergeTwoLists(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next <span class="operator">=</span> mergeTwoLists(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 14.80% 使用 Swift 的用户</p><p>内存消耗 : 15.41 MB, 击败 5.06% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mergeTwoLists</span><span class="params">(list1: <span class="type">ListNode</span>?, list2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1.`<span class="keyword">val</span>` &lt;= list2.`<span class="keyword">val</span>`) &#123;</span><br><span class="line">            list1.next = mergeTwoLists(list1.next, list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list2.next = mergeTwoLists(list1, list2.next)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 200 ms, 击败 6.76% 使用 Kotlin 的用户</p><p>内存消耗 : 34.70 MB, 击败 52.03% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? mergeTwoLists(ListNode? l1, ListNode? l2) &#123;</span><br><span class="line">    ListNode dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode? current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">        current!.next = l1;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current!.next = l2;</span><br><span class="line">        l2 = l2.next;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current!.next = l1 ?? l2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 372 ms, 击败 6.67% 使用 Dart 的用户</p><p>内存消耗 : 147.40 MB, 击败 93.33% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">current := dummy</span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> list1.Val &lt;= list2.Val &#123;</span><br><span class="line">current.Next = list1</span><br><span class="line">list1 = list1.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current.Next = list2</span><br><span class="line">list2 = list2.Next</span><br><span class="line">&#125;</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">current.Next = list1</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current.Next = list2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 36.50% 使用 Go 的用户</p><p>内存消耗 : 2.35 MB, 击败 60.06% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; list1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; list2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">list1, list2</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(-<span class="number">1</span>)</span><br><span class="line">  current = dummy</span><br><span class="line">  <span class="keyword">while</span> list1 &amp;&amp; list2</span><br><span class="line">    <span class="keyword">if</span> list1.val &lt;= list2.val</span><br><span class="line">      current.<span class="keyword">next</span> = list1</span><br><span class="line">      list1 = list1.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      current.<span class="keyword">next</span> = list2</span><br><span class="line">      list2 = list2.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    current = current.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  current.<span class="keyword">next</span> = list1 |<span class="params"></span>| list2</span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.81 MB, 击败 22.22% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span></span>(list1: <span class="type">ListNode</span>, list2: <span class="type">ListNode</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.x &lt;= list2.x) &#123;</span><br><span class="line">      list1.next = mergeTwoLists(list1.next, list2)</span><br><span class="line">      <span class="keyword">return</span> list1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list2.next = mergeTwoLists(list1, list2.next)</span><br><span class="line">      <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 488 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 56.16 MB, 击败 94.12% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">merge_two_lists</span>(<span class="keyword">mut</span> list1: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, <span class="keyword">mut</span> list2: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dummy</span> = <span class="title function_ invoke__">Some</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode &#123; val: <span class="number">0</span>, next: <span class="literal">None</span> &#125;));</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = &amp;<span class="keyword">mut</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> (<span class="title function_ invoke__">Some</span>(node1), <span class="title function_ invoke__">Some</span>(node2)) = (list1.<span class="title function_ invoke__">as_deref_mut</span>(), list2.<span class="title function_ invoke__">as_deref_mut</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> node1.val &lt;= node2.val &#123;</span><br><span class="line">                current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list1.<span class="title function_ invoke__">take</span>();</span><br><span class="line">                list1 = current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">as_deref_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">take</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list2.<span class="title function_ invoke__">take</span>();</span><br><span class="line">                list2 = current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">as_deref_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">take</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            current = &amp;<span class="keyword">mut</span> current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list1.<span class="title function_ invoke__">or</span>(list2);</span><br><span class="line">        dummy.<span class="title function_ invoke__">unwrap</span>().next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.04 MB, 击败 56.83% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%% -record(list_node, &#123;val = 0 :: integer(),</span></span><br><span class="line"><span class="comment">%%                     next = null :: &#x27;null&#x27; | #list_node&#123;&#125;&#125;).</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">merge_two_lists</span><span class="params">(List1, List2)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> &#123;List1, List2&#125; <span class="keyword">of</span></span><br><span class="line">        &#123;null, List2&#125; -&gt; List2;</span><br><span class="line">        &#123;List1, null&#125; -&gt; List1;</span><br><span class="line">        &#123;Node1 = #list_node&#123;val = Val1, next = Next1&#125;, Node2 = #list_node&#123;val = Val2, next = Next2&#125;&#125; -&gt;</span><br><span class="line">            <span class="keyword">if</span> Val1 =&lt; Val2 -&gt;</span><br><span class="line">                Node1#list_node&#123;next = merge_two_lists(Next1, Node2)&#125;;</span><br><span class="line">            <span class="literal">true</span> -&gt;</span><br><span class="line">                Node2#list_node&#123;next = merge_two_lists(Node1, Next2)&#125;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 268 ms, 击败 -% 使用 Erlang 的用户</p><p>内存消耗 : 59.08 MB, 击败 -% 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># defmodule ListNode do</span></span><br><span class="line"><span class="comment">#   @type t :: %__MODULE__&#123;</span></span><br><span class="line"><span class="comment">#           val: integer,</span></span><br><span class="line"><span class="comment">#           next: ListNode.t() | nil</span></span><br><span class="line"><span class="comment">#         &#125;</span></span><br><span class="line"><span class="comment">#   defstruct val: 0, next: nil</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> merge_two_lists(list1 :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span>, list2 :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span>) :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(<span class="literal">nil</span>, list2), <span class="symbol">do:</span> list2</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(list1, <span class="literal">nil</span>), <span class="symbol">do:</span> list1</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(%<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val1, <span class="symbol">next:</span> next1&#125; = list1, %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val2, <span class="symbol">next:</span> next2&#125; = list2) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> val1 &lt;= val2 <span class="keyword">do</span></span><br><span class="line">      %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val1, <span class="symbol">next:</span> merge_two_lists(next1, list2)&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val2, <span class="symbol">next:</span> merge_two_lists(list1, next2)&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 344 ms, 击败 -% 使用 Elixir 的用户</p><p>内存消耗 : 67.86 MB, 击败 -% 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;合并两个有序链表、递归、链表、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00020.有效的括号</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/103281984189/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/103281984189/</id>
    <published>2019-12-18T03:15:00.000Z</published>
    <updated>2019-12-18T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：s &#x3D; “()”<br>输出：true</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：s &#x3D; “()[]{}”<br>输出：true</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：s &#x3D; “(]”<br>输出：false</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; s.length &lt;&#x3D; 10^4$</li><li>s 仅由括号 ‘()[]{}’ 组成</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stack;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; mapping = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>&amp; c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.<span class="built_in">find</span>(c) != mapping.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">char</span> top_element = stack.<span class="built_in">empty</span>() ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (top_element != mapping[c]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 34.94% 使用 C++ 的用户</p><p>内存消耗 : 6.66 MB, 击败 20.29% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, Character&gt; mapping = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapping.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        mapping.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        mapping.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.containsKey(c)) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">topElement</span> <span class="operator">=</span> stack.isEmpty() ? <span class="string">&#x27;#&#x27;</span> : stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (topElement != mapping.get(c)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 51.90% 使用 Java 的用户</p><p>内存消耗 : 40.38 MB, 击败 15.69% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s</span>):</span><br><span class="line">        stack = []</span><br><span class="line">        mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> mapping:</span><br><span class="line">                top_element = stack.pop() <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> mapping[char] != top_element:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 28.80% 使用 Python 的用户</p><p>内存消耗 : 13.06 MB, 击败 58.31% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> mapping:</span><br><span class="line">                top_element = stack.pop() <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> mapping[char] != top_element:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 97.63% 使用 Python3 的用户</p><p>内存消耗 : 16.83 MB, 击败 16.72% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> <span class="built_in">stack</span>[len];</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">stack</span>[++top] = s[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> temp = <span class="built_in">stack</span>[top--];</span><br><span class="line">            <span class="keyword">if</span> ((s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;(&#x27;</span>) || (s[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;[&#x27;</span>) || (s[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 41.72% 使用 C 的用户</p><p>内存消耗 : 6.13 MB, 击败 89.19% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        Stack&lt;<span class="built_in">char</span>&gt; stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">char</span>&gt; mapping = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">char</span>&gt; &#123;&#123;<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>&#125;, &#123;<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>&#125;, &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.ContainsValue(c)) &#123;</span><br><span class="line">                stack.Push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mapping.TryGetValue(c, <span class="keyword">out</span> <span class="built_in">char</span> <span class="keyword">value</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.Count == <span class="number">0</span> || stack.Pop() != <span class="keyword">value</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.Count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 95.95% 使用 C# 的用户</p><p>内存消耗 : 38.44 MB, 击败 12.55% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">const</span> mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> topElement = stack.<span class="property">length</span> === <span class="number">0</span> ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (mapping[char] !== topElement) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(char);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 71.45% 使用 JavaScript 的用户</p><p>内存消耗 : 48.31 MB, 击败 12.49% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">stack</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mapping</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125; = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> topElement = stack.<span class="property">length</span> === <span class="number">0</span> ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="title function_">pop</span>()!;</span><br><span class="line">            <span class="keyword">if</span> (mapping[char] !== topElement) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(char);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 64.87% 使用 TypeScript 的用户</p><p>内存消耗 : 51.40 MB, 击败 6.85% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$s</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$stack</span> = [];</span><br><span class="line">        <span class="variable">$mapping</span> = [<span class="string">&#x27;)&#x27;</span> =&gt; <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> =&gt; <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$char</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$char</span>, <span class="variable">$mapping</span>)) &#123;</span><br><span class="line">                <span class="variable">$topElement</span> = <span class="keyword">empty</span>(<span class="variable">$stack</span>) ? <span class="string">&#x27;#&#x27;</span> : <span class="title function_ invoke__">array_pop</span>(<span class="variable">$stack</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$mapping</span>[<span class="variable">$char</span>] !== <span class="variable">$topElement</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$char</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable">$stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 63.54% 使用 PHP 的用户</p><p>内存消耗 : 19.52 MB, 击败 6.25% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isValid</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stack <span class="operator">=</span> [<span class="type">Character</span>]()</span><br><span class="line">        <span class="keyword">let</span> mapping: [<span class="type">Character</span>: <span class="type">Character</span>] <span class="operator">=</span> [<span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>, <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> leftBracket <span class="operator">=</span> mapping[char] &#123;</span><br><span class="line">                <span class="keyword">if</span> stack.isEmpty <span class="operator">||</span> stack.popLast() <span class="operator">!=</span> leftBracket &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.append(char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 15.52 MB, 击败 5.91% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isValid</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> stack = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> mapping = mapOf(<span class="string">&#x27;)&#x27;</span> to <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> to <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> to <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (char <span class="keyword">in</span> s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.containsKey(char)) &#123;</span><br><span class="line">                <span class="keyword">val</span> topElement = <span class="keyword">if</span> (stack.isEmpty()) <span class="string">&#x27;#&#x27;</span> <span class="keyword">else</span> stack.pop()</span><br><span class="line">                <span class="keyword">if</span> (mapping[char] != topElement) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 148 ms, 击败 66.67% 使用 Kotlin 的用户</p><p>内存消耗 : 33.78 MB, 击败 44.17% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isValid(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stack = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="built_in">String</span> char = s[i];</span><br><span class="line">      <span class="keyword">if</span> (mapping.containsKey(char)) &#123;</span><br><span class="line">        <span class="built_in">String</span> topElement = stack.isEmpty ? <span class="string">&#x27;#&#x27;</span> : stack.removeLast();</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] != topElement) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.add(char);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 256 ms, 击败 85.71% 使用 Dart 的用户</p><p>内存消耗 : 147.11 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    mapping := <span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">rune</span>&#123;</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    stack := []<span class="type">rune</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, char := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> val, ok := mapping[char]; ok &#123;</span><br><span class="line">            <span class="keyword">var</span> topElement <span class="type">rune</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">                topElement = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                topElement, stack = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>], stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> val != topElement &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 1.93 MB, 击败 16.11% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">s</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> s.empty?</span><br><span class="line">    mapping = &#123; <span class="string">&#x27;)&#x27;</span> =&gt; <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> =&gt; <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#x27;</span> &#125;</span><br><span class="line">    stack = []</span><br><span class="line">    s.each_char <span class="keyword">do</span> |<span class="params">char</span>|</span><br><span class="line">        <span class="keyword">if</span> mapping.key?(char)</span><br><span class="line">            top_element = stack.empty? ? <span class="string">&#x27;#&#x27;</span> : stack.pop</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> mapping[char] != top_element</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stack.push(char)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    stack.empty?</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 16.67% 使用 Ruby 的用户</p><p>内存消耗 : 206.79 MB, 击败 8.33% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Stack</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">val</span> mapping = <span class="type">Map</span>(&#x27;)&#x27; -&gt; &#x27;(&#x27;, &#x27;]&#x27; -&gt; &#x27;[&#x27;, &#x27;&#125;&#x27; -&gt; &#x27;&#123;&#x27;)</span><br><span class="line">    <span class="keyword">val</span> stack = <span class="type">Stack</span>[<span class="type">Char</span>]()</span><br><span class="line">    <span class="keyword">for</span> (char &lt;- s) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mapping.contains(char)) &#123;</span><br><span class="line">        <span class="keyword">val</span> topElement = <span class="keyword">if</span> (stack.isEmpty) &#x27;#&#x27; <span class="keyword">else</span> stack.pop()</span><br><span class="line">        <span class="keyword">if</span> (mapping(char) != topElement) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.push(char)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 492 ms, 击败 28.00% 使用 Scala 的用户</p><p>内存消耗 : 55.64 MB, 击败 84.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_valid</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">mapping</span>: <span class="type">Vec</span>&lt;(<span class="type">char</span>, <span class="type">char</span>)&gt; = <span class="built_in">vec!</span>[(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>), (<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>), (<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>)];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">match</span> c &#123;</span><br><span class="line">                <span class="string">&#x27;(&#x27;</span> | <span class="string">&#x27;[&#x27;</span> | <span class="string">&#x27;&#123;&#x27;</span> =&gt; stack.<span class="title function_ invoke__">push</span>(c),</span><br><span class="line">                _ =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;top) = stack.<span class="title function_ invoke__">last</span>() &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;(_, close)) = mapping.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">find</span>(|&amp;&amp;(open, _)| open == top) &#123;</span><br><span class="line">                            <span class="keyword">if</span> close == c &#123;</span><br><span class="line">                                stack.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.<span class="title function_ invoke__">is_empty</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.03 MB, 击败 65.16% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">is-valid</span> s)</span><br><span class="line">  (<span class="name">-&gt;</span> string? boolean?)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">string=?</span></span> s <span class="string">&quot;&quot;</span>) <span class="literal">#t</span></span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">s</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> s)) (<span class="name">stack</span> &#x27;()))</span><br><span class="line">        (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">          ((<span class="name"><span class="built_in">null?</span></span> s) (<span class="name"><span class="built_in">null?</span></span> stack))</span><br><span class="line">          ((<span class="name"><span class="built_in">member</span></span> (<span class="name"><span class="built_in">car</span></span> s) &#x27;(<span class="literal">#\(</span> <span class="literal">#\[</span> <span class="literal">#\&#123;</span>)) (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> s) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s) stack)))</span><br><span class="line">          ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">member</span></span> (<span class="name"><span class="built_in">car</span></span> s) &#x27;(<span class="literal">#\)</span> <span class="literal">#\]</span> <span class="literal">#\&#125;</span>)) (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">null?</span></span> stack)) (<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> s)</span><br><span class="line">                                                                               (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\(</span>) <span class="literal">#\)</span>)</span><br><span class="line">                                                                                     ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\[</span>) <span class="literal">#\]</span>)</span><br><span class="line">                                                                                     ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\&#123;</span>) <span class="literal">#\&#125;</span>)))</span><br><span class="line">                                                 (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> s) (<span class="name"><span class="built_in">cdr</span></span> stack))))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> <span class="literal">#f</span>)))))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 188 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 98.05 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;有效的括号、栈、字符串、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00019.删除链表的倒数第 N 个结点</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/b49117a2473e/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/b49117a2473e/</id>
    <published>2019-12-17T03:15:00.000Z</published>
    <updated>2019-12-17T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/b49117a2473e/201912170001.jpg" class="" title="示例1"><blockquote><p>输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2<br>输出：[1,2,3,5]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：head &#x3D; [1], n &#x3D; 1<br>输出：[]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：head &#x3D; [1,2], n &#x3D; 1<br>输出：[1]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>链表中结点的数目为 sz</li><li>1 &lt;&#x3D; sz &lt;&#x3D; 30</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 100</li><li>1 &lt;&#x3D; n &lt;&#x3D; sz</li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummy;</span><br><span class="line">        ListNode* slow = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* toDelete = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 10.97 MB, 击败 11.94% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 40.65 MB, 击败 7.23% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head, n</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        fast = slow = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = slow.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 29.15% 使用 Python 的用户</p><p>内存消耗 : 13.18 MB, 击败 7.92% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        fast = slow = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = slow.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 81.53% 使用 Python3 的用户</p><p>内存消耗 : 16.98 MB, 击败 8.12% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">removeNthFromEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> dummy;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">toDelete</span> =</span> slow-&gt;next;</span><br><span class="line">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(toDelete);</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 6.30 MB, 击败 82.47% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">RemoveNthFromEnd</span>(<span class="params">ListNode head, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode fast = dummy;</span><br><span class="line">        ListNode slow = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 85.59% 使用 C# 的用户</p><p>内存消耗 : 40.11 MB, 击败 10.36% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> fast = dummy;</span><br><span class="line">    <span class="keyword">let</span> slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 40.96% 使用 JavaScript 的用户</p><p>内存消耗 : 49.12 MB, 击败 7.04% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">head: ListNode | <span class="literal">null</span>, n: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fast</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">slow</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (slow !== <span class="literal">null</span> &amp;&amp; slow.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 43.59% 使用 TypeScript 的用户</p><p>内存消耗 : 50.61 MB, 击败 8.16% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeNthFromEnd</span>(<span class="params"><span class="variable">$head</span>, <span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$fast</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="variable">$slow</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$fast</span> = <span class="variable">$fast</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$fast</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$slow</span> = <span class="variable">$slow</span>-&gt;next;</span><br><span class="line">            <span class="variable">$fast</span> = <span class="variable">$fast</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$slow</span>-&gt;next = <span class="variable">$slow</span>-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 58.70% 使用 PHP 的用户</p><p>内存消耗 : 19.46 MB, 击败 6.52% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeNthFromEnd</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> fast: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">var</span> slow: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span>n &#123;</span><br><span class="line">            fast <span class="operator">=</span> fast<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> fast <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            slow <span class="operator">=</span> slow<span class="operator">?</span>.next</span><br><span class="line">            fast <span class="operator">=</span> fast<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow<span class="operator">?</span>.next <span class="operator">=</span> slow<span class="operator">?</span>.next<span class="operator">?</span>.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 97.71% 使用 Swift 的用户</p><p>内存消耗 : 15.30 MB, 击败 6.29% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeNthFromEnd</span><span class="params">(head: <span class="type">ListNode</span>?, n: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> fast: ListNode? = dummy</span><br><span class="line">        <span class="keyword">var</span> slow: ListNode? = dummy</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.n) &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow?.next</span><br><span class="line">            fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow?.next = slow?.next?.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 88.00% 使用 Kotlin 的用户</p><p>内存消耗 : 33.89 MB, 击败 51.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? removeNthFromEnd(ListNode? head, <span class="built_in">int</span> n) &#123;</span><br><span class="line">    ListNode? dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode? fast = dummy;</span><br><span class="line">    ListNode? slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      fast = fast!.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">      slow = slow!.next;</span><br><span class="line">      fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow!.next = slow.next!.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 388 ms, 击败 0.00% 使用 Dart 的用户</p><p>内存消耗 : 148.34 MB, 击败 85.71% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">dummy := &amp;ListNode&#123;Val: <span class="number">0</span>, Next: head&#125;</span><br><span class="line">fast, slow := dummy, dummy</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &#123;</span><br><span class="line">fast = fast.Next</span><br><span class="line">slow = slow.Next</span><br><span class="line">&#125;</span><br><span class="line">slow.Next = slow.Next.Next</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.07 MB, 击败 83.45% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_nth_from_end</span>(<span class="params">head, n</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  fast = dummy</span><br><span class="line">  slow = dummy</span><br><span class="line">  (n + <span class="number">1</span>).times &#123; fast = fast.<span class="keyword">next</span> &#125;</span><br><span class="line">  <span class="keyword">while</span> fast != <span class="literal">nil</span></span><br><span class="line">    slow = slow.<span class="keyword">next</span></span><br><span class="line">    fast = fast.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  slow.<span class="keyword">next</span> = slow.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.75 MB, 击败 16.67% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span></span>(head: <span class="type">ListNode</span>, n: <span class="type">Int</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dummy = <span class="keyword">new</span> <span class="type">ListNode</span>()</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">var</span> fast = dummy</span><br><span class="line">    <span class="keyword">var</span> slow = dummy</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to n) &#123;</span><br><span class="line">      fast = fast.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">      slow = slow.next</span><br><span class="line">      fast = fast.next</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next</span><br><span class="line">    dummy.next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 556 ms, 击败 12.50% 使用 Scala 的用户</p><p>内存消耗 : 56.24 MB, 击败 62.50% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_nth_from_end</span>(head: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dummy</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode &#123; val: <span class="number">0</span>, next: head &#125;);</span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">slow</span> = &amp;<span class="keyword">mut</span> dummy <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">Box</span>&lt;ListNode&gt;;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">fast</span> = &amp;<span class="keyword">mut</span> dummy <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">Box</span>&lt;ListNode&gt;;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">                fast = (*fast).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (*fast).next.<span class="title function_ invoke__">is_some</span>() &#123;</span><br><span class="line">                fast = (*fast).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                slow = (*slow).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            (*slow).next = (*slow).next.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">unwrap</span>().next;</span><br><span class="line">        &#125;</span><br><span class="line">        dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.14 MB, 击败 16.30% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;删除链表的倒数第 N 个结点、链表、双指针、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00018.四数之和</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/d5d6745d051f/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/d5d6745d051f/</id>
    <published>2019-12-16T03:15:00.000Z</published>
    <updated>2019-12-16T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li>0 &lt;&#x3D; a, b, c, d &lt; n</li><li>a、b、c 和 d 互不相同</li><li>nums[a] + nums[b] + nums[c] + nums[d] &#x3D;&#x3D; target</li></ul><p>你可以按 任意顺序 返回答案 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [1,0,-1,0,-2,2], target &#x3D; 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [2,2,2,2,2], target &#x3D; 8<br>输出：[[2,2,2,2]]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 200$</li><li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li><li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n - <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="type">long</span> sum = <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[i]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[j]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[left]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[right]);</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        result.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 56.26% 使用 C++ 的用户</p><p>内存消耗 : 13.43 MB, 击败 19.12% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; quadruplets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> quadruplets;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>, right = length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        quadruplets.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quadruplets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 99.83% 使用 Java 的用户</p><p>内存消耗 : 42.84 MB, 击败 46.30% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        quadruplets = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length - <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    total = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> total == target:</span><br><span class="line">                        quadruplets.append([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> total &lt; target:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> quadruplets</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 96.53% 使用 Python 的用户</p><p>内存消耗 : 12.91 MB, 击败 85.86% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        quadruplets = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length - <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    total = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> total == target:</span><br><span class="line">                        quadruplets.append([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> total &lt; target:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> quadruplets</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 98.70% 使用 Python3 的用户</p><p>内存消耗 : 17.07 MB, 击败 12.39% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numsSize - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = numsSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> sum = (<span class="type">long</span> <span class="type">long</span>)nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*returnSize == capacity) &#123;</span><br><span class="line">                        capacity *= <span class="number">2</span>;</span><br><span class="line">                        result = (<span class="type">int</span>**)<span class="built_in">realloc</span>(result, capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">                        *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">realloc</span>(*returnColumnSizes, capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                    result[*returnSize][<span class="number">0</span>] = nums[i];</span><br><span class="line">                    result[*returnSize][<span class="number">1</span>] = nums[j];</span><br><span class="line">                    result[*returnSize][<span class="number">2</span>] = nums[left];</span><br><span class="line">                    result[*returnSize][<span class="number">3</span>] = nums[right];</span><br><span class="line">                    (*returnColumnSizes)[*returnSize] = <span class="number">4</span>;</span><br><span class="line">                    (*returnSize)++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 25.54% 使用 C 的用户</p><p>内存消耗 : 7.29 MB, 击败 94.96% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; FourSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target)</span><br><span class="line">    &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length - <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.Length - <span class="number">2</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">int</span> right = nums.Length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">long</span> sum = (<span class="built_in">long</span>)nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[j], nums[left], nums[right] &#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                            right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 97.50% 使用 C# 的用户</p><p>内存消耗 : 46.96 MB, 击败 9.38% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 96 ms, 击败 34.66% 使用 JavaScript 的用户</p><p>内存消耗 : 52.09 MB, 击败 12.46% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fourSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 21.46% 使用 TypeScript 的用户</p><p>内存消耗 : 53.43 MB, 击败 7.32% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fourSum</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] == <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span> + <span class="number">1</span>; <span class="variable">$j</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$j</span> &gt; <span class="variable">$i</span> + <span class="number">1</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$j</span>] == <span class="variable">$nums</span>[<span class="variable">$j</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$j</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                    <span class="variable">$sum</span> = <span class="variable">$nums</span>[<span class="variable">$i</span>] + <span class="variable">$nums</span>[<span class="variable">$j</span>] + <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$sum</span> == <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$result</span>[] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$j</span>], <span class="variable">$nums</span>[<span class="variable">$left</span>], <span class="variable">$nums</span>[<span class="variable">$right</span>]];</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$left</span>] == <span class="variable">$nums</span>[<span class="variable">$left</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="variable">$left</span>++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$right</span>] == <span class="variable">$nums</span>[<span class="variable">$right</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="variable">$right</span>--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="variable">$sum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 188 ms, 击败 25.00% 使用 PHP 的用户</p><p>内存消耗 : 19.44 MB, 击败 12.50% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">fourSum</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">      <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">      <span class="keyword">let</span> sortedNums <span class="operator">=</span> nums.sorted()</span><br><span class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>sortedNums.count &#123;</span><br><span class="line">          <span class="keyword">if</span> k <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> sortedNums[k] <span class="operator">==</span> sortedNums[k <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">              <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> (k <span class="operator">+</span> <span class="number">1</span>)<span class="operator">..&lt;</span>sortedNums.count &#123;</span><br><span class="line">              <span class="keyword">if</span> i <span class="operator">&gt;</span> k <span class="operator">+</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span> sortedNums[i] <span class="operator">==</span> sortedNums[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                  <span class="keyword">continue</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">              <span class="keyword">var</span> right <span class="operator">=</span> sortedNums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">              <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">                  <span class="keyword">let</span> sum <span class="operator">=</span> sortedNums[k] <span class="operator">+</span> sortedNums[i] <span class="operator">+</span> sortedNums[left] <span class="operator">+</span> sortedNums[right]</span><br><span class="line">                  <span class="keyword">if</span> sum <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                      left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                      right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      result.append([sortedNums[k], sortedNums[i], sortedNums[left], sortedNums[right]])</span><br><span class="line">                      <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[left] <span class="operator">==</span> sortedNums[left <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">                          left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[right] <span class="operator">==</span> sortedNums[right <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                          right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                      &#125;</span><br><span class="line">                      left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                      right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 62.86% 使用 Swift 的用户</p><p>内存消耗 : 15.23 MB, 击败 22.86% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fourSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> sortedNums = nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> (k <span class="keyword">in</span> <span class="number">0</span> until sortedNums.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; sortedNums[k] == sortedNums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> k + <span class="number">1</span> until sortedNums.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; sortedNums[i] == sortedNums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right = sortedNums.size - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="keyword">val</span> sum = sortedNums[k].toLong() + sortedNums[i].toLong() + sortedNums[left].toLong() + sortedNums[right].toLong()</span><br><span class="line">                    <span class="keyword">when</span> &#123;</span><br><span class="line">                        sum &lt; target -&gt; left++</span><br><span class="line">                        sum &gt; target -&gt; right--</span><br><span class="line">                        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                            result.add(listOf(sortedNums[k], sortedNums[i], sortedNums[left], sortedNums[right]))</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[left] == sortedNums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                                left++</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[right] == sortedNums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                                right--</span><br><span class="line">                            &#125;</span><br><span class="line">                            left++</span><br><span class="line">                            right--</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 336 ms, 击败 11.11% 使用 Kotlin 的用户</p><p>内存消耗 : 41.36 MB, 击败 11.11% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; fourSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="built_in">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result.add([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">              left++;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">              right--;</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 448 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 153.90 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums)<span class="number">-2</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            left, right := j+<span class="number">1</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">                sum := nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                    result = <span class="built_in">append</span>(result, []<span class="type">int</span>&#123;nums[i], nums[j], nums[left], nums[right]&#125;)</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>] &#123;</span><br><span class="line">                        left++</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>] &#123;</span><br><span class="line">                        right--</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 45.41% 使用 Go 的用户</p><p>内存消耗 : 2.56 MB, 击败 96.90% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">four_sum</span>(<span class="params">nums, target</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> nums.length &lt; <span class="number">4</span></span><br><span class="line">    nums.sort!</span><br><span class="line">    (<span class="number">0</span>...nums.length-<span class="number">3</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">next</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]</span><br><span class="line">        (i+<span class="number">1</span>...nums.length-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]</span><br><span class="line">            left = j + <span class="number">1</span></span><br><span class="line">            right = nums.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right</span><br><span class="line">                sum = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target</span><br><span class="line">                    result.push([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elsif</span> sum &lt; target</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 416 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.90 MB, 击败 20.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> sortedNums = nums.sorted</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sortedNums.length - <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; sortedNums(i) == sortedNums(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        ()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i + <span class="number">1</span> until sortedNums.length - <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; sortedNums(j) == sortedNums(j - <span class="number">1</span>)) &#123;</span><br><span class="line">            ()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> left = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right = sortedNums.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">              <span class="keyword">val</span> sum = sortedNums(i).toLong + sortedNums(j).toLong + sortedNums(left).toLong + sortedNums(right).toLong</span><br><span class="line">              <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                result = result :+ <span class="type">List</span>(sortedNums(i), sortedNums(j), sortedNums(left), sortedNums(right))</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                  left += <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(left) == sortedNums(left - <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                  right -= <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(right) == sortedNums(right + <span class="number">1</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 604 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 55.20 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">four_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="title function_ invoke__">len</span>() &lt; <span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted_nums</span> = nums;</span><br><span class="line">        sorted_nums.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; sorted_nums[i] == sorted_nums[i - <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> i + <span class="number">1</span>..sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> &amp;&amp; sorted_nums[j] == sorted_nums[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">sum</span> = sorted_nums[i] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[j] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[left] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[right] <span class="keyword">as</span> <span class="type">i64</span>;</span><br><span class="line">                    <span class="keyword">if</span> sum == target <span class="keyword">as</span> <span class="type">i64</span> &#123;</span><br><span class="line">                        result.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[sorted_nums[i], sorted_nums[j], sorted_nums[left], sorted_nums[right]]);</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; sorted_nums[left] == sorted_nums[left + <span class="number">1</span>] &#123;</span><br><span class="line">                            left += <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; sorted_nums[right] == sorted_nums[right - <span class="number">1</span>] &#123;</span><br><span class="line">                            right -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target <span class="keyword">as</span> <span class="type">i64</span> &#123;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 67.74% 使用 Rust 的用户</p><p>内存消耗 : 2.17 MB, 击败 32.26% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;四数之和、数组、双指针、排序、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00017.电话号码的字母组合</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/5cf897376097/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/5cf897376097/</id>
    <published>2019-12-13T03:15:00.000Z</published>
    <updated>2019-12-13T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><img src="/zh-CN/5cf897376097/201912130001.png" class="" title="题目"><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：digits &#x3D; “23”<br>输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：digits &#x3D; “”<br>输出：[]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：digits &#x3D; “2”<br>输出：[“a”,”b”,”c”]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>0 &lt;&#x3D; digits.length &lt;&#x3D; 4</li><li>digits[i] 是范围 [‘2’, ‘9’] 的一个数字。</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; phone = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        vector&lt;string&gt; combinations;</span><br><span class="line">        <span class="built_in">backtrack</span>(digits, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, combinations, phone);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> string&amp; digits, <span class="type">int</span> index, string current, vector&lt;string&gt;&amp; combinations, <span class="type">const</span> vector&lt;string&gt;&amp; phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            combinations.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string letters = phone[digits[index] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> letter : letters) &#123;</span><br><span class="line">            current.<span class="built_in">push_back</span>(letter);</span><br><span class="line">            <span class="built_in">backtrack</span>(digits, index + <span class="number">1</span>, current, combinations, phone);</span><br><span class="line">            current.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 31.65% 使用 C++ 的用户</p><p>内存消耗 : 6.75 MB, 击败 75.08% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        List&lt;String&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="literal">null</span> || digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] phone = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        backtrack(digits, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), combinations, phone);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String digits, <span class="type">int</span> index, StringBuilder current, List&lt;String&gt; combinations, String[] phone)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.length()) &#123;</span><br><span class="line">            combinations.add(current.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">letters</span> <span class="operator">=</span> phone[digits.charAt(index) - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> letter : letters.toCharArray()) &#123;</span><br><span class="line">            current.append(letter);</span><br><span class="line">            backtrack(digits, index + <span class="number">1</span>, current, combinations, phone);</span><br><span class="line">            current.deleteCharAt(current.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 40.78 MB, 击败 15.89% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        phone = &#123;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">index, path</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(digits):</span><br><span class="line">                combinations.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> phone[digits[index]]:</span><br><span class="line">                path.append(letter)</span><br><span class="line">                backtrack(index + <span class="number">1</span>, path)</span><br><span class="line">                path.pop()</span><br><span class="line">        combinations = []</span><br><span class="line">        backtrack(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 40.96% 使用 Python 的用户</p><p>内存消耗 : 13.01 MB, 击败 69.30% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        phone = &#123;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">index, path</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(digits):</span><br><span class="line">                combinations.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> phone[digits[index]]:</span><br><span class="line">                path.append(letter)</span><br><span class="line">                backtrack(index + <span class="number">1</span>, path)</span><br><span class="line">                path.pop()</span><br><span class="line">        combinations = []</span><br><span class="line">        backtrack(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 89.86% 使用 Python3 的用户</p><p>内存消耗 : 16.86 MB, 击败 16.18% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span>* phone[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>* digits, <span class="type">int</span> index, <span class="type">char</span>* path, <span class="type">char</span>** combinations, <span class="type">int</span>* count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits[index] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        combinations[*count] = strdup(path);</span><br><span class="line">        (*count)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* letters = phone[digit];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(letters); i++) &#123;</span><br><span class="line">        path[index] = letters[i];</span><br><span class="line">        backtrack(digits, index + <span class="number">1</span>, path, combinations, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>** <span class="title function_">letterCombinations</span><span class="params">(<span class="type">char</span>* digits, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits == <span class="literal">NULL</span> || *digits == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *returnSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(digits);</span><br><span class="line">    <span class="type">int</span> total_combinations = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> digit = digits[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        total_combinations *= <span class="built_in">strlen</span>(phone[digit]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>** combinations = (<span class="type">char</span>**)<span class="built_in">malloc</span>(total_combinations * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="type">char</span>* path = (<span class="type">char</span>*)<span class="built_in">malloc</span>((len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    path[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    backtrack(digits, <span class="number">0</span>, path, combinations, &amp;count);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">    *returnSize = count;</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 6.61 MB, 击败 31.77% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] phone = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">LetterCombinations</span>(<span class="params"><span class="built_in">string</span> digits</span>)</span> &#123;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; combinations = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(digits)) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        Backtrack(digits, <span class="number">0</span>, <span class="keyword">new</span> List&lt;<span class="built_in">char</span>&gt;(), combinations);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">string</span> digits, <span class="built_in">int</span> index, List&lt;<span class="built_in">char</span>&gt; path, IList&lt;<span class="built_in">string</span>&gt; combinations</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.Length) &#123;</span><br><span class="line">            combinations.Add(<span class="keyword">new</span> <span class="built_in">string</span>(path.ToArray()));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">string</span> letters = phone[digit];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">            path.Add(letter);</span><br><span class="line">            Backtrack(digits, index + <span class="number">1</span>, path, combinations);</span><br><span class="line">            path.RemoveAt(path.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 87.74% 使用 C# 的用户</p><p>内存消耗 : 46.07 MB, 击败 5.37% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">digits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="keyword">function</span>(<span class="params">digits</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits === <span class="literal">null</span> || digits.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> phone = &#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> combinations = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">index, path</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === digits.<span class="property">length</span>) &#123;</span><br><span class="line">            combinations.<span class="title function_">push</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> letters = phone[digits[index]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> letter <span class="keyword">of</span> letters) &#123;</span><br><span class="line">            path.<span class="title function_">push</span>(letter);</span><br><span class="line">            <span class="title function_">backtrack</span>(index + <span class="number">1</span>, path);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, []);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 84.24% 使用 JavaScript 的用户</p><p>内存消耗 : 47.66 MB, 击败 8.30% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letterCombinations</span>(<span class="params">digits: <span class="built_in">string</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">    <span class="keyword">if</span> (!digits || digits.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">phone</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>[] &#125; = &#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">combinations</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">index: <span class="built_in">number</span>, path: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === digits.<span class="property">length</span>) &#123;</span><br><span class="line">            combinations.<span class="title function_">push</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> letters = phone[digits.<span class="title function_">charAt</span>(index)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> letter <span class="keyword">of</span> letters) &#123;</span><br><span class="line">            path.<span class="title function_">push</span>(letter);</span><br><span class="line">            <span class="title function_">backtrack</span>(index + <span class="number">1</span>, path);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, []);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 7.96% 使用 TypeScript 的用户</p><p>内存消耗 : 50.34 MB, 击败 5.09% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">letterCombinations</span>(<span class="params"><span class="variable">$digits</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$digits</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$phone</span> = [</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span> =&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span> =&gt; [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span> =&gt; [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span> =&gt; [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span> =&gt; [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span> =&gt; [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span> =&gt; [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span> =&gt; [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$combinations</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$digits</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$combinations</span>, <span class="variable">$phone</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$combinations</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$digits</span>, <span class="variable">$index</span>, <span class="variable">$path</span>, &amp;<span class="variable">$combinations</span>, <span class="variable">$phone</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> === <span class="title function_ invoke__">strlen</span>(<span class="variable">$digits</span>)) &#123;</span><br><span class="line">            <span class="variable">$combinations</span>[] = <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$letters</span> = <span class="variable">$phone</span>[<span class="variable">$digits</span>[<span class="variable">$index</span>]];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$letters</span> <span class="keyword">as</span> <span class="variable">$letter</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$digits</span>, <span class="variable">$index</span> + <span class="number">1</span>, <span class="variable">$path</span> . <span class="variable">$letter</span>, <span class="variable">$combinations</span>, <span class="variable">$phone</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 18.52% 使用 PHP 的用户</p><p>内存消耗 : 19.43 MB, 击败 11.11% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> phone: [<span class="type">Character</span>: [<span class="type">Character</span>]] <span class="operator">=</span> [</span><br><span class="line">        <span class="string">&quot;2&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>: [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>: [<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>: [<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>: [<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>: [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>: [<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>: [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">letterCombinations</span>(<span class="keyword">_</span> <span class="params">digits</span>: <span class="type">String</span>) -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>digits.isEmpty <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> combinations <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">        backtrack(<span class="type">Array</span>(digits), <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="operator">&amp;</span>combinations)</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">digits</span>: [<span class="type">Character</span>], <span class="keyword">_</span> <span class="params">index</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">path</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">combinations</span>: <span class="keyword">inout</span> [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> index <span class="operator">==</span> digits.count &#123;</span><br><span class="line">            combinations.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> currentDigit <span class="operator">=</span> digits[index]</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> letters <span class="operator">=</span> phone[currentDigit] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> letters &#123;</span><br><span class="line">            backtrack(digits, index <span class="operator">+</span> <span class="number">1</span>, path <span class="operator">+</span> <span class="type">String</span>(letter), <span class="operator">&amp;</span>combinations)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 15.64 MB, 击败 15.04% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> phone = mapOf(</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> to listOf(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span> to listOf(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span> to listOf(<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span> to listOf(<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span> to listOf(<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span> to listOf(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span> to listOf(<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span> to listOf(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">letterCombinations</span><span class="params">(digits: <span class="type">String</span>)</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> emptyList()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> combinations = mutableListOf&lt;String&gt;()</span><br><span class="line">        backtrack(digits.toCharArray(), <span class="number">0</span>, StringBuilder(), combinations)</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(digits: <span class="type">CharArray</span>, index: <span class="type">Int</span>, path: <span class="type">StringBuilder</span>, combinations: <span class="type">MutableList</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.size) &#123;</span><br><span class="line">            combinations.add(path.toString())</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> letters = phone[digits[index]] ?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> (letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">            path.append(letter)</span><br><span class="line">            backtrack(digits, index + <span class="number">1</span>, path, combinations)</span><br><span class="line">            path.deleteCharAt(path.length - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 5.45% 使用 Kotlin 的用户</p><p>内存消耗 : 37.51 MB, 击败 10.91% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; phone = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; letterCombinations(<span class="built_in">String</span> digits) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; combinations = [];</span><br><span class="line">    <span class="keyword">if</span> (digits.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    _backtrack(digits, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, combinations);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _backtrack(<span class="built_in">String</span> digits, <span class="built_in">int</span> index, <span class="built_in">String</span> current, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; combinations) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == digits.length) &#123;</span><br><span class="line">      combinations.add(current);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; letters = phone[digits[index]]!;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">      _backtrack(digits, index + <span class="number">1</span>, current + letter, combinations);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 296 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 147.34 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phone = <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;2&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;3&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;4&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;5&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;6&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;7&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;8&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;9&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> combinations []<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> combinations</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, path <span class="type">string</span>)</span></span></span><br><span class="line">backtrack = <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> index == <span class="built_in">len</span>(digits) &#123;</span><br><span class="line">combinations = <span class="built_in">append</span>(combinations, path)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">letters := phone[<span class="type">string</span>(digits[index])]</span><br><span class="line"><span class="keyword">for</span> _, letter := <span class="keyword">range</span> letters &#123;</span><br><span class="line">backtrack(index+<span class="number">1</span>, path+letter)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> combinations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 9.81% 使用 Go 的用户</p><p>内存消耗 : 1.94 MB, 击败 39.95% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; digits</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="variable constant_">PHONE</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span> =&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span> =&gt; [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span> =&gt; [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;5&#x27;</span> =&gt; [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;6&#x27;</span> =&gt; [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;7&#x27;</span> =&gt; [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;8&#x27;</span> =&gt; [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;9&#x27;</span> =&gt; [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">letter_combinations</span>(<span class="params">digits</span>)</span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> digits.empty?</span><br><span class="line">  combinations = []</span><br><span class="line">  backtrack(digits, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, combinations)</span><br><span class="line">  combinations</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">digits, index, path, combinations</span>)</span><br><span class="line">  <span class="keyword">if</span> index == digits.length</span><br><span class="line">    combinations &lt;&lt; path</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  letters = <span class="variable constant_">PHONE</span>[digits[index]]</span><br><span class="line">  letters.each <span class="keyword">do</span> |<span class="params">letter</span>|</span><br><span class="line">    backtrack(digits, index + <span class="number">1</span>, path + letter, combinations)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 25.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.65 MB, 击败 25.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> phone = <span class="type">Map</span>(</span><br><span class="line">    &#x27;<span class="number">2</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">3</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">4</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">5</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">6</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">7</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">8</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">9</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span></span>(digits: <span class="type">String</span>): <span class="type">List</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">List</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> combinations = <span class="type">List</span>[<span class="type">String</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(index: <span class="type">Int</span>, path: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (index == digits.length) &#123;</span><br><span class="line">        combinations = path :: combinations</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">val</span> letters = phone(digits(index))</span><br><span class="line">      letters.foreach(letter =&gt; backtrack(index + <span class="number">1</span>, path + letter))</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    combinations.reverse</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 452 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 53.96 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">letter_combinations</span>(digits: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">phone</span> = [</span><br><span class="line">            (<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">        .<span class="title function_ invoke__">cloned</span>()</span><br><span class="line">        .collect::&lt;std::collections::HashMap&lt;_, _&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> digits.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vec!</span>[];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="built_in">vec!</span>[<span class="string">&quot;&quot;</span>.<span class="title function_ invoke__">to_string</span>()];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">digit</span> <span class="keyword">in</span> digits.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(letters) = phone.<span class="title function_ invoke__">get</span>(&amp;digit) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">temp</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">letter</span> <span class="keyword">in</span> letters.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> &amp;result &#123;</span><br><span class="line">                        temp.<span class="title function_ invoke__">push</span>(item.<span class="title function_ invoke__">clone</span>() + &amp;letter.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.14 MB, 击败 26.85% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> letter-map</span><br><span class="line">  #hash((<span class="literal">#\2</span> . (<span class="literal">#\a</span> <span class="literal">#\b</span> <span class="literal">#\c</span>))</span><br><span class="line">        (<span class="literal">#\3</span> . (<span class="literal">#\d</span> <span class="literal">#\e</span> <span class="literal">#\f</span>))</span><br><span class="line">        (<span class="literal">#\4</span> . (<span class="literal">#\g</span> <span class="literal">#\h</span> <span class="literal">#\i</span>))</span><br><span class="line">        (<span class="literal">#\5</span> . (<span class="literal">#\j</span> <span class="literal">#\k</span> <span class="literal">#\l</span>))</span><br><span class="line">        (<span class="literal">#\6</span> . (<span class="literal">#\m</span> <span class="literal">#\n</span> <span class="literal">#\o</span>))</span><br><span class="line">        (<span class="literal">#\7</span> . (<span class="literal">#\p</span> <span class="literal">#\q</span> <span class="literal">#\r</span> <span class="literal">#\s</span>))</span><br><span class="line">        (<span class="literal">#\8</span> . (<span class="literal">#\t</span> <span class="literal">#\u</span> <span class="literal">#\v</span>))</span><br><span class="line">        (<span class="literal">#\9</span> . (<span class="literal">#\w</span> <span class="literal">#\x</span> <span class="literal">#\y</span> <span class="literal">#\z</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">get-letters</span> n)</span><br><span class="line">  (<span class="name">hash-ref</span> letter-map n))</span><br><span class="line">(<span class="name">define/contract</span> (<span class="name">letter-combinations</span> digits)</span><br><span class="line">  (<span class="name">-&gt;</span> string? (<span class="name">listof</span> string?))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> <span class="number">0</span> (<span class="name"><span class="built_in">string-length</span></span> digits))</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">map</span></span> list-&gt;string</span><br><span class="line">           (<span class="name">char-combinations</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> digits)))))</span><br><span class="line">(<span class="name">define/contract</span> (<span class="name">char-combinations</span> ns)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> char?) (<span class="name">listof</span> (<span class="name">listof</span> char?)))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> ns)</span><br><span class="line">      &#x27;(())</span><br><span class="line">      (<span class="name">for*/list</span> ([<span class="name">rest-combinations</span> (<span class="name">char-combinations</span> (<span class="name"><span class="built_in">cdr</span></span> ns))]</span><br><span class="line">                  [<span class="name">current-letter</span> (<span class="name">get-letters</span> (<span class="name"><span class="built_in">car</span></span> ns))])</span><br><span class="line">        (<span class="name"><span class="built_in">cons</span></span> current-letter rest-combinations))))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 184 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 98.10 MB, 击败 -% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;电话号码的字母组合、哈希表、字符串、回溯、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00016.最接近的三数之和</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/091c1663d8a6/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/091c1663d8a6/</id>
    <published>2019-12-12T03:15:00.000Z</published>
    <updated>2019-12-12T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p><p>返回这三个数的和。</p><p>假定每组输入只存在恰好一个解。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [-1,2,1,-4], target &#x3D; 1<br>输出：2<br>解释：与 target 最接近的和是 2 (-1 + 2 + 1 &#x3D; 2) 。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [0,0,0], target &#x3D; 1<br>输出：0</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$3 &lt;&#x3D; nums.length &lt;&#x3D; 1000$</li><li>$-1000 &lt;&#x3D; nums[i] &lt;&#x3D; 1000$</li><li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> closest_sum = INT_MAX; <span class="comment">// 设置初始最接近值为最大整数值</span></span><br><span class="line">        <span class="type">int</span> min_diff = INT_MAX; <span class="comment">// 设置初始最小差值为最大整数值</span></span><br><span class="line">        std::<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 对数组进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> current_sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="type">int</span> diff = <span class="built_in">abs</span>(target - current_sum);</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; min_diff) &#123;</span><br><span class="line">                    min_diff = diff;</span><br><span class="line">                    closest_sum = current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (current_sum &lt; target) &#123;</span><br><span class="line">                    ++left;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current_sum &gt; target) &#123;</span><br><span class="line">                    --right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closest_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 55.31% 使用 C++ 的用户</p><p>内存消耗 : 10.40 MB, 击败 27.05% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">threeSumClosest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">closestSum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDiff</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentSum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> Math.abs(target - currentSum);</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                    minDiff = diff;</span><br><span class="line">                    closestSum = currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 77.58% 使用 Java 的用户</p><p>内存消耗 : 41.82 MB, 击败 71.00% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSumClosest</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        nums.sort()</span><br><span class="line">        closest_sum = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>):</span><br><span class="line">            left, right = i + <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(target - current_sum) &lt; <span class="built_in">abs</span>(target - closest_sum):</span><br><span class="line">                    closest_sum = current_sum</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> current_sum &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> current_sum</span><br><span class="line">        <span class="keyword">return</span> closest_sum</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 68.17% 使用 Python 的用户</p><p>内存消耗 : 12.94 MB, 击败 84.08% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSumClosest</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        closest_sum = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>):</span><br><span class="line">            left, right = i + <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(target - current_sum) &lt; <span class="built_in">abs</span>(target - closest_sum):</span><br><span class="line">                    closest_sum = current_sum</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> current_sum &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> current_sum</span><br><span class="line">        <span class="keyword">return</span> closest_sum</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 376 ms, 击败 80.23% 使用 Python3 的用户</p><p>内存消耗 : 16.85 MB, 击败 14.26% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span> *)a - *(<span class="type">int</span> *)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">threeSumClosest</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    <span class="type">int</span> closestSum = INT_MAX;</span><br><span class="line">    <span class="type">int</span> minDiff = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left = i + <span class="number">1</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="type">int</span> diff = <span class="built_in">abs</span>(target - currentSum);</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                minDiff = diff;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 65.84% 使用 C 的用户</p><p>内存消耗 : 6.64 MB, 击败 27.88% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">ThreeSumClosest</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        <span class="built_in">int</span> closestSum = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> left = i + <span class="number">1</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="built_in">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (Math.Abs(target - currentSum) &lt; Math.Abs(target - closestSum)) &#123;</span><br><span class="line">                    closestSum = currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 92 ms, 击败 58.71% 使用 C# 的用户</p><p>内存消耗 : 41.35 MB, 击败 5.80% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> closestSum = <span class="title class_">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">const</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - currentSum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - closestSum)) &#123;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 99.54% 使用 JavaScript 的用户</p><p>内存消耗 : 49.55 MB, 击败 5.43% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSumClosest</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">closestSum</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = i + <span class="number">1</span>, <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">currentSum</span>: <span class="built_in">number</span> = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - currentSum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - closestSum)) &#123;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 88.81% 使用 TypeScript 的用户</p><p>内存消耗 : 51.18 MB, 击败 5.59% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSumClosest</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="variable">$closestSum</span> = PHP_INT_MAX;</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$left</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                <span class="variable">$currentSum</span> = <span class="variable">$nums</span>[<span class="variable">$i</span>] + <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">abs</span>(<span class="variable">$target</span> - <span class="variable">$currentSum</span>) &lt; <span class="title function_ invoke__">abs</span>(<span class="variable">$target</span> - <span class="variable">$closestSum</span>)) &#123;</span><br><span class="line">                    <span class="variable">$closestSum</span> = <span class="variable">$currentSum</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$currentSum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                    <span class="variable">$left</span>++;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$currentSum</span> &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                    <span class="variable">$right</span>--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$currentSum</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$closestSum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 26.67% 使用 PHP 的用户</p><p>内存消耗 : 19.53 MB, 击败 6.67%用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">threeSumClosest</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sorted <span class="operator">=</span> nums.sorted()</span><br><span class="line">        <span class="keyword">var</span> gap <span class="operator">=</span> <span class="type">Int</span>.max</span><br><span class="line">        <span class="keyword">var</span> finalSum <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> sorted.count <span class="operator">-</span> <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right <span class="operator">=</span> sorted.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(left <span class="operator">&lt;</span> right) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum <span class="operator">=</span> sorted[i] <span class="operator">+</span> sorted[left] <span class="operator">+</span> sorted[right]</span><br><span class="line">                <span class="keyword">let</span> tmp <span class="operator">=</span> <span class="built_in">abs</span>(sum <span class="operator">-</span> target)</span><br><span class="line">                <span class="keyword">if</span>(tmp <span class="operator">&lt;</span> gap) &#123;</span><br><span class="line">                    gap <span class="operator">=</span> tmp</span><br><span class="line">                    finalSum <span class="operator">=</span> sum</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum <span class="operator">&lt;</span> target) &#123;</span><br><span class="line">                    left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum <span class="operator">&gt;</span> target) &#123;</span><br><span class="line">                    right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> sum</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 61.70% 使用 Swift 的用户</p><p>内存消耗 : 15.40 MB, 击败 6.38% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">threeSumClosest</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">var</span> closestSum = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until nums.size - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">val</span> currentSum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(target - currentSum) &lt; Math.abs(target - closestSum)) &#123;</span><br><span class="line">                    closestSum = currentSum</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum <span class="comment">// 如果等于目标值，直接返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 84.00% 使用 Kotlin 的用户</p><p>内存消耗 : 38.36 MB, 击败 40.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> threeSumClosest(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="built_in">int</span> closestSum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="built_in">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">        <span class="keyword">if</span> ((target - currentSum).abs() &lt; (target - closestSum).abs()) &#123;</span><br><span class="line">          closestSum = currentSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">          left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">          right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> currentSum;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 348 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 152.27 MB, 击败 50.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    closestSum := nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-2</span>; i++ &#123;</span><br><span class="line">        left := i + <span class="number">1</span></span><br><span class="line">        right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">            currentSum := nums[i] + nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> abs(target-currentSum) &lt; abs(target-closestSum) &#123;</span><br><span class="line">                closestSum = currentSum</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> currentSum &lt; target &#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> currentSum &gt; target &#123;</span><br><span class="line">                right--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 95.37% 使用 Go 的用户</p><p>内存消耗 : 2.74 MB, 击败 97.61% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three_sum_closest</span>(<span class="params">nums, target</span>)</span><br><span class="line">    nums.sort!</span><br><span class="line">    closest_sum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    (<span class="number">0</span>..nums.size-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        left = i + <span class="number">1</span></span><br><span class="line">        right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right</span><br><span class="line">            current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> (target - current_sum).abs &lt; (target - closest_sum).abs</span><br><span class="line">                closest_sum = current_sum</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> current_sum &lt; target</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elsif</span> current_sum &gt; target</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> current_sum</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    closest_sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 344 ms, 击败 50.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.89 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sorted = nums.sorted</span><br><span class="line">    <span class="keyword">var</span> closestSum = sorted(<span class="number">0</span>) + sorted(<span class="number">1</span>) + sorted(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sorted.length - <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> right = sorted.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentSum = sorted(i) + sorted(left) + sorted(right)</span><br><span class="line">        <span class="keyword">if</span> (math.abs(target - currentSum) &lt; math.abs(target - closestSum)) &#123;</span><br><span class="line">          closestSum = currentSum</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">          left += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">          right -= <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> currentSum</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closestSum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 -% 使用 Scala 的用户</p><p>内存消耗 : 54.30 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">three_sum_closest</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted</span> = nums;</span><br><span class="line">        sorted.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">closest_sum</span> = sorted[<span class="number">0</span>] + sorted[<span class="number">1</span>] + sorted[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..sorted.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = sorted.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_sum</span> = sorted[i] + sorted[left] + sorted[right];</span><br><span class="line">                <span class="keyword">if</span> (target - current_sum).<span class="title function_ invoke__">abs</span>() &lt; (target - closest_sum).<span class="title function_ invoke__">abs</span>() &#123;</span><br><span class="line">                    closest_sum = current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target &#123;</span><br><span class="line">                    left += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> current_sum &gt; target &#123;</span><br><span class="line">                    right -= <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closest_sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 86.75% 使用 Rust 的用户</p><p>内存消耗 : 2.05 MB, 击败 51.81% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;最接近的三数之和、数组、双指针、排序、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00015.三数之和</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/4b7ce86b9306/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/4b7ce86b9306/</id>
    <published>2019-12-11T03:15:00.000Z</published>
    <updated>2019-12-11T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>解释：<br>nums[0] + nums[1] + nums[2] &#x3D; (-1) + 0 + 1 &#x3D; 0 。<br>nums[1] + nums[2] + nums[4] &#x3D; 0 + 1 + (-1) &#x3D; 0 。<br>nums[0] + nums[3] + nums[4] &#x3D; (-1) + 2 + (-1) &#x3D; 0 。<br>不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。<br>注意，输出的顺序和三元组的顺序并不重要。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [0,1,1]<br>输出：[]<br>解释：唯一可能的三元组和不为 0 。</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：nums &#x3D; [0,0,0]<br>输出：[[0,0,0]]<br>解释：唯一可能的三元组和为 0 。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$3 &lt;&#x3D; nums.length &lt;&#x3D; 3000$</li><li>$-10^5 &lt;&#x3D; nums[i] &lt;&#x3D; 10^5$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> total = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 58.25% 使用 C++ 的用户</p><p>内存消耗 : 23.80 MB, 击败 64.63% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 59.30% 使用 Java 的用户</p><p>内存消耗 : 49.95 MB, 击败 50.66% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums</span>):</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left, right = i + <span class="number">1</span>, length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                total = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> total &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> total &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 716 ms, 击败 71.67% 使用 Python 的用户</p><p>内存消耗 : 18.73 MB, 击败 63.92% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left, right = i + <span class="number">1</span>, length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                total = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> total &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> total &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 612 ms, 击败 92.99% 使用 Python3 的用户</p><p>内存消耗 : 20.02 MB, 击败 15.62% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* pa, <span class="type">const</span> <span class="type">void</span>* pb)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">int</span>*)pa;</span><br><span class="line">    <span class="type">int</span> b = *(<span class="type">int</span>*)pb;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span>&#123;</span><br><span class="line">    <span class="type">int</span> initialSize = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * initialSize);</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * initialSize);</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right = numsSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">3</span>);</span><br><span class="line">                (*returnColumnSizes)[*returnSize] = <span class="number">3</span>;</span><br><span class="line">                result[*returnSize][<span class="number">0</span>] = nums[i];</span><br><span class="line">                result[*returnSize][<span class="number">1</span>] = nums[left];</span><br><span class="line">                result[*returnSize][<span class="number">2</span>] = nums[right];</span><br><span class="line">                (*returnSize)++;</span><br><span class="line">                <span class="keyword">if</span> (*returnSize == initialSize) &#123;</span><br><span class="line">                    initialSize *= <span class="number">2</span>;</span><br><span class="line">                    result = (<span class="type">int</span>**)<span class="built_in">realloc</span>(result, <span class="keyword">sizeof</span>(<span class="type">int</span>*) * initialSize);</span><br><span class="line">                    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">realloc</span>(*returnColumnSizes, <span class="keyword">sizeof</span>(<span class="type">int</span>) * initialSize);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                    left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                    right--;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 276 ms, 击败 16.27% 使用 C 的用户</p><p>内存消耗 : 31.54 MB, 击败 68.67% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; ThreeSum(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        <span class="built_in">int</span> length = nums.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="built_in">int</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="built_in">int</span> sum = nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[left], nums[right] &#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 86.80% 使用 C# 的用户</p><p>内存消耗 : 73.13 MB, 击败 5.19% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> length = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] !== nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">let</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 152 ms, 击败 77.73% 使用 JavaScript 的用户</p><p>内存消耗 : 63.00 MB, 击败 6.25% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSum</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> length = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] !== nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">let</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 172 ms, 击败 45.17% 使用 TypeScript 的用户</p><p>内存消耗 : 63.81 MB, 击败 10.84% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSum</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">0</span> || (<span class="variable">$i</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$target</span> = -<span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                    <span class="variable">$sum</span> = <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$sum</span> === <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$result</span>[] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$left</span>], <span class="variable">$nums</span>[<span class="variable">$right</span>]];</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$left</span>] === <span class="variable">$nums</span>[<span class="variable">$left</span> + <span class="number">1</span>]) <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$right</span>] === <span class="variable">$nums</span>[<span class="variable">$right</span> - <span class="number">1</span>]) <span class="variable">$right</span>--;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="variable">$sum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 236 ms, 击败 72.28% 使用 PHP 的用户</p><p>内存消耗 : 26.17 MB, 击败 94.06% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">threeSum</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">let</span> length <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">let</span> sortedNums <span class="operator">=</span> nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>length <span class="operator">-</span> <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> (i <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> sortedNums[i] <span class="operator">!=</span> sortedNums[i <span class="operator">-</span> <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right <span class="operator">=</span> length <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">let</span> target <span class="operator">=</span> <span class="operator">-</span>sortedNums[i]</span><br><span class="line">                <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">                    <span class="keyword">let</span> sum <span class="operator">=</span> sortedNums[left] <span class="operator">+</span> sortedNums[right]</span><br><span class="line">                    <span class="keyword">if</span> sum <span class="operator">==</span> target &#123;</span><br><span class="line">                        result.append([sortedNums[i], sortedNums[left], sortedNums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[left] <span class="operator">==</span> sortedNums[left <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">                            left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[right] <span class="operator">==</span> sortedNums[right <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                            right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                        right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                        left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 184 ms, 击败 37.55% 使用 Swift 的用户</p><p>内存消耗 : 19.67 MB, 击败 9.30% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">threeSum</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result: MutableList&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; = mutableListOf()</span><br><span class="line">        <span class="keyword">val</span> length = nums.size</span><br><span class="line">        <span class="keyword">val</span> sortedNums = nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until length - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; sortedNums[i] != sortedNums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">val</span> target = -sortedNums[i]</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="keyword">val</span> sum = sortedNums[left] + sortedNums[right]</span><br><span class="line">                    <span class="keyword">when</span> &#123;</span><br><span class="line">                        sum == target -&gt; &#123;</span><br><span class="line">                            result.add(listOf(sortedNums[i], sortedNums[left], sortedNums[right]))</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[left] == sortedNums[left + <span class="number">1</span>]) left++</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[right] == sortedNums[right - <span class="number">1</span>]) right--</span><br><span class="line">                            left++</span><br><span class="line">                            right--</span><br><span class="line">                        &#125;</span><br><span class="line">                        sum &lt; target -&gt; left++</span><br><span class="line">                        <span class="keyword">else</span> -&gt; right--</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 528 ms, 击败 42.86% 使用 Kotlin 的用户</p><p>内存消耗 : 54.28 MB, 击败 45.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; threeSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="built_in">int</span> left = i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="built_in">int</span> sum = nums[left] + nums[right];</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result.add([nums[i], nums[left], nums[right]]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 396 ms, 击败 58.33% 使用 Dart 的用户</p><p>内存消耗 : 157.53 MB, 击败 75.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    length := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length<span class="number">-2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            left, right := i+<span class="number">1</span>, length<span class="number">-1</span></span><br><span class="line">            target := -nums[i]</span><br><span class="line">            <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">                sum := nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                    result = <span class="built_in">append</span>(result, []<span class="type">int</span>&#123;nums[i], nums[left], nums[right]&#125;)</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>] &#123;</span><br><span class="line">                        left++</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>] &#123;</span><br><span class="line">                        right--</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 90.27% 使用 Go 的用户</p><p>内存消耗 : 8.68 MB, 击败 35.24% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three_sum</span>(<span class="params">nums</span>)</span><br><span class="line">    nums.sort!</span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">0</span>..nums.length - <span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> |<span class="params"></span>| (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = nums.length - <span class="number">1</span></span><br><span class="line">            target = -nums[i]</span><br><span class="line">            <span class="keyword">while</span> left &lt; right</span><br><span class="line">                sum = nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target</span><br><span class="line">                    result &lt;&lt; [nums[i], nums[left], nums[right]]</span><br><span class="line">                    left += <span class="number">1</span> <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]</span><br><span class="line">                    right -= <span class="number">1</span> <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elsif</span> sum &lt; target</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 620 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 211.62 MB, 击败 16.67% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> sortedNums = nums.sorted</span><br><span class="line">    <span class="keyword">val</span> result = scala.collection.mutable.<span class="type">ListBuffer</span>[<span class="type">List</span>[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sortedNums.length - <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; sortedNums(i) != sortedNums(i - <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> right = sortedNums.length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> target = -sortedNums(i)</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="keyword">val</span> sum = sortedNums(left) + sortedNums(right)</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result += <span class="type">List</span>(sortedNums(i), sortedNums(left), sortedNums(right))</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(left) == sortedNums(left + <span class="number">1</span>)) left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(right) == sortedNums(right - <span class="number">1</span>)) right -= <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 748 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 66.24 MB, 击败 85.71% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">three_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">nums</span> = nums;</span><br><span class="line">        nums.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">target</span> = -nums[i];</span><br><span class="line">                <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">sum</span> = nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                        result.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[nums[i], nums[left], nums[right]]);</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>] &#123;</span><br><span class="line">                            left += <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>] &#123;</span><br><span class="line">                            right -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 85.36% 使用 Rust 的用户</p><p>内存消耗 : 3.91 MB, 击败 67.78% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;三数之和、数组、双指针、排序、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00014.最长公共前缀</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/c4e0d9c6f0ec/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/c4e0d9c6f0ec/</id>
    <published>2019-12-10T03:15:00.000Z</published>
    <updated>2019-12-10T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：strs &#x3D; [“flower”,”flow”,”flight”]<br>输出：”fl”</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：strs &#x3D; [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 200</li><li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200</li><li>strs[i] 仅由小写英文字母组成</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].<span class="built_in">find</span>(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.<span class="built_in">substr</span>(<span class="number">0</span>, prefix.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 74.94% 使用 C++ 的用户</p><p>内存消耗 : 9.45 MB, 击败 36.89% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 40.09 MB, 击败 23.36% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> string <span class="keyword">in</span> strs[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">while</span> string.find(prefix) != <span class="number">0</span>:</span><br><span class="line">                prefix = prefix[:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> prefix:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 86.01% 使用 Python 的用户</p><p>内存消耗 : 13.26 MB, 击败 17.29% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        prefix = <span class="string">&quot;&quot;</span></span><br><span class="line">        min_length = <span class="built_in">min</span>(<span class="built_in">len</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> strs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_length):</span><br><span class="line">            char = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(s[i] == char <span class="keyword">for</span> s <span class="keyword">in</span> strs):</span><br><span class="line">                prefix += char</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 64.70% 使用 Python3 的用户</p><p>内存消耗 : 17.16 MB, 击败 5.01% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">longestCommonPrefix</span><span class="params">(<span class="type">char</span>** strs, <span class="type">int</span> strsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(strs[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; strsSize; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[j][i] != strs[<span class="number">0</span>][i] || strs[j][i] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (i + <span class="number">1</span>));</span><br><span class="line">                <span class="built_in">strncpy</span>(result, strs[<span class="number">0</span>], i);</span><br><span class="line">                result[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(result, strs[<span class="number">0</span>], i);</span><br><span class="line">    result[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 53.70% 使用 C 的用户</p><p>内存消耗 : 6.52 MB, 击败 47.21% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">LongestCommonPrefix</span>(<span class="params"><span class="built_in">string</span>[] strs</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; strs.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].IndexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.Substring(<span class="number">0</span>, prefix.Length - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.Length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 90.59% 使用 C# 的用户</p><p>内存消耗 : 42.74 MB, 击败 5.02% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs === <span class="literal">null</span> || strs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].<span class="title function_">indexOf</span>(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">            prefix = prefix.<span class="title function_">substring</span>(<span class="number">0</span>, prefix.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (prefix.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 55.60% 使用 JavaScript 的用户</p><p>内存消耗 : 47.75 MB, 击败 12.44% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">strs: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs === <span class="literal">null</span> || strs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">prefix</span>: <span class="built_in">string</span> = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].<span class="title function_">indexOf</span>(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">            prefix = prefix.<span class="title function_">substring</span>(<span class="number">0</span>, prefix.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (prefix.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 97.39% 使用 TypeScript 的用户</p><p>内存消耗 : 50.28 MB, 击败 8.64% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[] $strs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longestCommonPrefix</span>(<span class="params"><span class="variable">$strs</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$strs</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$prefix</span> = <span class="variable">$strs</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$strs</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$strs</span>[<span class="variable">$i</span>], <span class="variable">$prefix</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$prefix</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$prefix</span>, <span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$prefix</span>) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$prefix</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$prefix</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 77.67% 使用 PHP 的用户</p><p>内存消耗 : 19.42 MB, 击败 5.82% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">longestCommonPrefix</span>(<span class="keyword">_</span> <span class="params">strs</span>: [<span class="type">String</span>]) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>strs.isEmpty <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>strs.count &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="operator">!</span>strs[i].hasPrefix(<span class="keyword">prefix</span>) &#123;</span><br><span class="line">                <span class="keyword">prefix</span> <span class="operator">=</span> <span class="type">String</span>(<span class="keyword">prefix</span>.dropLast())</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">prefix</span>.isEmpty &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">prefix</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 93.33% 使用 Swift 的用户</p><p>内存消耗 : 15.48 MB, 击败 14.08% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">longestCommonPrefix</span><span class="params">(strs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until strs.size) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">                prefix = prefix.dropLast(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 51.52% 使用 Kotlin 的用户</p><p>内存消耗 : 36.44 MB, 击败 40.40% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> longestCommonPrefix(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">        prefix = prefix.substring(<span class="number">0</span>, prefix.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (prefix.isEmpty) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 284 ms, 击败 0.00% 使用 Dart 的用户</p><p>内存消耗 : 146.90 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    prefix := strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(strs); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> !strings.HasPrefix(strs[i], prefix) &#123;</span><br><span class="line">            prefix = prefix[:<span class="built_in">len</span>(prefix)<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> prefix == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 19.36% 使用 Go 的用户</p><p>内存消耗 : 2.21 MB, 击败 36.25% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> strs.empty?</span><br><span class="line">  prefix = strs[<span class="number">0</span>]</span><br><span class="line">  (<span class="number">1</span>...strs.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">while</span> strs[i].index(prefix) != <span class="number">0</span></span><br><span class="line">      prefix = prefix.chop</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> prefix.empty?</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  prefix</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.80 MB, 击败 10.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span></span>(strs: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prefix = strs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until strs.length) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!strs(i).startsWith(prefix)) &#123;</span><br><span class="line">        prefix = prefix.dropRight(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (prefix.isEmpty) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    prefix</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 488 ms, 击败 73.33% 使用 Scala 的用户</p><p>内存消耗 : 54.09 MB, 击败 86.67% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">longest_common_prefix</span>(strs: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> strs.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prefix</span> = strs[<span class="number">0</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..strs.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">while</span> !strs[i].<span class="title function_ invoke__">starts_with</span>(&amp;prefix) &#123;</span><br><span class="line">                prefix.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> prefix.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prefix</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.12 MB, 击败 35.11% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;最长公共前缀、字典树、字符串、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00013.罗马数字转整数</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/be8e4fe47411/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/be8e4fe47411/</id>
    <published>2019-12-09T03:15:00.000Z</published>
    <updated>2019-12-09T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><table><thead><tr><th align="center">字符</th><th align="center">数值</th></tr></thead><tbody><tr><td align="center">I</td><td align="center">1</td></tr><tr><td align="center">V</td><td align="center">5</td></tr><tr><td align="center">X</td><td align="center">10</td></tr><tr><td align="center">L</td><td align="center">50</td></tr><tr><td align="center">C</td><td align="center">100</td></tr><tr><td align="center">D</td><td align="center">500</td></tr><tr><td align="center">M</td><td align="center">1000</td></tr></tbody></table><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: s &#x3D; “III”<br>输出: 3</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: s &#x3D; “IV”<br>输出: 4</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h2><blockquote><p>输入: s &#x3D; “IX”<br>输出: 9</p></blockquote><h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h2><blockquote><p>输入: s &#x3D; “LVIII”<br>输出: 58<br>解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</p></blockquote><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h2><blockquote><p>输入: s &#x3D; “MCMXCIV”<br>输出: 1994<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; roman_values = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;, &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;, &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;, &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="built_in">length</span>() &amp;&amp; roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += roman_values[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 63.8% 使用 C++ 的用户</p><p>内存消耗 : 8.18 MB, 击败 62.73% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; romanValues = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        romanValues.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; romanValues.get(s.charAt(i)) &lt; romanValues.get(s.charAt(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                total += romanValues.get(s.charAt(i + <span class="number">1</span>)) - romanValues.get(s.charAt(i));</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues.get(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 18.77% 使用 Java 的用户</p><p>内存消耗 : 43.35 MB, 击败 17.83% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s</span>):</span><br><span class="line">        roman_values = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += roman_values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 91.49% 使用 Python 的用户</p><p>内存消耗 : 12.98 MB, 击败 60.24% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        roman_values = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += roman_values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 60.20% 使用 Python3 的用户</p><p>内存消耗 : 17.10 MB, 击败 5.04% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">value</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> current = value(s[i]);</span><br><span class="line">        <span class="type">int</span> next = value(s[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (current &lt; next) &#123;</span><br><span class="line">            result += (next - current);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 58.83% 使用 C 的用户</p><p>内存消耗 : 6.36 MB, 击败 87.77% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RomanToInt</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt; romanValues = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt;() &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;, &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;, &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;, &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.Length &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 85.78% 使用 C# 的用户</p><p>内存消耗 : 47.64 MB, 击败 18.79% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> romanValues = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="property">length</span> &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">            total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 116 ms, 击败 63.20% 使用 JavaScript 的用户</p><p>内存消耗 : 53.13 MB, 击败 7.86% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">romanToInt</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">romanValues</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="property">length</span> &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">            total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 44.44% 使用 TypeScript 的用户</p><p>内存消耗 : 53.39 MB, 击败 11.57% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">romanToInt</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$romanValues</span> = [</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> =&gt; <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> =&gt; <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> =&gt; <span class="number">1000</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> + <span class="number">1</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) &amp;&amp; <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]] &lt; <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span> + <span class="number">1</span>]]) &#123;</span><br><span class="line">                <span class="variable">$total</span> += <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span> + <span class="number">1</span>]] - <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]];</span><br><span class="line">                <span class="variable">$i</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$total</span> += <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 72.29% 使用 PHP 的用户</p><p>内存消耗 : 19.67 MB, 击败 6.03% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">romanToInt</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> romanValues: [<span class="type">Character</span>: <span class="type">Int</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;I&quot;</span>: <span class="number">1</span>, <span class="string">&quot;V&quot;</span>: <span class="number">5</span>, <span class="string">&quot;X&quot;</span>: <span class="number">10</span>, <span class="string">&quot;L&quot;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="number">100</span>, <span class="string">&quot;D&quot;</span>: <span class="number">500</span>, <span class="string">&quot;M&quot;</span>: <span class="number">1000</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> s.startIndex</span><br><span class="line">        <span class="keyword">while</span> i <span class="operator">&lt;</span> s.endIndex &#123;</span><br><span class="line">            <span class="keyword">let</span> current <span class="operator">=</span> s[i]</span><br><span class="line">            <span class="keyword">let</span> nextIndex <span class="operator">=</span> s.index(after: i)</span><br><span class="line">            <span class="keyword">if</span> nextIndex <span class="operator">&lt;</span> s.endIndex &#123;</span><br><span class="line">                <span class="keyword">let</span> next <span class="operator">=</span> s[nextIndex]</span><br><span class="line">                <span class="keyword">if</span> romanValues[current]<span class="operator">!</span> <span class="operator">&lt;</span> romanValues[next]<span class="operator">!</span> &#123;</span><br><span class="line">                    total <span class="operator">+=</span> romanValues[next]<span class="operator">!</span> <span class="operator">-</span> romanValues[current]<span class="operator">!</span></span><br><span class="line">                    i <span class="operator">=</span> s.index(after: nextIndex)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            total <span class="operator">+=</span> romanValues[current]<span class="operator">!</span></span><br><span class="line">            i <span class="operator">=</span> s.index(after: i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 32.26% 使用 Swift 的用户</p><p>内存消耗 : 15.66 MB, 击败 6.45% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">romanToInt</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> romanValues = hashMapOf(</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span> to <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> to <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> to <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> to <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span> to <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> to <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> to <span class="number">1000</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp; romanValues[s[i]]!! &lt; romanValues[s[i + <span class="number">1</span>]]!!) &#123;</span><br><span class="line">                total += romanValues[s[i + <span class="number">1</span>]]!! - romanValues[s[i]]!!</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues[s[i]]!!</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 40.00% 使用 Kotlin 的用户</p><p>内存消耗 : 36.78 MB, 击败 40.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> romanToInt(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; romanValues = &#123;</span><br><span class="line">      <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp;</span><br><span class="line">          romanValues[s[i]]! &lt; romanValues[s[i + <span class="number">1</span>]]!) &#123;</span><br><span class="line">        total += romanValues[s[i + <span class="number">1</span>]]! - romanValues[s[i]]!;</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        total += romanValues[s[i]]!;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 380 ms, 击败 20.00% 使用 Dart 的用户</p><p>内存消耗 : 148.83 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    romanValues := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">            total += romanValues[s[i+<span class="number">1</span>]] - romanValues[s[i]]</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 52.05% 使用 Go 的用户</p><p>内存消耗 : 2.64 MB, 击败 78.89% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roman_to_int</span>(<span class="params">s</span>)</span><br><span class="line">    roman_values = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> =&gt; <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> =&gt; <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> =&gt; <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; s.length</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; s.length &amp;&amp; roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]</span><br><span class="line">            total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            total += roman_values[s[i]]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.81 MB, 击败 16.67% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> romanValues = <span class="type">Map</span>(</span><br><span class="line">      &#x27;<span class="type">I</span>&#x27; -&gt; <span class="number">1</span>, &#x27;<span class="type">V</span>&#x27; -&gt; <span class="number">5</span>, &#x27;<span class="type">X</span>&#x27; -&gt; <span class="number">10</span>, &#x27;<span class="type">L</span>&#x27; -&gt; <span class="number">50</span>,</span><br><span class="line">      &#x27;<span class="type">C</span>&#x27; -&gt; <span class="number">100</span>, &#x27;<span class="type">D</span>&#x27; -&gt; <span class="number">500</span>, &#x27;<span class="type">M</span>&#x27; -&gt; <span class="number">1000</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp; romanValues(s(i)) &lt; romanValues(s(i + <span class="number">1</span>))) &#123;</span><br><span class="line">        total += romanValues(s(i + <span class="number">1</span>)) - romanValues(s(i))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        total += romanValues(s(i))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    total</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 540 ms, 击败 87.50% 使用 Scala 的用户</p><p>内存消耗 : 54.98 MB, 击败 62.50% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">roman_to_int</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">roman_values</span>: HashMap&lt;<span class="type">char</span>, <span class="type">i32</span>&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prev</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">curr</span> = roman_values[&amp;c];</span><br><span class="line">            total += curr;</span><br><span class="line">            <span class="keyword">if</span> curr &gt; prev &#123;</span><br><span class="line">                total -= <span class="number">2</span> * prev;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.20 MB, 击败 17.91% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">roman-to-int</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> roman-values</span><br><span class="line">    &#x27;((<span class="literal">#\I</span> . <span class="number">1</span>) (<span class="literal">#\V</span> . <span class="number">5</span>) (<span class="literal">#\X</span> . <span class="number">10</span>) (<span class="literal">#\L</span> . <span class="number">50</span>)</span><br><span class="line">      (<span class="literal">#\C</span> . <span class="number">100</span>) (<span class="literal">#\D</span> . <span class="number">500</span>) (<span class="literal">#\M</span> . <span class="number">1000</span>)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">get-value</span> c)</span><br><span class="line">    (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">assoc</span></span> c roman-values)))</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">chars</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> s))</span><br><span class="line">             (<span class="name">result</span> <span class="number">0</span>))</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">null?</span></span> chars) result)</span><br><span class="line">      ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">length</span></span> chars) <span class="number">1</span>) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">get-value</span> (<span class="name"><span class="built_in">car</span></span> chars))))</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">current</span> (<span class="name">get-value</span> (<span class="name"><span class="built_in">car</span></span> chars)))</span><br><span class="line">             (<span class="name">next</span> (<span class="name">get-value</span> (<span class="name"><span class="built_in">cadr</span></span> chars))))</span><br><span class="line">         (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> current next)</span><br><span class="line">             (<span class="name">loop</span> (<span class="name">cddr</span> chars) (<span class="name"><span class="built_in">+</span></span> result (<span class="name"><span class="built_in">-</span></span> next current)))</span><br><span class="line">             (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> chars) (<span class="name"><span class="built_in">+</span></span> result current))))))))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 97.95 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;罗马数字转整数、哈希表、数学、字符串、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00012.整数转罗马数字</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/e49d6be7f97c/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/e49d6be7f97c/</id>
    <published>2019-12-06T03:15:00.000Z</published>
    <updated>2019-12-06T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><table><thead><tr><th align="center">字符</th><th align="center">数值</th></tr></thead><tbody><tr><td align="center">I</td><td align="center">1</td></tr><tr><td align="center">V</td><td align="center">5</td></tr><tr><td align="center">X</td><td align="center">10</td></tr><tr><td align="center">L</td><td align="center">50</td></tr><tr><td align="center">C</td><td align="center">100</td></tr><tr><td align="center">D</td><td align="center">500</td></tr><tr><td align="center">M</td><td align="center">1000</td></tr></tbody></table><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: num &#x3D; 3<br>输出: “III”</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: num &#x3D; 4<br>输出: “IV”</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入: num &#x3D; 9<br>输出: “IX”</p></blockquote><h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote><p>输入: num &#x3D; 58<br>输出: “LVIII”<br>解释: L &#x3D; 50, V &#x3D; 5, III &#x3D; 3.</p></blockquote><h2 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h2><blockquote><p>输入: num &#x3D; 1994<br>输出: “MCMXCIV”<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><p>1 &lt;&#x3D; num &lt;&#x3D; 3999</p><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val[] = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        string syms[] = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        string romanNum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                romanNum += syms[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 85.27% 使用 C++ 的用户</p><p>内存消耗 : 6.16 MB, 击败 84.14% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] val = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        String[] syms = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">romanNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                romanNum.append(syms[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 98.23% 使用 Java 的用户</p><p>内存消耗 : 43.08 MB, 击败 12.68% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intToRoman</span>(<span class="params">self, num</span>):</span><br><span class="line">        val = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        syms = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num // val[i]):</span><br><span class="line">                roman_num += syms[i]</span><br><span class="line">                num -= val[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> roman_num</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 34.85% 使用 Python 的用户</p><p>内存消耗 : 13.04 MB, 击败 32.88% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        val = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        syms = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num // val[i]):</span><br><span class="line">                roman_num += syms[i]</span><br><span class="line">                num -= val[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> roman_num</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 5.82% 使用 Python3 的用户</p><p>内存消耗 : 16.88 MB, 击败 10.91% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> values[] = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* symbols[] = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    result[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(result, symbols[i]);</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 85.58% 使用 C 的用户</p><p>内存消耗 : 6.68 MB, 击败 25.77% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">IntToRoman</span>(<span class="params"><span class="built_in">int</span> num</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] values = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span>[] symbols = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        StringBuilder romanNum = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">                romanNum.Append(symbols[i]);</span><br><span class="line">                num -= values[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 95.39% 使用 C# 的用户</p><p>内存消耗 : 44.50 MB, 击败 27.31% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intToRoman = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> romanNum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            romanNum += symbols[i];</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 48.51% 使用 JavaScript 的用户</p><p>内存消耗 : 52.22 MB, 击败 6.03% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">intToRoman</span>(<span class="params">num: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">values</span>: <span class="built_in">number</span>[] = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">symbols</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">romanNum</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            romanNum += symbols[i];</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 52.74% 使用 TypeScript 的用户</p><p>内存消耗 : 53.53 MB, 击败 5.47% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">intToRoman</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$values</span> = <span class="keyword">array</span>(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$symbols</span> = <span class="keyword">array</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">        <span class="variable">$romanNum</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">13</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$num</span> &gt;= <span class="variable">$values</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="variable">$romanNum</span> .= <span class="variable">$symbols</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="variable">$num</span> -= <span class="variable">$values</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$romanNum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 25.00% 使用 PHP 的用户</p><p>内存消耗 : 19.44 MB, 击败 6.25% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">intToRoman</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> values <span class="operator">=</span> [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> symbols <span class="operator">=</span> [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        <span class="keyword">var</span> romanNum <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> number <span class="operator">=</span> num</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> number <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> number <span class="operator">&gt;=</span> values[i] &#123;</span><br><span class="line">                romanNum <span class="operator">+=</span> symbols[i]</span><br><span class="line">                number <span class="operator">-=</span> values[i]</span><br><span class="line">            &#125;</span><br><span class="line">            i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 87.88% 使用 Swift 的用户</p><p>内存消耗 : 14.98 MB, 击败 6.06% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">intToRoman</span><span class="params">(num: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> values = listOf(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> symbols = listOf(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> romanNum = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> number = num</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &gt;= values[i]) &#123;</span><br><span class="line">                romanNum += symbols[i]</span><br><span class="line">                number -= values[i]</span><br><span class="line">            &#125;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 212 ms, 击败 55.56% 使用 Kotlin 的用户</p><p>内存消耗 : 38.36 MB, 击败 27.78% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> intToRoman(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="built_in">String</span> romanNum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">num</span> &gt;= values[i]) &#123;</span><br><span class="line">        romanNum += symbols[i];</span><br><span class="line">        <span class="built_in">num</span> -= values[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 149.71 MB, 击败 50.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    values := []<span class="type">int</span>&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;</span><br><span class="line">    symbols := []<span class="type">string</span>&#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> romanNum strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">13</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> num &gt;= values[i] &#123;</span><br><span class="line">            romanNum.WriteString(symbols[i])</span><br><span class="line">            num -= values[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 88.52% 使用 Go 的用户</p><p>内存消耗 : 2.93 MB, 击败 89.29% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_roman</span>(<span class="params">num</span>)</span><br><span class="line">    values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">    roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    (<span class="number">0</span>...<span class="number">13</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">while</span> num &gt;= values[i]</span><br><span class="line">            roman_num += symbols[i]</span><br><span class="line">            num -= values[i]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    roman_num</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 50.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.59 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span></span>(num: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> values = <span class="type">List</span>(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> symbols = <span class="type">List</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> romanNum = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> number = num</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (number &gt;= values(i)) &#123;</span><br><span class="line">        romanNum += symbols(i)</span><br><span class="line">        number -= values(i)</span><br><span class="line">      &#125;</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    romanNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 500 ms, 击败 66.67% 使用 Scala 的用户</p><p>内存消耗 : 53.13 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">int_to_roman</span>(num: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">values</span> = <span class="built_in">vec!</span>[<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">symbols</span> = <span class="built_in">vec!</span>[<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">roman_num</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = num;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">13</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> number &gt;= values[i] &#123;</span><br><span class="line">                roman_num += symbols[i];</span><br><span class="line">                number -= values[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        roman_num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 63.10% 使用 Rust 的用户</p><p>内存消耗 : 2.11 MB, 击败 25.00% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">int-to-roman</span> num)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> values &#x27;(<span class="number">1000</span> <span class="number">900</span> <span class="number">500</span> <span class="number">400</span> <span class="number">100</span> <span class="number">90</span> <span class="number">50</span> <span class="number">40</span> <span class="number">10</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> symbols &#x27;(<span class="string">&quot;M&quot;</span> <span class="string">&quot;CM&quot;</span> <span class="string">&quot;D&quot;</span> <span class="string">&quot;CD&quot;</span> <span class="string">&quot;C&quot;</span> <span class="string">&quot;XC&quot;</span> <span class="string">&quot;L&quot;</span> <span class="string">&quot;XL&quot;</span> <span class="string">&quot;X&quot;</span> <span class="string">&quot;IX&quot;</span> <span class="string">&quot;V&quot;</span> <span class="string">&quot;IV&quot;</span> <span class="string">&quot;I&quot;</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">convert</span> num values symbols)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">num</span> num) (<span class="name"><span class="built_in">values</span></span> values) (<span class="name">symbols</span> symbols) (<span class="name">result</span> &#x27;()))</span><br><span class="line">      (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> num <span class="number">0</span>) (<span class="name"><span class="built_in">apply</span></span> string-append (<span class="name"><span class="built_in">reverse</span></span> result)))</span><br><span class="line">        ((<span class="name"><span class="built_in">&gt;=</span></span> num (<span class="name"><span class="built_in">car</span></span> values))</span><br><span class="line">         (<span class="name">loop</span> (<span class="name"><span class="built_in">-</span></span> num (<span class="name"><span class="built_in">car</span></span> values)) values symbols (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> symbols) result)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">loop</span> num (<span class="name"><span class="built_in">cdr</span></span> values) (<span class="name"><span class="built_in">cdr</span></span> symbols) result)))))</span><br><span class="line">  (<span class="name">convert</span> num values symbols))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 240 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 99.15 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> int_to_roman(num :: integer) :: <span class="title class_">String</span>.t</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">int_to_roman</span></span>(num) <span class="keyword">do</span></span><br><span class="line">    values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">    int_to_roman(num, values, symbols, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(_, [], _, acc), <span class="symbol">do:</span> acc</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(num, [value | rest_values], [symbol | rest_symbols], acc) <span class="keyword">when</span> num &gt;= value <span class="keyword">do</span></span><br><span class="line">    int_to_roman(num - value, [value | rest_values], [symbol | rest_symbols], acc &lt;&gt; symbol)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(num, [_ | rest_values], [_ | rest_symbols], acc) <span class="keyword">do</span></span><br><span class="line">    int_to_roman(num, rest_values, rest_symbols, acc)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 556 ms, 击败 100.00% 使用 Elixir 的用户</p><p>内存消耗 : 68.21 MB, 击败 100.00% 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;整数转罗马数字、哈希表、数学、字符串、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00011.盛最多水的容器</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/f2f10b444bb2/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/f2f10b444bb2/</id>
    <published>2019-12-05T03:15:00.000Z</published>
    <updated>2019-12-05T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>你不能倾斜容器。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/f2f10b444bb2/201912050001.jpg" class="" title="示例1"><blockquote><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：height &#x3D; [1,1]<br>输出：1</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$n &#x3D;&#x3D; height.length$</li><li>$2 &lt;&#x3D; n &lt;&#x3D; 10^5$</li><li>$0 &lt;&#x3D; height[i] &lt;&#x3D; 10^4$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max_area = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> current_area = std::<span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">            max_area = std::<span class="built_in">max</span>(max_area, current_area);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 73.27% 使用 C++ 的用户</p><p>内存消耗 : 58.09 MB, 击败 17.81% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentArea</span> <span class="operator">=</span> Math.min(height[left], height[right]) * (right - left);</span><br><span class="line">            maxArea = Math.max(maxArea, currentArea);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 60.64% 使用 Java 的用户</p><p>内存消耗 : 56.42 MB, 击败 5.85% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>):</span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            current_area = <span class="built_in">min</span>(height[left], height[right]) * (right - left)</span><br><span class="line">            max_area = <span class="built_in">max</span>(max_area, current_area)</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max_area</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 148 ms, 击败 13.12% 使用 Python 的用户</p><p>内存消耗 : 21.30 MB, 击败 5.26% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            current_area = <span class="built_in">min</span>(height[left], height[right]) * (right - left)</span><br><span class="line">            max_area = <span class="built_in">max</span>(max_area, current_area)</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max_area</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 72.12% 使用 Python3 的用户</p><p>内存消耗 : 27.78 MB, 击败 5.13% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> max_area = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = heightSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> current_area = (height[left] &lt; height[right]) ? height[left] * (right - left) : height[right] * (right - left);</span><br><span class="line">        max_area = (current_area &gt; max_area) ? current_area : max_area;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 42.07% 使用 C 的用户</p><p>内存消耗 : 12.04 MB, 击败 80.31% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxArea</span>(<span class="params"><span class="built_in">int</span>[] height</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> right = height.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="built_in">int</span> currentArea = Math.Min(height[left], height[right]) * (right - left);</span><br><span class="line">            maxArea = Math.Max(maxArea, currentArea);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 292 ms, 击败 5.03% 使用 C# 的用户</p><p>内存消耗 : 60.38 MB, 击败 6.09% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentArea = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">        maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea, currentArea);</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 86.66% 使用 JavaScript 的用户</p><p>内存消耗 : 55.49 MB, 击败 5.07% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxArea</span>(<span class="params">height: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxArea</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">right</span>: <span class="built_in">number</span> = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">currentArea</span>: <span class="built_in">number</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">        maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea, currentArea);</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 71.65% 使用 TypeScript 的用户</p><p>内存消耗 : 57.73 MB, 击败 5.08% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxArea</span>(<span class="params"><span class="variable">$height</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$maxArea</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$height</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$currentArea</span> = <span class="title function_ invoke__">min</span>(<span class="variable">$height</span>[<span class="variable">$left</span>], <span class="variable">$height</span>[<span class="variable">$right</span>]) * (<span class="variable">$right</span> - <span class="variable">$left</span>);</span><br><span class="line">            <span class="variable">$maxArea</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxArea</span>, <span class="variable">$currentArea</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &lt; <span class="variable">$height</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                <span class="variable">$left</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxArea</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 80.25% 使用 PHP 的用户</p><p>内存消耗 : 25.96 MB, 击败 96.30% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">maxArea</span>(<span class="keyword">_</span> <span class="params">height</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxArea <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> height.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> currentArea <span class="operator">=</span> <span class="built_in">min</span>(height[left], height[right]) <span class="operator">*</span> (right <span class="operator">-</span> left)</span><br><span class="line">            maxArea <span class="operator">=</span> <span class="built_in">max</span>(maxArea, currentArea)</span><br><span class="line">            <span class="keyword">if</span> height[left] <span class="operator">&lt;</span> height[right] &#123;</span><br><span class="line">                left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 628 ms, 击败 5.38% 使用 Swift 的用户</p><p>内存消耗 : 19.45 MB, 击败 5.38% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">maxArea</span><span class="params">(height: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxArea = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = height.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentArea = minOf(height[left], height[right]) * (right - left)</span><br><span class="line">            maxArea = maxOf(maxArea, currentArea)</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 400 ms, 击败 45.71% 使用 Kotlin 的用户</p><p>内存消耗 : 51.34 MB, 击败 68.57% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> maxArea(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; height) &#123;</span><br><span class="line">    <span class="built_in">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="built_in">int</span> currentArea = height[left] &lt; height[right]</span><br><span class="line">          ? height[left] * (right - left)</span><br><span class="line">          : height[right] * (right - left);</span><br><span class="line">      maxArea = currentArea &gt; maxArea ? currentArea : maxArea;</span><br><span class="line">      <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 332 ms, 击败 22.22% 使用 Dart 的用户</p><p>内存消耗 : 167.73 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    maxArea := <span class="number">0</span></span><br><span class="line">    left := <span class="number">0</span></span><br><span class="line">    right := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        currentArea := min(height[left], height[right]) * (right - left)</span><br><span class="line">        <span class="keyword">if</span> currentArea &gt; maxArea &#123;</span><br><span class="line">            maxArea = currentArea</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 20.43% 使用 Go 的用户</p><p>内存消耗 : 8.11 MB, 击败 48.25% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; height</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_area</span>(<span class="params">height</span>)</span><br><span class="line">  max_area = <span class="number">0</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = height.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right</span><br><span class="line">    current_area = [height[left], height[right]].min * (right - left)</span><br><span class="line">    max_area = [max_area, current_area].max</span><br><span class="line">    <span class="keyword">if</span> height[left] &lt; height[right]</span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  max_area</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 85.71% 使用 Ruby 的用户</p><p>内存消耗 : 213.06 MB, 击败 14.29% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span></span>(height: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> maxArea = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = height.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">val</span> currentArea = math.min(height(left), height(right)) * (right - left)</span><br><span class="line">      maxArea = math.max(maxArea, currentArea)</span><br><span class="line">      <span class="keyword">if</span> (height(left) &lt; height(right)) &#123;</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxArea</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 706 ms, 击败 28.57% 使用 Scala 的用户</p><p>内存消耗 : 75.38 MB, 击败 76.19% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">max_area</span>(height: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_area</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = height.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">current_area</span> = std::cmp::<span class="title function_ invoke__">min</span>(height[left], height[right]) * (right - left) <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            max_area = std::cmp::<span class="title function_ invoke__">max</span>(max_area, current_area);</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_area</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 98.87% 使用 Rust 的用户</p><p>内存消耗 : 3.07 MB, 击败 6.02% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;盛最多水的容器、贪心、数组、双指针、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
</feed>
