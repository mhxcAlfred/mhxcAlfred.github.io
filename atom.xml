<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡心小筑</title>
  
  <subtitle>随笔   |   札记</subtitle>
  <link href="https://blog.mhxcalfred.com/atom.xml" rel="self"/>
  
  <link href="https://blog.mhxcalfred.com/"/>
  <updated>2020-02-07T16:00:00.000Z</updated>
  <id>https://blog.mhxcalfred.com/</id>
  
  <author>
    <name>_mhxcAlfred</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020元宵节</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/dc473ddee730/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/dc473ddee730/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2020-02-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><style>  #biaoti {    text-align: center;    padding: 20px;    font-size: 48px;  }</style><div id="biaoti">  <p>元宵节快乐</p></div><div style="text-align:center;">  </div><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;日常、元宵节&lt;/center&gt;</summary>
    
    
    
    <category term="纪念日" scheme="https://blog.mhxcalfred.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
    <category term="日常" scheme="https://blog.mhxcalfred.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="元宵节" scheme="https://blog.mhxcalfred.com/tags/%E5%85%83%E5%AE%B5%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>2020除夕</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/5b25acec5562/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/5b25acec5562/</id>
    <published>2020-01-24T12:00:00.000Z</published>
    <updated>2020-01-24T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><style>  #biaoti {    text-align: center;    padding: 20px;    font-size: 48px;  }</style><div id="biaoti">  <p>除夕快乐</p></div><div style="text-align:center;">  <img src="/zh-CN/5b25acec5562/202001240001.png" class="" title="鼠年大吉"></div><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;日常、除夕&lt;/center&gt;</summary>
    
    
    
    <category term="纪念日" scheme="https://blog.mhxcalfred.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
    <category term="日常" scheme="https://blog.mhxcalfred.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="除夕" scheme="https://blog.mhxcalfred.com/tags/%E9%99%A4%E5%A4%95/"/>
    
  </entry>
  
  <entry>
    <title>力扣00045.跳跃游戏 II</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/115621fd06bf/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/115621fd06bf/</id>
    <published>2020-01-23T03:15:00.000Z</published>
    <updated>2020-01-23T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。</p><p>每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:</p><ul><li>0 &lt;&#x3D; j &lt;&#x3D; nums[i] </li><li>i + j &lt; n</li></ul><p>返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: nums &#x3D; [2,3,1,1,4]<br>输出: 2<br>解释: 跳到最后一个位置的最小跳跃数是 2。<br>    从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: nums &#x3D; [2,3,0,1,4]<br>输出: 2</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 1000</li><li>题目保证可以到达 nums[n-1]</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_reach = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            max_reach = std::<span class="built_in">max</span>(max_reach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = max_reach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 74.69% 使用 C++ 的用户</p><p>内存消耗 : 18.50 MB, 击败 14.62% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">steps</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxReach</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            maxReach = Math.max(maxReach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 99.09% 使用 Java 的用户</p><p>内存消耗 : 44.09 MB, 击败 17.59% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        max_reach = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            max_reach = <span class="built_in">max</span>(max_reach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                end = max_reach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> steps</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 97.05% 使用 Python 的用户</p><p>内存消耗 : 12.15 MB, 击败 94.93% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        max_reach = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            max_reach = <span class="built_in">max</span>(max_reach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                end = max_reach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> steps</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 73.77% 使用 Python3 的用户</p><p>内存消耗 : 17.19 MB, 击败 43.74% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max_reach = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        max_reach = max_reach &gt; i + nums[i] ? max_reach : i + nums[i];</span><br><span class="line">        <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">            end = max_reach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 43.78% 使用 C 的用户</p><p>内存消耗 : 6.32 MB, 击败 95.87% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Jump</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> maxReach = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            maxReach = Math.Max(maxReach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 85 ms, 击败 74.49% 使用 C# 的用户</p><p>内存消耗 : 44.60 MB, 击败 14.29% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxReach = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        maxReach = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxReach, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (i === end) &#123;</span><br><span class="line">            end = maxReach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 72.09% 使用 JavaScript 的用户</p><p>内存消耗 : 51.27 MB, 击败 5.23% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jump</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">steps</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxReach</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">end</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        maxReach = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxReach, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (i === end) &#123;</span><br><span class="line">            end = maxReach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 55 ms, 击败 98.51% 使用 TypeScript 的用户</p><p>内存消耗 : 52.32 MB, 击败 6.69% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$steps</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$maxReach</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$end</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span> - <span class="number">1</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$maxReach</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxReach</span>, <span class="variable">$i</span> + <span class="variable">$nums</span>[<span class="variable">$i</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="variable">$end</span>) &#123;</span><br><span class="line">                <span class="variable">$end</span> = <span class="variable">$maxReach</span>;</span><br><span class="line">                ++<span class="variable">$steps</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$steps</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 100.00% 使用 PHP 的用户</p><p>内存消耗 : 20.84 MB, 击败 24.00% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">jump</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> steps <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> maxReach <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> end <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n<span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">            maxReach <span class="operator">=</span> <span class="built_in">max</span>(maxReach, i <span class="operator">+</span> nums[i])</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">==</span> end &#123;</span><br><span class="line">                end <span class="operator">=</span> maxReach</span><br><span class="line">                steps <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 27 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 15.43 MB, 击败 29.41% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">jump</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = nums.size</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> steps = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> maxReach = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">            maxReach = maxOf(maxReach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 192 ms, 击败 97.10% 使用 Kotlin 的用户</p><p>内存消耗 : 38.05 MB, 击败 52.17% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> jump(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> maxReach = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      maxReach = nums[i] + i &gt; maxReach ? nums[i] + i : maxReach;</span><br><span class="line">      <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">        end = maxReach;</span><br><span class="line">        ++steps;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 288 ms, 击败 62.50% 使用 Dart 的用户</p><p>内存消耗 : 148.39 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    steps := <span class="number">0</span></span><br><span class="line">    maxReach := <span class="number">0</span></span><br><span class="line">    end := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        maxReach = max(maxReach, i+nums[i])</span><br><span class="line">        <span class="keyword">if</span> i == end &#123;</span><br><span class="line">            end = maxReach</span><br><span class="line">            steps++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 92.06% 使用 Go 的用户</p><p>内存消耗 : 5.89 MB, 击败 98.04% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">nums</span>)</span><br><span class="line">  n = nums.length</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  max_reach = <span class="number">0</span></span><br><span class="line">  end_pos = <span class="number">0</span></span><br><span class="line">  (<span class="number">0</span>..n-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    max_reach = [max_reach, i + nums[i]].max</span><br><span class="line">    <span class="keyword">if</span> i == end_pos</span><br><span class="line">      end_pos = max_reach</span><br><span class="line">      steps += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  steps</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 85.71% 使用 Ruby 的用户</p><p>内存消耗 : 207.21 MB, 击败 71.43% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">jump</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.length</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> steps = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> maxReach = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> endPos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">      maxReach = math.max(maxReach, i + nums(i))</span><br><span class="line">      <span class="keyword">if</span> (i == endPos) &#123;</span><br><span class="line">        endPos = maxReach</span><br><span class="line">        steps += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    steps</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 536 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 55.57 MB, 击败 30.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">jump</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = nums.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">steps</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_reach</span> = <span class="number">0usize</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">end</span> = <span class="number">0usize</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n - <span class="number">1</span> &#123;</span><br><span class="line">            max_reach = max_reach.<span class="title function_ invoke__">max</span>(i + nums[i] <span class="keyword">as</span> <span class="type">usize</span>);</span><br><span class="line">            <span class="keyword">if</span> i == end &#123;</span><br><span class="line">                end = max_reach;</span><br><span class="line">                steps += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.22 MB, 击败 33.64% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;跳跃游戏 II、贪心、数组、动态规划、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00044.通配符匹配</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/9d7677904820/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/9d7677904820/</id>
    <published>2020-01-22T03:15:00.000Z</published>
    <updated>2020-01-22T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个输入字符串 (s) 和一个字符模式 (p) ，请你实现一个支持 ‘?’ 和 ‘*’ 匹配规则的通配符匹配：</p><ul><li>‘?’ 可以匹配任何单个字符。</li><li>‘*’ 可以匹配任意字符序列（包括空字符序列）。<br>判定匹配成功的充要条件是：字符模式必须能够 完全匹配 输入字符串（而不是部分匹配）。</li></ul><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：s &#x3D; “aa”, p &#x3D; “a”<br>输出：false<br>解释：”a” 无法匹配 “aa” 整个字符串。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：s &#x3D; “aa”, p &#x3D; “<em>“<br>输出：true<br>解释：’</em>‘ 可以匹配任意字符串。</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：s &#x3D; “cb”, p &#x3D; “?a”<br>输出：false<br>解释：’?’ 可以匹配 ‘c’, 但第二个 ‘a’ 无法匹配 ‘b’。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>0 &lt;&#x3D; s.length, p.length &lt;&#x3D; 2000</li><li>s 仅由小写英文字母组成</li><li>p 仅由小写英文字母、’?’ 或 ‘*’ 组成</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n = p.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 58.85% 使用 C++ 的用户</p><p>内存消耗 : 15.31 MB, 击败 39.38% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 59.21% 使用 Java 的用户</p><p>内存消耗 : 43.70 MB, 击败 56.23% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] <span class="keyword">or</span> dp[i][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 544 ms, 击败 74.67% 使用 Python 的用户</p><p>内存消耗 : 19.36 MB, 击败 78.67% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] <span class="keyword">or</span> dp[i][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 399 ms, 击败 79.64% 使用 Python3 的用户</p><p>内存消耗 : 24.43 MB, 击败 45.51% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isMatch</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="type">bool</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="literal">false</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 62.82% 使用 C 的用户</p><p>内存消耗 : 6.82 MB, 击败 81.41% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> p</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = s.Length;</span><br><span class="line">        <span class="built_in">int</span> n = p.Length;</span><br><span class="line">        <span class="built_in">bool</span>[,] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[m + <span class="number">1</span>, n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>, <span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>, j] = dp[<span class="number">0</span>, j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i, j] = dp[i - <span class="number">1</span>, j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i, j] = dp[i - <span class="number">1</span>, j] || dp[i, j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m, n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 93.07% 使用 C# 的用户</p><p>内存消耗 : 51.68 MB, 击败 19.80% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">p</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="keyword">function</span>(<span class="params">s, p</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: m + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 85.29% 使用 JavaScript 的用户</p><p>内存消耗 : 66.23 MB, 击败 16.67% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">s: <span class="built_in">string</span>, p: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> m = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dp</span>: <span class="built_in">boolean</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: m + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 133 ms, 击败 68.03% 使用 TypeScript 的用户</p><p>内存消耗 : 64.14 MB, 击败 12.29% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$m</span> + <span class="number">1</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span> + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="variable">$dp</span>[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">1</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">1</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="variable">$s</span>[<span class="variable">$i</span> - <span class="number">1</span>] || <span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">elseif</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span>] || <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$m</span>][<span class="variable">$n</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 202 ms, 击败 100.00% 使用 PHP 的用户</p><p>内存消耗 : 40.62 MB, 击败 100.00% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isMatch</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">p</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> target <span class="operator">=</span> <span class="type">Array</span>(s), regex <span class="operator">=</span> [<span class="type">Character</span>](), flag <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> p &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>(c <span class="operator">==</span> <span class="string">&quot;*&quot;</span> <span class="operator">&amp;&amp;</span> flag) &#123;</span><br><span class="line">                regex.append(c)</span><br><span class="line">            &#125;</span><br><span class="line">            flag <span class="operator">=</span> c <span class="operator">==</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> visit <span class="operator">=</span> [[<span class="type">Bool</span>]](repeating: [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, count: target.count), count: regex.count)</span><br><span class="line">        <span class="keyword">var</span> table <span class="operator">=</span> [[<span class="type">Bool</span>]](repeating: [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, count: target.count), count: regex.count)</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">memory</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">y</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> x <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> <span class="operator">&amp;&amp;</span> y <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> x <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> y <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x <span class="operator">==</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> regex[<span class="number">0</span>] <span class="operator">==</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>visit[x][y] &#123;</span><br><span class="line">                    table[x][y] <span class="operator">=</span> search(x, y)</span><br><span class="line">                    visit[x][y] <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> table[x][y]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">search</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">y</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> regex[x] <span class="operator">==</span> <span class="string">&quot;?&quot;</span> <span class="operator">||</span> regex[x] <span class="operator">==</span> target[y] &#123;</span><br><span class="line">                <span class="keyword">return</span> memory(x <span class="operator">-</span> <span class="number">1</span>, y <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> regex[x] <span class="operator">==</span> <span class="string">&quot;*&quot;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> memory(x <span class="operator">-</span> <span class="number">1</span>, y) <span class="operator">||</span> memory(x, y <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memory(regex.count <span class="operator">-</span> <span class="number">1</span>, target.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 66 ms, 击败 38.46% 使用 Swift 的用户</p><p>内存消耗 : 17.84 MB, 击败 7.69% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isMatch</span><span class="params">(s: <span class="type">String</span>, p: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> m = s.length</span><br><span class="line">        <span class="keyword">val</span> n = p.length</span><br><span class="line">        <span class="keyword">val</span> dp = Array(m + <span class="number">1</span>) &#123; BooleanArray(n + <span class="number">1</span>) &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 212 ms, 击败 85.71% 使用 Kotlin 的用户</p><p>内存消耗 : 36.84 MB, 击败 78.57% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isMatch(<span class="built_in">String</span> s, <span class="built_in">String</span> p) &#123;</span><br><span class="line">    <span class="built_in">int</span> m = s.length;</span><br><span class="line">    <span class="built_in">int</span> n = p.length;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt;&gt; dp =</span><br><span class="line">        <span class="built_in">List</span>.generate(m + <span class="number">1</span>, (_) =&gt; <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt;.filled(n + <span class="number">1</span>, <span class="keyword">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">          dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">          dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 356 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 154.70 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="type">string</span>, p <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">bool</span>, m+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == s[i<span class="number">-1</span>] || p[j<span class="number">-1</span>] == <span class="string">&#x27;?&#x27;</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] || dp[i][j<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.78% 使用 Go 的用户</p><p>内存消耗 : 6.34 MB, 击败 43.33% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; p</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_match</span>(<span class="params">s, p</span>)</span><br><span class="line">    m, n = s.length, p.length</span><br><span class="line">    dp = <span class="title class_">Array</span>.new(m + <span class="number">1</span>) &#123; <span class="title class_">Array</span>.new(n + <span class="number">1</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    (<span class="number">1</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (<span class="number">1</span>..m).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (<span class="number">1</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] |<span class="params"></span>| p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elsif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] |<span class="params"></span>| dp[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    dp[m][n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1296 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 231.35 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>, p: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = s.length</span><br><span class="line">    <span class="keyword">val</span> n = p.length</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>)(<span class="number">0</span>) = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">        dp(<span class="number">0</span>)(j) = dp(<span class="number">0</span>)(j - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p(j - <span class="number">1</span>) == s(i - <span class="number">1</span>) || p(j - <span class="number">1</span>) == &#x27;?&#x27;) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j) || dp(i)(j - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(m)(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 554 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 55.13 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_match</span>(s: <span class="type">String</span>, p: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">m</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = p.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dp</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>; n + <span class="number">1</span>]; m + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">            <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=m &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">                <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                    || p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;?&#x27;</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 998 ms, 击败 6.67% 使用 Rust 的用户</p><p>内存消耗 : 2.82 MB, 击败 20.00% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;通配符匹配、贪心、递归、字符串、动态规划、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00043.字符串相乘</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/2c49a64264fb/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/2c49a64264fb/</id>
    <published>2020-01-21T03:15:00.000Z</published>
    <updated>2020-01-21T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><p><strong>注意：</strong>不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: num1 &#x3D; “2”, num2 &#x3D; “3”<br>输出: “6”</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: num1 &#x3D; “123”, num2 &#x3D; “456”<br>输出: “56088”</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; num1.length, num2.length &lt;&#x3D; 200</li><li>num1 和 num2 只能由数字组成。</li><li>num1 和 num2 都不包含任何前导零，除了数字0本身。</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = num1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2 = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">string <span class="title">result</span><span class="params">(len1 + len2, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="type">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="type">int</span> sum = mul + (result[i + j + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                </span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">size_t</span> start_pos = result.<span class="built_in">find_first_not_of</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (start_pos != string::npos) ? result.<span class="built_in">substr</span>(start_pos) : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 91.44% 使用 C++ 的用户</p><p>内存消耗 : 7.98 MB, 击败 51.38% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">multiply</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> num1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> num2.length();</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + len2];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> (num1.charAt(i) - <span class="string">&#x27;0&#x27;</span>) * (num2.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : result) &#123;</span><br><span class="line">            sb.append(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; sb.length() - <span class="number">1</span> &amp;&amp; sb.charAt(start) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 % 使用 Java 的用户</p><p>内存消耗 : 41.18 MB, 击败 % 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type num1: str</span></span><br><span class="line"><span class="string">        :type num2: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        len1, len2 = <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">        result = [<span class="number">0</span>] * (len1 + len2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len2 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                mul = <span class="built_in">int</span>(num1[i]) * <span class="built_in">int</span>(num2[j])</span><br><span class="line">                total_sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = total_sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += total_sum // <span class="number">10</span></span><br><span class="line">        result_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, result))</span><br><span class="line">        result_str = result_str.lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result_str <span class="keyword">if</span> result_str <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 170 ms, 击败 38.93% 使用 Python 的用户</p><p>内存消耗 : 11.59 MB, 击败 86.26% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, num1: <span class="built_in">str</span>, num2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        len1, len2 = <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">        result = [<span class="number">0</span>] * (len1 + len2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len2 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                mul = <span class="built_in">int</span>(num1[i]) * <span class="built_in">int</span>(num2[j])</span><br><span class="line">                total_sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = total_sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += total_sum // <span class="number">10</span></span><br><span class="line">        result_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, result))</span><br><span class="line">        result_str = result_str.lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result_str <span class="keyword">if</span> result_str <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 95 ms, 击败 49.18% 使用 Python3 的用户</p><p>内存消耗 : 16.41 MB, 击败 41.37% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">multiply</span><span class="params">(<span class="type">char</span>* num1, <span class="type">char</span>* num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(num1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(num2);</span><br><span class="line">    <span class="type">int</span> len_result = len1 + len2;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len_result);</span><br><span class="line">    <span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * len_result);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="type">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="type">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result_str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(len_result + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; len_result &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx == len_result) &#123;</span><br><span class="line">        result_str[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        result_str[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = idx; i &lt; len_result; i++) &#123;</span><br><span class="line">            result_str[i - idx] = result[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result_str[len_result - idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">    <span class="keyword">return</span> result_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 29.39% 使用 C 的用户</p><p>内存消耗 : 6.01 MB, 击败 84.81% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Multiply</span>(<span class="params"><span class="built_in">string</span> num1, <span class="built_in">string</span> num2</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> len1 = num1.Length;</span><br><span class="line">        <span class="built_in">int</span> len2 = num2.Length;</span><br><span class="line">        <span class="built_in">int</span> lenResult = len1 + len2;</span><br><span class="line">        <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[lenResult];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="built_in">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="built_in">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder resultStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">            resultStr.Append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">                resultStr.Append(result[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 79.35% 使用 C# 的用户</p><p>内存消耗 : 42.13 MB, 击败 48.91% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len1 = num1.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> len2 = num2.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Array</span>(lenResult).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resultStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] === <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx === lenResult) &#123;</span><br><span class="line">        resultStr = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">            resultStr += result[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 69.68% 使用 JavaScript 的用户</p><p>内存消耗 : 51.53 MB, 击败 21.49% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">num1: <span class="built_in">string</span>, num2: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> len1 = num1.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> len2 = num2.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = <span class="title class_">Array</span>(lenResult).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> mul = (num1[i].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)) * (num2[j].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">const</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resultStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] === <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx === lenResult) &#123;</span><br><span class="line">        resultStr = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">            resultStr += result[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 90.00% 使用 TypeScript 的用户</p><p>内存消耗 : 52.91 MB, 击败 15.71% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $num1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $num2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params"><span class="variable">$num1</span>, <span class="variable">$num2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$len1</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$num1</span>);</span><br><span class="line">        <span class="variable">$len2</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$num2</span>);</span><br><span class="line">        <span class="variable">$lenResult</span> = <span class="variable">$len1</span> + <span class="variable">$len2</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$lenResult</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$len1</span> - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$len2</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="variable">$mul</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$num1</span>[<span class="variable">$i</span>]) * <span class="title function_ invoke__">intval</span>(<span class="variable">$num2</span>[<span class="variable">$j</span>]);</span><br><span class="line">                <span class="variable">$sum</span> = <span class="variable">$mul</span> + <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span> + <span class="number">1</span>];</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span> + <span class="number">1</span>] = <span class="variable">$sum</span> % <span class="number">10</span>;</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span>] += <span class="title function_ invoke__">intdiv</span>(<span class="variable">$sum</span>, <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$resultStr</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$idx</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$idx</span> &lt; <span class="variable">$lenResult</span> &amp;&amp; <span class="variable">$result</span>[<span class="variable">$idx</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$idx</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$idx</span> === <span class="variable">$lenResult</span>) &#123;</span><br><span class="line">            <span class="variable">$resultStr</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$idx</span>; <span class="variable">$i</span> &lt; <span class="variable">$lenResult</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">                <span class="variable">$resultStr</span> .= <span class="variable">$result</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$resultStr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 0.00% 使用 PHP 的用户</p><p>内存消耗 : 19.91 MB, 击败 0.00% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">multiply</span>(<span class="keyword">_</span> <span class="params">num1</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">num2</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> len1 <span class="operator">=</span> num1.count</span><br><span class="line">        <span class="keyword">let</span> len2 <span class="operator">=</span> num2.count</span><br><span class="line">        <span class="keyword">let</span> lenResult <span class="operator">=</span> len1 <span class="operator">+</span> len2</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: lenResult)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: len1 <span class="operator">-</span> <span class="number">1</span>, through: <span class="number">0</span>, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: len2 <span class="operator">-</span> <span class="number">1</span>, through: <span class="number">0</span>, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> mul <span class="operator">=</span> <span class="type">Int</span>(<span class="type">String</span>(num1[num1.index(num1.startIndex, offsetBy: i)]))<span class="operator">!</span> <span class="operator">*</span> <span class="type">Int</span>(<span class="type">String</span>(num2[num2.index(num2.startIndex, offsetBy: j)]))<span class="operator">!</span></span><br><span class="line">                <span class="keyword">let</span> sum <span class="operator">=</span> mul <span class="operator">+</span> result[i <span class="operator">+</span> j <span class="operator">+</span> <span class="number">1</span>]</span><br><span class="line">                result[i <span class="operator">+</span> j <span class="operator">+</span> <span class="number">1</span>] <span class="operator">=</span> sum <span class="operator">%</span> <span class="number">10</span></span><br><span class="line">                result[i <span class="operator">+</span> j] <span class="operator">+=</span> sum <span class="operator">/</span> <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> resultStr <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> idx <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx <span class="operator">&lt;</span> lenResult <span class="operator">&amp;&amp;</span> result[idx] <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            idx <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> idx <span class="operator">==</span> lenResult &#123;</span><br><span class="line">            resultStr <span class="operator">=</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx<span class="operator">..&lt;</span>lenResult &#123;</span><br><span class="line">                resultStr <span class="operator">+=</span> <span class="type">String</span>(result[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 195 ms, 击败 7.32% 使用 Swift 的用户</p><p>内存消耗 : 16.23 MB, 击败 7.32% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">multiply</span><span class="params">(num1: <span class="type">String</span>, num2: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> len1 = num1.length</span><br><span class="line">        <span class="keyword">val</span> len2 = num2.length</span><br><span class="line">        <span class="keyword">val</span> lenResult = len1 + len2</span><br><span class="line">        <span class="keyword">val</span> result = IntArray(lenResult)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> len1 - <span class="number">1</span> downTo <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> len2 - <span class="number">1</span> downTo <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="keyword">val</span> sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += sum / <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> resultStr = StringBuilder()</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">            idx++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">            resultStr.append(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> idx until lenResult) &#123;</span><br><span class="line">                resultStr.append(result[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 176 ms, 击败 100.00% 使用 Kotlin 的用户</p><p>内存消耗 : 35.16 MB, 击败 81.82% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> multiply(<span class="built_in">String</span> num1, <span class="built_in">String</span> num2) &#123;</span><br><span class="line">    <span class="built_in">int</span> len1 = num1.length;</span><br><span class="line">    <span class="built_in">int</span> len2 = num2.length;</span><br><span class="line">    <span class="built_in">int</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; result = <span class="built_in">List</span>.filled(lenResult, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="built_in">int</span> mul = <span class="built_in">int</span>.parse(num1[i]) * <span class="built_in">int</span>.parse(num2[j]);</span><br><span class="line">        <span class="built_in">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">        result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">        result[i + j] += sum ~/ <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">StringBuffer</span> resultStr = <span class="built_in">StringBuffer</span>();</span><br><span class="line">    <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">      idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">      resultStr.write(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">        resultStr.write(result[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 317 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 143.64 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(num1 <span class="type">string</span>, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    len1, len2 := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">    lenResult := len1 + len2</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="type">int</span>, lenResult)</span><br><span class="line">    <span class="keyword">for</span> i := len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">for</span> j := len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line">            mul := <span class="type">int</span>(num1[i]-<span class="string">&#x27;0&#x27;</span>) * <span class="type">int</span>(num2[j]-<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            sum := mul + result[i+j+<span class="number">1</span>]</span><br><span class="line">            result[i+j+<span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">            result[i+j] += sum / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> resultStr <span class="type">string</span></span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span> &#123;</span><br><span class="line">        idx++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> idx == lenResult &#123;</span><br><span class="line">        resultStr = <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := idx; i &lt; lenResult; i++ &#123;</span><br><span class="line">            resultStr += strconv.Itoa(result[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 60.96% 使用 Go 的用户</p><p>内存消耗 : 2.93 MB, 击败 64.82% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">num1, num2</span>)</span><br><span class="line">    len1, len2 = num1.length, num2.length</span><br><span class="line">    len_result = len1 + len2</span><br><span class="line">    result = <span class="title class_">Array</span>.new(len_result, <span class="number">0</span>)</span><br><span class="line">    (len1 - <span class="number">1</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (len2 - <span class="number">1</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            mul = num1[i].to_i * num2[j].to_i</span><br><span class="line">            sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">            result[i + j] += sum / <span class="number">10</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; len_result &amp;&amp; result[idx] == <span class="number">0</span></span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> idx == len_result</span><br><span class="line">        result_str = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result_str = result[idx..-<span class="number">1</span>].join</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result_str</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 145 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.50 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">multiply</span></span>(num1: <span class="type">String</span>, num2: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> len1 = num1.length</span><br><span class="line">    <span class="keyword">val</span> len2 = num2.length</span><br><span class="line">    <span class="keyword">val</span> lenResult = len1 + len2</span><br><span class="line">    <span class="keyword">val</span> result = <span class="type">Array</span>.fill(lenResult)(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- len1 - <span class="number">1</span> to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- len2 - <span class="number">1</span> to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> mul = (num1(i) - &#x27;<span class="number">0</span>&#x27;) * (num2(j) - &#x27;<span class="number">0</span>&#x27;)</span><br><span class="line">        <span class="keyword">val</span> sum = mul + result(i + j + <span class="number">1</span>)</span><br><span class="line">        result(i + j + <span class="number">1</span>) = sum % <span class="number">10</span></span><br><span class="line">        result(i + j) += sum / <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> idx = result.indexWhere(_ != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> resultStr =</span><br><span class="line">      <span class="keyword">if</span> (idx == <span class="number">-1</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="keyword">else</span> result.slice(idx, lenResult).mkString</span><br><span class="line">    resultStr</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 504 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 54.61 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">multiply</span>(num1: <span class="type">String</span>, num2: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len1</span> = num1.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len2</span> = num2.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len_result</span> = len1 + len2;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="built_in">vec!</span>[<span class="number">0</span>; len_result];</span><br><span class="line">        <span class="keyword">for</span> (i, c1) <span class="keyword">in</span> num1.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> (j, c2) <span class="keyword">in</span> num2.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">mul</span> = (c1.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>()) * (c2.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">sum</span> = mul + result[i + j];</span><br><span class="line">                result[i + j] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j + <span class="number">1</span>] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result_str</span>: <span class="type">String</span> = result</span><br><span class="line">            .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">            .<span class="title function_ invoke__">rev</span>()</span><br><span class="line">            .<span class="title function_ invoke__">skip_while</span>(|&amp;&amp;x| x == <span class="number">0</span>)</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|&amp;x| <span class="type">char</span>::<span class="title function_ invoke__">from_digit</span>(x, <span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">            .<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">if</span> result_str.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            result_str.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result_str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 33.33% 使用 Rust 的用户</p><p>内存消耗 : 2.14 MB, 击败 55.56% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相乘、数学、字符串、模拟、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00042.接雨水</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/888671d85a20/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/888671d85a20/</id>
    <published>2020-01-20T03:15:00.000Z</published>
    <updated>2020-01-20T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/888671d85a20/202001200001.png" class="" title="示例1"><blockquote><p>输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：height &#x3D; [4,2,0,3,2,5]<br>输出：9</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>n &#x3D;&#x3D; height.length</li><li>$1 &lt;&#x3D; n &lt;&#x3D; 2 * 10^4$</li><li>$0 &lt;&#x3D; height[i] &lt;&#x3D; 10^5$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height.<span class="built_in">size</span>() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 50.80% 使用 C++ 的用户</p><p>内存消耗 : 21.66 MB, 击败 17.09% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left_max</span> <span class="operator">=</span> <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 45.56 MB, 击败 5.11% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max:</span><br><span class="line">                    left_max = height[left]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max:</span><br><span class="line">                    right_max = height[right]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 99.40% 使用 Python 的用户</p><p>内存消耗 : 12.68 MB, 击败 91.49% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max:</span><br><span class="line">                    left_max = height[left]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max:</span><br><span class="line">                    right_max = height[right]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 94.36% 使用 Python3 的用户</p><p>内存消耗 : 17.77 MB, 击败 74.44% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heightSize &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = heightSize - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 69.17% 使用 C 的用户</p><p>内存消耗 : 6.44 MB, 击败 99.08% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Trap</span>(<span class="params"><span class="built_in">int</span>[] height</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.Length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = height.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 95.76% 使用 C# 的用户</p><p>内存消耗 : 44.57 MB, 击败 26.25% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trap = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 99.07% 使用 JavaScript 的用户</p><p>内存消耗 : 50.02 MB, 击败 25.70% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trap</span>(<span class="params">height: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right</span>: <span class="built_in">number</span> = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left_max</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right_max</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 72.92% 使用 TypeScript 的用户</p><p>内存消耗 : 52.29 MB, 击败 29.22% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trap</span>(<span class="params"><span class="variable">$height</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$height</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$left_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &lt; <span class="variable">$height</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &gt;= <span class="variable">$left_max</span>) &#123;</span><br><span class="line">                    <span class="variable">$left_max</span> = <span class="variable">$height</span>[<span class="variable">$left</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> += <span class="variable">$left_max</span> - <span class="variable">$height</span>[<span class="variable">$left</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$left</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$right</span>] &gt;= <span class="variable">$right_max</span>) &#123;</span><br><span class="line">                    <span class="variable">$right_max</span> = <span class="variable">$height</span>[<span class="variable">$right</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> += <span class="variable">$right_max</span> - <span class="variable">$height</span>[<span class="variable">$right</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$right</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 65.31% 使用 PHP 的用户</p><p>内存消耗 : 21.50 MB, 击败 79.59% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">trap</span>(<span class="keyword">_</span> <span class="params">height</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> length <span class="operator">=</span> height.count</span><br><span class="line">        <span class="keyword">guard</span> length <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> length <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> leftMax <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rightMax <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] <span class="operator">&lt;</span> height[right] &#123;</span><br><span class="line">                <span class="keyword">if</span> height[left] <span class="operator">&gt;=</span> leftMax &#123;</span><br><span class="line">                    leftMax <span class="operator">=</span> height[left]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> leftMax <span class="operator">-</span> height[left]</span><br><span class="line">                &#125;</span><br><span class="line">                left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> height[right] <span class="operator">&gt;=</span> rightMax &#123;</span><br><span class="line">                    rightMax <span class="operator">=</span> height[right]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> rightMax <span class="operator">-</span> height[right]</span><br><span class="line">                &#125;</span><br><span class="line">                right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 26 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 15.84 MB, 击败 7.33% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">trap</span><span class="params">(height: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> length = height.size</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> leftMax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rightMax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= leftMax) &#123;</span><br><span class="line">                    leftMax = height[left]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += leftMax - height[left]</span><br><span class="line">                &#125;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= rightMax) &#123;</span><br><span class="line">                    rightMax = height[right]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += rightMax - height[right]</span><br><span class="line">                &#125;</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 189 ms, 击败 98.29% 使用 Kotlin 的用户</p><p>内存消耗 : 39.59 MB, 击败 43.59% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> trap(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; height) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> leftMax = <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &gt;= leftMax) &#123;</span><br><span class="line">          leftMax = height[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result += leftMax - height[left];</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[right] &gt;= rightMax) &#123;</span><br><span class="line">          rightMax = height[right];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result += rightMax - height[right];</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 284 ms, 击败 88.89% 使用 Dart 的用户</p><p>内存消耗 : 148.19 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">    leftMax, rightMax := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] &gt;= leftMax &#123;</span><br><span class="line">                leftMax = height[left]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += leftMax - height[left]</span><br><span class="line">            &#125;</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> height[right] &gt;= rightMax &#123;</span><br><span class="line">                rightMax = height[right]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += rightMax - height[right]</span><br><span class="line">            &#125;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 41.46% 使用 Go 的用户</p><p>内存消耗 : 5.18 MB, 击败 99.69% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; height</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">height</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> height.length &lt; <span class="number">3</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = height.length - <span class="number">1</span></span><br><span class="line">  left_max = <span class="number">0</span></span><br><span class="line">  right_max = <span class="number">0</span></span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right</span><br><span class="line">    <span class="keyword">if</span> height[left] &lt; height[right]</span><br><span class="line">      <span class="keyword">if</span> height[left] &gt;= left_max</span><br><span class="line">        left_max = height[left]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result += left_max - height[left]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> height[right] &gt;= right_max</span><br><span class="line">        right_max = height[right]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result += right_max - height[right]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 61 ms, 击败 % 使用 Ruby 的用户</p><p>内存消耗 : 207.34 MB, 击败 % 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">trap</span></span>(height: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> right = height.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> leftMax = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> rightMax = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height(left) &lt; height(right)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (height(left) &gt;= leftMax) &#123;</span><br><span class="line">            leftMax = height(left)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += leftMax - height(left)</span><br><span class="line">          &#125;</span><br><span class="line">          left += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (height(right) &gt;= rightMax) &#123;</span><br><span class="line">            rightMax = height(right)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += rightMax - height(right)</span><br><span class="line">          &#125;</span><br><span class="line">          right -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 81.82% 使用 Scala 的用户</p><p>内存消耗 : 56.33 MB, 击败 90.91% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">trap</span>(height: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> height.<span class="title function_ invoke__">len</span>() &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = height.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.10 MB, 击败 92.50% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;接雨水、栈、数组、双指针、动态规划、单调栈、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00041.缺失的第一个正数</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/2811040e6739/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/2811040e6739/</id>
    <published>2020-01-17T03:15:00.000Z</published>
    <updated>2020-01-17T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。</p><p>请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [1,2,0]<br>输出：3</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [3,4,-1,1]<br>输出：2</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：nums &#x3D; [7,8,9,11,12]<br>输出：1</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10^5$</li><li>$-2^{31} &lt;&#x3D; nums[i] &lt;&#x3D; 2^{31} - 1$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[nums[i] - <span class="number">1</span>], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 94.56% 使用 C++ 的用户</p><p>内存消耗 : 42.63 MB, 击败 25.68% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 98.51% 使用 Java 的用户</p><p>内存消耗 : 53.84 MB, 击败 68.75% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstMissingPositive</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &lt;= n <span class="keyword">and</span> nums[nums[i] - <span class="number">1</span>] != nums[i]:</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != i + <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 72.86% 使用 Python 的用户</p><p>内存消耗 : 19.07 MB, 击败 90.86% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstMissingPositive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &lt;= n <span class="keyword">and</span> nums[nums[i] - <span class="number">1</span>] != nums[i]:</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != i + <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 % 使用 Python3 的用户</p><p>内存消耗 : 27.45 MB, 击败 % 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= numsSize &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            swap(&amp;nums[nums[i] - <span class="number">1</span>], &amp;nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numsSize + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 95.26% 使用 C 的用户</p><p>内存消耗 : 10.66 MB, 击败 92.39% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FirstMissingPositive</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                Swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 142 ms, 击败 66.90% 使用 C# 的用户</p><p>内存消耗 : 57.28 MB, 击败 27.47% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstMissingPositive = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] !== nums[i]) &#123;</span><br><span class="line">            [nums[nums[i] - <span class="number">1</span>], nums[i]] = [nums[i], nums[nums[i] - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 70.49% 使用 JavaScript 的用户</p><p>内存消耗 : 55.44 MB, 击败 36.87% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">firstMissingPositive</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] !== nums[i]) &#123;</span><br><span class="line">            [nums[nums[i] - <span class="number">1</span>], nums[i]] = [nums[i], nums[nums[i] - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 83.62% 使用 TypeScript 的用户</p><p>内存消耗 : 57.48 MB, 击败 29.94% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">firstMissingPositive</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$i</span>] &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] &lt;= <span class="variable">$n</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>] != <span class="variable">$nums</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                [<span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>], <span class="variable">$nums</span>[<span class="variable">$i</span>]] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$i</span> + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$n</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 118 ms, 击败 76.19% 使用 PHP 的用户</p><p>内存消耗 : 26.82 MB, 击败 100.00% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">firstMissingPositive</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nums <span class="operator">=</span> nums</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> <span class="operator">&lt;=</span> nums[i] <span class="operator">&amp;&amp;</span> nums[i] <span class="operator">&lt;=</span> n <span class="operator">&amp;&amp;</span> nums[nums[i] <span class="operator">-</span> <span class="number">1</span>] <span class="operator">!=</span> nums[i] &#123;</span><br><span class="line">                nums.swapAt(nums[i] <span class="operator">-</span> <span class="number">1</span>, i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="operator">!=</span> i <span class="operator">+</span> <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 151 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 19.63 MB, 击败 14.14% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">firstMissingPositive</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = nums.size</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>] = nums[i].also &#123; nums[i] = nums[nums[i] - <span class="number">1</span>] &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 93.88% 使用 Kotlin 的用户</p><p>内存消耗 : 49.80 MB, 击败 89.80% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> firstMissingPositive(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="keyword">final</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">        <span class="keyword">final</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[temp - <span class="number">1</span>];</span><br><span class="line">        nums[temp - <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 100.00% 使用 Dart 的用户</p><p>内存消耗 : 160.04 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i]<span class="number">-1</span>] != nums[i] &#123;</span><br><span class="line">nums[nums[i]<span class="number">-1</span>], nums[i] = nums[i], nums[nums[i]<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != i+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 38 ms, 击败 92.71% 使用 Go 的用户</p><p>内存消耗 : 7.73 MB, 击败 97.26% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_missing_positive</span>(<span class="params">nums</span>)</span><br><span class="line">  n = nums.length</span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]</span><br><span class="line">      nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span> <span class="keyword">if</span> nums[i] != i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  n + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 122 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 210.50 MB, 击败 33.33% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.length</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(i: <span class="type">Int</span>, j: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> temp = nums(i)</span><br><span class="line">      nums(i) = nums(j)</span><br><span class="line">      nums(j) = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums(i) &amp;&amp; nums(i) &lt;= n &amp;&amp; nums(nums(i) - <span class="number">1</span>) != nums(i)) &#123;</span><br><span class="line">        swap(i, nums(i) - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 696 ms, 击败 92.31% 使用 Scala 的用户</p><p>内存消耗 : 77.17 MB, 击败 84.62% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">first_missing_positive</span>(<span class="keyword">mut</span> nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = nums.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n <span class="keyword">as</span> <span class="type">i32</span> &amp;&amp; nums[(nums[i] - <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>] != nums[i] &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">index</span> = (nums[i] - <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">                nums.<span class="title function_ invoke__">swap</span>(i, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != (i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">return</span> (i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        (n + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 89.19% 使用 Rust 的用户</p><p>内存消耗 : 2.98 MB, 击败 49.38% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;缺失的第一个正数、数组、哈希表、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00040.组合总和 II</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/fd70304e5ab6/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/fd70304e5ab6/</id>
    <published>2020-01-16T03:15:00.000Z</published>
    <updated>2020-01-16T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用 一次 。</p><p><strong>注意：</strong>解集不能包含重复的组合。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,<br>输出:<br>[<br>[1,1,6],<br>[1,2,5],<br>[1,7],<br>[2,6]<br>]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,<br>输出:<br>[<br>[1,2,2],<br>[5]<br>]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; candidates.length &lt;&#x3D; 100</li><li>1 &lt;&#x3D; candidates[i] &lt;&#x3D; 50</li><li>1 &lt;&#x3D; target &lt;&#x3D; 30</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; current;</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span></span><br><span class="line"><span class="params"><span class="function">                   vector&lt;<span class="type">int</span>&gt;&amp; current, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 86.36% 使用 C++ 的用户</p><p>内存消耗 : 12.34 MB, 击败 35.00% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;Integer&gt; current = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                           List&lt;Integer&gt; current, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(current));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.add(candidates[i]);</span><br><span class="line">            backtrack(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.remove(current.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 66.48% 使用 Java 的用户</p><p>内存消耗 : 42.18 MB, 击败 53.22% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, target-candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        result = []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 59.84% 使用 Python 的用户</p><p>内存消耗 : 11.57 MB, 击败 85.09% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, target-candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        result = []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 34 ms, 击败 98.78% 使用 Python3 的用户</p><p>内存消耗 : 16.48 MB, 击败 40.06% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span> start, <span class="type">int</span>* path, <span class="type">int</span> pathSize, <span class="type">int</span>** result, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(pathSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pathSize; ++i) &#123;</span><br><span class="line">            result[*returnSize][i] = path[i];</span><br><span class="line">        &#125;</span><br><span class="line">        (*returnColumnSizes)[*returnSize] = pathSize;</span><br><span class="line">        (*returnSize)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidatesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path[pathSize++] = candidates[i];</span><br><span class="line">        backtrack(candidates, candidatesSize, target - candidates[i], i + <span class="number">1</span>, path, pathSize, result, returnSize, returnColumnSizes);</span><br><span class="line">        pathSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>* path = (<span class="type">int</span>*)<span class="built_in">malloc</span>(candidatesSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> pathSize = <span class="number">0</span>;</span><br><span class="line">    qsort(candidates, candidatesSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    backtrack(candidates, candidatesSize, target, <span class="number">0</span>, path, pathSize, result, returnSize, returnColumnSizes);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 95.94% 使用 C 的用户</p><p>内存消耗 : 8.56 MB, 击败 63.44% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum2(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; current = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        Array.Sort(candidates);</span><br><span class="line">        Backtrack(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target, <span class="built_in">int</span> start, List&lt;<span class="built_in">int</span>&gt; current, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(current));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.Add(candidates[i]);</span><br><span class="line">            Backtrack(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.RemoveAt(current.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 109 ms, 击败 71.58% 使用 C# 的用户</p><p>内存消耗 : 46.38 MB, 击败 13.69% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="keyword">function</span>(<span class="params">candidates, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> current = [];</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start, target</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...current]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">            current.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 47.12% 使用 JavaScript 的用户</p><p>内存消耗 : 52.57 MB, 击败 15.22% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinationSum2</span>(<span class="params">candidates: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">current</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start: <span class="built_in">number</span>, target: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...current]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">            current.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 56.86% 使用 TypeScript 的用户</p><p>内存消耗 : 53.46 MB, 击败 11.11% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $candidates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">combinationSum2</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$current</span> = [];</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$candidates</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$current</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="variable">$start</span>, &amp;<span class="variable">$current</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$current</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$candidates</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable">$start</span> &amp;&amp; <span class="variable">$candidates</span>[<span class="variable">$i</span>] == <span class="variable">$candidates</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$candidates</span>[<span class="variable">$i</span>] &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$current</span>[] = <span class="variable">$candidates</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span> - <span class="variable">$candidates</span>[<span class="variable">$i</span>], <span class="variable">$i</span> + <span class="number">1</span>, <span class="variable">$current</span>, <span class="variable">$result</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$current</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 61.54% 使用 PHP 的用户</p><p>内存消耗 : 20.05 MB, 击败 23.08% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">combinationSum2</span>(<span class="keyword">_</span> <span class="params">candidates</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [[<span class="type">Int</span>]] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> current: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">let</span> sortedCandidates <span class="operator">=</span> candidates.sorted()</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">start</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> target <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> start<span class="operator">..&lt;</span>sortedCandidates.count &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">&gt;</span> start <span class="operator">&amp;&amp;</span> sortedCandidates[i] <span class="operator">==</span> sortedCandidates[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> sortedCandidates[i] <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                current.append(sortedCandidates[i])</span><br><span class="line">                backtrack(i <span class="operator">+</span> <span class="number">1</span>, target <span class="operator">-</span> sortedCandidates[i])</span><br><span class="line">                current.removeLast()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 92.86% 使用 Swift 的用户</p><p>内存消耗 : 15.69 MB, 击败 9.52% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">combinationSum2</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> current = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> sortedCandidates = candidates.sorted()</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(start: <span class="type">Int</span>, target: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">                result.add(current.toList())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> start until sortedCandidates.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; start &amp;&amp; sortedCandidates[i] == sortedCandidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sortedCandidates[i] &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                current.add(sortedCandidates[i])</span><br><span class="line">                backtrack(i + <span class="number">1</span>, target - sortedCandidates[i])</span><br><span class="line">                current.removeAt(current.size - <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 240 ms, 击败 53.85% 使用 Kotlin 的用户</p><p>内存消耗 : 40.25 MB, 击败 7.69% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; combinationSum2(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; current = [];</span><br><span class="line">    candidates.sort();</span><br><span class="line">    <span class="keyword">void</span> backtrack(<span class="built_in">int</span> start, <span class="built_in">int</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.from(current));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current.add(candidates[i]);</span><br><span class="line">        backtrack(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">        current.removeLast();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 338 ms, 击败 0.00% 使用 Dart 的用户</p><p>内存消耗 : 148.07 MB, 击败 66.67% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> current []<span class="type">int</span></span><br><span class="line">    sort.Ints(candidates)</span><br><span class="line">    <span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span></span><br><span class="line">    backtrack = <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, current...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            current = <span class="built_in">append</span>(current, candidates[i])</span><br><span class="line">            backtrack(i+<span class="number">1</span>, target-candidates[i])</span><br><span class="line">            current = current[:<span class="built_in">len</span>(current)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.33 MB, 击败 92.31% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum2</span>(<span class="params">candidates, target</span>)</span><br><span class="line">    result = []</span><br><span class="line">    current = []</span><br><span class="line">    candidates.sort!</span><br><span class="line">    backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">start, target</span>|</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span></span><br><span class="line">            result &lt;&lt; current.dup</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        (start...candidates.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> candidates[i] &gt; target</span><br><span class="line">            current &lt;&lt; candidates[i]</span><br><span class="line">            backtrack.call(i + <span class="number">1</span>, target - candidates[i])</span><br><span class="line">            current.pop</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    backtrack.call(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 50.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.58 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span></span>(candidates: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> current: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">val</span> sortedCandidates = candidates.sorted</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(start: <span class="type">Int</span>, target: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result = result :+ current</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- start until sortedCandidates.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; sortedCandidates(i) == sortedCandidates(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortedCandidates(i) &lt;= target) &#123;</span><br><span class="line">          current = current :+ sortedCandidates(i)</span><br><span class="line">          backtrack(i + <span class="number">1</span>, target - sortedCandidates(i))</span><br><span class="line">          current = current.dropRight(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 530 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 60.58 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">combination_sum2</span>(candidates: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted_candidates</span> = candidates;</span><br><span class="line">        sorted_candidates.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(</span><br><span class="line">            start: <span class="type">usize</span>,</span><br><span class="line">            target: <span class="type">i32</span>,</span><br><span class="line">            current: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;,</span><br><span class="line">            sorted_candidates: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(current.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> start..sorted_candidates.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i &gt; start &amp;&amp; sorted_candidates[i] == sorted_candidates[i - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sorted_candidates[i] &gt; target &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                current.<span class="title function_ invoke__">push</span>(sorted_candidates[i]);</span><br><span class="line">                <span class="title function_ invoke__">backtrack</span>(i + <span class="number">1</span>, target - sorted_candidates[i], current, result, sorted_candidates);</span><br><span class="line">                current.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(<span class="number">0</span>, target, &amp;<span class="keyword">mut</span> current, &amp;<span class="keyword">mut</span> result, &amp;sorted_candidates);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.00 MB, 击败 95.00% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;组合总和 II、数组、回溯、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00039.组合总和</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/81cd0b447586/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/81cd0b447586/</id>
    <published>2020-01-15T03:15:00.000Z</published>
    <updated>2020-01-15T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p><p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7<br>输出：[[2,2,3],[7]]<br>解释：<br>2 和 3 可以形成一组候选，2 + 2 + 3 &#x3D; 7 。注意 2 可以使用多次。<br>7 也是一个候选， 7 &#x3D; 7 。<br>仅有这两种组合。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: candidates &#x3D; [2,3,5], target &#x3D; 8<br>输出: [[2,2,2,2],[2,3,3],[3,5]]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入: candidates &#x3D; [2], target &#x3D; 1<br>输出: []</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; candidates.length &lt;&#x3D; 30</li><li>2 &lt;&#x3D; candidates[i] &lt;&#x3D; 40</li><li>candidates 的所有元素 互不相同</li><li>1 &lt;&#x3D; target &lt;&#x3D; 40</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span></span><br><span class="line"><span class="params"><span class="function">                   vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 87.96% 使用 C++ 的用户</p><p>内存消耗 : 12.11 MB, 击败 40.40% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                           List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtrack(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 82.50% 使用 Java 的用户</p><p>内存消耗 : 43.55 MB, 击败 28.62% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i, target - candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, path)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 76.75% 使用 Python 的用户</p><p>内存消耗 : 11.51 MB, 击败 93.61% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        candidates.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i, target - candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, path)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 82.10% 使用 Python3 的用户</p><p>内存消耗 : 16.65 MB, 击败 30.56% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> candidatesSize_tmp;</span><br><span class="line"><span class="type">int</span> ansSize;</span><br><span class="line"><span class="type">int</span> combineSize;</span><br><span class="line"><span class="type">int</span>* ansColumnSize;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> target, <span class="type">int</span>** ans, <span class="type">int</span>* combine, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span>* tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * combineSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; combineSize; ++i) &#123;</span><br><span class="line">            tmp[i] = combine[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ansSize] = tmp;</span><br><span class="line">        ansColumnSize[ansSize++] = combineSize;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidatesSize_tmp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target - candidates[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        combine[combineSize++] = candidates[i];</span><br><span class="line">        backtrack(candidates, target - candidates[i], ans, combine, i);</span><br><span class="line">        combineSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    candidatesSize_tmp = candidatesSize;</span><br><span class="line">    ansSize = combineSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>** ans = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * <span class="number">1001</span>);</span><br><span class="line">    ansColumnSize = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">1001</span>);</span><br><span class="line">    <span class="type">int</span> combine[<span class="number">2001</span>];</span><br><span class="line">    backtrack(candidates, target, ans, combine, <span class="number">0</span>);</span><br><span class="line">    *returnSize = ansSize;</span><br><span class="line">    *returnColumnSizes = ansColumnSize;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 94.16% 使用 C 的用户</p><p>内存消耗 : 9.00 MB, 击败 51.89% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        Array.Sort(candidates);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        IList&lt;<span class="built_in">int</span>&gt; path = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        Backtrack(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target, <span class="built_in">int</span> start, IList&lt;<span class="built_in">int</span>&gt; path, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.Add(candidates[i]);</span><br><span class="line">            Backtrack(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.RemoveAt(path.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 103 ms, 击败 91.01% 使用 C# 的用户</p><p>内存消耗 : 46.77 MB, 击败 19.10% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="keyword">function</span>(<span class="params">candidates, target</span>) &#123;</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> path = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start, target</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i, target - candidates[i]);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 94.88% 使用 JavaScript 的用户</p><p>内存消耗 : 53.99 MB, 击败 13.71% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinationSum</span>(<span class="params">candidates: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">path</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start: <span class="built_in">number</span>, target: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i, target - candidates[i]);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 81 ms, 击败 55.52% 使用 TypeScript 的用户</p><p>内存消耗 : 54.88 MB, 击败 12.61% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $candidates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">combinationSum</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$candidates</span>);</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$path</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="variable">$start</span>, &amp;<span class="variable">$path</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$candidates</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable">$start</span> &amp;&amp; <span class="variable">$candidates</span>[<span class="variable">$i</span>] === <span class="variable">$candidates</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$candidates</span>[<span class="variable">$i</span>] &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$path</span>[] = <span class="variable">$candidates</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span> - <span class="variable">$candidates</span>[<span class="variable">$i</span>], <span class="variable">$i</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 56.10% 使用 PHP 的用户</p><p>内存消耗 : 20.44 MB, 击败 7.32% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">combinationSum</span>(<span class="keyword">_</span> <span class="params">candidates</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> candidates <span class="operator">=</span> candidates.sorted()</span><br><span class="line">        <span class="keyword">var</span> result: [[<span class="type">Int</span>]] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> path: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        backtrack(<span class="operator">&amp;</span>candidates, target, <span class="number">0</span>, <span class="operator">&amp;</span>path, <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">candidates</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">start</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">path</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">result</span>: <span class="keyword">inout</span> [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> target <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            result.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> start<span class="operator">..&lt;</span>candidates.count &#123;</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">&gt;</span> start <span class="operator">&amp;&amp;</span> candidates[i] <span class="operator">==</span> candidates[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> candidates[i] <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path.append(candidates[i])</span><br><span class="line">            backtrack(<span class="operator">&amp;</span>candidates, target <span class="operator">-</span> candidates[i], i, <span class="operator">&amp;</span>path, <span class="operator">&amp;</span>result)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.16% 使用 Swift 的用户</p><p>内存消耗 : 15.84 MB, 击败 5.88% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">combinationSum</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> candidatesSorted = candidates.sorted().toIntArray()</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> path = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        backtrack(candidatesSorted, target, <span class="number">0</span>, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>, start: <span class="type">Int</span>, path: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, result: <span class="type">MutableList</span>&lt;<span class="type">List</span>&lt;<span class="type">Int</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(ArrayList(path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> start until candidates.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i])</span><br><span class="line">            backtrack(candidates, target - candidates[i], i, path, result)</span><br><span class="line">            path.removeAt(path.size - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 232 ms, 击败 % 使用 Kotlin 的用户</p><p>内存消耗 : 39.69 MB, 击败 % 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; combinationSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; path = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidatesSorted = <span class="built_in">List</span>.from(candidates)..sort();</span><br><span class="line">    <span class="keyword">void</span> backtrack(<span class="built_in">int</span> start, <span class="built_in">int</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>.from(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidatesSorted.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidatesSorted[i] == candidatesSorted[i - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidatesSorted[i] &gt; target) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.add(candidatesSorted[i]);</span><br><span class="line">        backtrack(i, target - candidatesSorted[i]);</span><br><span class="line">        path.removeLast();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 319 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 146.83 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line"><span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span></span><br><span class="line">backtrack = <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">path = <span class="built_in">append</span>(path, candidates[i])</span><br><span class="line">backtrack(i, target-candidates[i])</span><br><span class="line">path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(<span class="number">0</span>, target)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.61 MB, 击败 84.99% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates, target</span>)</span><br><span class="line">  result = []</span><br><span class="line">  path = []</span><br><span class="line">  candidates.sort!</span><br><span class="line">  backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">start, target</span>|</span><br><span class="line">    <span class="keyword">if</span> target == <span class="number">0</span></span><br><span class="line">      result &lt;&lt; path.dup</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (start...candidates.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> candidates[i] &gt; target</span><br><span class="line">      path &lt;&lt; candidates[i]</span><br><span class="line">      backtrack.call(i, target - candidates[i])</span><br><span class="line">      path.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  backtrack.call(<span class="number">0</span>, target)</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 90.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.49 MB, 击败 20.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span></span>(candidates: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(start: <span class="type">Int</span>, target: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result = path.reverse :: result</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- start until candidates.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates(i) == candidates(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (candidates(i) &lt;= target) &#123;</span><br><span class="line">          path = candidates(i) :: path</span><br><span class="line">          backtrack(i, target - candidates(i))</span><br><span class="line">          path = path.tail</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    candidates.sorted</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 522 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 55.73 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">combination_sum</span>(candidates: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">path</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">candidates_sorted</span> = candidates.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        candidates_sorted.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(</span><br><span class="line">            candidates: &amp;[<span class="type">i32</span>],</span><br><span class="line">            target: <span class="type">i32</span>,</span><br><span class="line">            start: <span class="type">usize</span>,</span><br><span class="line">            path: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;,</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(path.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> start..candidates.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                path.<span class="title function_ invoke__">push</span>(candidates[i]);</span><br><span class="line">                <span class="title function_ invoke__">backtrack</span>(candidates, target - candidates[i], i, path, result);</span><br><span class="line">                path.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(&amp;candidates_sorted, target, <span class="number">0</span>, &amp;<span class="keyword">mut</span> path, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.03 MB, 击败 91.36% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;组合总和、数组、回溯、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00038.外观数列</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/2840fe404a97/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/2840fe404a97/</id>
    <published>2020-01-14T03:15:00.000Z</published>
    <updated>2020-01-14T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个正整数 n ，输出外观数列的第 n 项。</p><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p><p>你可以将其视作是由递归公式定义的数字字符串序列：</p><ul><li>countAndSay(1) &#x3D; “1”</li><li>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。</li></ul><p>前五项如下：</p><ol><li>1</li><li>11</li><li>21</li><li>1211</li><li>111221<blockquote><p>第一项是数字 1<br>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”<br>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”<br>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”<br>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”<br>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p></blockquote></li></ol><p>例如，数字字符串 “3322251” 的描述如下图：</p><img src="/zh-CN/2840fe404a97/202001140001.jpg" class="" title="题目"><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：n &#x3D; 1<br>输出：”1”<br>解释：这是一个基本样例。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：n &#x3D; 4<br>输出：”1211”<br>解释：<br>countAndSay(1) &#x3D; “1”<br>countAndSay(2) &#x3D; 读 “1” &#x3D; 一 个 1 &#x3D; “11”<br>countAndSay(3) &#x3D; 读 “11” &#x3D; 二 个 1 &#x3D; “21”<br>countAndSay(4) &#x3D; 读 “21” &#x3D; 一 个 2 + 一 个 1 &#x3D; “12” + “11” &#x3D; “1211”</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 30</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            string prev = <span class="built_in">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">            string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; prev.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="built_in">length</span>() &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += <span class="built_in">to_string</span>(count) + prev[i];</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 78.05% 使用 C++ 的用户</p><p>内存消耗 : 9.09 MB, 击败 12.48% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prev</span> <span class="operator">=</span> countAndSay(n - <span class="number">1</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prev.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length() &amp;&amp; prev.charAt(i) == prev.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(count).append(prev.charAt(i));</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 97.05% 使用 Java 的用户</p><p>内存消耗 : 40.21 MB, 击败 59.65% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAndSay</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            result = <span class="string">&quot;&quot;</span></span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prev)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(prev) <span class="keyword">and</span> prev[i] == prev[i + <span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">str</span>(count) + prev[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 87.04% 使用 Python 的用户</p><p>内存消耗 : 11.59 MB, 击败 91.09% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAndSay</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            result = <span class="string">&quot;&quot;</span></span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prev)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(prev) <span class="keyword">and</span> prev[i] == prev[i + <span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">str</span>(count) + prev[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 45 ms, 击败 81.55% 使用 Python3 的用户</p><p>内存消耗 : 16.52 MB, 击败 29.61% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* result = <span class="built_in">malloc</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(result, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span>* prev = countAndSay(n - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(prev);</span><br><span class="line">        <span class="type">char</span>* result = <span class="built_in">malloc</span>(<span class="number">2</span> * len + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; len &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index += <span class="built_in">sprintf</span>(result + index, <span class="string">&quot;%d%c&quot;</span>, count, prev[i]);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(prev);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 7.90% 使用 C 的用户</p><p>内存消耗 : 6.36 MB, 击败 90.88% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CountAndSay</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">string</span> prev = CountAndSay(n - <span class="number">1</span>);</span><br><span class="line">            System.Text.StringBuilder result = <span class="keyword">new</span> System.Text.StringBuilder();</span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; prev.Length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.Length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.Append(count).Append(prev[i]);</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 86.11% 使用 C# 的用户</p><p>内存消耗 : 40.65 MB, 击败 51.39% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev = <span class="title function_">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prev.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="property">length</span> &amp;&amp; prev[i] === prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += count + prev[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 66.33% 使用 JavaScript 的用户</p><p>内存消耗 : 52.34 MB, 击败 5.01% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countAndSay</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">prev</span>: <span class="built_in">string</span> = <span class="title function_">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> <span class="attr">i</span>: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; prev.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="property">length</span> &amp;&amp; prev[i] === prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += count + prev[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 84.00% 使用 TypeScript 的用户</p><p>内存消耗 : 52.96 MB, 击败 6.00% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">countAndSay</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$prev</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">countAndSay</span>(<span class="variable">$n</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="variable">$count</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$prev</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$i</span> + <span class="number">1</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$prev</span>) &amp;&amp; <span class="variable">$prev</span>[<span class="variable">$i</span>] === <span class="variable">$prev</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="variable">$count</span>++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> .= <span class="variable">$count</span> . <span class="variable">$prev</span>[<span class="variable">$i</span>];</span><br><span class="line">                    <span class="variable">$count</span> = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 87.50% 使用 PHP 的用户</p><p>内存消耗 : 20.10 MB, 击败 12.50% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">countAndSay</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev <span class="operator">=</span> countAndSay(n <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> result <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>prev.count &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">+</span> <span class="number">1</span> <span class="operator">&lt;</span> prev.count <span class="operator">&amp;&amp;</span> prev[prev.index(prev.startIndex, offsetBy: i)] <span class="operator">==</span> prev[prev.index(prev.startIndex, offsetBy: i <span class="operator">+</span> <span class="number">1</span>)] &#123;</span><br><span class="line">                    count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> <span class="string">&quot;<span class="subst">\(count)</span><span class="subst">\(prev[prev.index(prev.startIndex, offsetBy: i)])</span>&quot;</span></span><br><span class="line">                    count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1663 ms, 击败 10.53% 使用 Swift 的用户</p><p>内存消耗 : 14.85 MB, 击败 68.42% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">countAndSay</span><span class="params">(n: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> prev = countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until prev.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += <span class="string">&quot;<span class="variable">$count</span><span class="subst">$&#123;prev[i]&#125;</span>&quot;</span></span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 168 ms, 击败 82.35% 使用 Kotlin 的用户</p><p>内存消耗 : 36.61 MB, 击败 64.71% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> countAndSay(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">String</span> prev = countAndSay(n - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">StringBuffer</span> result = <span class="built_in">StringBuffer</span>();</span><br><span class="line">      <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; prev.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">          count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.write(<span class="string">&quot;<span class="subst">$count</span><span class="subst">$&#123;prev[i]&#125;</span>&quot;</span>);</span><br><span class="line">          count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 291 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 147.80 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countAndSay</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">prev := <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> cur strings.Builder</span><br><span class="line"><span class="keyword">for</span> j, start := <span class="number">0</span>, <span class="number">0</span>; j &lt; <span class="built_in">len</span>(prev); start = j &#123;</span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="built_in">len</span>(prev) &amp;&amp; prev[j] == prev[start] &#123;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">cur.WriteString(strconv.Itoa(j - start))</span><br><span class="line">cur.WriteByte(prev[start])</span><br><span class="line">&#125;</span><br><span class="line">prev = cur.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.30 MB, 击败 90.00% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_and_say</span>(<span class="params">n</span>)</span><br><span class="line">  prev = <span class="string">&quot;1&quot;</span></span><br><span class="line">  (<span class="number">2</span>..n).each <span class="keyword">do</span></span><br><span class="line">    cur = <span class="string">&quot;&quot;</span></span><br><span class="line">    i, start = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; prev.length</span><br><span class="line">      <span class="keyword">while</span> i &lt; prev.length &amp;&amp; prev[i] == prev[start]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      cur += <span class="string">&quot;<span class="subst">#&#123;i - start&#125;</span><span class="subst">#&#123;prev[start]&#125;</span>&quot;</span></span><br><span class="line">      start = i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    prev = cur</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 91 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 210.46 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span></span>(n: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> prev = countAndSay(n - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> result = <span class="keyword">new</span> <span class="type">StringBuilder</span></span><br><span class="line">      <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until prev.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev(i) == prev(i + <span class="number">1</span>)) &#123;</span><br><span class="line">          count += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.append(count).append(prev(i))</span><br><span class="line">          count = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result.toString</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 428 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 52.55 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">count_and_say</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">prev</span> = Solution::<span class="title function_ invoke__">count_and_say</span>(n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..prev.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; prev.<span class="title function_ invoke__">len</span>() &amp;&amp; prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i).<span class="title function_ invoke__">unwrap</span>() == prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i + <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="title function_ invoke__">push_str</span>(&amp;count.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">                    result.<span class="title function_ invoke__">push</span>(prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 17.65% 使用 Rust 的用户</p><p>内存消耗 : 2.07 MB, 击败 58.82% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;外观数列、字符串、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00037.解数独</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/031dda976a0c/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/031dda976a0c/</id>
    <published>2020-01-13T03:15:00.000Z</published>
    <updated>2020-01-13T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 遵循如下规则：</p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</li></ol><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/031dda976a0c/202001130001.webp" class="" title="示例1"><blockquote><p>输入：board &#x3D; [<br>  [“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>  [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>  [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>  [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>  [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>  [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>  [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>  [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>  [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：[<br>  [“5”,”3”,”4”,”6”,”7”,”8”,”9”,”1”,”2”],<br>  [“6”,”7”,”2”,”1”,”9”,”5”,”3”,”4”,”8”],<br>  [“1”,”9”,”8”,”3”,”4”,”2”,”5”,”6”,”7”],<br>  [“8”,”5”,”9”,”7”,”6”,”1”,”4”,”2”,”3”],<br>  [“4”,”2”,”6”,”8”,”5”,”3”,”7”,”9”,”1”],<br>  [“7”,”1”,”3”,”9”,”2”,”4”,”8”,”5”,”6”],<br>  [“9”,”6”,”1”,”5”,”3”,”7”,”2”,”8”,”4”],<br>  [“2”,”8”,”7”,”4”,”1”,”9”,”6”,”3”,”5”],<br>  [“3”,”4”,”5”,”2”,”8”,”6”,”1”,”7”,”9”]]<br>解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</p></blockquote><img src="/zh-CN/031dda976a0c/202001130002.png" class="" title="示例1解释"><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>board.length &#x3D;&#x3D; 9</li><li>board[i].length &#x3D;&#x3D; 9</li><li>board[i][j] 是一位数字或者 ‘.’</li><li>题目数据 保证 输入数独仅有一个解</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">solve</span>(board);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">solve</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">isValid</span>(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">solve</span>(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">const</span> std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 67.22% 使用 C++ 的用户</p><p>内存消耗 : 7.55 MB, 击败 20.50% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 14.01% 使用 Java 的用户</p><p>内存消耗 : 40.18 MB, 击败 12.93% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.solve(board)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)):</span><br><span class="line">                        <span class="keyword">if</span> self.is_valid(board, i, j, num):</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> self.solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self, board, row, col, num</span>):</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[row]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> [board[i][col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[start_row + i][start_col + j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 388 ms, 击败 59.52% 使用 Python 的用户</p><p>内存消耗 : 11.52 MB, 击败 95.24% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.solve(board)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)):</span><br><span class="line">                        <span class="keyword">if</span> self.is_valid(board, i, j, num):</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> self.solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self, board, row, col, num</span>):</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[row]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> [board[i][col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[start_row + i][start_col + j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 325 ms, 击败 42.81% 使用 Python3 的用户</p><p>内存消耗 : 16.38 MB, 击败 40.06% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    solve(board, boardSize, boardColSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num, <span class="type">int</span> boardSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isValid(board, i, j, num, boardSize)) &#123;</span><br><span class="line">                        board[i][j] = num;</span><br><span class="line">                        <span class="keyword">if</span> (solve(board, boardSize, boardColSize)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 6.45% 使用 C 的用户</p><p>内存消耗 : 5.71 MB, 击败 86.69% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SolveSudoku</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        Solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Solve</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (IsValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (Solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">char</span>[][] board, <span class="built_in">int</span> row, <span class="built_in">int</span> col, <span class="built_in">char</span> num</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 88.89% 使用 C# 的用户</p><p>内存消耗 : 46.63 MB, 击败 15.87% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">board</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">solveSudoku</span> = (<span class="params">board</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">hasConflit</span> = (<span class="params">r, c, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][c] == val || board[r][i] == val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> subRowStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(r / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">const</span> subColStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(c / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val == board[subRowStart + i][subColStart + j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fill</span> = (<span class="params">i, j</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">9</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="title function_">fill</span>(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">hasConflit</span>(i, j, <span class="title class_">String</span>(num))) <span class="keyword">continue</span>;</span><br><span class="line">            board[i][j] = <span class="title class_">String</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">fill</span>(i, j + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            board[i][j] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 78 ms, 击败 84.59% 使用 JavaScript 的用户</p><p>内存消耗 : 50.79 MB, 击败 15.41% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSudoku</span>(<span class="params">board: <span class="built_in">string</span>[][]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hasConflit = (<span class="attr">r</span>: <span class="built_in">number</span>, <span class="attr">c</span>: <span class="built_in">number</span>, <span class="attr">val</span>: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][c] === val || board[r][i] === val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> subRowStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(r / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">const</span> subColStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(c / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val === board[subRowStart + i][subColStart + j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> fill = (<span class="attr">i</span>: <span class="built_in">number</span>, <span class="attr">j</span>: <span class="built_in">number</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (j === <span class="number">9</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] !== <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="title function_">fill</span>(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">const</span> strNum = <span class="title class_">String</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">hasConflit</span>(i, j, strNum)) &#123;</span><br><span class="line">                board[i][j] = strNum;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">fill</span>(i, j + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                board[i][j] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 82 ms, 击败 67.31% 使用 TypeScript 的用户</p><p>内存消耗 : 51.56 MB, 击败 13.46% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[][] $board</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solveSudoku</span>(<span class="params">&amp;<span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">solve</span>(<span class="variable">$board</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hasConflit</span>(<span class="params"><span class="variable">$board</span>, <span class="variable">$r</span>, <span class="variable">$c</span>, <span class="variable">$val</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$c</span>] === <span class="variable">$val</span> || <span class="variable">$board</span>[<span class="variable">$r</span>][<span class="variable">$i</span>] === <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$subRowStart</span> = <span class="title function_ invoke__">floor</span>(<span class="variable">$r</span> / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="variable">$subColStart</span> = <span class="title function_ invoke__">floor</span>(<span class="variable">$c</span> / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">3</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$val</span> === <span class="variable">$board</span>[<span class="variable">$subRowStart</span> + <span class="variable">$i</span>][<span class="variable">$subColStart</span> + <span class="variable">$j</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params">&amp;<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$j</span> === <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$num</span> = <span class="number">1</span>; <span class="variable">$num</span> &lt;= <span class="number">9</span>; <span class="variable">$num</span>++) &#123;</span><br><span class="line">            <span class="variable">$strNum</span> = <span class="title function_ invoke__">strval</span>(<span class="variable">$num</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasConflit</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span>, <span class="variable">$strNum</span>)) &#123;</span><br><span class="line">                <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$strNum</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span> + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solve</span>(<span class="params">&amp;<span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 113 ms, 击败 50.00% 使用 PHP 的用户</p><p>内存消耗 : 20.03 MB, 击败 -% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> line <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">9</span>)</span><br><span class="line">    <span class="keyword">var</span> column <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">9</span>)</span><br><span class="line">    <span class="keyword">var</span> block <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">3</span>), count: <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> valid <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> spaces <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">solveSudoku</span>(<span class="keyword">_</span> <span class="params">board</span>: <span class="keyword">inout</span> [[<span class="type">Character</span>]]) &#123;</span><br><span class="line">        initializeSets(with: board)</span><br><span class="line">        <span class="type">DFS</span>(<span class="operator">&amp;</span>board, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">initializeSets</span>(<span class="params">with</span> <span class="params">board</span>: [[<span class="type">Character</span>]]) &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">==</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    spaces.append([i, j])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> digit <span class="operator">=</span> <span class="type">Int</span>(<span class="type">String</span>(board[i][j]))<span class="operator">!</span> <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                    line[i].insert(digit)</span><br><span class="line">                    column[j].insert(digit)</span><br><span class="line">                    block[i<span class="regexp">/3][j/3].insert(digit)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    func DFS(_ board: inout [[Character]], _ pos: Int) &#123;</span></span><br><span class="line"><span class="regexp">        if pos == spaces.count &#123;</span></span><br><span class="line"><span class="regexp">            valid = true</span></span><br><span class="line"><span class="regexp">            return</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        let space = spaces[pos]</span></span><br><span class="line"><span class="regexp">        let i = space[0]</span></span><br><span class="line"><span class="regexp">        let j = space[1]</span></span><br><span class="line"><span class="regexp">        var digit = 0</span></span><br><span class="line"><span class="regexp">        while digit &lt; 9 &amp;&amp; !valid &#123;</span></span><br><span class="line"><span class="regexp">            if !line[i].contains(digit) &amp;&amp; !column[j].contains(digit) &amp;&amp; !block[i/3][j/3].contains(digit) &#123;</span></span><br><span class="line"><span class="regexp">                line[i].insert(digit)</span></span><br><span class="line"><span class="regexp">                column[j].insert(digit)</span></span><br><span class="line"><span class="regexp">                block[i/3][j/3].insert(digit)</span></span><br><span class="line"><span class="regexp">                board[i][j] = Character(String(digit + 1))</span></span><br><span class="line"><span class="regexp">                DFS(&amp;board, pos + 1)</span></span><br><span class="line"><span class="regexp">                line[i].remove(digit)</span></span><br><span class="line"><span class="regexp">                column[j].remove(digit)</span></span><br><span class="line"><span class="regexp">                block[i/3][j/3].remove(digit)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            digit += 1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 13.33% 使用 Swift 的用户</p><p>内存消耗 : 16.30 MB, 击败 6.67% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solveSudoku</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        solve(board)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">solve</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (num <span class="keyword">in</span> <span class="string">&#x27;1&#x27;</span>..<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isValid</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;, row: <span class="type">Int</span>, col: <span class="type">Int</span>, num: <span class="type">Char</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 149 ms, 击败 92.86% 使用 Kotlin 的用户</p><p>内存消耗 : 34.05 MB, 击败 92.86% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> solveSudoku(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    solve(board);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> solve(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">1</span>; <span class="built_in">num</span> &lt;= <span class="number">9</span>; ++<span class="built_in">num</span>) &#123;</span><br><span class="line">            <span class="built_in">String</span> strNum = <span class="built_in">num</span>.toString();</span><br><span class="line">            <span class="keyword">if</span> (isValid(board, i, j, strNum)) &#123;</span><br><span class="line">              board[i][j] = strNum;</span><br><span class="line">              <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> isValid(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board, <span class="built_in">int</span> row, <span class="built_in">int</span> col, <span class="built_in">String</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board[row][i] == <span class="built_in">num</span> || board[i][col] == <span class="built_in">num</span> ||</span><br><span class="line">          board[<span class="number">3</span> * (row ~/ <span class="number">3</span>) + i ~/ <span class="number">3</span>][<span class="number">3</span> * (col ~/ <span class="number">3</span>) + i % <span class="number">3</span>] == <span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 289 ms, 击败 100.00% 使用 Dart 的用户</p><p>内存消耗 : 145.09 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solveSudoku</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">solve(board)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solve</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> num := <span class="type">byte</span>(<span class="string">&#x27;1&#x27;</span>); num &lt;= <span class="string">&#x27;9&#x27;</span>; num++ &#123;</span><br><span class="line"><span class="keyword">if</span> isValid(board, i, j, num) &#123;</span><br><span class="line">board[i][j] = num</span><br><span class="line"><span class="keyword">if</span> solve(board) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(board [][]<span class="type">byte</span>, row, col <span class="type">int</span>, num <span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> board[row][i] == num || board[i][col] == num ||</span><br><span class="line">board[<span class="number">3</span>*(row/<span class="number">3</span>)+i/<span class="number">3</span>][<span class="number">3</span>*(col/<span class="number">3</span>)+i%<span class="number">3</span>] == num &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 70.00% 使用 Go 的用户</p><p>内存消耗 : 1.88 MB, 击败 86.32% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sudoku</span>(<span class="params">board</span>)</span><br><span class="line">  solve(board)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">board</span>)</span><br><span class="line">  (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">      <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>..<span class="string">&#x27;9&#x27;</span>).each <span class="keyword">do</span> |<span class="params">num</span>|</span><br><span class="line">          <span class="keyword">if</span> is_valid(board, i, j, num)</span><br><span class="line">            board[i][j] = num</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> solve(board)</span><br><span class="line">            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>)</span><br><span class="line">  num = num.to_s</span><br><span class="line">  (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> board[row][i] == num |<span class="params"></span>| board[i][col] == num |<span class="params"></span>|</span><br><span class="line">                   board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.85 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    solve(board)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solve</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board(i)(j) == &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">for</span> (num &lt;- &#x27;<span class="number">1</span>&#x27; to &#x27;<span class="number">9</span>&#x27;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">              board(i)(j) = num</span><br><span class="line">              <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">              board(i)(j) = &#x27;.&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]], row: <span class="type">Int</span>, col: <span class="type">Int</span>, num: <span class="type">Char</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board(row)(i) == num || board(i)(col) == num ||</span><br><span class="line">        board(<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>)(<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>) == num) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 637 ms, 击败 80.00% 使用 Scala 的用户</p><p>内存消耗 : 56.14 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">solve_sudoku</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">solve</span>(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">solve</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">num</span> <span class="keyword">in</span> <span class="string">&#x27;1&#x27;</span>..=<span class="string">&#x27;9&#x27;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">Self</span>::<span class="title function_ invoke__">is_valid</span>(board, i, j, num) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">Self</span>::<span class="title function_ invoke__">solve</span>(board) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">is_valid</span>(board: &amp;<span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;, row: <span class="type">usize</span>, col: <span class="type">usize</span>, num: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">num</span> = num <span class="keyword">as</span> <span class="type">u8</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> board[row][i] <span class="keyword">as</span> <span class="type">u8</span> == num || board[i][col] <span class="keyword">as</span> <span class="type">u8</span> == num ||</span><br><span class="line">               board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] <span class="keyword">as</span> <span class="type">u8</span> == num &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 13.89% 使用 Rust 的用户</p><p>内存消耗 : 2.06 MB, 击败 75.00% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;解数独、数组、哈希表、回溯、矩阵、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
  </entry>
  
  <entry>
    <title>力扣00036.有效的数独</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/10af33f152d7/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/10af33f152d7/</id>
    <published>2020-01-10T03:15:00.000Z</published>
    <updated>2020-01-10T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</li></ol><p><strong>注意：</strong></p><ul><li>一个有效的数独（部分已被填充）不一定是可解的。</li><li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li><li>空白格用 ‘.’ 表示。</li></ul><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/10af33f152d7/202001100001.webp" class="" title="示例1"><blockquote><p>输入：board &#x3D;<br>[[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：true</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：board &#x3D;<br>[[“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：false<br>解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>board.length &#x3D;&#x3D; 9</li><li>board[i].length &#x3D;&#x3D; 9</li><li>board[i][j] 是一位数字（1-9）或者 ‘.’</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; rowSet;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.<span class="built_in">find</span>(board[i][j]) != rowSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; colSet;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.<span class="built_in">find</span>(board[i][j]) != colSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                unordered_set&lt;<span class="type">char</span>&gt; blockSet;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="type">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.<span class="built_in">find</span>(currentNum) != blockSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.<span class="built_in">insert</span>(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 17 ms, 击败 54.62% 使用 C++ 的用户</p><p>内存消耗 : 23.61 MB, 击败 5.03% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            HashSet&lt;Character&gt; rowSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            HashSet&lt;Character&gt; colSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">blockRow</span> <span class="operator">=</span> <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">blockCol</span> <span class="operator">=</span> <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                HashSet&lt;Character&gt; blockSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="type">char</span> <span class="variable">currentNum</span> <span class="operator">=</span> board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.add(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 41.51% 使用 Java 的用户</p><p>内存消耗 : 43.24 MB, 击败 26.12% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            row_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> row_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            col_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> col_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    col_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> block_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> block_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                block_set = <span class="built_in">set</span>()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                            <span class="keyword">if</span> current_num <span class="keyword">in</span> block_set:</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                            block_set.add(current_num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 73.11% 使用 Python 的用户</p><p>内存消耗 : 11.45 MB, 击败 93.85% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            row_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> row_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            col_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> col_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    col_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> block_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> block_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                block_set = <span class="built_in">set</span>()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                            <span class="keyword">if</span> current_num <span class="keyword">in</span> block_set:</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                            block_set.add(current_num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 85.12% 使用 Python3 的用户</p><p>内存消耗 : 16.44 MB, 击败 32.84% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="type">bool</span> rowSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">            <span class="type">char</span> currentNum = board[i][j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rowSet[digit]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet[digit] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">        <span class="type">bool</span> colSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> currentNum = board[i][j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (colSet[digit]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet[digit] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="type">bool</span> blockSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="type">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet[digit]) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet[digit] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 88.64% 使用 C 的用户</p><p>内存消耗 : 5.83 MB, 击败 77.45% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValidSudoku</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            HashSet&lt;<span class="built_in">char</span>&gt; rowSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.Contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.Add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            HashSet&lt;<span class="built_in">char</span>&gt; colSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.Contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.Add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                HashSet&lt;<span class="built_in">char</span>&gt; blockSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="built_in">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.Contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.Add(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 91 ms, 击败 75.74% 使用 C# 的用户</p><p>内存消耗 : 47.38 MB, 击败 6.39% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">board</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="keyword">function</span>(<span class="params">board</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> rowSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rowSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">const</span> colSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (colSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="keyword">const</span> blockSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="keyword">const</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet.<span class="title function_">has</span>(currentNum)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet.<span class="title function_">add</span>(currentNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 87.97% 使用 JavaScript 的用户</p><p>内存消耗 : 51.89 MB, 击败 29.43% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isValidSudoku</span>(<span class="params">board: <span class="built_in">string</span>[][]</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> rowSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rowSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">const</span> colSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (colSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="keyword">const</span> blockSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="keyword">const</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet.<span class="title function_">has</span>(currentNum)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet.<span class="title function_">add</span>(currentNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 99.15% 使用 TypeScript 的用户</p><p>内存消耗 : 52.70 MB, 击败 15.38% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[][] $board</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidSudoku</span>(<span class="params"><span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$rowSet</span> = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">9</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rowSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$rowSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">9</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="variable">$colSet</span> = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$colSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$colSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$blockRow</span> = <span class="number">0</span>; <span class="variable">$blockRow</span> &lt; <span class="number">3</span>; ++<span class="variable">$blockRow</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$blockCol</span> = <span class="number">0</span>; <span class="variable">$blockCol</span> &lt; <span class="number">3</span>; ++<span class="variable">$blockCol</span>) &#123;</span><br><span class="line">                <span class="variable">$blockSet</span> = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">3</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                        <span class="variable">$currentNum</span> = <span class="variable">$board</span>[<span class="variable">$blockRow</span> * <span class="number">3</span> + <span class="variable">$i</span>][<span class="variable">$blockCol</span> * <span class="number">3</span> + <span class="variable">$j</span>];</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$currentNum</span> !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$blockSet</span>[<span class="variable">$currentNum</span>])) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$blockSet</span>[<span class="variable">$currentNum</span>] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 29 ms, 击败 72.00% 使用 PHP 的用户</p><p>内存消耗 : 19.94 MB, 击败 8.00% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isValidSudoku</span>(<span class="keyword">_</span> <span class="params">board</span>: [[<span class="type">Character</span>]]) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> rowSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> rowSet.contains(board[i][j]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.insert(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> colSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> colSet.contains(board[i][j]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.insert(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> blockRow <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> blockCol <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> blockSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> currentNum <span class="operator">=</span> board[blockRow <span class="operator">*</span> <span class="number">3</span> <span class="operator">+</span> i][blockCol <span class="operator">*</span> <span class="number">3</span> <span class="operator">+</span> j]</span><br><span class="line">                        <span class="keyword">if</span> currentNum <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> blockSet.contains(currentNum) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.insert(currentNum)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 16.05 MB, 击败 6.98% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isValidSudoku</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> rowSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.add(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> colSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.add(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (blockRow <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (blockCol <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> blockSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="keyword">val</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.add(currentNum)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 192 ms, 击败 57.89% 使用 Kotlin 的用户</p><p>内存消耗 : 41.67 MB, 击败 36.84% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isValidSudoku(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; rowSet = <span class="built_in">Set</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          rowSet.add(board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">      <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; colSet = <span class="built_in">Set</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          colSet.add(board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; blockSet = <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">String</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              blockSet.add(currentNum);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 349 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 147.78 MB, 击败 75.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidSudoku</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">        rowSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> rowSet[board[i][j]] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                rowSet[board[i][j]] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">        colSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> colSet[board[i][j]] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                colSet[board[i][j]] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> blockRow := <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; blockRow++ &#123;</span><br><span class="line">        <span class="keyword">for</span> blockCol := <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; blockCol++ &#123;</span><br><span class="line">            blockSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">            <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">                <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">                    currentNum := board[blockRow*<span class="number">3</span>+i][blockCol*<span class="number">3</span>+j]</span><br><span class="line">                    <span class="keyword">if</span> currentNum != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> blockSet[currentNum] &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet[currentNum] = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 44.49% 使用 Go 的用户</p><p>内存消耗 : 2.49 MB, 击败 65.52% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_sudoku</span>(<span class="params">board</span>)</span><br><span class="line">  <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    row_set = <span class="title class_">Set</span>.new</span><br><span class="line">    <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">      current_num = board[i][j]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> row_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">      row_set.add(current_num)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">    col_set = <span class="title class_">Set</span>.new</span><br><span class="line">    <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">      current_num = board[i][j]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> col_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">      col_set.add(current_num)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">block_row</span>|</span><br><span class="line">    (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">block_col</span>|</span><br><span class="line">      block_set = <span class="title class_">Set</span>.new</span><br><span class="line">      (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">          current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">          <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> block_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">          block_set.add(current_num)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 71 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.64 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> rowSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(i)(j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (rowSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          rowSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> colSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(i)(j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (colSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          colSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (blockRow &lt;- <span class="number">0</span> until <span class="number">3</span>; blockCol &lt;- <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> blockSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">3</span>; j &lt;- <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(blockRow * <span class="number">3</span> + i)(blockCol * <span class="number">3</span> + j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          blockSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 553 ms, 击败 92.86% 使用 Scala 的用户</p><p>内存消耗 : 56.34 MB, 击败 35.71% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_valid_sudoku</span>(board: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">row_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_num</span> = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> !row_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">col_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_num</span> = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> !col_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">block_row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">block_col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">block_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">current_num</span> = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> !block_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 18.57% 使用 Rust 的用户</p><p>内存消耗 : 2.13 MB, 击败 44.29% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;有效的数独、数组、哈希表、矩阵、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00035.搜索插入位置</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/fc78af4ae7e9/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/fc78af4ae7e9/</id>
    <published>2020-01-09T03:15:00.000Z</published>
    <updated>2020-01-09T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 5<br>输出: 2</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 2<br>输出: 1</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 7<br>输出: 4</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li><li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li><li>nums 为 无重复元素 的 升序 排列数组</li><li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 26.16% 使用 C++ 的用户</p><p>内存消耗 : 11.93 MB, 击败 5.16% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 42.02 MB, 击败 56.65% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 75.84% 使用 Python 的用户</p><p>内存消耗 : 11.91 MB, 击败 93.16% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 31 ms, 击败 95.92% 使用 Python3 的用户</p><p>内存消耗 : 17.02 MB, 击败 34.81% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.89 MB, 击败 88.56% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SearchInsert</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 77.15% 使用 C# 的用户</p><p>内存消耗 : 41.67 MB, 击败 9.28% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 63.71% 使用 JavaScript 的用户</p><p>内存消耗 : 49.24 MB, 击败 7.29% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchInsert</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">mid</span>: <span class="built_in">number</span> = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 54 ms, 击败 93.77% 使用 TypeScript 的用户</p><p>内存消耗 : 51.66 MB, 击败 5.12% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">searchInsert</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 45.63% 使用 PHP 的用户</p><p>内存消耗 : 20.31 MB, 击败 14.56% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">searchInsert</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 99.43% 使用 Swift 的用户</p><p>内存消耗 : 15.36 MB, 击败 36.93% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">searchInsert</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                nums[mid] == target -&gt; <span class="keyword">return</span> mid</span><br><span class="line">                nums[mid] &lt; target -&gt; left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> -&gt; right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 190 ms, 击败 25.30% 使用 Kotlin 的用户</p><p>内存消耗 : 38.00 MB, 击败 22.89% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> searchInsert(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 334 ms, 击败 17.65% 使用 Dart 的用户</p><p>内存消耗 : 147.11 MB, 击败 70.59% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.84 MB, 击败 5.00% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_insert</span>(<span class="params">nums, target</span>)</span><br><span class="line">    left, right = <span class="number">0</span>, nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 37.50% 使用 Ruby 的用户</p><p>内存消耗 : 206.66 MB, 击败 25.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    left</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 481 ms, 击败 90.91% 使用 Scala 的用户</p><p>内存消耗 : 54.70 MB, 击败 9.09% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_insert</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.11 MB, 击败 56.38% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">search-insert</span> nums target)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> exact-integer?) exact-integer? exact-integer?)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> loop ([<span class="name">left</span> <span class="number">0</span>]</span><br><span class="line">             [<span class="name">right</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>)])</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      [(<span class="name"><span class="built_in">&lt;=</span></span> left right)</span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ([<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)])</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           [(<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target) mid]</span><br><span class="line">           [(<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target) (<span class="name">loop</span> (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right)]</span><br><span class="line">           [<span class="name"><span class="built_in">else</span></span> (<span class="name">loop</span> left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))]))</span><br><span class="line">       ]</span><br><span class="line">      [<span class="name"><span class="built_in">else</span></span> left])))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 204 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 97.80 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;搜索插入位置、数组、二分查找、简单&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00034.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/d4af5b04bc75/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/d4af5b04bc75/</id>
    <published>2020-01-08T03:15:00.000Z</published>
    <updated>2020-01-08T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8<br>输出：[3,4]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6<br>输出：[-1,-1]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：nums &#x3D; [], target &#x3D; 0<br>输出：[-1,-1]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 10^5$</li><li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li><li>nums 是一个非递减数组</li><li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="built_in">find_first_occurrence</span>(nums, target), <span class="built_in">find_last_occurrence</span>(nums, target)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_first_occurrence</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_last_occurrence</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 20.11% 使用 C++ 的用户</p><p>内存消耗 : 15.74 MB, 击败 6.25% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;findFirstOccurrence(nums, target), findLastOccurrence(nums, target)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findFirstOccurrence</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findLastOccurrence</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 44.92 MB, 击败 12.98% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        first_occurrence = find_first_occurrence(nums, target)</span><br><span class="line">        last_occurrence = find_last_occurrence(nums, target)</span><br><span class="line">        <span class="keyword">return</span> [first_occurrence, last_occurrence]</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 82.57% 使用 Python 的用户</p><p>内存消耗 : 11.77 MB, 击败 91.52% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        first_occurrence = find_first_occurrence(nums, target)</span><br><span class="line">        last_occurrence = find_last_occurrence(nums, target)</span><br><span class="line">        <span class="keyword">return</span> [first_occurrence, last_occurrence]</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 95.63% 使用 Python3 的用户</p><p>内存消耗 : 17.87 MB, 击败 30.78% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">searchRange</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    result[<span class="number">0</span>] = find_first_occurrence(nums, numsSize, target);</span><br><span class="line">    result[<span class="number">1</span>] = find_last_occurrence(nums, numsSize, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find_first_occurrence</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            result = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find_last_occurrence</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            result = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 69.47% 使用 C 的用户</p><p>内存消耗 : 6.95 MB, 击败 99.07% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SearchRange</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">        result[<span class="number">0</span>] = FindFirstOccurrence(nums, target);</span><br><span class="line">        result[<span class="number">1</span>] = FindLastOccurrence(nums, target);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">FindFirstOccurrence</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">FindLastOccurrence</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 123 ms, 击败 70.95% 使用 C# 的用户</p><p>内存消耗 : 48.65 MB, 击败 5.24% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> findFirstOccurrence = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> findLastOccurrence = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> firstOccurrence = <span class="title function_">findFirstOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">const</span> lastOccurrence = <span class="title function_">findLastOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">return</span> [firstOccurrence, lastOccurrence];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 98.12% 使用 JavaScript 的用户</p><p>内存消耗 : 49.98 MB, 击败 8.48% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchRange</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> findFirstOccurrence = <span class="keyword">function</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> findLastOccurrence = <span class="keyword">function</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> firstOccurrence = <span class="title function_">findFirstOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">const</span> lastOccurrence = <span class="title function_">findLastOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">return</span> [firstOccurrence, lastOccurrence];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 45.11% 使用 TypeScript 的用户</p><p>内存消耗 : 52.08 MB, 击败 14.82% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">searchRange</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFirstOccurrence</span>(<span class="variable">$nums</span>, <span class="variable">$target</span>), <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findLastOccurrence</span>(<span class="variable">$nums</span>, <span class="variable">$target</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findFirstOccurrence</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$mid</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findLastOccurrence</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$mid</span>;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 87.10% 使用 PHP 的用户</p><p>内存消耗 : 21.48 MB, 击败 64.52% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">searchRange</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [findFirstOccurrence(nums, target), findLastOccurrence(nums, target)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findFirstOccurrence</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                result <span class="operator">=</span> mid</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findLastOccurrence</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                result <span class="operator">=</span> mid</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 100.00% 使用 Swift 的用户</p><p>内存消耗 : 16.85 MB, 击败 5.10% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">searchRange</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">return</span> intArrayOf(findFirstOccurrence(nums, target), findLastOccurrence(nums, target))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findFirstOccurrence</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findLastOccurrence</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 218 ms, 击败 48.00% 使用 Kotlin 的用户</p><p>内存消耗 : 38.01 MB, 击败 56.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; searchRange(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">return</span> [findFirstOccurrence(nums, target), findLastOccurrence(nums, target)];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> findFirstOccurrence(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        result = mid;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> findLastOccurrence(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        result = mid;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 302 ms, 击败 33.33% 使用 Dart 的用户</p><p>内存消耗 : 147.61 MB, 击败 66.67% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;findFirstOccurrence(nums, target), findLastOccurrence(nums, target)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findFirstOccurrence</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">left, right, result := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">mid := left + (right-left)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">result = mid</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLastOccurrence</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">left, right, result := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">mid := left + (right-left)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">result = mid</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 89.67% 使用 Go 的用户</p><p>内存消耗 : 4.32 MB, 击败 78.50% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_range</span>(<span class="params">nums, target</span>)</span><br><span class="line">  [find_first_occurrence(nums, target), find_last_occurrence(nums, target)]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left, right, result = <span class="number">0</span>, nums.length - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      result = mid</span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left, right, result = <span class="number">0</span>, nums.length - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      result = mid</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.79 MB, 击败 66.67% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Array</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="type">Array</span>(findFirstOccurrence(nums, target), findLastOccurrence(nums, target))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findFirstOccurrence</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        result = mid</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findLastOccurrence</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        result = mid</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 549 ms, 击败 10.00% 使用 Scala 的用户</p><p>内存消耗 : 59.05 MB, 击败 10.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_range</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="keyword">Self</span>::<span class="title function_ invoke__">find_first_occurrence</span>(&amp;nums, target), <span class="keyword">Self</span>::<span class="title function_ invoke__">find_last_occurrence</span>(&amp;nums, target)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">find_first_occurrence</span>(nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">find_last_occurrence</span>(nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.28 MB, 击败 75.00% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">search-range</span> nums target)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> exact-integer?) exact-integer? (<span class="name">listof</span> exact-integer?))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">find-first-occurrence</span> nums target left right)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">&gt;</span></span> left right) <span class="number">-1</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)))</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">first-left</span> (<span class="name">find-first-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))</span><br><span class="line">              (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> first-left <span class="number">-1</span>) mid first-left)))</span><br><span class="line">           ((<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name">find-first-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right))</span><br><span class="line">           (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">            (<span class="name">find-first-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">find-last-occurrence</span> nums target left right)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">&gt;</span></span> left right) <span class="number">-1</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)))</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">last-right</span> (<span class="name">find-last-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right)))</span><br><span class="line">              (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> last-right <span class="number">-1</span>) mid last-right)))</span><br><span class="line">           ((<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name">find-last-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right))</span><br><span class="line">           (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">            (<span class="name">find-last-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))))))</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> (<span class="name">find-first-occurrence</span> nums target <span class="number">0</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>))</span><br><span class="line">        (<span class="name">find-last-occurrence</span> nums target <span class="number">0</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>))))</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 214 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 98.83 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;在排序数组中查找元素的第一个和最后一个位置、数组、二分查找、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00033.搜索旋转排序数组</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/26a94457555d/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/26a94457555d/</id>
    <published>2020-01-07T03:15:00.000Z</published>
    <updated>2020-01-07T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>整数数组 nums 按升序排列，数组中的值 <strong>互不相同</strong> 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p><p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0<br>输出：4</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3<br>输出：-1</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：nums &#x3D; [1], target &#x3D; 0<br>输出：-1</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5000</li><li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li><li>nums 中的每个值都 独一无二</li><li>题目数据保证 nums 在预先未知的某个下标上进行了旋转</li><li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 66.87% 使用 C++ 的用户</p><p>内存消耗 : 13.30 MB, 击败 5.05% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 41.00 MB, 击败 19.74% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 52.22% 使用 Python 的用户</p><p>内存消耗 : 11.41 MB, 击败 100.00% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 71.66% 使用 Python3 的用户</p><p>内存消耗 : 16.74 MB, 击败 36.28% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.86 MB, 击败 88.43% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Search</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 83.77% 使用 C# 的用户</p><p>内存消耗 : 41.57 MB, 击败 5.19% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 95.29% 使用 JavaScript 的用户</p><p>内存消耗 : 49.34 MB, 击败 5.11% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 87.77% 使用 TypeScript 的用户</p><p>内存消耗 : 51.68 MB, 击败 7.42% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = (<span class="keyword">int</span>)((<span class="variable">$left</span> + <span class="variable">$right</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] == <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$left</span>] &lt;= <span class="variable">$nums</span>[<span class="variable">$mid</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$left</span>] &lt;= <span class="variable">$target</span> &amp;&amp; <span class="variable">$target</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$mid</span>]) &#123;</span><br><span class="line">                    <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt;= <span class="variable">$target</span> &amp;&amp; <span class="variable">$target</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                    <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 46.15% 使用 PHP 的用户</p><p>内存消耗 : 20.42 MB, 击败 7.69% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">search</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> (left <span class="operator">+</span> right) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[left] <span class="operator">&lt;=</span> nums[mid] &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[left] <span class="operator">&lt;=</span> target <span class="operator">&amp;&amp;</span> target <span class="operator">&lt;=</span> nums[mid] &#123;</span><br><span class="line">                    right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[mid] <span class="operator">&lt;=</span> target <span class="operator">&amp;&amp;</span> target <span class="operator">&lt;=</span> nums[right] &#123;</span><br><span class="line">                    left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.07% 使用 Swift 的用户</p><p>内存消耗 : 15.50 MB, 击败 18.69% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">search</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = (left + right) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 154 ms, 击败 95.12% 使用 Kotlin 的用户</p><p>内存消耗 : 34.81 MB, 击败 53.66% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> search(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = (left + right) ~/ <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">          right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">          left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 289 ms, 击败 100.00% 使用 Dart 的用户</p><p>内存消耗 : 147.27 MB, 击败 66.67% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left := <span class="number">0</span></span><br><span class="line">    right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid] &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 35.44% 使用 Go 的用户</p><p>内存消耗 : 2.39 MB, 击败 30.05% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = (left + right) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> nums[left] &lt;= nums[mid]</span><br><span class="line">      <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 40.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.52 MB, 击败 40.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = (left + right) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums(left) &lt;= nums(mid)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums(left) &lt;= target &amp;&amp; target &lt;= nums(mid)) &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums(mid) &lt;= target &amp;&amp; target &lt;= nums(right)) &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 499 ms, 击败 28.57% 使用 Scala 的用户</p><p>内存消耗 : 54.61 MB, 击败 14.29% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid] &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 8.57% 使用 Rust 的用户</p><p>内存消耗 : 2.01 MB, 击败 77.14% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;搜索旋转排序数组、数组、二分查找、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00032.最长有效括号</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/901bff9b47cd/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/901bff9b47cd/</id>
    <published>2020-01-06T03:15:00.000Z</published>
    <updated>2020-01-06T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：s &#x3D; “(()”<br>输出：2<br>解释：最长有效括号子串是 “()”</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：s &#x3D; “)()())”<br>输出：4<br>解释：最长有效括号子串是 “()()”</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：s &#x3D; “”<br>输出：0</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$0 &lt;&#x3D; s.length &lt;&#x3D; 3 * 10^4$</li><li>s[i] 为 ‘(‘ 或 ‘)’</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = <span class="built_in">max</span>(maxLen, i - st.<span class="built_in">top</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 8.35 MB, 击败 14.42% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = Math.max(maxLen, i - stack.peek());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 26.39% 使用 Java 的用户</p><p>内存消耗 : 41.96 MB, 击败 36.08% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestValidParentheses</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_len = <span class="built_in">max</span>(max_len, i - stack[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 27 ms, 击败 76.27% 使用 Python 的用户</p><p>内存消耗 : 11.87 MB, 击败 93.51% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestValidParentheses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_len = <span class="built_in">max</span>(max_len, i - stack[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 37 ms, 击败 95.99% 使用 Python3 的用户</p><p>内存消耗 : 17.03 MB, 击败 36.91% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxans = <span class="number">0</span>, n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] +</span><br><span class="line">                        ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxans = fmax(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 58.87% 使用 C 的用户</p><p>内存消耗 : 6.07 MB, 击败 92.90% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">LongestValidParentheses</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> maxans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> n = s.Length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span>[] dp = <span class="keyword">new</span> <span class="built_in">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = dp[i - <span class="number">1</span>] + ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxans = Math.Max(maxans, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 42 ms, 击败 91.38% 使用 C# 的用户</p><p>内存消耗 : 39.19 MB, 击败 10.35% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestValidParentheses = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> stack = [-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLen = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLen, i - stack[stack.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 95.40% 使用 JavaScript 的用户</p><p>内存消耗 : 51.18 MB, 击败 13.28% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestValidParentheses</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxLen</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">stack</span>: <span class="built_in">number</span>[] = [-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLen = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLen, i - stack[stack.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 97.96% 使用 TypeScript 的用户</p><p>内存消耗 : 52.29 MB, 击败 21.43% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longestValidParentheses</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$maxLen</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$stack</span> = [-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$s</span>[<span class="variable">$i</span>] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$i</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_pop</span>(<span class="variable">$stack</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$stack</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$i</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$maxLen</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxLen</span>, <span class="variable">$i</span> - <span class="title function_ invoke__">end</span>(<span class="variable">$stack</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxLen</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 80.00% 使用 PHP 的用户</p><p>内存消耗 : 20.43 MB, 击败 6.67% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">longestValidParentheses</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxLen <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> stack <span class="operator">=</span> [<span class="operator">-</span><span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> (i, char) <span class="keyword">in</span> s.enumerated() &#123;</span><br><span class="line">            <span class="keyword">if</span> char <span class="operator">==</span> <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">                stack.append(i)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.popLast()</span><br><span class="line">                <span class="keyword">if</span> stack.isEmpty &#123;</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen <span class="operator">=</span> <span class="built_in">max</span>(maxLen, i <span class="operator">-</span> stack.last<span class="operator">!</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 87.80% 使用 Swift 的用户</p><p>内存消耗 : 16.35 MB, 击败 7.32% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">longestValidParentheses</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxLen = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> stack = Stack&lt;<span class="built_in">Int</span>&gt;().apply &#123; push(-<span class="number">1</span>) &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> s.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> char = s[i]</span><br><span class="line">            <span class="keyword">if</span> (char == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(i)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    stack.push(i)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = maxOf(maxLen, i - stack.peek())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 175 ms, 击败 66.67% 使用 Kotlin 的用户</p><p>内存消耗 : 37.00 MB, 击败 25.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> longestValidParentheses(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; stack = [<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        stack.add(i);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.removeLast();</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty) &#123;</span><br><span class="line">          stack.add(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          maxLen = max(maxLen, i - stack.last);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 -% 使用 Dart 的用户</p><p>内存消耗 : 147.31 MB, 击败 -% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestValidParentheses</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">maxLen := <span class="number">0</span></span><br><span class="line">stack := []<span class="type">int</span>&#123;<span class="number">-1</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, char := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxLen = max(maxLen, i-stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 3.28 MB, 击败 27.17% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_valid_parentheses</span>(<span class="params">s</span>)</span><br><span class="line">  max_len = <span class="number">0</span></span><br><span class="line">  stack = [-<span class="number">1</span>]</span><br><span class="line">  s.each_char.with_index <span class="keyword">do</span> |<span class="params">char, i</span>|</span><br><span class="line">    <span class="keyword">if</span> char == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">      stack.push(i)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      stack.pop</span><br><span class="line">      <span class="keyword">if</span> stack.empty?</span><br><span class="line">        stack.push(i)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        max_len = [max_len, i - stack.last].max</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  max_len</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.87 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> stack = <span class="type">List</span>(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> ((char, i) &lt;- s.zipWithIndex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (char == &#x27;(&#x27;) &#123;</span><br><span class="line">        stack = i :: stack</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack = stack.tail</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty) &#123;</span><br><span class="line">          stack = i :: stack</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          maxLen = math.max(maxLen, i - stack.head)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxLen</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 504 ms, 击败 80.00% 使用 Scala 的用户</p><p>内存消耗 : 55.55 MB, 击败 80.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">longest_valid_parentheses</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_len</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="built_in">vec!</span>[-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i, c) <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                stack.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> stack.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    stack.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    max_len = max_len.<span class="title function_ invoke__">max</span>(i <span class="keyword">as</span> <span class="type">i32</span> - stack.<span class="title function_ invoke__">last</span>().<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_len <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.00 MB, 击败 98.53% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">longest-valid-parentheses</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> max-len <span class="number">0</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> stack (<span class="name"><span class="built_in">list</span></span> <span class="number">-1</span>))</span><br><span class="line">  (<span class="name">for</span> ([<span class="name">i</span> (<span class="name">in-range</span> (<span class="name"><span class="built_in">string-length</span></span> s))])</span><br><span class="line">    (<span class="name"><span class="built_in">define</span></span> char (<span class="name"><span class="built_in">string-ref</span></span> s i))</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      [(<span class="name"><span class="built_in">char=?</span></span> char <span class="literal">#\(</span>) (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">cons</span></span> i stack))]</span><br><span class="line">      [(<span class="name"><span class="built_in">char=?</span></span> char <span class="literal">#\)</span>)</span><br><span class="line">       (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">cdr</span></span> stack))</span><br><span class="line">       (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> stack)</span><br><span class="line">           (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">list</span></span> i))</span><br><span class="line">           (<span class="name"><span class="built_in">set!</span></span> max-len (<span class="name"><span class="built_in">max</span></span> max-len (<span class="name"><span class="built_in">-</span></span> i (<span class="name"><span class="built_in">car</span></span> stack)))))]))</span><br><span class="line">  max-len)</span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 187 ms, 击败 100.00% 使用 Racket 的用户</p><p>内存消耗 : 97.80 MB, 击败 100.00% 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;最长有效括号、栈、字符串、动态规划、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>力扣00031.下一个排列</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/eccf93c515d1/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/eccf93c515d1/</id>
    <published>2020-01-03T03:15:00.000Z</published>
    <updated>2020-01-03T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p><ul><li>例如，arr &#x3D; [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。</li></ul><p>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><ul><li>例如，arr &#x3D; [1,2,3] 的下一个排列是 [1,3,2] 。</li><li>类似地，arr &#x3D; [2,3,1] 的下一个排列是 [3,1,2] 。</li><li>而 arr &#x3D; [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。</li></ul><p>给你一个整数数组 nums ，找出 nums 的下一个排列。</p><p>必须 <strong>原地</strong> 修改，只允许使用额外常数空间。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：nums &#x3D; [1,2,3]<br>输出：[1,3,2]</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：nums &#x3D; [3,2,1]<br>输出：[1,2,3]</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：nums &#x3D; [1,1,5]<br>输出：[1,5,1]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 100</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 100</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + i + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 14.27 MB, 击败 5.56% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) &#123;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">        reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            swap(nums, start, end);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p><p>内存消耗 : 42.07 MB, 击败 22.67% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] &lt;= nums[i]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        nums[i + <span class="number">1</span>:] = <span class="built_in">reversed</span>(nums[i + <span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.57% 使用 Python 的用户</p><p>内存消耗 : 11.38 MB, 击败 96.34% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] &lt;= nums[i]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        nums[i + <span class="number">1</span>:] = <span class="built_in">reversed</span>(nums[i + <span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 96.03% 使用 Python3 的用户</p><p>内存消耗 : 16.47 MB, 击败 30.51% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        swap(&amp;nums[start], &amp;nums[end]);</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = numsSize - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, numsSize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;nums[i], &amp;nums[j]);</span><br><span class="line"></span><br><span class="line">    reverse(nums, i + <span class="number">1</span>, numsSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.42% 使用 C 的用户</p><p>内存消耗 : 6.12 MB, 击败 92.04% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NextPermutation</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> i = nums.Length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">            Array.Reverse(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> j = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(nums, i, j);</span><br><span class="line">        Array.Reverse(nums, i + <span class="number">1</span>, nums.Length - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 100 ms, 击败 83.33% 使用 C# 的用户</p><p>内存消耗 : 46.14 MB, 击败 5.88% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> nextPermutation = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === -<span class="number">1</span>) &#123;</span><br><span class="line">        nums.<span class="title function_">reverse</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> j = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    [nums[i], nums[j]] = [nums[j], nums[i]];</span><br><span class="line">    <span class="title function_">reverse</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">nums, start</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> end = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        [nums[start], nums[end]] = [nums[end], nums[start]];</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 42.58% 使用 JavaScript 的用户</p><p>内存消耗 : 51.04 MB, 击败 5.08% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextPermutation</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === -<span class="number">1</span>) &#123;</span><br><span class="line">        nums.<span class="title function_">reverse</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> j = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    [nums[i], nums[j]] = [nums[j], nums[i]];</span><br><span class="line">    <span class="title function_">reverse</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">nums: <span class="built_in">number</span>[], start: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> end = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        [nums[start], nums[end]] = [nums[end], nums[start]];</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 62.28% 使用 TypeScript 的用户</p><p>内存消耗 : 52.34 MB, 击败 11.40% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nextPermutation</span>(<span class="params">&amp;<span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] &gt;= <span class="variable">$nums</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="variable">$i</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverse</span>(<span class="variable">$nums</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$j</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$nums</span>[<span class="variable">$j</span>] &lt;= <span class="variable">$nums</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">            <span class="variable">$j</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$j</span>]] = [<span class="variable">$nums</span>[<span class="variable">$j</span>], <span class="variable">$nums</span>[<span class="variable">$i</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverse</span>(<span class="variable">$nums</span>, <span class="variable">$i</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">&amp;<span class="variable">$nums</span>, <span class="variable">$start</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$end</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$start</span> &lt; <span class="variable">$end</span>) &#123;</span><br><span class="line">            [<span class="variable">$nums</span>[<span class="variable">$start</span>], <span class="variable">$nums</span>[<span class="variable">$end</span>]] = [<span class="variable">$nums</span>[<span class="variable">$end</span>], <span class="variable">$nums</span>[<span class="variable">$start</span>]];</span><br><span class="line">            <span class="variable">$start</span>++;</span><br><span class="line">            <span class="variable">$end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 30.77% 使用 PHP 的用户</p><p>内存消耗 : 20.43 MB, 击败 7.69% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">nextPermutation</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> nums[i] <span class="operator">&gt;=</span> nums[i <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">            i <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> j <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] <span class="operator">&lt;=</span> nums[i] &#123;</span><br><span class="line">            j <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        nums.swapAt(i, j)</span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> end <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> start <span class="operator">&lt;</span> end &#123;</span><br><span class="line">            nums.swapAt(start, end)</span><br><span class="line">            start <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            end <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 59.57% 使用 Swift 的用户</p><p>内存消耗 : 15.65 MB, 击败 6.38% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextPermutation</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = nums.size - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) &#123;</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> j = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        nums.swap(i, j)</span><br><span class="line">        reverse(nums, i + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">reverse</span><span class="params">(nums: <span class="type">IntArray</span>, start: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> end = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> s = start</span><br><span class="line">        <span class="keyword">var</span> e = end</span><br><span class="line">        <span class="keyword">while</span> (s &lt; e) &#123;</span><br><span class="line">            nums[s] = nums[e].also &#123; nums[e] = nums[s] &#125;</span><br><span class="line">            s++</span><br><span class="line">            e--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> IntArray.<span class="title">swap</span><span class="params">(i: <span class="type">Int</span>, j: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> temp = <span class="keyword">this</span>[i]</span><br><span class="line">        <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j]</span><br><span class="line">        <span class="keyword">this</span>[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 21.74% 使用 Kotlin 的用户</p><p>内存消耗 : 38.23 MB, 击败 8.70% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> nextPermutation(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> i = nums.length - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      _swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    _reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _swap(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;</span><br><span class="line">    <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _reverse(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> left, <span class="built_in">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="built_in">int</span> temp = nums[left];</span><br><span class="line">      nums[left] = nums[right];</span><br><span class="line">      nums[right] = temp;</span><br><span class="line">      left++;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 148.27 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    i := <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        i--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j] &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(nums[i+<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.27 MB, 击败 81.13% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_permutation</span>(<span class="params">nums</span>)</span><br><span class="line">  i = nums.length - <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> i &gt;= <span class="number">0</span></span><br><span class="line">    j = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j]</span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  reverse(nums, i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">nums, start</span>)</span><br><span class="line">  i, j = start, nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; j</span><br><span class="line">    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 -% 使用 Ruby 的用户</p><p>内存消耗 : 206.68 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> i = nums.length - <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums(i) &gt;= nums(i + <span class="number">1</span>)) &#123;</span><br><span class="line">      i -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> j = nums.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums(i) &gt;= nums(j)) &#123;</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      swap(nums, i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], i: <span class="type">Int</span>, j: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> temp = nums(i)</span><br><span class="line">    nums(i) = nums(j)</span><br><span class="line">    nums(j) = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">reverse</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> i = start</span><br><span class="line">    <span class="keyword">var</span> j = end</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      swap(nums, i, j)</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 523 ms, 击败 33.33% 使用 Scala 的用户</p><p>内存消耗 : 55.04 MB, 击败 33.33% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">next_permutation</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i <span class="keyword">as</span> <span class="type">usize</span>] &gt;= nums[(i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>] &#123;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">j</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i <span class="keyword">as</span> <span class="type">usize</span>] &gt;= nums[j <span class="keyword">as</span> <span class="type">usize</span>] &#123;</span><br><span class="line">                j -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums.<span class="title function_ invoke__">swap</span>(i <span class="keyword">as</span> <span class="type">usize</span>, j <span class="keyword">as</span> <span class="type">usize</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nums[(i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>..].<span class="title function_ invoke__">reverse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.09 MB, 击败 36.84% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;下一个排列、数组、双指针、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
  </entry>
  
  <entry>
    <title>力扣00030.串联所有单词的子串</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/4363e641e8fb/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/4363e641e8fb/</id>
    <published>2020-01-02T03:15:00.000Z</published>
    <updated>2020-01-02T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。</p><p> s 中的 串联子串 是指一个包含  words 中所有字符串以任意顺序排列连接起来的子串。</p><ul><li>例如，如果 words &#x3D; [“ab”,”cd”,”ef”]， 那么 “abcdef”， “abefcd”，”cdabef”， “cdefab”，”efabcd”， 和 “efcdab” 都是串联子串。 “acdbef” 不是串联子串，因为他不是任何 words 排列的连接。</li></ul><p>返回所有串联子串在 s 中的开始索引。你可以以 任意顺序 返回答案。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入：s &#x3D; “barfoothefoobarman”, words &#x3D; [“foo”,”bar”]<br>输出：[0,9]<br>解释：因为 words.length &#x3D;&#x3D; 2 同时 words[i].length &#x3D;&#x3D; 3，连接的子字符串的长度必须为 6。<br>子串 “barfoo” 开始位置是 0。它是 words 中以 [“bar”,”foo”] 顺序排列的连接。<br>子串 “foobar” 开始位置是 9。它是 words 中以 [“foo”,”bar”] 顺序排列的连接。<br>输出顺序无关紧要。返回 [9,0] 也是可以的。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入：s &#x3D; “wordgoodgoodgoodbestword”, words &#x3D; [“word”,”good”,”best”,”word”]<br>输出：[]<br>解释：因为 words.length &#x3D;&#x3D; 4 并且 words[i].length &#x3D;&#x3D; 4，所以串联子串的长度必须为 16。<br>s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。<br>所以我们返回一个空数组。</p></blockquote><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote><p>输入：s &#x3D; “barfoofoobarthefoobarman”, words &#x3D; [“bar”,”foo”,”the”]<br>输出：[6,9,12]<br>解释：因为 words.length &#x3D;&#x3D; 3 并且 words[i].length &#x3D;&#x3D; 3，所以串联子串的长度必须为 9。<br>子串 “foobarthe” 开始位置是 6。它是 words 中以 [“foo”,”bar”,”the”] 顺序排列的连接。<br>子串 “barthefoo” 开始位置是 9。它是 words 中以 [“bar”,”the”,”foo”] 顺序排列的连接。<br>子串 “thefoobar” 开始位置是 12。它是 words 中以 [“the”,”foo”,”bar”] 顺序排列的连接。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$1 &lt;&#x3D; s.length &lt;&#x3D; 10^4$</li><li>1 &lt;&#x3D; words.length &lt;&#x3D; 5000</li><li>1 &lt;&#x3D; words[i].length &lt;&#x3D; 30</li><li>words[i] 和 s 由小写英文字母组成</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || words.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> wordLen = words[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> totalLen = words.<span class="built_in">size</span>() * wordLen;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; wordCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; word : words) &#123;</span><br><span class="line">            wordCount[word]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; wordLen; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = i, right = i;</span><br><span class="line">            unordered_map&lt;string, <span class="type">int</span>&gt; currentCount;</span><br><span class="line">            <span class="keyword">while</span> (right + wordLen &lt;= s.<span class="built_in">length</span>()) &#123;</span><br><span class="line">                string currentWord = s.<span class="built_in">substr</span>(right, wordLen);</span><br><span class="line">                right += wordLen;</span><br><span class="line">                currentCount[currentWord]++;</span><br><span class="line">                <span class="keyword">while</span> (currentCount[currentWord] &gt; wordCount[currentWord]) &#123;</span><br><span class="line">                    string leftWord = s.<span class="built_in">substr</span>(left, wordLen);</span><br><span class="line">                    left += wordLen;</span><br><span class="line">                    currentCount[leftWord]--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 105 ms, 击败 21.11% 使用 C++ 的用户</p><p>内存消耗 : 48.18 MB, 击败 9.14% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findSubstring</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty() || words == <span class="literal">null</span> || words.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLen</span> <span class="operator">=</span> words[<span class="number">0</span>].length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLen</span> <span class="operator">=</span> words.length * wordLen;</span><br><span class="line">        Map&lt;String, Integer&gt; wordCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            wordCount.put(word, wordCount.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wordLen; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i, right = i;</span><br><span class="line">            Map&lt;String, Integer&gt; currentCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (right + wordLen &lt;= s.length()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">currentWord</span> <span class="operator">=</span> s.substring(right, right + wordLen);</span><br><span class="line">                right += wordLen;</span><br><span class="line">                currentCount.put(currentWord, currentCount.getOrDefault(currentWord, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (currentCount.get(currentWord) &gt; wordCount.getOrDefault(currentWord, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">leftWord</span> <span class="operator">=</span> s.substring(left, left + wordLen);</span><br><span class="line">                    left += wordLen;</span><br><span class="line">                    currentCount.put(leftWord, currentCount.get(leftWord) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">                    result.add(left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 22 ms, 击败 54.43% 使用 Java 的用户</p><p>内存消耗 : 44.55 MB, 击败 24.02% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s, words</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        word_len = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        total_len = <span class="built_in">len</span>(words) * word_len</span><br><span class="line">        word_count = Counter(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(word_len):</span><br><span class="line">            left, right = i, i</span><br><span class="line">            current_count = Counter()</span><br><span class="line">            <span class="keyword">while</span> right + word_len &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                current_word = s[right:right + word_len]</span><br><span class="line">                right += word_len</span><br><span class="line">                current_count[current_word] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> current_count[current_word] &gt; word_count[current_word]:</span><br><span class="line">                    left_word = s[left:left + word_len]</span><br><span class="line">                    left += word_len</span><br><span class="line">                    current_count[left_word] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right - left == total_len:</span><br><span class="line">                    result.append(left)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 117 ms, 击败 65.90% 使用 Python 的用户</p><p>内存消耗 : 11.96 MB, 击败 97.05% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s: <span class="built_in">str</span>, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        word_len = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        total_len = <span class="built_in">len</span>(words) * word_len</span><br><span class="line">        word_count = Counter(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(word_len):</span><br><span class="line">            left, right = i, i</span><br><span class="line">            current_count = Counter()</span><br><span class="line">            <span class="keyword">while</span> right + word_len &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                current_word = s[right:right + word_len]</span><br><span class="line">                right += word_len</span><br><span class="line">                current_count[current_word] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> current_count[current_word] &gt; word_count[current_word]:</span><br><span class="line">                    left_word = s[left:left + word_len]</span><br><span class="line">                    left += word_len</span><br><span class="line">                    current_count[left_word] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right - left == total_len:</span><br><span class="line">                    result.append(left)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 104 ms, 击败 76.85% 使用 Python3 的用户</p><p>内存消耗 : 17.09 MB, 击败 38.99% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> key[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    UT_hash_handle hh;</span><br><span class="line">&#125; HashItem;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">findSubstring</span><span class="params">(<span class="type">char</span> * s, <span class="type">char</span> ** words, <span class="type">int</span> wordsSize, <span class="type">int</span>* returnSize)</span>&#123;    </span><br><span class="line">    <span class="type">int</span> m = wordsSize, n = <span class="built_in">strlen</span>(words[<span class="number">0</span>]), ls = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> *res = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * ls);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + m * n &gt; ls) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HashItem *diff = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">char</span> word[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + i + j * n);</span><br><span class="line">            HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">            HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">            &#125; </span><br><span class="line">            pEntry-&gt;val++;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">            HASH_FIND_STR(diff, words[j], pEntry);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                <span class="built_in">strcpy</span>(pEntry-&gt;key, words[j]);</span><br><span class="line">                pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">            &#125; </span><br><span class="line">            pEntry-&gt;val--;</span><br><span class="line">            <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                HASH_DEL(diff, pEntry);</span><br><span class="line">                <span class="built_in">free</span>(pEntry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> start = i; start &lt; ls - m * n + <span class="number">1</span>; start += n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start != i) &#123;</span><br><span class="line">                <span class="type">char</span> word[<span class="number">32</span>];</span><br><span class="line">                <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + start + (m - <span class="number">1</span>) * n);</span><br><span class="line">                HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">                HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                    pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                    <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                    pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                    HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">                &#125; </span><br><span class="line">                pEntry-&gt;val++;</span><br><span class="line">                <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                    HASH_DEL(diff, pEntry);</span><br><span class="line">                    <span class="built_in">free</span>(pEntry);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + start - n);</span><br><span class="line">                pEntry = <span class="literal">NULL</span>;</span><br><span class="line">                HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                    pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                    <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                    pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                    HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">                &#125; </span><br><span class="line">                pEntry-&gt;val--;</span><br><span class="line">                <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                    HASH_DEL(diff, pEntry);</span><br><span class="line">                    <span class="built_in">free</span>(pEntry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (HASH_COUNT(diff) == <span class="number">0</span>) &#123;</span><br><span class="line">                res[pos++] = start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashItem *curr, *tmp;</span><br><span class="line">        HASH_ITER(hh, diff, curr, tmp) &#123;</span><br><span class="line">            HASH_DEL(diff, curr);  </span><br><span class="line">            <span class="built_in">free</span>(curr);      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = pos;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 998 ms, 击败 50.36% 使用 C 的用户</p><p>内存消耗 : 28.31 MB, 击败 41.85% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">int</span>&gt; <span class="title">FindSubstring</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span>[] words</span>)</span> &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s) || words == <span class="literal">null</span> || words.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> wordLen = words[<span class="number">0</span>].Length;</span><br><span class="line">        <span class="built_in">int</span> totalLen = wordLen * words.Length;</span><br><span class="line">        <span class="built_in">int</span> wordCount = words.Length;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; wordCounts = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordCounts.ContainsKey(word)) &#123;</span><br><span class="line">                wordCounts[word]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wordCounts[word] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= s.Length - totalLen; i++) &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; currentWordCounts = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(wordCounts);</span><br><span class="line">            <span class="built_in">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">                <span class="built_in">string</span> currentWord = s.Substring(i + j, wordLen);</span><br><span class="line">                <span class="keyword">if</span> (currentWordCounts.ContainsKey(currentWord) &amp;&amp; currentWordCounts[currentWord] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    currentWordCounts[currentWord]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == totalLen) &#123;</span><br><span class="line">                result.Add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1752 ms, 击败 31.63% 使用 C# 的用户</p><p>内存消耗 : 68.71 MB, 击败 15.31% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">words</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findSubstring = <span class="keyword">function</span>(<span class="params">s, words</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (!s || !words || words.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> wordLen = words[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> totalLen = wordLen * words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> wordCount = words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> wordCounts = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wordCounts.<span class="title function_">has</span>(word)) &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, wordCounts.<span class="title function_">get</span>(word) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= s.<span class="property">length</span> - totalLen; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentWordCounts = <span class="keyword">new</span> <span class="title class_">Map</span>(wordCounts);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">            <span class="keyword">let</span> currentWord = s.<span class="title function_">substring</span>(i + j, i + j + wordLen);</span><br><span class="line">            <span class="keyword">if</span> (currentWordCounts.<span class="title function_">has</span>(currentWord) &amp;&amp; currentWordCounts.<span class="title function_">get</span>(currentWord) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentWordCounts.<span class="title function_">set</span>(currentWord, currentWordCounts.<span class="title function_">get</span>(currentWord) - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">from</span>(currentWordCounts.<span class="title function_">values</span>()).<span class="title function_">every</span>(<span class="function"><span class="params">count</span> =&gt;</span> count === <span class="number">0</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 907 ms, 击败 54.95% 使用 JavaScript 的用户</p><p>内存消耗 : 56.55 MB, 击败 16.64% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findSubstring</span>(<span class="params">s: <span class="built_in">string</span>, words: <span class="built_in">string</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">if</span> (!s || !words || words.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordLen</span>: <span class="built_in">number</span> = words[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">totalLen</span>: <span class="built_in">number</span> = wordLen * words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordCount</span>: <span class="built_in">number</span> = words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordCounts</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wordCounts.<span class="title function_">has</span>(word)) &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, wordCounts.<span class="title function_">get</span>(word)! + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= s.<span class="property">length</span> - totalLen; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">currentWordCounts</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>(wordCounts);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">currentWord</span>: <span class="built_in">string</span> = s.<span class="title function_">substring</span>(i + j, i + j + wordLen);</span><br><span class="line">            <span class="keyword">if</span> (currentWordCounts.<span class="title function_">has</span>(currentWord) &amp;&amp; currentWordCounts.<span class="title function_">get</span>(currentWord)! &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentWordCounts.<span class="title function_">set</span>(currentWord, currentWordCounts.<span class="title function_">get</span>(currentWord)! - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">from</span>(currentWordCounts.<span class="title function_">values</span>()).<span class="title function_">every</span>(<span class="function"><span class="params">count</span> =&gt;</span> count === <span class="number">0</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 874 ms, 击败 73.21% 使用 TypeScript 的用户</p><p>内存消耗 : 57.38 MB, 击败 6.25% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[] $words</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findSubstring</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$words</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$s</span>) || <span class="keyword">empty</span>(<span class="variable">$words</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$wordLen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$words</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$totalLen</span> = <span class="variable">$wordLen</span> * <span class="title function_ invoke__">count</span>(<span class="variable">$words</span>);</span><br><span class="line">        <span class="variable">$wordCount</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$words</span>);</span><br><span class="line">        <span class="variable">$wordCounts</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$words</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$wordCounts</span>[<span class="variable">$word</span>])) &#123;</span><br><span class="line">                <span class="variable">$wordCounts</span>[<span class="variable">$word</span>]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$wordCounts</span>[<span class="variable">$word</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) - <span class="variable">$totalLen</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$currentWordCounts</span> = <span class="variable">$wordCounts</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$totalLen</span>; <span class="variable">$j</span> += <span class="variable">$wordLen</span>) &#123;</span><br><span class="line">                <span class="variable">$currentWord</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="variable">$i</span> + <span class="variable">$j</span>, <span class="variable">$wordLen</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>]) &amp;&amp; <span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_sum</span>(<span class="variable">$currentWordCounts</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span>[] = <span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1420 ms, 击败 100.00% 使用 PHP 的用户</p><p>内存消耗 : 20.54 MB, 击败 -% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">findSubstring</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">words</span>: [<span class="type">String</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>s.isEmpty, <span class="operator">!</span>words.isEmpty, <span class="operator">!</span>words[<span class="number">0</span>].isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> wordLength <span class="operator">=</span> words[<span class="number">0</span>].count</span><br><span class="line">        <span class="keyword">let</span> wordCount <span class="operator">=</span> words.count</span><br><span class="line">        <span class="keyword">let</span> totalLength <span class="operator">=</span> wordLength <span class="operator">*</span> wordCount</span><br><span class="line">        <span class="keyword">let</span> sArray <span class="operator">=</span> <span class="type">Array</span>(s)</span><br><span class="line">        <span class="keyword">var</span> results: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> wordsDict: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> [:]</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words &#123;</span><br><span class="line">            wordsDict[word, <span class="keyword">default</span>: <span class="number">0</span>] <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>wordLength &#123;</span><br><span class="line">            <span class="keyword">var</span> left <span class="operator">=</span> i</span><br><span class="line">            <span class="keyword">var</span> right <span class="operator">=</span> i</span><br><span class="line">            <span class="keyword">var</span> currentDict: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> [:]</span><br><span class="line">            <span class="keyword">var</span> valid <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> right <span class="operator">+</span> wordLength <span class="operator">&lt;=</span> s.count &#123;</span><br><span class="line">                <span class="keyword">let</span> currentWord <span class="operator">=</span> <span class="type">String</span>(sArray[right<span class="operator">..&lt;</span>right <span class="operator">+</span> wordLength])</span><br><span class="line">                right <span class="operator">+=</span> wordLength</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> count <span class="operator">=</span> currentDict[currentWord] &#123;</span><br><span class="line">                    currentDict[currentWord] <span class="operator">=</span> count <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> count <span class="operator">+</span> <span class="number">1</span> <span class="operator">==</span> wordsDict[currentWord] &#123;</span><br><span class="line">                        valid <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> right <span class="operator">-</span> left <span class="operator">&gt;=</span> totalLength &#123;</span><br><span class="line">                    <span class="keyword">if</span> valid <span class="operator">==</span> wordsDict.count &#123;</span><br><span class="line">                        results.append(left)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> leftWord <span class="operator">=</span> <span class="type">String</span>(sArray[left<span class="operator">..&lt;</span>left <span class="operator">+</span> wordLength])</span><br><span class="line">                    left <span class="operator">+=</span> wordLength</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> count <span class="operator">=</span> currentDict[leftWord] &#123;</span><br><span class="line">                        <span class="keyword">if</span> count <span class="operator">==</span> wordsDict[leftWord] &#123;</span><br><span class="line">                            valid <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        currentDict[leftWord] <span class="operator">=</span> count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 272 ms, 击败 25.00% 使用 Swift 的用户</p><p>内存消耗 : 16.11 MB, 击败 8.33% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findSubstring</span><span class="params">(s: <span class="type">String</span>, words: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty() || words.isEmpty() || s.length &lt; words[<span class="number">0</span>].length || s.length &lt; words[<span class="number">0</span>].length * words.size) &#123;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> wn = words[<span class="number">0</span>].length</span><br><span class="line">        <span class="keyword">val</span> count = words.groupBy &#123; it &#125;.mapValues &#123; it.value.size &#125;</span><br><span class="line">        <span class="keyword">val</span> wordFreq = IntArray(count.size)</span><br><span class="line">        <span class="keyword">val</span> uniqWords = count.keys.toList()</span><br><span class="line">        uniqWords.forEachIndexed &#123; index, w -&gt; wordFreq[index] = count[w]!! &#125;</span><br><span class="line">        <span class="keyword">val</span> matchIndex = IntArray(s.length) &#123; -<span class="number">1</span> &#125;</span><br><span class="line">        ACTree(uniqWords).match(s) &#123; pos, strIndex, _ -&gt; matchIndex[pos] = strIndex &#125;</span><br><span class="line">        <span class="keyword">val</span> freq = wordFreq.clone()</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until wn) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i</span><br><span class="line">            <span class="keyword">while</span> (j &lt; matchIndex.size &amp;&amp; matchIndex[j] == -<span class="number">1</span>) j += wn</span><br><span class="line">            <span class="keyword">var</span> dist = words.size</span><br><span class="line">            <span class="keyword">var</span> left = j</span><br><span class="line">            <span class="keyword">var</span> right = j</span><br><span class="line">            wordFreq.copyInto(freq)</span><br><span class="line">            <span class="keyword">while</span> (right &lt; matchIndex.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matchIndex[right] == -<span class="number">1</span>) &#123;</span><br><span class="line">                    right += wn</span><br><span class="line">                    left = right</span><br><span class="line">                    dist = words.size</span><br><span class="line">                    wordFreq.copyInto(freq)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--freq[matchIndex[right]] &gt;= <span class="number">0</span>) dist--</span><br><span class="line">                right += wn</span><br><span class="line">                <span class="keyword">while</span> (dist == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (right - left == words.size * wn) &#123;</span><br><span class="line">                        result.add(left)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (++freq[matchIndex[left]] &gt; <span class="number">0</span>) dist++</span><br><span class="line">                    left += wn</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ACTree</span>(<span class="keyword">val</span> strs: List&lt;String&gt;) &#123;</span><br><span class="line">        <span class="keyword">val</span> root = AcNode(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            strs.forEachIndexed &#123; i, it -&gt; putString(i, it) &#125;</span><br><span class="line">            buildFailurePointer()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AcNode</span>(<span class="keyword">var</span> <span class="keyword">data</span>: <span class="built_in">Char</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> children = arrayOfNulls&lt;AcNode&gt;(<span class="number">26</span>)</span><br><span class="line">            <span class="keyword">var</span> isEndingChar = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> fail: AcNode? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> strIndex = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">putString</span><span class="params">(index: <span class="type">Int</span>, str: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = root</span><br><span class="line">            str.forEach &#123;</span><br><span class="line">                <span class="keyword">val</span> next = p.children[it - <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">                    p = next</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">val</span> new = AcNode(it)</span><br><span class="line">                    new.length = p.length + <span class="number">1</span></span><br><span class="line">                    p.children[it - <span class="string">&#x27;a&#x27;</span>] = new</span><br><span class="line">                    p = new</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p.isEndingChar = <span class="literal">true</span></span><br><span class="line">            p.strIndex = index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">buildFailurePointer</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> queue: Queue&lt;AcNode&gt; = LinkedList()</span><br><span class="line">            root.fail = <span class="literal">null</span></span><br><span class="line">            queue.add(root)</span><br><span class="line">            <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">                <span class="keyword">val</span> p: AcNode = queue.remove()</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.25</span>) &#123;</span><br><span class="line">                    <span class="keyword">val</span> pc = p.children[i] ?: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> (p == root) &#123;</span><br><span class="line">                        pc.fail = root</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> q = p.fail</span><br><span class="line">                        <span class="keyword">while</span> (q != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">val</span> qc = q.children[pc.<span class="keyword">data</span> - <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">                            <span class="keyword">if</span> (qc != <span class="literal">null</span>) &#123;</span><br><span class="line">                                pc.fail = qc</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            q = q.fail</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">                            pc.fail = root</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.add(pc)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">match</span><span class="params">(text: <span class="type">String</span>, action: (<span class="type">pos</span>: <span class="type">Int</span>, <span class="type">strIndex</span>: <span class="type">Int</span>, <span class="type">str</span>: <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> n = text.length</span><br><span class="line">            <span class="keyword">var</span> p: AcNode? = root</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">                <span class="keyword">val</span> idx = text[i] - <span class="string">&#x27;a&#x27;</span></span><br><span class="line">                <span class="keyword">while</span> (p!!.children[idx] == <span class="literal">null</span> &amp;&amp; p != root) &#123;</span><br><span class="line">                    p = p.fail</span><br><span class="line">                &#125;</span><br><span class="line">                p = p.children[idx]</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span>) p = root</span><br><span class="line">                <span class="keyword">var</span> tmp = p</span><br><span class="line">                <span class="keyword">while</span> (tmp != root) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tmp!!.isEndingChar) &#123;</span><br><span class="line">                        <span class="keyword">val</span> pos = i - tmp.length + <span class="number">1</span></span><br><span class="line">                        action(pos, tmp.strIndex, strs[tmp.strIndex])</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmp = tmp.fail</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 242 ms, 击败 80.00% 使用 Kotlin 的用户</p><p>内存消耗 : 39.90 MB, 击败 60.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; findSubstring(<span class="built_in">String</span> s, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; words) &#123;</span><br><span class="line">    <span class="keyword">var</span> wordMap = &lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt;&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">      wordMap.putIfAbsent(word, () =&gt; wordMap.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> wordCounts = <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.filled(wordMap.length, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">      wordCounts[wordMap[word]!]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = &lt;<span class="built_in">int</span>&gt;[];</span><br><span class="line">    <span class="built_in">int</span> sLen = s.length;</span><br><span class="line">    <span class="built_in">int</span> wordNum = words.length;</span><br><span class="line">    <span class="built_in">int</span> wordLen = words[<span class="number">0</span>].length;</span><br><span class="line">    <span class="built_in">int</span> len = wordLen * wordNum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; wordLen; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt;= sLen - len; j += wordLen) &#123;</span><br><span class="line">        <span class="keyword">var</span> windowCounts = <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.filled(wordMap.length, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = wordNum - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">          <span class="built_in">int</span> begin = j + k * wordLen;</span><br><span class="line">          <span class="built_in">String</span> word = s.substring(begin, begin + wordLen);</span><br><span class="line">          <span class="built_in">int</span> index = wordMap[word] ?? <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">if</span> (index == <span class="number">-1</span> || windowCounts[index]++ == wordCounts[index]) &#123;</span><br><span class="line">            j = begin;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(j);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 821 ms, 击败 100.00% 使用 Dart 的用户</p><p>内存消耗 : 145.20 MB, 击败 100.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSubstring</span><span class="params">(s <span class="type">string</span>, words []<span class="type">string</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result []<span class="type">int</span></span><br><span class="line">    wordMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(words) == <span class="number">0</span> || <span class="built_in">len</span>(words[<span class="number">0</span>]) == <span class="number">0</span> || <span class="built_in">len</span>(s) &lt; <span class="built_in">len</span>(words)*<span class="built_in">len</span>(words[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    wordLen, wordNum := <span class="built_in">len</span>(words[<span class="number">0</span>]), <span class="built_in">len</span>(words)</span><br><span class="line">    totalLen := wordLen * wordNum</span><br><span class="line">    <span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">        wordMap[word]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; wordLen; i++ &#123;</span><br><span class="line">        left, right := i, i</span><br><span class="line">        window := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">        <span class="keyword">for</span> right+wordLen &lt;= <span class="built_in">len</span>(s) &#123;</span><br><span class="line">            currentWord := s[right : right+wordLen]</span><br><span class="line">            right += wordLen</span><br><span class="line">            window[currentWord]++</span><br><span class="line">            <span class="keyword">for</span> window[currentWord] &gt; wordMap[currentWord] &#123;</span><br><span class="line">                leftWord := s[left : left+wordLen]</span><br><span class="line">                left += wordLen</span><br><span class="line">                window[leftWord]--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> right-left == totalLen &#123;</span><br><span class="line">                result = <span class="built_in">append</span>(result, left)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 91.82% 使用 Go 的用户</p><p>内存消耗 : 6.72 MB, 击败 33.56% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; words</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_substring</span>(<span class="params">s, words</span>)</span><br><span class="line">  result = []</span><br><span class="line">  word_map = <span class="title class_">Hash</span>.new(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> words.empty? |<span class="params"></span>| words[<span class="number">0</span>].empty? |<span class="params"></span>| s.length &lt; words.length * words[<span class="number">0</span>].length</span><br><span class="line">  word_len, word_num = words[<span class="number">0</span>].length, words.length</span><br><span class="line">  total_len = word_len * word_num</span><br><span class="line">  words.each &#123; |<span class="params">word</span>| word_map[word] += <span class="number">1</span> &#125;</span><br><span class="line">  (<span class="number">0</span>...word_len).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    left = i</span><br><span class="line">    right = i</span><br><span class="line">    window = <span class="title class_">Hash</span>.new(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> right + word_len &lt;= s.length</span><br><span class="line">      current_word = s[right, word_len]</span><br><span class="line">      right += word_len</span><br><span class="line">      window[current_word] += <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> window[current_word] &gt; word_map[current_word]</span><br><span class="line">        left_word = s[left, word_len]</span><br><span class="line">        left += word_len</span><br><span class="line">        window[left_word] -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      result &lt;&lt; left <span class="keyword">if</span> right - left == total_len</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 136 ms, 击败 100.00% 使用 Ruby 的用户</p><p>内存消耗 : 208.04 MB, 击败 100.00% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span></span>(s: <span class="type">String</span>, words: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ListBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty || words.isEmpty || s.length &lt; words(<span class="number">0</span>).length * words.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> result.toList</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> wordLen = words(<span class="number">0</span>).length</span><br><span class="line">    <span class="keyword">val</span> wordNum = words.length</span><br><span class="line">    <span class="keyword">val</span> totalLen = wordLen * wordNum</span><br><span class="line">    <span class="keyword">val</span> wordMap = words.groupBy(identity).mapValues(_.length)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until wordLen) &#123;</span><br><span class="line">      <span class="keyword">var</span> left = i</span><br><span class="line">      <span class="keyword">var</span> right = i</span><br><span class="line">      <span class="keyword">var</span> window = scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]().withDefaultValue(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">while</span> (right + wordLen &lt;= s.length) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentWord = s.substring(right, right + wordLen)</span><br><span class="line">        right += wordLen</span><br><span class="line">        window(currentWord) += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (window(currentWord) &gt; wordMap.getOrElse(currentWord, <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="keyword">val</span> leftWord = s.substring(left, left + wordLen)</span><br><span class="line">          left += wordLen</span><br><span class="line">          window(leftWord) -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">          result += left</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 663 ms, 击败 88.89% 使用 Scala 的用户</p><p>内存消耗 : 55.71 MB, 击败 88.89% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">find_substring</span>(s: <span class="type">String</span>, words: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line">        <span class="built_in">macro_rules!</span> update_diff &#123;</span><br><span class="line">            ($diff:expr, $s:expr, $cnt:expr) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">t</span> = $s <span class="keyword">as</span> &amp;<span class="type">str</span>;</span><br><span class="line">                *$diff.<span class="title function_ invoke__">entry</span>(t).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>) += $cnt;</span><br><span class="line">                <span class="keyword">if</span> *$diff.<span class="title function_ invoke__">get</span>(t).<span class="title function_ invoke__">unwrap</span>() == <span class="number">0</span> &#123;</span><br><span class="line">                    $diff.<span class="title function_ invoke__">remove</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">diff</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> (m, n) = (words.<span class="title function_ invoke__">len</span>(), words[<span class="number">0</span>].<span class="title function_ invoke__">len</span>());</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">idx</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">if</span> idx + m * n &gt; s.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (idx..idx + m * n).<span class="title function_ invoke__">step_by</span>(n) &#123;</span><br><span class="line">                update_diff!(diff, &amp;s[i..i + n], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">w</span> <span class="keyword">in</span> words.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">                update_diff!(diff, w, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> diff.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                ans.<span class="title function_ invoke__">push</span>(idx <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (idx + n..s.<span class="title function_ invoke__">len</span>() - m * n + <span class="number">1</span>).<span class="title function_ invoke__">step_by</span>(n) &#123;</span><br><span class="line">                update_diff!(diff, &amp;s[i - n..i], -<span class="number">1</span>);</span><br><span class="line">                update_diff!(diff, &amp;s[i + (m - <span class="number">1</span>) * n..i + m * n], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> diff.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    ans.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            diff.<span class="title function_ invoke__">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 93.94% 使用 Rust 的用户</p><p>内存消耗 : 2.39 MB, 击败 84.85% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><p>暂时未解决</p><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;串联所有单词的子串、哈希表、字符串、滑动窗口、困难&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>2020元旦</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/afac844da433/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/afac844da433/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2019-12-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><style>  #biaoti {    text-align: center;    padding: 20px;    font-size: 48px;  }</style><div id="biaoti">  <p>元旦快乐</p></div><div style="text-align:center;">  <img src="/zh-CN/afac844da433/202001010001.png" class="" title="纪念日"></div><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;日常、元旦&lt;/center&gt;</summary>
    
    
    
    <category term="纪念日" scheme="https://blog.mhxcalfred.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
    <category term="日常" scheme="https://blog.mhxcalfred.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="元旦" scheme="https://blog.mhxcalfred.com/tags/%E5%85%83%E6%97%A6/"/>
    
  </entry>
  
  <entry>
    <title>力扣00029.两数相除</title>
    <link href="https://blog.mhxcalfred.com/zh-CN/fa0a28cc6910/"/>
    <id>https://blog.mhxcalfred.com/zh-CN/fa0a28cc6910/</id>
    <published>2019-12-31T03:15:00.000Z</published>
    <updated>2019-12-31T03:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。</p><p>整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。</p><p>返回被除数 dividend 除以除数 divisor 得到的 商 。</p><p><strong>注意：</strong>假设我们的环境只能存储 32 位 有符号整数，其数值范围是 $[−2^{31},  2^{31} − 1]$ 。本题中，如果商 严格大于 $2^{31} − 1$ ，则返回 $2^{31} − 1$ ；如果商 严格小于 $−2^{31}$ ，则返回 $−2^{31}$ 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote><p>输入: dividend &#x3D; 10, divisor &#x3D; 3<br>输出: 3<br>解释: 10&#x2F;3 &#x3D; 3.33333.. ，向零截断后得到 3 。</p></blockquote><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote><p>输入: dividend &#x3D; 7, divisor &#x3D; -3<br>输出: -2<br>解释: 7&#x2F;-3 &#x3D; -2.33333.. ，向零截断后得到 -2 。</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul><li>$−2^{31} &lt;&#x3D; dividend, divisor &lt;&#x3D; 2^{31} − 1$</li><li>divisor !&#x3D; 0</li></ul><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(dividend));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(divisor));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(std::<span class="built_in">min</span>(std::<span class="built_in">max</span>(result, <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MIN)), <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MAX)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p><p>内存消耗 : 7.50 MB, 击败 5.02% 使用 C++ 的用户</p><hr><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDividend</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)dividend);</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDivisor</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)divisor);</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.min(Math.max(result, (<span class="type">long</span>)Integer.MIN_VALUE), (<span class="type">long</span>)Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 72.66% 使用 Java 的用户</p><p>内存消耗 : 39.83 MB, 击败 20.23% 使用 Java 的用户</p><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend, divisor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 89.54% 使用 Python 的用户</p><p>内存消耗 : 11.37 MB, 击败 92.81% 使用 Python 的用户</p><hr><h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend: <span class="built_in">int</span>, divisor: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 98.48% 使用 Python3 的用户</p><p>内存消耗 : 16.41 MB, 击败 32.61% 使用 Python3 的用户</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> MAX_INT = INT_MAX;</span><br><span class="line">    <span class="type">int</span> MIN_INT = INT_MIN;</span><br><span class="line">    <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)dividend);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)divisor);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        absDividend -= temp;</span><br><span class="line">        quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = sign * quotient;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)fmin(fmax(result, (<span class="type">long</span> <span class="type">long</span>)MIN_INT), (<span class="type">long</span> <span class="type">long</span>)MAX_INT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p><p>内存消耗 : 5.20 MB, 击败 98.80% 使用 C 的用户</p><hr><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Divide</span>(<span class="params"><span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> MAX_INT = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="built_in">int</span> MIN_INT = <span class="built_in">int</span>.MinValue;</span><br><span class="line">        <span class="built_in">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">long</span> absDividend = Math.Abs((<span class="built_in">long</span>)dividend);</span><br><span class="line">        <span class="built_in">long</span> absDivisor = Math.Abs((<span class="built_in">long</span>)divisor);</span><br><span class="line">        <span class="built_in">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="built_in">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            quotient += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">long</span> result = sign * quotient;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)Math.Min(Math.Max(result, (<span class="built_in">long</span>)MIN_INT), (<span class="built_in">long</span>)MAX_INT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 70.97% 使用 C# 的用户</p><p>内存消耗 : 26.63 MB, 击败 12.90% 使用 C# 的用户</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">dividend</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">divisor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> divide = <span class="keyword">function</span>(<span class="params">dividend, divisor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    dividend &gt; <span class="number">0</span> ? (dividend = -dividend) : (sign = <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    divisor &gt; <span class="number">0</span> ? (divisor = -divisor) : (sign = sign ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dividend) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">            i &lt;= <span class="number">31</span> &amp;&amp;</span><br><span class="line">            divisor &gt;= (-<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i)) &amp;&amp;</span><br><span class="line">            divisor &lt;&lt; i &gt;= dividend &amp;&amp;</span><br><span class="line">            ++i</span><br><span class="line">        ) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dividend = dividend - (divisor &lt;&lt; --i);</span><br><span class="line">        quotient += <span class="number">2</span> ** i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(sign + (!sign &amp;&amp; quotient &gt;= <span class="number">2147483648</span> ? <span class="number">2147483647</span> : quotient));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 64.44% 使用 JavaScript 的用户</p><p>内存消耗 : 53.24 MB, 击败 5.34% 使用 JavaScript 的用户</p><hr><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">sign</span>: <span class="built_in">number</span> = (<span class="title class_">Number</span>(a &gt; <span class="number">0</span>) ^ <span class="title class_">Number</span>(b &gt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="title class_">Math</span>.<span class="title function_">abs</span>(a);</span><br><span class="line">    b = <span class="title class_">Math</span>.<span class="title function_">abs</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">31</span>; x &gt;= <span class="number">0</span>; x--) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a &gt;&gt;&gt; x) &gt;= b) &#123;</span><br><span class="line">            a -= (b &lt;&lt; x);</span><br><span class="line">            result += (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign === <span class="number">1</span> ? result : -result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 98 ms, 击败 7.81% 使用 TypeScript 的用户</p><p>内存消耗 : 53.46 MB, 击败 6.25% 使用 TypeScript 的用户</p><hr><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $dividend</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $divisor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params"><span class="variable">$dividend</span>, <span class="variable">$divisor</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$INT_MAX</span> = <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$INT_MIN</span> = <span class="title function_ invoke__">pow</span>(-<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$dividend</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sign</span> = (<span class="variable">$dividend</span> &gt; <span class="number">0</span>) ^ (<span class="variable">$divisor</span> &gt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$dividend</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$dividend</span>);</span><br><span class="line">        <span class="variable">$divisor</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$divisor</span>);</span><br><span class="line">        <span class="variable">$quotient</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$divisor</span>) &#123;</span><br><span class="line">            <span class="variable">$tempDivisor</span> = <span class="variable">$divisor</span>;</span><br><span class="line">            <span class="variable">$multiple</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$tempDivisor</span> &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$tempDivisor</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$multiple</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$dividend</span> -= <span class="variable">$tempDivisor</span>;</span><br><span class="line">            <span class="variable">$quotient</span> += <span class="variable">$multiple</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$sign</span> * <span class="variable">$quotient</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> &gt; <span class="variable">$INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MAX</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$result</span> &lt; <span class="variable">$INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MIN</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 40.00% 使用 PHP 的用户</p><p>内存消耗 : 19.82 MB, 击败 -% 使用 PHP 的用户</p><hr><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">dividend</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">divisor</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MAX</span> <span class="operator">=</span> <span class="type">Int32</span>.max</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MIN</span> <span class="operator">=</span> <span class="type">Int32</span>.min</span><br><span class="line">        <span class="keyword">if</span> dividend <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sign <span class="operator">=</span> (dividend <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">!=</span> (divisor <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">?</span> <span class="operator">-</span><span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> dividend <span class="operator">=</span> <span class="built_in">abs</span>(dividend)</span><br><span class="line">        <span class="keyword">let</span> divisor <span class="operator">=</span> <span class="built_in">abs</span>(divisor)</span><br><span class="line">        <span class="keyword">var</span> quotient <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> divisor &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor <span class="operator">=</span> divisor</span><br><span class="line">            <span class="keyword">var</span> multiple <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> tempDivisor <span class="operator">&lt;&lt;</span> <span class="number">1</span> &#123;</span><br><span class="line">                tempDivisor <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">                multiple <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend <span class="operator">-=</span> tempDivisor</span><br><span class="line">            quotient <span class="operator">+=</span> multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> sign <span class="operator">*</span> quotient</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">&gt;</span> <span class="type">Int32</span>(<span class="type">INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MAX</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> result <span class="operator">&lt;</span> <span class="type">Int32</span>(<span class="type">INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MIN</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 90.00% 使用 Swift 的用户</p><p>内存消耗 : 15.00 MB, 击败 10.00% 使用 Swift 的用户</p><hr><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">divide</span><span class="params">(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> sign = (dividend &gt; <span class="number">0</span>) xor (divisor &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> dividend = Math.abs(dividend.toLong())</span><br><span class="line">        <span class="keyword">val</span> divisor = Math.abs(divisor.toLong())</span><br><span class="line">        <span class="keyword">var</span> quotient = <span class="number">0L</span></span><br><span class="line">        <span class="keyword">while</span> (dividend &gt;= divisor) &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor = divisor</span><br><span class="line">            <span class="keyword">var</span> multiple = <span class="number">1L</span></span><br><span class="line">            <span class="keyword">while</span> (dividend &gt;= tempDivisor shl <span class="number">1</span>) &#123;</span><br><span class="line">                tempDivisor = tempDivisor shl <span class="number">1</span></span><br><span class="line">                multiple = multiple shl <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend -= tempDivisor</span><br><span class="line">            quotient += multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="keyword">if</span> (sign) -quotient <span class="keyword">else</span> quotient</span><br><span class="line">        <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 155 ms, 击败 40.00% 使用 Kotlin 的用户</p><p>内存消耗 : 33.58 MB, 击败 8.00% 使用 Kotlin 的用户</p><hr><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> divide(<span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MAX = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MIN = <span class="number">-2147483648</span>;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> isNegative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">int</span> longDividend = dividend.abs();</span><br><span class="line">    <span class="built_in">int</span> longDivisor = divisor.abs();</span><br><span class="line">    <span class="built_in">int</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (longDividend &gt;= longDivisor) &#123;</span><br><span class="line">      <span class="built_in">int</span> tempDivisor = longDivisor;</span><br><span class="line">      <span class="built_in">int</span> multiple = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (longDividend &gt;= tempDivisor &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">        tempDivisor &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      longDividend -= tempDivisor;</span><br><span class="line">      quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> result = isNegative ? -quotient : quotient;</span><br><span class="line">    <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MAX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MIN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 327 ms, 击败 50.00% 使用 Dart 的用户</p><p>内存消耗 : 147.92 MB, 击败 50.00% 使用 Dart 的用户</p><hr><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="type">int</span>, divisor <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">const</span> INT_MAX = <span class="type">int</span>(^<span class="type">uint32</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> INT_MIN = ^INT_MAX</span><br><span class="line"><span class="keyword">if</span> dividend == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">isNegative := (dividend &gt; <span class="number">0</span>) != (divisor &gt; <span class="number">0</span>)</span><br><span class="line">longDividend := abs(dividend)</span><br><span class="line">longDivisor := abs(divisor)</span><br><span class="line">quotient := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> longDividend &gt;= longDivisor &#123;</span><br><span class="line">tempDivisor := longDivisor</span><br><span class="line">multiple := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> longDividend &gt;= tempDivisor&lt;&lt;<span class="number">1</span> &#123;</span><br><span class="line">tempDivisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">longDividend -= tempDivisor</span><br><span class="line">quotient += multiple</span><br><span class="line">&#125;</span><br><span class="line">result := quotient</span><br><span class="line"><span class="keyword">if</span> isNegative &#123;</span><br><span class="line">result = -quotient</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> result &gt; INT_MAX &#123;</span><br><span class="line"><span class="keyword">return</span> INT_MAX</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> result &lt; INT_MIN &#123;</span><br><span class="line"><span class="keyword">return</span> INT_MIN</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p><p>内存消耗 : 2.20 MB, 击败 69.90% 使用 Go 的用户</p><hr><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; dividend</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; divisor</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">dividend, divisor</span>)</span><br><span class="line">  int_max = (<span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>)</span><br><span class="line">  int_min = -(<span class="number">2</span>**<span class="number">31</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> dividend == <span class="number">0</span></span><br><span class="line">  is_negative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)</span><br><span class="line">  long_dividend = dividend.abs</span><br><span class="line">  long_divisor = divisor.abs</span><br><span class="line">  quotient = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> long_dividend &gt;= long_divisor</span><br><span class="line">    temp_divisor = long_divisor</span><br><span class="line">    multiple = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> long_dividend &gt;= temp_divisor &lt;&lt; <span class="number">1</span></span><br><span class="line">      temp_divisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">      multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    long_dividend -= temp_divisor</span><br><span class="line">    quotient += multiple</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result = is_negative ? -quotient : quotient</span><br><span class="line">  <span class="keyword">if</span> result &gt; int_max</span><br><span class="line">    <span class="keyword">return</span> int_max</span><br><span class="line">  <span class="keyword">elsif</span> result &lt; int_min</span><br><span class="line">    <span class="keyword">return</span> int_min</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 75.00% 使用 Ruby 的用户</p><p>内存消耗 : 206.44 MB, 击败 -% 使用 Ruby 的用户</p><hr><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divide</span></span>(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MAX</span> = <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MIN</span> = <span class="type">Int</span>.<span class="type">MinValue</span></span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="type">INT_MIN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (divisor == <span class="number">1</span>) <span class="keyword">return</span> <span class="type">INT_MIN</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (divisor == <span class="number">-1</span>) <span class="keyword">return</span> <span class="type">INT_MAX</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rev = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> dividendVar = dividend</span><br><span class="line">    <span class="keyword">var</span> divisorVar = divisor</span><br><span class="line">    <span class="keyword">if</span> (dividend &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      dividendVar = -dividend</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      divisorVar = -divisor</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> right = <span class="type">INT_MAX</span></span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> check = quickAdd(divisorVar, mid, dividendVar)</span><br><span class="line">      <span class="keyword">if</span> (check) &#123;</span><br><span class="line">        ans = mid</span><br><span class="line">        <span class="keyword">if</span> (mid == <span class="type">INT_MAX</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">        &#125;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quickAdd</span></span>(y: <span class="type">Int</span>, z: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> add = y</span><br><span class="line">    <span class="keyword">var</span> zVar = z</span><br><span class="line">    <span class="keyword">while</span> (zVar != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((zVar &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        result += add</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (zVar != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (add &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        add += add</span><br><span class="line">      &#125;</span><br><span class="line">      zVar &gt;&gt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 100.00% 使用 Scala 的用户</p><p>内存消耗 : 51.39 MB, 击败 100.00% 使用 Scala 的用户</p><hr><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">divide</span>(dividend: <span class="type">i32</span>, divisor: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> INT_MAX: <span class="type">i32</span> = <span class="type">i32</span>::MAX;</span><br><span class="line">        <span class="keyword">const</span> INT_MIN: <span class="type">i32</span> = <span class="type">i32</span>::MIN;</span><br><span class="line">        <span class="keyword">if</span> dividend == INT_MIN &#123;</span><br><span class="line">            <span class="keyword">if</span> divisor == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> divisor == -<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rev</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dividend_var</span> = dividend;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">divisor_var</span> = divisor;</span><br><span class="line">        <span class="keyword">if</span> dividend &gt; <span class="number">0</span> &#123;</span><br><span class="line">            dividend_var = -dividend;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor &gt; <span class="number">0</span> &#123;</span><br><span class="line">            divisor_var = -divisor;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = INT_MAX;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">check</span> = Solution::<span class="title function_ invoke__">quick_add</span>(divisor_var, mid, dividend_var);</span><br><span class="line">            <span class="keyword">if</span> check &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                <span class="keyword">if</span> mid == INT_MAX &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">if</span> rev &#123; -ans &#125; <span class="keyword">else</span> &#123; ans &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> rev &#123;</span><br><span class="line">            -ans</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">quick_add</span>(y: <span class="type">i32</span>, z: <span class="type">i32</span>, x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">add</span> = y;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z_var</span> = z;</span><br><span class="line">        <span class="keyword">while</span> z_var != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> z_var &amp; <span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> result &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> z_var != <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> add &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add += add;</span><br><span class="line">            &#125;</span><br><span class="line">            z_var &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p><p>内存消耗 : 2.14 MB, 击败 18.92% 使用 Rust 的用户</p><hr><h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p><hr><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p><hr><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p><p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p><hr>]]></content>
    
    
    <summary type="html">&lt;center&gt;两数相除、位运算、数学、中等&lt;/center&gt;</summary>
    
    
    
    <category term="语言" scheme="https://blog.mhxcalfred.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="算法" scheme="https://blog.mhxcalfred.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://blog.mhxcalfred.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="Java" scheme="https://blog.mhxcalfred.com/tags/Java/"/>
    
    <category term="Python" scheme="https://blog.mhxcalfred.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://blog.mhxcalfred.com/tags/Python3/"/>
    
    <category term="C" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="C#" scheme="https://blog.mhxcalfred.com/tags/C/"/>
    
    <category term="JavaScript" scheme="https://blog.mhxcalfred.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://blog.mhxcalfred.com/tags/TypeScript/"/>
    
    <category term="PHP" scheme="https://blog.mhxcalfred.com/tags/PHP/"/>
    
    <category term="Swift" scheme="https://blog.mhxcalfred.com/tags/Swift/"/>
    
    <category term="Kotlin" scheme="https://blog.mhxcalfred.com/tags/Kotlin/"/>
    
    <category term="Dart" scheme="https://blog.mhxcalfred.com/tags/Dart/"/>
    
    <category term="Go" scheme="https://blog.mhxcalfred.com/tags/Go/"/>
    
    <category term="Ruby" scheme="https://blog.mhxcalfred.com/tags/Ruby/"/>
    
    <category term="Scala" scheme="https://blog.mhxcalfred.com/tags/Scala/"/>
    
    <category term="Rust" scheme="https://blog.mhxcalfred.com/tags/Rust/"/>
    
    <category term="Racket" scheme="https://blog.mhxcalfred.com/tags/Racket/"/>
    
    <category term="Erlang" scheme="https://blog.mhxcalfred.com/tags/Erlang/"/>
    
    <category term="Elixir" scheme="https://blog.mhxcalfred.com/tags/Elixir/"/>
    
  </entry>
  
</feed>
