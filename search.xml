<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>三十而立</title>
    <url>/zh-CN/32e6cd525cc3/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>生日快乐</p>
</div>

<div style="text-align:center;">
  <a href="/anniversary/">
    <img src="/zh-CN/32e6cd525cc3/201911150001.svg" class="" title="纪念日">
  </a>
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>海上钢琴师</title>
    <url>/zh-CN/59ad24642972/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　本片讲述了一个钢琴天才传奇的一生。</p>
<p>　　1900年，Virginian号豪华邮轮上，一个孤儿被遗弃在头等舱，由船上的水手抚养长大，取名1900（蒂姆•罗斯 饰）。1900慢慢长大，显示出了无师自通的非凡钢琴天赋，在船上的乐队表演钢琴，每个听过他演奏的人，都被深深打动。爵士乐鼻祖杰尼听说了1900的高超技艺，专门上船和他比赛，最后自叹弗如，黯然离去。<br>　　可惜，这一切的事情都发生在海上，1900从来不愿踏上陆地，直到有一天，他爱上了一个女孩，情愫在琴键上流淌。他会不会为了爱情，踏上陆地开始新的生活，用他的琴声惊艳世界？他将怎样谱写自己非凡的人生。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 16 英寸 （Intel，2019年）</title>
    <url>/zh-CN/f076f8a0f760/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>笔记本有了新定义。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f076f8a0f760/201911180001.png" class="" title="MacBook Pro 16 英寸 （Intel，2019年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基本语法</title>
    <url>/zh-CN/37eb8784fd5f/</url>
    <content><![CDATA[<hr>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><blockquote>
<p>几乎所有 Markdown 应用程序都支持 John Gruber 原始设计文档中列出的 Markdown 基本语法。</p>
</blockquote>
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote>
<p>要创建标题，请在单词或短语前面添加井号 (#) 。井号的数量代表了标题的级别。</p>
</blockquote>
<blockquote>
<p>还可以在文本下方添加任意数量的 &#x3D;&#x3D; 号来标识一级标题，或者 – 号来标识二级标题。</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>#### 标题4</code><br><code>##### 标题5</code><br><code>###### 标题6</code></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><blockquote>
<h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6></blockquote>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<p>当井号（#）和标题文本之间没有空格时，各 Markdown 应用程序的处理方式是不一样的。为了兼容考虑，请在井号和标题文本之间添加一个空格。</p>
</blockquote>
<hr>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><blockquote>
<p>通过将文本设置为粗体或斜体来强调其重要性。</p>
</blockquote>
<blockquote>
<p>要加粗文本，请在单词或短语的前后各添加两个星号（ asterisks ）或下划线（ underscores ）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（ asterisks ）。</p>
</blockquote>
<blockquote>
<p>要用斜体显示文本，请在单词或短语前后添加一个星号（ asterisk ）或下划线（ underscore ）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p>
</blockquote>
<blockquote>
<p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p>
</blockquote>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><code>**这是加粗的文字**</code><br><code>__这是加粗的文字__</code><br><code>这是**加粗**的文字</code><br><code>*这是倾斜的文字*</code><br><code>_这是倾斜的文字_</code><br><code>这是*倾斜*的文字</code><br><code>***这是加粗斜体的文字***</code><br><code>___这是加粗斜体的文字___</code><br><code>__*这是加粗斜体的文字*__</code><br><code>**_这是加粗斜体的文字_**</code><br><code>这是***加粗斜体***的文字</code></p>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><strong>这是加粗的文字</strong><br><strong>这是加粗的文字</strong><br>这是<strong>加粗</strong>的文字<br><em>这是倾斜的文字</em><br><em>这是倾斜的文字</em><br>这是<em>倾斜</em>的文字<br><em><strong>这是加粗斜体的文字</strong></em><br><em><strong>这是加粗斜体的文字</strong></em><br><strong><em>这是加粗斜体的文字</em></strong><br><strong><em>这是加粗斜体的文字</em></strong><br>这是<em><strong>加粗斜体</strong></em>的文字</p>
<h3 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<p>Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（ asterisks ）。</p>
</blockquote>
<blockquote>
<p>Markdown 的众多应用程序在如何处理单词中间的下划线上意见不一致。为了兼容起见，请用星号标注单词中间的斜体来表示着重。</p>
</blockquote>
<blockquote>
<p>Markdown 应用程序在处理单词或短语中间添加的下划线上并不一致。为了实现兼容性，请使用星号将单词或短语的中间部分加粗并以斜体显示，以示重要。</p>
</blockquote>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote>
<p>你可以将多个条目组织成有序或无序列表。</p>
</blockquote>
<blockquote>
<p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>
</blockquote>
<blockquote>
<p>要创建无序列表，请在每个列表项前面添加破折号 ( - )、星号 ( * ) 或加号 ( + ) 。缩进一个或多个列表项可创建嵌套列表。</p>
<blockquote>
<p>如果你需要以数字开头并且紧跟一个英文句号（也就是 .）的无序列表项，则可以使使用反斜线（\）来 转义 这个英文句号。</p>
</blockquote>
</blockquote>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><code>1. Red</code><br><code>2. Green</code><br><code>3. Blue</code></p>
<p><code>1. Red</code><br><code>1. Green</code><br><code>1. Blue</code></p>
<p><code>1. Red</code><br><code>4. Green</code><br><code>9. Blue</code></p>
<p><code>1. Red</code><br><code>2. Green</code><br>    <code>1. Green 1</code><br>    <code>2. Green 2</code><br><code>3. Blue</code></p>
<p><code>- Red</code><br><code>- Green</code><br><code>- Blue</code></p>
<p><code>* Red</code><br><code>* Green</code><br><code>* Blue</code></p>
<p><code>+ Red</code><br><code>+ Green</code><br><code>+ Blue</code></p>
<p><code>- Red</code><br><code>- Green</code><br>    <code>- Green 1</code><br>    <code>- Green 2</code><br><code>- Blue</code></p>
<p><code>- 1989\. 最好的一年</code><br><code>- 2019\. 第二好的一年</code></p>
<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<hr>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<hr>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<hr>
<ol>
<li>Red</li>
<li>Green<ol>
<li>Green 1</li>
<li>Green 2</li>
</ol>
</li>
<li>Blue</li>
</ol>
<hr>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<hr>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<hr>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<hr>
<ul>
<li>Red</li>
<li>Green<ul>
<li>Green 1</li>
<li>Green 2</li>
</ul>
</li>
<li>Blue</li>
</ul>
<hr>
<ul>
<li>1989. 最好的一年</li>
<li>2019. 第二好的一年</li>
</ul>
<hr>
<h3 id="最佳实践-2"><a href="#最佳实践-2" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<p>CommonMark 和其它几种轻量级标记语言可以让你使用括号（)）作为分隔符（例如 1) Red），但并非所有的 Markdown 应用程序都支持此种用法，因此，从兼容的角度来看，此用法不推荐。为了兼容起见，请只使用英文句点作为分隔符。</p>
</blockquote>
<blockquote>
<p>Markdown 应用程序在如何处理同一列表中混用不同分隔符上并不一致。为了兼容起见，请不要在同一个列表中混用不同的分隔符，最好选定一种分隔符并一直用下去。</p>
</blockquote>
<hr>
<h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><blockquote>
<p>要创建块引用，请在段落前添加一个 &gt; 符号。</p>
</blockquote>
<blockquote>
<p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。</p>
</blockquote>
<blockquote>
<p>块引用可以包含其他 Markdown 格式的元素。</p>
</blockquote>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p><code>&gt;这是引用的内容</code><br><code>&gt;</code><br><code>&gt;&gt;这是引用的内容</code><br><code>&gt;&gt;</code><br><code>&gt;&gt;&gt;这是引用的内容</code></p>
<p><code>&gt;## 标题2</code><br><code>&gt;- Red</code><br><code>&gt;- Green</code><br><code>&gt;- Blue</code><br><code>&gt;</code><br><code>&gt;这是**加粗***斜体**的文字</code></p>
<h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>这是引用的内容</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>这是<strong>加粗</strong>*斜体**的文字</p>
</blockquote>
<h3 id="最佳实践-3"><a href="#最佳实践-3" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<p>为了兼容性，请在块引号之前和之后放置空行。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>要将单词或短语表示为代码，请将其包裹在反引号 ( &#96; ) 中。</p>
</blockquote>
<blockquote>
<p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号( &#96;&#96; )中。</p>
</blockquote>
<blockquote>
<p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p>
</blockquote>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p><code>#include &lt;stdio.h&gt;</code><br><code>int main() &#123;</code><br><code>// 打印 Hello, World!</code><br><code>printf(&quot;Hello, World!\n&quot;);</code><br><code>return 0;</code><br><code>&#125;</code></p>
<h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><pre><code>#include &lt;stdio.h&gt;
int main() &#123;
    // 打印 Hello, World!
    printf(&quot;Hello, World!\n&quot;);
    return 0;
&#125;
</code></pre>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p><code>---</code><br><code>- - - - -</code><br><code>***</code><br><code>*****</code><br><code>___</code><br><code>_____</code></p>
<h3 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3><hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>
<p>要创建链接，请将链接文本括在方括号中，后面紧跟着括在圆括号中的 URL（例如 (<a href="https://blog.mhxcalfred.com/">https://blog.mhxcalfred.com</a>) ）。</p>
</blockquote>
<h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p><code>我的网站 [胡心小筑](https://blog.mhxcalfred.com)。</code></p>
<h3 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h3><p>我的网站 <a href="https://blog.mhxcalfred.com/">胡心小筑</a>。</p>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>要添加图片，首先请添加感叹号（!），然后紧跟着是方括号，方括号中可添加替代文本（alt text，即图片显示失败后显示此文本），最后跟着圆括号，圆括号中添加图片资源的路径或 URL。你可以选择在圆括号中的 URL 之后添加标题（即 title 属性）。</p>
</blockquote>
<h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><p><code>![测试](201911200001.jpg)</code><br><code>&#123;% asset_img 201911200001.jpg 测试 %&#125;</code></p>
<h3 id="效果-7"><a href="#效果-7" class="headerlink" title="效果"></a>效果</h3><p><img src="/zh-CN/37eb8784fd5f/201911200001.jpg" alt="测试"></p>
<img src="/zh-CN/37eb8784fd5f/201911200001.jpg" class="" title="测试">

<hr>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT建站美化</title>
    <url>/zh-CN/d1d9a468f052/</url>
    <content><![CDATA[<hr>
<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><table>
<thead>
<tr>
<th align="center">框架</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Winodws</td>
<td align="center">10.0.19044.3803</td>
</tr>
<tr>
<td align="center">Node.js</td>
<td align="center">21.4.0</td>
</tr>
<tr>
<td align="center">NPM</td>
<td align="center">10.2.5</td>
</tr>
<tr>
<td align="center">Git</td>
<td align="center">2.43.0</td>
</tr>
<tr>
<td align="center">Hexo</td>
<td align="center">7.0.0</td>
</tr>
<tr>
<td align="center">NexT</td>
<td align="center">8.19.1</td>
</tr>
</tbody></table>
<hr>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h2><p><a href="https://nodejs.org/en">下载地址</a><br>下载最新版本，安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;node -v</span><br><span class="line">v21.4.0</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;npm -v</span><br><span class="line">10.2.5</span><br></pre></td></tr></table></figure>

<h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p><a href="https://git-scm.com/downloads">下载地址</a><br>下载最新版本，安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;git -v</span><br><span class="line">git version 2.43.0.windows.1</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;npm install -g hexo-cli</span><br><span class="line">changed 54 packages <span class="keyword">in</span> 10s</span><br></pre></td></tr></table></figure>

<p>进入<code>D:\Hexo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Hexo&gt;hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<h2 id="NexT-安装"><a href="#NexT-安装" class="headerlink" title="NexT 安装"></a>NexT 安装</h2><p>保持在<code>D:\Hexo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Hexo&gt;git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line">Cloning into <span class="string">&#x27;themes/next&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 6827, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (1715/1715), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (402/402), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6827 (delta 1412), reused 1353 (delta 1312), pack-reused 5112</span><br><span class="line">Receiving objects: 100% (6827/6827), 1.37 MiB | 1.27 MiB/s, <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">Resolving deltas: 100% (4470/4470), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>到此，环境安装完成。</p>
<hr>
<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>在<code>D:\Hexo</code>目录下找到<code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//修改前</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-theme-next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.19.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-word-counter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Hexo&gt;npm install</span><br><span class="line"></span><br><span class="line">added 29 packages, removed 1 package, and audited 268 packages <span class="keyword">in</span> 12s</span><br><span class="line"></span><br><span class="line">28 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure>

<h2 id="修改网站配置文件"><a href="#修改网站配置文件" class="headerlink" title="修改网站配置文件"></a>修改网站配置文件</h2><p>在<code>D:\Hexo</code>目录下找到<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">syntax_highlighter:</span> <span class="string">highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">胡心小筑</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">随笔</span>   <span class="string">|</span>   <span class="string">札记</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">好学若饥，谦卑若愚</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">_mhxcAlfred</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.mhxcalfred.com/</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:hash/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">false</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="string">README.md</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="number">404.</span><span class="string">html</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="string">robots.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># syntax_highlighter: highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/mhxcAlfred/mhxcAlfred.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>在<code>D:\Hexo\themes\next</code>目录下找到<code>_config.yml</code></p>
<p>复制文件到<code>D:\Hexo\</code>目录下，并重命名为<code>_config.next.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"><span class="comment"># It&#x27;s recommended to use Alternate Theme Config to configure NexT</span></span><br><span class="line"><span class="comment"># Modifying this file may result in merge conflict</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/getting-started/configuration</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Theme Core Configuration Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow to cache content generation.</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove unnecessary files after hexo generate.</span></span><br><span class="line"><span class="attr">minify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyStart: source/_data/post-body-start.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Logo (Warning: Do not support scheme Mist)</span></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="comment">#/uploads/custom-logo.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open graph settings</span></span><br><span class="line"><span class="comment"># See: https://hexo.io/docs/helpers#open-graph</span></span><br><span class="line"><span class="attr">open_graph:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="comment">#twitter_card: &lt;twitter:card&gt;</span></span><br><span class="line">    <span class="comment">#twitter_id: &lt;twitter:creator&gt;</span></span><br><span class="line">    <span class="comment">#twitter_site: &lt;twitter:site&gt;</span></span><br><span class="line">    <span class="comment">#twitter_image: &lt;twitter:image&gt;</span></span><br><span class="line">    <span class="comment">#google_plus: &lt;g+:profile_link&gt;</span></span><br><span class="line">    <span class="comment">#fb_admins: &lt;fb:admin_id&gt;</span></span><br><span class="line">    <span class="comment">#fb_app_id: &lt;fb:app_id&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment">#home: / || fa fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || fa fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-globe</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: https://example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/footer</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show multilingual switcher in footer.</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2021</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="comment"># Set to `false` to disable the copyright statement.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, https://beian.mps.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. Login and See: https://beian.mps.gov.cn/web/business/businessHome/website</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `description` in front-matter to specify post excerpt.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.png || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-signs-post</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/</span> <span class="comment"># Link for view source</span></span><br><span class="line">  <span class="comment">#url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork &amp; edit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show previous post and next post in post footer if exists</span></span><br><span class="line"><span class="comment"># Available values: left | right | false</span></span><br><span class="line"><span class="attr">post_navigation:</span> <span class="string">left</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Custom Page Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/custom-pages</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">12</span> <span class="comment"># Minimum font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">30</span> <span class="comment"># Maximum font size in px</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">200</span> <span class="comment"># Total amount of tags</span></span><br><span class="line">  <span class="attr">orderby:</span> <span class="string">name</span> <span class="comment"># Order of tags</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Calendar</span></span><br><span class="line"><span class="comment"># Share your recent schedule to others via calendar page.</span></span><br><span class="line"><span class="attr">calendar:</span></span><br><span class="line">  <span class="attr">calendar_id:</span> <span class="string">&lt;required&gt;</span> <span class="comment"># Your Google account E-Mail</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">&lt;required&gt;</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">startTime</span></span><br><span class="line">  <span class="attr">showLocation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">offsetMax:</span> <span class="number">72</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">offsetMin:</span> <span class="number">4</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">showDeleted:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">singleEvents:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">maxResults:</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Misc Theme Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/miscellaneous</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preload styles and preconnect CDN for fonts and plugins.</span></span><br><span class="line"><span class="comment"># For more information: https://www.w3.org/TR/resource-hints/#preconnect</span></span><br><span class="line"><span class="attr">preconnect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the text alignment in posts / pages.</span></span><br><span class="line"><span class="attr">text_align:</span></span><br><span class="line">  <span class="comment"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span></span><br><span class="line">  <span class="attr">desktop:</span> <span class="string">justify</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="string">justify</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Browser header panel color.</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">light:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">dark:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override browsers&#x27; default behavior.</span></span><br><span class="line"><span class="attr">body_scrollbar:</span></span><br><span class="line">  <span class="comment"># Place the scrollbar over the content.</span></span><br><span class="line">  <span class="attr">overlay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Present the scrollbar even if the content is not overflowing.</span></span><br><span class="line">  <span class="attr">stable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br><span class="line">  <span class="comment"># Fold code block</span></span><br><span class="line">  <span class="attr">fold:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Find fonts on Google Fonts (https://fonts.google.com)</span></span><br><span class="line"><span class="comment"># All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="comment"># Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Web Safe fonts are recommended for `global` (and `title`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/seo</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to the title of index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># If true, an icon will be attached to each external URL</span></span><br><span class="line"><span class="attr">exturl_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://developers.google.com/search</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmasters</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Tags Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/tag-plugins/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note tag (bootstrap callout)</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bootstrap callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bootstrap callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tabs tag</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="comment"># Make the nav bar of tabs with long content stick to the top.</span></span><br><span class="line">  <span class="attr">sticky:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PDF tag</span></span><br><span class="line"><span class="comment"># NexT will try to load pdf files natively, if failed, pdf.js will be used.</span></span><br><span class="line"><span class="comment"># So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/theme-next-pdf</span></span><br><span class="line"><span class="attr">pdf:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Default height</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">500px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WaveDrom tag</span></span><br><span class="line"><span class="attr">wavedrom:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/</span></span><br><span class="line"><span class="comment"># More plugins: https://github.com/next-theme/awesome-next</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span></span><br><span class="line"><span class="comment"># Warning: Please install / uninstall the relevant renderer according to the documentation.</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># External Libraries</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/external-libraries</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/next-theme/pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Medium Zoom is a JavaScript library for zooming images like Medium.</span></span><br><span class="line"><span class="comment"># Warning: Do not enable both `fancybox` and `mediumzoom`.</span></span><br><span class="line"><span class="comment"># For more information: https://medium-zoom.francoischalifour.com</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically insert whitespace between CJK and half-width characters.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prefetch links based on what is in the user&#x27;s viewport.</span></span><br><span class="line"><span class="comment"># For more information: https://getquick.link</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport home archive).</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="comment"># This configuration item is independent of `enable`.</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Animation Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Animate.css to animate everything.</span></span><br><span class="line"><span class="comment"># For more information: https://animate.style</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class="line">    <span class="attr">menu_item:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_body:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">coll_header:</span> <span class="string">fadeInLeft</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">fadeInUp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/CodeByZach/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># All available colors:</span></span><br><span class="line">  <span class="comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">blue</span></span><br><span class="line">  <span class="comment"># All available themes:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a ribbon in your website with HTML5 canvas.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Comments Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/comments</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class="line">  <span class="attr">active:</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any naves, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="comment">#gitalk:</span></span><br><span class="line">    <span class="comment">#  order: -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="comment"># For more information: https://disqus.com</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DisqusJS</span></span><br><span class="line"><span class="comment"># For more information: https://disqusjs.skk.moe</span></span><br><span class="line"><span class="attr">disqusjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># API Endpoint of Disqus API (https://disqus.com/api/docs/).</span></span><br><span class="line">  <span class="comment"># Leave api empty if you are able to connect to Disqus API. Otherwise you need a reverse proxy for it.</span></span><br><span class="line">  <span class="comment"># For example:</span></span><br><span class="line">  <span class="comment"># api: https://disqus.skk.moe/disqus/</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">  <span class="attr">apikey:</span> <span class="comment"># Register new application from https://disqus.com/api/applications/</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="comment"># See: https://disqus.com/admin/settings/general/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changyan</span></span><br><span class="line"><span class="comment"># For more information: https://changyan.kuaizhan.com</span></span><br><span class="line"><span class="attr">changyan:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">appid:</span></span><br><span class="line">  <span class="attr">appkey:</span></span><br><span class="line">  <span class="comment"># Show comments count</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="comment"># &lt;your_uid&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="comment"># This is official proxy address</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">user-name/repo-name</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Isso</span></span><br><span class="line"><span class="comment"># For more information: https://isso-comments.de</span></span><br><span class="line"><span class="attr">isso:</span> <span class="comment"># &lt;data_isso&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Widgets &amp; Content Sharing Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/post-widgets</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AddToAny Share. See: https://www.addtoany.com</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">buttons:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">facebook</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">twitter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Statistics and Analytics</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/statistics-and-analytics</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="comment"># See: https://analytics.google.com</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">tracking_id:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line">  <span class="comment"># By default, NexT will load an external gtag.js script on your site.</span></span><br><span class="line">  <span class="comment"># If you only need the pageview feature, set the following option to true to get a better performance.</span></span><br><span class="line">  <span class="attr">only_pageview:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># only needed if you are using `only_pageview` mode, https://developers.google.com/analytics/devguides/collection/protocol/ga4</span></span><br><span class="line">  <span class="attr">measure_protocol_api_secret:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Analytics</span></span><br><span class="line"><span class="comment"># See: https://tongji.baidu.com</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Growingio Analytics</span></span><br><span class="line"><span class="comment"># See: https://www.growingio.com</span></span><br><span class="line"><span class="attr">growingio_analytics:</span> <span class="comment"># &lt;project_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudflare Web Analytics</span></span><br><span class="line"><span class="comment"># See: https://www.cloudflare.com/web-analytics/</span></span><br><span class="line"><span class="attr">cloudflare_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Clarity Analytics</span></span><br><span class="line"><span class="comment"># See: https://clarity.microsoft.com/</span></span><br><span class="line"><span class="attr">clarity_analytics:</span> <span class="comment"># &lt;project_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matomo Analytics</span></span><br><span class="line"><span class="comment"># See: https://matomo.org/</span></span><br><span class="line"><span class="attr">matomo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="comment"># https://www.example.com/</span></span><br><span class="line">  <span class="attr">site_id:</span> <span class="comment"># &lt;your site id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Umami Analytics</span></span><br><span class="line"><span class="comment"># See: https://umami.is/</span></span><br><span class="line"><span class="attr">umami:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">script_url:</span> <span class="comment"># https://umami.example.com/script.js</span></span><br><span class="line">  <span class="attr">website_id:</span> <span class="comment"># &lt;your website id&gt;</span></span><br><span class="line">  <span class="attr">host_url:</span> <span class="comment"># &lt;your umami site url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plausible Analytics</span></span><br><span class="line"><span class="comment"># See: https://plausible.io/</span></span><br><span class="line"><span class="attr">plausible:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">script_url:</span> <span class="comment"># https://plausible.io/js/script.js</span></span><br><span class="line">  <span class="attr">site_domain:</span> <span class="comment"># www.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show number of visitors of each article.</span></span><br><span class="line"><span class="comment"># You can visit https://www.leancloud.cn to get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># &lt;your app id&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># &lt;your app key&gt;</span></span><br><span class="line">  <span class="comment"># Required for apps from CN region</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="comment"># &lt;your server url&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don&#x27;t care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span></span><br><span class="line"><span class="comment"># Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span></span><br><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">articles</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="comment"># Required</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Search Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/search-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Chat Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need to enable and configure the chat service.</span></span><br><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set to `false` to disable icon.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra is a functional, easy to use piece of chat software for websites.</span></span><br><span class="line"><span class="comment"># For more information: https://chatra.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line"><span class="attr">chatra:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="comment"># Visit Dashboard to get your ChatraID</span></span><br><span class="line">  <span class="comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tidio is a powerful, all-in-one customer service tool.</span></span><br><span class="line"><span class="comment"># For more information: https://www.tidio.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://www.tidio.com/panel/dashboard</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">key:</span> <span class="comment"># Public Key, get it from dashboard. See: https://www.tidio.com/panel/settings/developer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CDN Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/advanced-settings/vendors</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># The CDN provider of NexT internal scripts.</span></span><br><span class="line">  <span class="comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line">  <span class="comment"># Warning: If you are using the latest master branch of NexT, please set `internal: local`</span></span><br><span class="line">  <span class="attr">internal:</span> <span class="string">local</span></span><br><span class="line">  <span class="comment"># The default CDN provider of third-party plugins.</span></span><br><span class="line">  <span class="comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line">  <span class="comment"># Dependencies for `plugins: local`: https://github.com/next-theme/plugins</span></span><br><span class="line">  <span class="attr">plugins:</span> <span class="string">cdnjs</span></span><br><span class="line">  <span class="comment"># Custom CDN URL</span></span><br><span class="line">  <span class="comment"># For example:</span></span><br><span class="line">  <span class="comment"># custom_cdn_url: https://cdn.jsdelivr.net/npm/$&#123;npm_name&#125;@$&#123;version&#125;/$&#123;minified&#125;</span></span><br><span class="line">  <span class="comment"># custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span></span><br><span class="line">  <span class="attr">custom_cdn_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="comment"># Accelerate delivery of static files using a CDN</span></span><br><span class="line"><span class="comment"># The js option is only valid when vendors.internal is local.</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">images</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"><span class="comment"># It&#x27;s recommended to use Alternate Theme Config to configure NexT</span></span><br><span class="line"><span class="comment"># Modifying this file may result in merge conflict</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/getting-started/configuration</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Theme Core Configuration Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow to cache content generation.</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove unnecessary files after hexo generate.</span></span><br><span class="line"><span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyStart: source/_data/post-body-start.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># darkmode: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-_mhxcAlfred.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-_mhxcAlfred.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-_mhxcAlfred.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo-_mhxcAlfred.svg</span></span><br><span class="line">  <span class="attr">android_manifest:</span> <span class="string">/images/manifest.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Logo (Warning: Do not support scheme Mist)</span></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="comment">#/images/logo-_mhxcAlfred.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">big</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh-hans</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open graph settings</span></span><br><span class="line"><span class="comment"># See: https://hexo.io/docs/helpers#open-graph</span></span><br><span class="line"><span class="attr">open_graph:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="comment">#twitter_card: &lt;twitter:card&gt;</span></span><br><span class="line">    <span class="comment">#twitter_id: &lt;twitter:creator&gt;</span></span><br><span class="line">    <span class="comment">#twitter_site: &lt;twitter:site&gt;</span></span><br><span class="line">    <span class="comment">#twitter_image: &lt;twitter:image&gt;</span></span><br><span class="line">    <span class="comment">#google_plus: &lt;g+:profile_link&gt;</span></span><br><span class="line">    <span class="comment">#fb_admins: &lt;fb:admin_id&gt;</span></span><br><span class="line">    <span class="comment">#fb_app_id: &lt;fb:app_id&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span></span><br><span class="line">    <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="comment">#position: left</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">hide</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/logo-_mhxcAlfred.svg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/mhxcAlfred || fab fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-globe</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: https://example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/footer</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show multilingual switcher in footer.</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="comment"># Set to `false` to disable the copyright statement.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Tongji</span></span><br><span class="line">  <span class="attr">tongji:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Running time</span></span><br><span class="line">  <span class="attr">running_time:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Birthday</span></span><br><span class="line">  <span class="attr">birthday:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, https://beian.mps.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. Login and See: https://beian.mps.gov.cn/web/business/businessHome/website</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `description` in front-matter to specify post excerpt.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.png || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-signs-post</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/</span> <span class="comment"># Link for view source</span></span><br><span class="line">  <span class="comment">#url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork &amp; edit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show previous post and next post in post footer if exists</span></span><br><span class="line"><span class="comment"># Available values: left | right | false</span></span><br><span class="line"><span class="attr">post_navigation:</span> <span class="string">left</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Custom Page Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/custom-pages</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">18</span> <span class="comment"># Minimum font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">18</span> <span class="comment"># Maximum font size in px</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">200</span> <span class="comment"># Total amount of tags</span></span><br><span class="line">  <span class="attr">orderby:</span> <span class="string">name</span> <span class="comment"># Order of tags</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Calendar</span></span><br><span class="line"><span class="comment"># Share your recent schedule to others via calendar page.</span></span><br><span class="line"><span class="attr">calendar:</span></span><br><span class="line">  <span class="attr">calendar_id:</span> <span class="string">&lt;required&gt;</span> <span class="comment"># Your Google account E-Mail</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">&lt;required&gt;</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">startTime</span></span><br><span class="line">  <span class="attr">showLocation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">offsetMax:</span> <span class="number">72</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">offsetMin:</span> <span class="number">4</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">showDeleted:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">singleEvents:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">maxResults:</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Misc Theme Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/miscellaneous</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preload styles and preconnect CDN for fonts and plugins.</span></span><br><span class="line"><span class="comment"># For more information: https://www.w3.org/TR/resource-hints/#preconnect</span></span><br><span class="line"><span class="attr">preconnect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the text alignment in posts / pages.</span></span><br><span class="line"><span class="attr">text_align:</span></span><br><span class="line">  <span class="comment"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span></span><br><span class="line">  <span class="attr">desktop:</span> <span class="string">justify</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="string">justify</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Browser header panel color.</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">light:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">dark:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override browsers&#x27; default behavior.</span></span><br><span class="line"><span class="attr">body_scrollbar:</span></span><br><span class="line">  <span class="comment"># Place the scrollbar over the content.</span></span><br><span class="line">  <span class="attr">overlay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Present the scrollbar even if the content is not overflowing.</span></span><br><span class="line">  <span class="attr">stable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">github</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">github-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br><span class="line">  <span class="comment"># Fold code block</span></span><br><span class="line">  <span class="attr">fold:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/mhxcAlfred</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Find fonts on Google Fonts (https://fonts.google.com)</span></span><br><span class="line"><span class="comment"># All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="comment"># Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Web Safe fonts are recommended for `global` (and `title`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/seo</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to the title of index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># If true, an icon will be attached to each external URL</span></span><br><span class="line"><span class="attr">exturl_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://developers.google.com/search</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmasters</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Tags Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/tag-plugins/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note tag (bootstrap callout)</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bootstrap callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bootstrap callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tabs tag</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="comment"># Make the nav bar of tabs with long content stick to the top.</span></span><br><span class="line">  <span class="attr">sticky:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PDF tag</span></span><br><span class="line"><span class="comment"># NexT will try to load pdf files natively, if failed, pdf.js will be used.</span></span><br><span class="line"><span class="comment"># So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/theme-next-pdf</span></span><br><span class="line"><span class="attr">pdf:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Default height</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">500px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WaveDrom tag</span></span><br><span class="line"><span class="attr">wavedrom:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/</span></span><br><span class="line"><span class="comment"># More plugins: https://github.com/next-theme/awesome-next</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span></span><br><span class="line"><span class="comment"># Warning: Please install / uninstall the relevant renderer according to the documentation.</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># External Libraries</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/external-libraries</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/next-theme/pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Medium Zoom is a JavaScript library for zooming images like Medium.</span></span><br><span class="line"><span class="comment"># Warning: Do not enable both `fancybox` and `mediumzoom`.</span></span><br><span class="line"><span class="comment"># For more information: https://medium-zoom.francoischalifour.com</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically insert whitespace between CJK and half-width characters.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prefetch links based on what is in the user&#x27;s viewport.</span></span><br><span class="line"><span class="comment"># For more information: https://getquick.link</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport home archive).</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="comment"># This configuration item is independent of `enable`.</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Animation Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Animate.css to animate everything.</span></span><br><span class="line"><span class="comment"># For more information: https://animate.style</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class="line">    <span class="attr">menu_item:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_body:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">coll_header:</span> <span class="string">fadeInLeft</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">fadeInUp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/CodeByZach/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># All available colors:</span></span><br><span class="line">  <span class="comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">blue</span></span><br><span class="line">  <span class="comment"># All available themes:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a ribbon in your website with HTML5 canvas.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Comments Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/comments</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any naves, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="attr">gitalk:</span></span><br><span class="line">      <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="comment"># For more information: https://disqus.com</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DisqusJS</span></span><br><span class="line"><span class="comment"># For more information: https://disqusjs.skk.moe</span></span><br><span class="line"><span class="attr">disqusjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># API Endpoint of Disqus API (https://disqus.com/api/docs/).</span></span><br><span class="line">  <span class="comment"># Leave api empty if you are able to connect to Disqus API. Otherwise you need a reverse proxy for it.</span></span><br><span class="line">  <span class="comment"># For example:</span></span><br><span class="line">  <span class="comment"># api: https://disqus.skk.moe/disqus/</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">  <span class="attr">apikey:</span> <span class="comment"># Register new application from https://disqus.com/api/applications/</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="comment"># See: https://disqus.com/admin/settings/general/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changyan</span></span><br><span class="line"><span class="comment"># For more information: https://changyan.kuaizhan.com</span></span><br><span class="line"><span class="attr">changyan:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">appid:</span></span><br><span class="line">  <span class="attr">appkey:</span></span><br><span class="line">  <span class="comment"># Show comments count</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="comment"># &lt;your_uid&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">mhxcAlfred</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">mhxcAlfred.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">mhxcAlfred</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="comment"># This is official proxy address</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">user-name/repo-name</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Isso</span></span><br><span class="line"><span class="comment"># For more information: https://isso-comments.de</span></span><br><span class="line"><span class="attr">isso:</span> <span class="comment"># &lt;data_isso&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Widgets &amp; Content Sharing Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/post-widgets</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AddToAny Share. See: https://www.addtoany.com</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">buttons:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">facebook</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">twitter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Statistics and Analytics</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/statistics-and-analytics</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="comment"># See: https://analytics.google.com</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">tracking_id:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line">  <span class="comment"># By default, NexT will load an external gtag.js script on your site.</span></span><br><span class="line">  <span class="comment"># If you only need the pageview feature, set the following option to true to get a better performance.</span></span><br><span class="line">  <span class="attr">only_pageview:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># only needed if you are using `only_pageview` mode, https://developers.google.com/analytics/devguides/collection/protocol/ga4</span></span><br><span class="line">  <span class="attr">measure_protocol_api_secret:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Analytics</span></span><br><span class="line"><span class="comment"># See: https://tongji.baidu.com</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Growingio Analytics</span></span><br><span class="line"><span class="comment"># See: https://www.growingio.com</span></span><br><span class="line"><span class="attr">growingio_analytics:</span> <span class="comment"># &lt;project_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudflare Web Analytics</span></span><br><span class="line"><span class="comment"># See: https://www.cloudflare.com/web-analytics/</span></span><br><span class="line"><span class="attr">cloudflare_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Clarity Analytics</span></span><br><span class="line"><span class="comment"># See: https://clarity.microsoft.com/</span></span><br><span class="line"><span class="attr">clarity_analytics:</span> <span class="comment"># &lt;project_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matomo Analytics</span></span><br><span class="line"><span class="comment"># See: https://matomo.org/</span></span><br><span class="line"><span class="attr">matomo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="comment"># https://www.example.com/</span></span><br><span class="line">  <span class="attr">site_id:</span> <span class="comment"># &lt;your site id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Umami Analytics</span></span><br><span class="line"><span class="comment"># See: https://umami.is/</span></span><br><span class="line"><span class="attr">umami:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">script_url:</span> <span class="comment"># https://umami.example.com/script.js</span></span><br><span class="line">  <span class="attr">website_id:</span> <span class="comment"># &lt;your website id&gt;</span></span><br><span class="line">  <span class="attr">host_url:</span> <span class="comment"># &lt;your umami site url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plausible Analytics</span></span><br><span class="line"><span class="comment"># See: https://plausible.io/</span></span><br><span class="line"><span class="attr">plausible:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">script_url:</span> <span class="comment"># https://plausible.io/js/script.js</span></span><br><span class="line">  <span class="attr">site_domain:</span> <span class="comment"># www.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show number of visitors of each article.</span></span><br><span class="line"><span class="comment"># You can visit https://www.leancloud.cn to get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># &lt;your app id&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># &lt;your app key&gt;</span></span><br><span class="line">  <span class="comment"># Required for apps from CN region</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="comment"># &lt;your server url&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don&#x27;t care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span></span><br><span class="line"><span class="comment"># Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span></span><br><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">articles</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="comment"># Required</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Search Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/search-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">manual</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Chat Services</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need to enable and configure the chat service.</span></span><br><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set to `false` to disable icon.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra is a functional, easy to use piece of chat software for websites.</span></span><br><span class="line"><span class="comment"># For more information: https://chatra.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line"><span class="attr">chatra:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="comment"># Visit Dashboard to get your ChatraID</span></span><br><span class="line">  <span class="comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tidio is a powerful, all-in-one customer service tool.</span></span><br><span class="line"><span class="comment"># For more information: https://www.tidio.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://www.tidio.com/panel/dashboard</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">key:</span> <span class="comment"># Public Key, get it from dashboard. See: https://www.tidio.com/panel/settings/developer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CDN Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/advanced-settings/vendors</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># The CDN provider of NexT internal scripts.</span></span><br><span class="line">  <span class="comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line">  <span class="comment"># Warning: If you are using the latest master branch of NexT, please set `internal: local`</span></span><br><span class="line">  <span class="attr">internal:</span> <span class="string">local</span></span><br><span class="line">  <span class="comment"># The default CDN provider of third-party plugins.</span></span><br><span class="line">  <span class="comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line">  <span class="comment"># Dependencies for `plugins: local`: https://github.com/next-theme/plugins</span></span><br><span class="line">  <span class="attr">plugins:</span> <span class="string">cdnjs</span></span><br><span class="line">  <span class="comment"># Custom CDN URL</span></span><br><span class="line">  <span class="comment"># For example:</span></span><br><span class="line">  <span class="comment"># custom_cdn_url: https://cdn.jsdelivr.net/npm/$&#123;npm_name&#125;@$&#123;version&#125;/$&#123;minified&#125;</span></span><br><span class="line">  <span class="comment"># custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span></span><br><span class="line">  <span class="attr">custom_cdn_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="comment"># Accelerate delivery of static files using a CDN</span></span><br><span class="line"><span class="comment"># The js option is only valid when vendors.internal is local.</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">images</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文章终止"><a href="#文章终止" class="headerlink" title="文章终止"></a>文章终止</h2><p>在<code>D:\Hexo\themes\next\layout\_macro</code>目录下新建<code>passage-end-tag.njk</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:36px;&quot;&gt;本文结束&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:36px;&quot;&gt;&lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:36px;&quot;&gt;感谢您的阅读&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>D:\Hexo\themes\next\layout\_macro</code>目录下找到<code>passage-end-tag.njk</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改前 #####&#125;</span><br><span class="line">&#123;##################&#125;</span><br><span class="line">&#123;### POST BLOCK ###&#125;</span><br><span class="line">&#123;##################&#125;</span><br><span class="line">&lt;div class=&quot;post-block&quot;&gt;</span><br><span class="line">  &#123;# Gallery support #&#125;</span><br><span class="line">  &#123;&#123; post_gallery(post.photos) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &lt;article itemscope itemtype=&quot;http://schema.org/Article&quot; class=&quot;post-content&quot; lang=&quot;&#123;&#123; post.lang &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link itemprop=&quot;mainEntityOfPage&quot; href=&quot;&#123;&#123; post.permalink &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;image&quot; content=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; author &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;publisher&quot; itemscope itemtype=&quot;http://schema.org/Organization&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; title &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;description&quot; content=&quot;&#123;&#123; description &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;post&quot; itemscope itemtype=&quot;http://schema.org/CreativeWork&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; page.title + &#x27; | &#x27; + title &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;description&quot; content=&quot;&#123;&#123; page.description &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &#123;%- if post.header !== false %&#125;</span><br><span class="line">      &lt;header class=&quot;post-header&quot;&gt;</span><br><span class="line">        &lt;&#123;% if is_index %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125; class=&quot;post-title&#123;% if post.direction and post.direction.toLowerCase() === &#x27;rtl&#x27; %&#125; rtl&#123;% endif %&#125;&quot; itemprop=&quot;name headline&quot;&gt;</span><br><span class="line">          &#123;% if is_index %&#125;</span><br><span class="line">            &#123;%- if post.sticky &gt; 0 %&#125;</span><br><span class="line">              &lt;span class=&quot;post-sticky-flag&quot; title=&quot;&#123;&#123; __(&#x27;post.sticky&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;fa fa-thumbtack&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/span&gt;</span><br><span class="line">            &#123;%- endif %&#125;</span><br><span class="line">            &#123;&#123;- next_url(post.path, post.title or __(&#x27;post.untitled&#x27;), &#123;class: &#x27;post-title-link&#x27;, itemprop: &#x27;url&#x27;&#125;) &#125;&#125;</span><br><span class="line">          &#123;%- else %&#125;</span><br><span class="line">            &#123;&#123;- post.title &#125;&#125;</span><br><span class="line">            &#123;&#123;- post_edit(post.source) &#125;&#125;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">        &lt;/&#123;% if is_index %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;post-meta-container&quot;&gt;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-meta.njk&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">          &#123;%- if post.description and (not theme.excerpt_description or not is_index) %&#125;</span><br><span class="line">            &lt;div class=&quot;post-description&quot;&gt;&#123;&#123; post.description &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &#123;### POST BODY ###&#125;</span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &lt;div class=&quot;post-body&#123;% if post.direction and post.direction.toLowerCase() === &#x27;rtl&#x27; %&#125; rtl&#123;% endif %&#125;&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">      &#123;%- if is_index %&#125;</span><br><span class="line">        &#123;%- if post.description and theme.excerpt_description %&#125;</span><br><span class="line">          &lt;p&gt;&#123;&#123; post.description &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &#123;%- if theme.read_more_btn %&#125;</span><br><span class="line">            &lt;div class=&quot;post-button&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">                &#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125; &amp;raquo;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br><span class="line">        &#123;% elif post.excerpt %&#125;</span><br><span class="line">          &#123;&#123; post.excerpt &#125;&#125;</span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &#123;%- if theme.read_more_btn %&#125;</span><br><span class="line">            &lt;div class=&quot;post-button&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#more&quot; rel=&quot;contents&quot;&gt;</span><br><span class="line">                &#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125; &amp;raquo;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; post.content &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123;- next_inject(&#x27;postBodyStart&#x27;) &#125;&#125;</span><br><span class="line">        &#123;&#123;- post.content &#125;&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line">    &#123;### END POST BODY ###&#125;</span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">      &#123;%- if is_index %&#125;</span><br><span class="line">        &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123;- next_inject(&#x27;postBodyEnd&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if post.reward_settings.enable %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-reward.njk&#x27;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.creative_commons.license and theme.creative_commons.post and post.copyright !== false %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-copyright.njk&#x27;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.follow_me %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-followme.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">          &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; if theme.tag_icon else &#x27;#&#x27; %&#125;</span><br><span class="line">          &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">            &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">              &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &#123;%- endfor %&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;&#123; partial(&#x27;_partials/post/post-share.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.post_navigation and (post.prev or post.next) %&#125;</span><br><span class="line">          &#123;%- set prev = post.prev if theme.post_navigation === &#x27;right&#x27; else post.next %&#125;</span><br><span class="line">          &#123;%- set next = post.next if theme.post_navigation === &#x27;right&#x27; else post.prev %&#125;</span><br><span class="line">          &lt;div class=&quot;post-nav&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;post-nav-item&quot;&gt;</span><br><span class="line">              &#123;%- if prev %&#125;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123; url_for(prev.path) &#125;&#125;&quot; rel=&quot;prev&quot; title=&quot;&#123;&#123; prev.title &#125;&#125;&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt; &#123;&#123; prev.title &#125;&#125;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &#123;%- endif %&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;post-nav-item&quot;&gt;</span><br><span class="line">              &#123;%- if next %&#125;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123; url_for(next.path) &#125;&#125;&quot; rel=&quot;next&quot; title=&quot;&#123;&#123; next.title &#125;&#125;&quot;&gt;</span><br><span class="line">                  &#123;&#123; next.title &#125;&#125; &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &#123;%- endif %&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;######################&#125;</span><br><span class="line">&#123;### END POST BLOCK ###&#125;</span><br><span class="line">&#123;######################&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改后 #####&#125;</span><br><span class="line">&#123;##################&#125;</span><br><span class="line">&#123;### POST BLOCK ###&#125;</span><br><span class="line">&#123;##################&#125;</span><br><span class="line">&lt;div class=&quot;post-block&quot;&gt;</span><br><span class="line">  &#123;# Gallery support #&#125;</span><br><span class="line">  &#123;&#123; post_gallery(post.photos) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &lt;article itemscope itemtype=&quot;http://schema.org/Article&quot; class=&quot;post-content&quot; lang=&quot;&#123;&#123; post.lang &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link itemprop=&quot;mainEntityOfPage&quot; href=&quot;&#123;&#123; post.permalink &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;image&quot; content=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; author &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;publisher&quot; itemscope itemtype=&quot;http://schema.org/Organization&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; title &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;description&quot; content=&quot;&#123;&#123; description &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop=&quot;post&quot; itemscope itemtype=&quot;http://schema.org/CreativeWork&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;name&quot; content=&quot;&#123;&#123; page.title + &#x27; | &#x27; + title &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;meta itemprop=&quot;description&quot; content=&quot;&#123;&#123; page.description &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &#123;%- if post.header !== false %&#125;</span><br><span class="line">      &lt;header class=&quot;post-header&quot;&gt;</span><br><span class="line">        &lt;&#123;% if is_index %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125; class=&quot;post-title&#123;% if post.direction and post.direction.toLowerCase() === &#x27;rtl&#x27; %&#125; rtl&#123;% endif %&#125;&quot; itemprop=&quot;name headline&quot;&gt;</span><br><span class="line">          &#123;% if is_index %&#125;</span><br><span class="line">            &#123;%- if post.sticky &gt; 0 %&#125;</span><br><span class="line">              &lt;span class=&quot;post-sticky-flag&quot; title=&quot;&#123;&#123; __(&#x27;post.sticky&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;fa fa-thumbtack&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/span&gt;</span><br><span class="line">            &#123;%- endif %&#125;</span><br><span class="line">            &#123;&#123;- next_url(post.path, post.title or __(&#x27;post.untitled&#x27;), &#123;class: &#x27;post-title-link&#x27;, itemprop: &#x27;url&#x27;&#125;) &#125;&#125;</span><br><span class="line">          &#123;%- else %&#125;</span><br><span class="line">            &#123;&#123;- post.title &#125;&#125;</span><br><span class="line">            &#123;&#123;- post_edit(post.source) &#125;&#125;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">        &lt;/&#123;% if is_index %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;post-meta-container&quot;&gt;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-meta.njk&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">          &#123;%- if post.description and (not theme.excerpt_description or not is_index) %&#125;</span><br><span class="line">            &lt;div class=&quot;post-description&quot;&gt;&#123;&#123; post.description &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &#123;### POST BODY ###&#125;</span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &lt;div class=&quot;post-body&#123;% if post.direction and post.direction.toLowerCase() === &#x27;rtl&#x27; %&#125; rtl&#123;% endif %&#125;&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">      &#123;%- if is_index %&#125;</span><br><span class="line">        &#123;%- if post.description and theme.excerpt_description %&#125;</span><br><span class="line">          &lt;p&gt;&#123;&#123; post.description &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &#123;%- if theme.read_more_btn %&#125;</span><br><span class="line">            &lt;div class=&quot;post-button&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">                &#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125; &amp;raquo;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br><span class="line">        &#123;% elif post.excerpt %&#125;</span><br><span class="line">          &#123;&#123; post.excerpt &#125;&#125;</span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &#123;%- if theme.read_more_btn %&#125;</span><br><span class="line">            &lt;div class=&quot;post-button&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#more&quot; rel=&quot;contents&quot;&gt;</span><br><span class="line">                &#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125; &amp;raquo;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; post.content &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123;- next_inject(&#x27;postBodyStart&#x27;) &#125;&#125;</span><br><span class="line">        &#123;&#123;- post.content &#125;&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line">    &#123;### END POST BODY ###&#125;</span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">      &#123;%- if not is_index %&#125;</span><br><span class="line">        &#123;% include &#x27;passage-end-tag.njk&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &#123;%- if is_index %&#125;</span><br><span class="line">        &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123;- next_inject(&#x27;postBodyEnd&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if post.reward_settings.enable %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-reward.njk&#x27;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.creative_commons.license and theme.creative_commons.post and post.copyright !== false %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-copyright.njk&#x27;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.follow_me %&#125;</span><br><span class="line">          &#123;&#123; partial(&#x27;_partials/post/post-followme.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">          &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; if theme.tag_icon else &#x27;#&#x27; %&#125;</span><br><span class="line">          &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">            &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">              &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &#123;%- endfor %&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;&#123; partial(&#x27;_partials/post/post-share.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;%- if theme.post_navigation and (post.prev or post.next) %&#125;</span><br><span class="line">          &#123;%- set prev = post.prev if theme.post_navigation === &#x27;right&#x27; else post.next %&#125;</span><br><span class="line">          &#123;%- set next = post.next if theme.post_navigation === &#x27;right&#x27; else post.prev %&#125;</span><br><span class="line">          &lt;div class=&quot;post-nav&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;post-nav-item&quot;&gt;</span><br><span class="line">              &#123;%- if prev %&#125;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123; url_for(prev.path) &#125;&#125;&quot; rel=&quot;prev&quot; title=&quot;&#123;&#123; prev.title &#125;&#125;&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt; &#123;&#123; prev.title &#125;&#125;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &#123;%- endif %&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;post-nav-item&quot;&gt;</span><br><span class="line">              &#123;%- if next %&#125;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123; url_for(next.path) &#125;&#125;&quot; rel=&quot;next&quot; title=&quot;&#123;&#123; next.title &#125;&#125;&quot;&gt;</span><br><span class="line">                  &#123;&#123; next.title &#125;&#125; &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &#123;%- endif %&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;######################&#125;</span><br><span class="line">&#123;### END POST BLOCK ###&#125;</span><br><span class="line">&#123;######################&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改版权声明"><a href="#修改版权声明" class="headerlink" title="修改版权声明"></a>修改版权声明</h2><p>在<code>D:\Hexo\themes\next\layout\_partials\post</code>目录下找到<code>post-copyright.njk</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改前 #####&#125;</span><br><span class="line">&#123;%- set ccIcon = &#x27;&lt;i class=&quot;fab fa-fw fa-creative-commons&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">&#123;%- set ccText = theme.creative_commons.license | upper %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;post-copyright&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &#123;%- if page.author %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.post_author&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- page.author &#125;&#125;</span><br><span class="line">    &#123;%- elif author %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.author&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- author &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-link&quot;&gt;</span><br><span class="line">    &#123;%- if page.post_link %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.post_link&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">      &#123;&#123; next_url(page.post_link, page.post_link, &#123;title: page.title&#125;) &#125;&#125;</span><br><span class="line">    &#123;%- else %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.link&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">      &#123;&#123; next_url(page.permalink, page.permalink, &#123;title: page.title&#125;, true) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-license&quot;&gt;</span><br><span class="line">    &#123;%- if page.copyright_reprint %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.license_title&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- __(&#x27;post.copyright.license_content_reprint&#x27;, next_url(ccURL, ccIcon + ccText)) &#125;&#125;</span><br><span class="line">    &#123;%- else %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.license_title&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- __(&#x27;post.copyright.license_content&#x27;, next_url(ccURL, ccIcon + ccText)) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改前 #####&#125;</span><br><span class="line">&#123;%- set ccIcon = &#x27;&lt;i class=&quot;fab fa-fw fa-creative-commons&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">&#123;%- set ccText = theme.creative_commons.license | upper %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;post-copyright&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &#123;%- if page.author %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.post_author&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- page.author &#125;&#125;</span><br><span class="line">    &#123;%- elif author %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.author&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- author &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-link&quot;&gt;</span><br><span class="line">    &#123;%- if page.post_link %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.post_link&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">      &#123;&#123; next_url(page.post_link, page.post_link, &#123;title: page.title&#125;) &#125;&#125;</span><br><span class="line">    &#123;%- else %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.link&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">      &#123;&#123; next_url(page.permalink, page.permalink, &#123;title: page.title&#125;, true) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-license&quot;&gt;</span><br><span class="line">    &#123;%- if page.copyright_reprint %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.license_title&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- __(next_url(ccURL, ccIcon + ccText)) &#125;&#125;</span><br><span class="line">    &#123;%- else %&#125;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&#x27;post.copyright.license_title&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">      &#123;&#123;- __(next_url(ccURL, ccIcon + ccText)) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改鼠标点击动画和动态背景"><a href="#修改鼠标点击动画和动态背景" class="headerlink" title="修改鼠标点击动画和动态背景"></a>修改鼠标点击动画和动态背景</h2><p>在<code>D:\Hexo\themes\next\layout</code>目录下找到<code>_layout.njk</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改前 #####&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&#123;&#123; page.lang &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/head/head.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- include &#x27;_partials/head/head-unique.njk&#x27; -%&#125;</span><br><span class="line">  &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/analytics/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123;- next_inject(&#x27;head&#x27;) &#125;&#125;</span><br><span class="line">  &lt;noscript&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/noscript.css&quot;&gt;</span><br><span class="line">  &lt;/noscript&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body itemscope itemtype=&quot;http://schema.org/WebPage&quot;&#123;% if theme.motion.enable %&#125; class=&quot;use-motion&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">  &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;main class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;header&quot; itemscope itemtype=&quot;http://schema.org/WPHeader&quot;&gt;</span><br><span class="line">        &#123;%- include &#x27;_partials/header/index.njk&#x27; -%&#125;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &#123;%- if theme.sidebar.display !== &#x27;remove&#x27; %&#125;</span><br><span class="line">        &#123;% block sidebar %&#125;&#123;% endblock %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;main-inner &#123;% block class %&#125;&#123;% endblock %&#125;&quot;&gt;</span><br><span class="line">      &#123;%- include &#x27;_partials/header/sub-menu.njk&#x27; -%&#125;</span><br><span class="line">      &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">      &#123;%- include &#x27;_partials/comments.njk&#x27; -%&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">  &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;footer-inner&quot;&gt;</span><br><span class="line">      &#123;%- include &#x27;_partials/languages.njk&#x27; -%&#125;</span><br><span class="line">      &#123;&#123; partial(&#x27;_partials/footer.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/widgets.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123; partial(&#x27;_scripts/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/statistics/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- include &#x27;_third-party/math/index.njk&#x27; -%&#125;</span><br><span class="line">  &#123;%- include &#x27;_third-party/quicklink.njk&#x27; -%&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;bodyEnd&#x27;) &#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;##### 修改后 #####&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&#123;&#123; page.lang &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/head/head.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- include &#x27;_partials/head/head-unique.njk&#x27; -%&#125;</span><br><span class="line">  &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/analytics/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123;- next_inject(&#x27;head&#x27;) &#125;&#125;</span><br><span class="line">  &lt;noscript&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/noscript.css&quot;&gt;</span><br><span class="line">  &lt;/noscript&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body itemscope itemtype=&quot;http://schema.org/WebPage&quot;&#123;% if theme.motion.enable %&#125; class=&quot;use-motion&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">  &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;main class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;header&quot; itemscope itemtype=&quot;http://schema.org/WPHeader&quot;&gt;</span><br><span class="line">        &#123;%- include &#x27;_partials/header/index.njk&#x27; -%&#125;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &#123;%- if theme.sidebar.display !== &#x27;remove&#x27; %&#125;</span><br><span class="line">        &#123;% block sidebar %&#125;&#123;% endblock %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;main-inner &#123;% block class %&#125;&#123;% endblock %&#125;&quot;&gt;</span><br><span class="line">      &#123;%- include &#x27;_partials/header/sub-menu.njk&#x27; -%&#125;</span><br><span class="line">      &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">      &#123;%- include &#x27;_partials/comments.njk&#x27; -%&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">  &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;footer-inner&quot;&gt;</span><br><span class="line">      &#123;%- include &#x27;_partials/languages.njk&#x27; -%&#125;</span><br><span class="line">      &#123;&#123; partial(&#x27;_partials/footer.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/widgets.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123; partial(&#x27;_scripts/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/statistics/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- include &#x27;_third-party/math/index.njk&#x27; -%&#125;</span><br><span class="line">  &#123;%- include &#x27;_third-party/quicklink.njk&#x27; -%&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;bodyEnd&#x27;) &#125;&#125;</span><br><span class="line">  &lt;!--  鼠标点击爱心  --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!--  页面动态线条  --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; color=&quot;2,129,249&quot; src=&quot;/js/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改归档页"><a href="#修改归档页" class="headerlink" title="修改归档页"></a>修改归档页</h2><p>在<code>D:\Hexo\themes\next\source\css\_common\components\pages</code>目录下找到<code>categories.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">.category-all-page &#123;</span><br><span class="line">  .category-all-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-all &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-item &#123;</span><br><span class="line">    margin: 5px 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-count &#123;</span><br><span class="line">    color: $grey;</span><br><span class="line"></span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      content: &#x27; (&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      content: &#x27;) &#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-child &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">.category-all-page &#123;</span><br><span class="line">  .category-all-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-all &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    flex-flow: row wrap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-item &#123;</span><br><span class="line">    margin: 10px 10px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">    -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;darkmode&#x27;)) &#123;</span><br><span class="line">    @media (prefers-color-scheme: dark) &#123;</span><br><span class="line">      .category-list-item &#123;</span><br><span class="line">        margin: 10px 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">        -moz-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-count &#123;</span><br><span class="line">    color: $grey;</span><br><span class="line"></span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      content: &#x27; (&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      content: &#x27;) &#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list-child &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改黑暗模式"><a href="#修改黑暗模式" class="headerlink" title="修改黑暗模式"></a>修改黑暗模式</h2><p>在<code>D:\Hexo\themes\next\source\css\_common\components\post</code>目录下找到<code>index.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">.rtl &#123;</span><br><span class="line">  &amp;.post-body &#123;</span><br><span class="line">    p, a, h1, h2, h3, h4, h5, h6, li, ul, ol &#123;</span><br><span class="line">      direction: rtl;</span><br><span class="line">      font-family: UKIJ Ekran;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.post-title &#123;</span><br><span class="line">    font-family: UKIJ Ekran;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-button &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">  text-align: $scheme-text-align;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block, .pagination, .comments &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_header&#x27;)) &#123;</span><br><span class="line">    .post-header &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_body&#x27;)) &#123;</span><br><span class="line">    .post-body &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.coll_header&#x27;)) &#123;</span><br><span class="line">    .collection-header &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@import &#x27;post-collapse&#x27;;</span><br><span class="line">@import &#x27;post-body&#x27;;</span><br><span class="line">@import &#x27;post-gallery&#x27;;</span><br><span class="line">@import &#x27;post-header&#x27;;</span><br><span class="line">@import &#x27;post-nav&#x27;;</span><br><span class="line">@import &#x27;post-footer&#x27;;</span><br><span class="line">@import &#x27;post-widgets&#x27;;</span><br><span class="line">@import &#x27;post-reward&#x27;;</span><br><span class="line">@import &#x27;post-followme&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">.rtl &#123;</span><br><span class="line">  &amp;.post-body &#123;</span><br><span class="line">    p, a, h1, h2, h3, h4, h5, h6, li, ul, ol &#123;</span><br><span class="line">      direction: rtl;</span><br><span class="line">      font-family: UKIJ Ekran;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.post-title &#123;</span><br><span class="line">    font-family: UKIJ Ekran;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-button &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">  text-align: $scheme-text-align;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block&#123;</span><br><span class="line">      margin-top: 60px;</span><br><span class="line">      margin-bottom: 60px;</span><br><span class="line">      padding: 25px;</span><br><span class="line">      -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">      -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">    &#125; .pagination, .comments &#123;</span><br><span class="line">      margin-top: 60px;</span><br><span class="line">      margin-bottom: 60px;</span><br><span class="line">      padding: 25px;</span><br><span class="line">      -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">      -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_header&#x27;)) &#123;</span><br><span class="line">    .post-header &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_body&#x27;)) &#123;</span><br><span class="line">    .post-body &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (hexo-config(&#x27;motion.transition.coll_header&#x27;)) &#123;</span><br><span class="line">    .collection-header &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;darkmode&#x27;)) &#123;</span><br><span class="line">  @media (prefers-color-scheme: dark) &#123;</span><br><span class="line">    .use-motion &#123;</span><br><span class="line">      if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">        .post-block&#123;</span><br><span class="line">          margin-top: 60px;</span><br><span class="line">          margin-bottom: 60px;</span><br><span class="line">          padding: 25px;</span><br><span class="line">          -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">          -moz-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">        &#125; .pagination, .comments &#123;</span><br><span class="line">          margin-top: 60px;</span><br><span class="line">          margin-bottom: 60px;</span><br><span class="line">          padding: 25px;</span><br><span class="line">          -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">          -moz-box-shadow: 0 0 5px rgba(255, 255, 255, 1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (hexo-config(&#x27;motion.transition.post_header&#x27;)) &#123;</span><br><span class="line">        .post-header &#123;</span><br><span class="line">          visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (hexo-config(&#x27;motion.transition.post_body&#x27;)) &#123;</span><br><span class="line">        .post-body &#123;</span><br><span class="line">          visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (hexo-config(&#x27;motion.transition.coll_header&#x27;)) &#123;</span><br><span class="line">        .collection-header &#123;</span><br><span class="line">          visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@import &#x27;post-collapse&#x27;;</span><br><span class="line">@import &#x27;post-body&#x27;;</span><br><span class="line">@import &#x27;post-gallery&#x27;;</span><br><span class="line">@import &#x27;post-header&#x27;;</span><br><span class="line">@import &#x27;post-nav&#x27;;</span><br><span class="line">@import &#x27;post-footer&#x27;;</span><br><span class="line">@import &#x27;post-widgets&#x27;;</span><br><span class="line">@import &#x27;post-reward&#x27;;</span><br><span class="line">@import &#x27;post-followme&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="删除文章间短横线"><a href="#删除文章间短横线" class="headerlink" title="删除文章间短横线"></a>删除文章间短横线</h2><p>在<code>D:\Hexo\themes\next\source\css\_common\components\post</code>目录下找到<code>post-footer.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">// Flexbox layout makes it possible to reorder the child</span><br><span class="line">// elements of .post-footer through the `order` CSS property</span><br><span class="line">// Fix issue #16</span><br><span class="line">// To do: use `gap` instead of `margin`</span><br><span class="line">// See https://caniuse.com/flexbox-gap</span><br><span class="line">.post-footer &#123;</span><br><span class="line">  flex-column();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-eof &#123;</span><br><span class="line">  background: $grey-light;</span><br><span class="line">  height: 1px;</span><br><span class="line">  margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span><br><span class="line">  width: 8%;</span><br><span class="line"></span><br><span class="line">  .post-block:last-of-type &amp; &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;creative_commons.post&#x27;)) &#123;</span><br><span class="line">  .post-copyright ul &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    padding: .5em 1em;</span><br><span class="line">    position: relative;</span><br><span class="line">    post-card();</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      content: &#x27;\f25e&#x27;;</span><br><span class="line">      font-family: &#x27;Font Awesome 6 Brands&#x27;;</span><br><span class="line">      font-size: 200px;</span><br><span class="line">      opacity: .1;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: -50px;</span><br><span class="line">      top: -150px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-tags &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">  text-align: $scheme-text-align;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: $font-size-smaller;</span><br><span class="line"></span><br><span class="line">    &amp;:not(:last-child) &#123;</span><br><span class="line">      margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">// Flexbox layout makes it possible to reorder the child</span><br><span class="line">// elements of .post-footer through the `order` CSS property</span><br><span class="line">// Fix issue #16</span><br><span class="line">// To do: use `gap` instead of `margin`</span><br><span class="line">// See https://caniuse.com/flexbox-gap</span><br><span class="line">.post-footer &#123;</span><br><span class="line">  flex-column();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-eof &#123;</span><br><span class="line">  background: $grey-light;</span><br><span class="line">  //height: 1px;</span><br><span class="line">  //margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span><br><span class="line">  //width: 8%;</span><br><span class="line"></span><br><span class="line">  .post-block:last-of-type &amp; &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;creative_commons.post&#x27;)) &#123;</span><br><span class="line">  .post-copyright ul &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    padding: .5em 1em;</span><br><span class="line">    position: relative;</span><br><span class="line">    post-card();</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      content: &#x27;\f25e&#x27;;</span><br><span class="line">      font-family: &#x27;Font Awesome 6 Brands&#x27;;</span><br><span class="line">      font-size: 200px;</span><br><span class="line">      opacity: .1;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: -50px;</span><br><span class="line">      top: -150px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-tags &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">  text-align: $scheme-text-align;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: $font-size-smaller;</span><br><span class="line"></span><br><span class="line">    &amp;:not(:last-child) &#123;</span><br><span class="line">      margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改宽度"><a href="#修改宽度" class="headerlink" title="修改宽度"></a>修改宽度</h2><p>在<code>D:\Hexo\themes\next\source\css\_variables</code>目录下找到<code>base.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">//</span><br><span class="line">// Variables</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Color system</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$whitesmoke   = #f5f5f5;</span><br><span class="line">$gainsboro    = #eee;</span><br><span class="line">$grey-lighter = #ddd;</span><br><span class="line">$grey-light   = #ccc;</span><br><span class="line">$grey         = #bbb;</span><br><span class="line">$grey-dark    = #999;</span><br><span class="line">$grey-dim     = #666;</span><br><span class="line">$black-light  = #555;</span><br><span class="line">$black-dim    = #333;</span><br><span class="line">$black-deep   = #222;</span><br><span class="line">$red          = #ff2a2a;</span><br><span class="line">$blue-bright  = #87daff;</span><br><span class="line">$blue         = #0684bd;</span><br><span class="line">$blue-deep    = #262a30;</span><br><span class="line">$orange       = #fc6423;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Transition</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$transition-duration = .2s;</span><br><span class="line">$transition-ease     = $transition-duration ease-in-out;</span><br><span class="line">$transition-ease-in  = $transition-duration ease-in;</span><br><span class="line">$transition-ease-out = $transition-duration ease-out;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Scaffolding</span><br><span class="line">// Settings for some of the most global styles.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Global text color on &lt;body&gt;</span><br><span class="line">$text-color                   = $black-light;</span><br><span class="line">$text-color-dark              = $grey-light;</span><br><span class="line"></span><br><span class="line">// Global link color.</span><br><span class="line">$link-color                   = $black-light;</span><br><span class="line">$link-color-dark              = $grey-light;</span><br><span class="line">$link-hover-color             = $black-deep;</span><br><span class="line">$link-hover-color-dark        = $gainsboro;</span><br><span class="line">$link-decoration-color        = $grey-dark;</span><br><span class="line"></span><br><span class="line">$blockquote-color             = $grey-dim;</span><br><span class="line">$blockquote-color-dark        = $grey;</span><br><span class="line"></span><br><span class="line">// Global border color.</span><br><span class="line">$border-color                 = $grey-light;</span><br><span class="line"></span><br><span class="line">// Background color for &lt;body&gt;</span><br><span class="line">$body-bg-color                = white;</span><br><span class="line">$body-bg-color-dark           = #282828;</span><br><span class="line">$content-bg-color             = white;</span><br><span class="line">$content-bg-color-dark        = $black-dim;</span><br><span class="line"></span><br><span class="line">// Selection</span><br><span class="line">$selection-bg                 = $blue-deep;</span><br><span class="line">$selection-color              = $gainsboro;</span><br><span class="line"></span><br><span class="line">// Dark mode color</span><br><span class="line">$card-bg-color                = $whitesmoke;</span><br><span class="line">$card-bg-color-dark           = $black-light;</span><br><span class="line"></span><br><span class="line">$menu-item-bg-color           = $whitesmoke;</span><br><span class="line">$menu-item-bg-color-dark      = $black-light;</span><br><span class="line"></span><br><span class="line">$theme-color                  = convert(hexo-config(&#x27;theme_color.light&#x27;));</span><br><span class="line">$theme-color-dark             = convert(hexo-config(&#x27;theme_color.dark&#x27;));</span><br><span class="line"></span><br><span class="line">$scheme-text-align            = center;</span><br><span class="line"></span><br><span class="line">// Typography</span><br><span class="line">// Font, line-height, and elements colors.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">get_font_family(config) &#123;</span><br><span class="line">  $custom-family = hexo-config(&#x27;font.&#x27; + config + &#x27;.family&#x27;);</span><br><span class="line">  return $custom-family is a &#x27;string&#x27; ? unquote($custom-family) : null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Font families.</span><br><span class="line">$font-family-chinese      = &#x27;PingFang SC&#x27;, &#x27;Microsoft YaHei&#x27;;</span><br><span class="line"></span><br><span class="line">$font-family-base         = $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base         = get_font_family(&#x27;global&#x27;), $font-family-chinese, sans-serif if get_font_family(&#x27;global&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-logo         = $font-family-base;</span><br><span class="line">$font-family-logo         = get_font_family(&#x27;title&#x27;), $font-family-base if get_font_family(&#x27;title&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-headings     = $font-family-base;</span><br><span class="line">$font-family-headings     = get_font_family(&#x27;headings&#x27;), $font-family-base if get_font_family(&#x27;headings&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-posts        = $font-family-base;</span><br><span class="line">$font-family-posts        = get_font_family(&#x27;posts&#x27;), $font-family-base if get_font_family(&#x27;posts&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-monospace    = consolas, Menlo, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace    = get_font_family(&#x27;codes&#x27;), consolas, Menlo, monospace, $font-family-chinese if get_font_family(&#x27;codes&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Font size</span><br><span class="line">$font-size-base           = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.global.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.global.size&#x27;), em) : 1em;</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.5em;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Headings font size</span><br><span class="line">$font-size-headings-step  = .125em;</span><br><span class="line">$font-size-headings-base  = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.headings.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.headings.size&#x27;), em) : 1.625em;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Global line height</span><br><span class="line">$line-height-base         = 2;</span><br><span class="line">$line-height-code-block   = 1.6; // Can&#x27;t be less than 1.3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Z-index master list</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Fix issue https://github.com/next-theme/theme-next-docs/issues/54</span><br><span class="line">$zindex-0       = 5;</span><br><span class="line">$zindex-1       = 10;</span><br><span class="line">$zindex-2       = 20;</span><br><span class="line">$zindex-3       = 30;</span><br><span class="line">$zindex-4       = 40;</span><br><span class="line">$zindex-5       = 50;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Table</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$table-border-color             = $grey-lighter;</span><br><span class="line">$table-font-size                = $font-size-small;</span><br><span class="line">$table-cell-border-bottom-color = $grey-lighter;</span><br><span class="line">$table-row-odd-bg-color         = #f9f9f9;</span><br><span class="line">$table-row-odd-bg-color-dark    = #282828;</span><br><span class="line">$table-row-hover-bg-color       = $whitesmoke;</span><br><span class="line">$table-row-hover-bg-color-dark  = #363636;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace;</span><br><span class="line"></span><br><span class="line">$highlight-background        = convert(hexo-config(&#x27;highlight.light.background&#x27;));</span><br><span class="line">$highlight-foreground        = convert(hexo-config(&#x27;highlight.light.foreground&#x27;));</span><br><span class="line">$highlight-gutter-background = mix($highlight-background, $highlight-foreground, 90%);</span><br><span class="line">$highlight-gutter-foreground = mix($highlight-background, $highlight-foreground, 10%);</span><br><span class="line"></span><br><span class="line">$highlight-background-dark        = convert(hexo-config(&#x27;highlight.dark.background&#x27;));</span><br><span class="line">$highlight-foreground-dark        = convert(hexo-config(&#x27;highlight.dark.foreground&#x27;));</span><br><span class="line">$highlight-gutter-background-dark = mix($highlight-background-dark, $highlight-foreground-dark, 90%);</span><br><span class="line">$highlight-gutter-foreground-dark = mix($highlight-background-dark, $highlight-foreground-dark, 10%);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Buttons</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$btn-default-radius                    = 0;</span><br><span class="line">$btn-default-bg                        = $black-deep;</span><br><span class="line">$btn-default-bg-dark                   = $black-deep;</span><br><span class="line">$btn-default-color                     = white;</span><br><span class="line">$btn-default-color-dark                = $text-color-dark;</span><br><span class="line">$btn-default-border-color              = $black-deep;</span><br><span class="line">$btn-default-border-color-dark         = $black-light;</span><br><span class="line">$btn-default-hover-bg                  = white;</span><br><span class="line">$btn-default-hover-bg-dark             = $grey-dim;</span><br><span class="line">$btn-default-hover-color               = $black-deep;</span><br><span class="line">$btn-default-hover-color-dark          = $text-color-dark;</span><br><span class="line">$btn-default-hover-border-color        = $black-deep;</span><br><span class="line">$btn-default-hover-border-color-dark   = $grey-dim;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Pagination</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$pagination-border              = $gainsboro;</span><br><span class="line"></span><br><span class="line">$pagination-link-bg             = transparent;</span><br><span class="line">$pagination-link-color          = $link-color;</span><br><span class="line">$pagination-link-border         = $gainsboro;</span><br><span class="line"></span><br><span class="line">$pagination-link-hover-bg       = transparent;</span><br><span class="line">$pagination-link-hover-color    = $link-color;</span><br><span class="line">$pagination-link-hover-border   = var(--link-hover-color);</span><br><span class="line"></span><br><span class="line">$pagination-active-bg           = $grey-light;</span><br><span class="line">$pagination-active-color        = var(--content-bg-color);</span><br><span class="line">$pagination-active-border       = $grey-light;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Layout sizes</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$content-desktop                = 700px;</span><br><span class="line">$content-desktop-large          = 800px;</span><br><span class="line">$content-desktop-largest        = 900px;</span><br><span class="line"></span><br><span class="line">$content-desktop-padding        = 40px;</span><br><span class="line">$content-tablet-padding         = 10px;</span><br><span class="line">$content-mobile-padding         = 8px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Headband</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$headband-height                = 3px;</span><br><span class="line">$headband-bg                    = var(--theme-color);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Site Meta</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$brand-color                    = white;</span><br><span class="line">$brand-hover-color              = white;</span><br><span class="line">$brand-color-dark               = $grey-lighter;</span><br><span class="line">$brand-hover-color-dark         = $grey-lighter;</span><br><span class="line">$brand-padding                  = 0 40px;</span><br><span class="line"></span><br><span class="line">$site-subtitle-margin           = 10px 0;</span><br><span class="line"></span><br><span class="line">$font-size-title                = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.title.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.title.size&#x27;), em) : 1.375em;</span><br><span class="line">$font-size-subtitle             = $font-size-smaller;</span><br><span class="line">$subtitle-color                 = $grey-dark;</span><br><span class="line">$site-subtitle-color            = $grey-dark;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Posts Collpase</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$posts-collapse-margin          = 35px;</span><br><span class="line">$posts-collapse-margin-mobile   = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Tag Cloud</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$tag-cloud-start      = #aaa;</span><br><span class="line">$tag-cloud-end        = #111;</span><br><span class="line">$tag-cloud-start-dark = #555;</span><br><span class="line">$tag-cloud-end-dark   = #eee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Sidebar</span><br><span class="line">// Variables for sidebar section elements.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line"></span><br><span class="line">$sidebar-padding                      = hexo-config(&#x27;sidebar.padding&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;sidebar.padding&#x27;), px) : 18px;</span><br><span class="line">$sidebar-offset                       = hexo-config(&#x27;sidebar.offset&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;sidebar.offset&#x27;), px) : 12px;</span><br><span class="line">$sidebar-nav-color                    = $grey-dim;</span><br><span class="line">$sidebar-nav-hover-color              = $whitesmoke;</span><br><span class="line">$sidebar-highlight                    = $blue-bright;</span><br><span class="line"></span><br><span class="line">$site-author-image-width              = 96px;</span><br><span class="line">$site-author-image-border-width       = 2px;</span><br><span class="line">$site-author-image-border-color       = $black-dim;</span><br><span class="line"></span><br><span class="line">$site-author-name-margin              = 5px 0 0;</span><br><span class="line">$site-author-name-color               = $whitesmoke;</span><br><span class="line">$site-author-name-weight              = normal;</span><br><span class="line"></span><br><span class="line">$site-description-font-size           = $font-size-medium;</span><br><span class="line">$site-description-color               = $grey-dark;</span><br><span class="line">$site-description-margin-top          = 5px;</span><br><span class="line"></span><br><span class="line">$site-state-item-count-font-size      = $font-size-larger;</span><br><span class="line">$site-state-item-name-font-size       = $font-size-small;</span><br><span class="line">$site-state-item-name-color           = inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Components</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Back to top</span><br><span class="line">$b2t-opacity                  = .8;</span><br><span class="line">$b2t-opacity-hover            = 1;</span><br><span class="line">$b2t-position-bottom          = -100px;</span><br><span class="line">$b2t-position-bottom-on       = 30px;</span><br><span class="line">$b2t-position-right           = 30px;</span><br><span class="line">$b2t-position-right-mobile    = 20px;</span><br><span class="line">$b2t-font-size                = 12px;</span><br><span class="line">$b2t-color                    = white;</span><br><span class="line">$b2t-bg-color                 = $black-deep;</span><br><span class="line"></span><br><span class="line">$sidebar-toggle-inner-size    = 16px;</span><br><span class="line">$sidebar-toggle-padding       = 5px;</span><br><span class="line">$sidebar-toggle-size          = $sidebar-toggle-inner-size + $sidebar-toggle-padding * 2;</span><br><span class="line"></span><br><span class="line">//  .post-expand .post-eof</span><br><span class="line">//  In Muse scheme, margin above and below the post separator</span><br><span class="line">$post-eof-margin-top          = 80px; //  or 160px for more white space;</span><br><span class="line">$post-eof-margin-bottom       = 60px; //  or 120px for less white space;</span><br><span class="line"></span><br><span class="line">$post-card-margin             = 1em 0 0;</span><br><span class="line">$post-reward-img-width        = 180px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Note colors</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Read note light_bg_offset from NexT config and set in &#x27;$lbg%&#x27; to use it as string variable.</span><br><span class="line">$lbg = hexo-config(&#x27;note.light_bg_offset&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;note.light_bg_offset&#x27;), &#x27;%&#x27;) : 0;</span><br><span class="line">$note-types = &#x27;default&#x27; &#x27;primary&#x27; &#x27;info&#x27; &#x27;success&#x27; &#x27;warning&#x27; &#x27;danger&#x27;;</span><br><span class="line"></span><br><span class="line">$note-border-radius         = 3px;</span><br><span class="line"></span><br><span class="line">$note-border = &#123;</span><br><span class="line">  default : #777,</span><br><span class="line">  primary : #6f42c1,</span><br><span class="line">  info    : #428bca,</span><br><span class="line">  success : #5cb85c,</span><br><span class="line">  warning : #f0ad4e,</span><br><span class="line">  danger  : #d9534f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-bg = &#123;</span><br><span class="line">  default : lighten(spin($note-border.default, 0), 94% + $lbg),</span><br><span class="line">  primary : lighten(spin($note-border.primary, 10), 92% + $lbg),</span><br><span class="line">  info    : lighten(spin($note-border.info, -10), 91% + $lbg),</span><br><span class="line">  success : lighten(spin($note-border.success, 10), 90% + $lbg),</span><br><span class="line">  warning : lighten(spin($note-border.warning, 10), 88% + $lbg),</span><br><span class="line">  danger  : lighten(spin($note-border.danger, -10), 92% + $lbg)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-text = &#123;</span><br><span class="line">  default : $note-border.default,</span><br><span class="line">  primary : $note-border.primary,</span><br><span class="line">  info    : $note-border.info,</span><br><span class="line">  success : $note-border.success,</span><br><span class="line">  warning : $note-border.warning,</span><br><span class="line">  danger  : $note-border.danger</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-icon = &#123;</span><br><span class="line">  default : &#x27;\f0a9&#x27;,</span><br><span class="line">  primary : &#x27;\f055&#x27;,</span><br><span class="line">  info    : &#x27;\f05a&#x27;,</span><br><span class="line">  success : &#x27;\f058&#x27;,</span><br><span class="line">  warning : &#x27;\f06a&#x27;,</span><br><span class="line">  danger  : &#x27;\f056&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-border = &#123;</span><br><span class="line">  default : #e1e1e1,</span><br><span class="line">  primary : #e1c2ff,</span><br><span class="line">  info    : #b3e5ef,</span><br><span class="line">  success : #d0e6be,</span><br><span class="line">  warning : #fae4cd,</span><br><span class="line">  danger  : #ebcdd2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-bg = &#123;</span><br><span class="line">  default : lighten(spin($note-modern-border.default, 10), 60% + ($lbg * 4)),</span><br><span class="line">  primary : lighten(spin($note-modern-border.primary, 10), 40% + ($lbg * 4)),</span><br><span class="line">  info    : lighten(spin($note-modern-border.info, 10), 50% + ($lbg * 4)),</span><br><span class="line">  success : lighten(spin($note-modern-border.success, 10), 40% + ($lbg * 4)),</span><br><span class="line">  warning : lighten(spin($note-modern-border.warning, 10), 43% + ($lbg * 4)),</span><br><span class="line">  danger  : lighten(spin($note-modern-border.danger, 10), 35% + ($lbg * 4))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-text = &#123;</span><br><span class="line">  default : $grey-dim,</span><br><span class="line">  primary : #6f42c1,</span><br><span class="line">  info    : #31708f,</span><br><span class="line">  success : #3c763d,</span><br><span class="line">  warning : #8a6d3b,</span><br><span class="line">  danger  : #a94442</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-hover = &#123;</span><br><span class="line">  default : darken(spin($note-modern-text.default, -10), 32%),</span><br><span class="line">  primary : darken(spin($note-modern-text.primary, -10), 22%),</span><br><span class="line">  info    : darken(spin($note-modern-text.info, -10), 32%),</span><br><span class="line">  success : darken(spin($note-modern-text.success, -10), 27%),</span><br><span class="line">  warning : darken(spin($note-modern-text.warning, -10), 18%),</span><br><span class="line">  danger  : darken(spin($note-modern-text.danger, -10), 22%)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Tabs border radius</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$tbr                        = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Label colors</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$label = &#123;</span><br><span class="line">  default : lighten(spin($note-border.default, 0), 89% + $lbg),</span><br><span class="line">  primary : lighten(spin($note-border.primary, 10), 87% + $lbg),</span><br><span class="line">  info    : lighten(spin($note-border.info, -10), 86% + $lbg),</span><br><span class="line">  success : lighten(spin($note-border.success, 10), 85% + $lbg),</span><br><span class="line">  warning : lighten(spin($note-border.warning, 10), 83% + $lbg),</span><br><span class="line">  danger  : lighten(spin($note-border.danger, -10), 87% + $lbg)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">//</span><br><span class="line">// Variables</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Color system</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$whitesmoke   = #f5f5f5;</span><br><span class="line">$gainsboro    = #eee;</span><br><span class="line">$grey-lighter = #ddd;</span><br><span class="line">$grey-light   = #ccc;</span><br><span class="line">$grey         = #bbb;</span><br><span class="line">$grey-dark    = #999;</span><br><span class="line">$grey-dim     = #666;</span><br><span class="line">$black-light  = #555;</span><br><span class="line">$black-dim    = #333;</span><br><span class="line">$black-deep   = #222;</span><br><span class="line">$red          = #ff2a2a;</span><br><span class="line">$blue-bright  = #87daff;</span><br><span class="line">$blue         = #0684bd;</span><br><span class="line">$blue-deep    = #262a30;</span><br><span class="line">$orange       = #fc6423;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Transition</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$transition-duration = .2s;</span><br><span class="line">$transition-ease     = $transition-duration ease-in-out;</span><br><span class="line">$transition-ease-in  = $transition-duration ease-in;</span><br><span class="line">$transition-ease-out = $transition-duration ease-out;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Scaffolding</span><br><span class="line">// Settings for some of the most global styles.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Global text color on &lt;body&gt;</span><br><span class="line">$text-color                   = $black-light;</span><br><span class="line">$text-color-dark              = $grey-light;</span><br><span class="line"></span><br><span class="line">// Global link color.</span><br><span class="line">$link-color                   = $black-light;</span><br><span class="line">$link-color-dark              = $grey-light;</span><br><span class="line">$link-hover-color             = $black-deep;</span><br><span class="line">$link-hover-color-dark        = $gainsboro;</span><br><span class="line">$link-decoration-color        = $grey-dark;</span><br><span class="line"></span><br><span class="line">$blockquote-color             = $grey-dim;</span><br><span class="line">$blockquote-color-dark        = $grey;</span><br><span class="line"></span><br><span class="line">// Global border color.</span><br><span class="line">$border-color                 = $grey-light;</span><br><span class="line"></span><br><span class="line">// Background color for &lt;body&gt;</span><br><span class="line">$body-bg-color                = white;</span><br><span class="line">$body-bg-color-dark           = #282828;</span><br><span class="line">$content-bg-color             = white;</span><br><span class="line">$content-bg-color-dark        = $black-dim;</span><br><span class="line"></span><br><span class="line">// Selection</span><br><span class="line">$selection-bg                 = $blue-deep;</span><br><span class="line">$selection-color              = $gainsboro;</span><br><span class="line"></span><br><span class="line">// Dark mode color</span><br><span class="line">$card-bg-color                = $whitesmoke;</span><br><span class="line">$card-bg-color-dark           = $black-light;</span><br><span class="line"></span><br><span class="line">$menu-item-bg-color           = $whitesmoke;</span><br><span class="line">$menu-item-bg-color-dark      = $black-light;</span><br><span class="line"></span><br><span class="line">$theme-color                  = convert(hexo-config(&#x27;theme_color.light&#x27;));</span><br><span class="line">$theme-color-dark             = convert(hexo-config(&#x27;theme_color.dark&#x27;));</span><br><span class="line"></span><br><span class="line">$scheme-text-align            = center;</span><br><span class="line"></span><br><span class="line">// Typography</span><br><span class="line">// Font, line-height, and elements colors.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">get_font_family(config) &#123;</span><br><span class="line">  $custom-family = hexo-config(&#x27;font.&#x27; + config + &#x27;.family&#x27;);</span><br><span class="line">  return $custom-family is a &#x27;string&#x27; ? unquote($custom-family) : null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Font families.</span><br><span class="line">$font-family-chinese      = &#x27;PingFang SC&#x27;, &#x27;Microsoft YaHei&#x27;;</span><br><span class="line"></span><br><span class="line">$font-family-base         = $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base         = get_font_family(&#x27;global&#x27;), $font-family-chinese, sans-serif if get_font_family(&#x27;global&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-logo         = $font-family-base;</span><br><span class="line">$font-family-logo         = get_font_family(&#x27;title&#x27;), $font-family-base if get_font_family(&#x27;title&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-headings     = $font-family-base;</span><br><span class="line">$font-family-headings     = get_font_family(&#x27;headings&#x27;), $font-family-base if get_font_family(&#x27;headings&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-posts        = $font-family-base;</span><br><span class="line">$font-family-posts        = get_font_family(&#x27;posts&#x27;), $font-family-base if get_font_family(&#x27;posts&#x27;);</span><br><span class="line"></span><br><span class="line">$font-family-monospace    = consolas, Menlo, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace    = get_font_family(&#x27;codes&#x27;), consolas, Menlo, monospace, $font-family-chinese if get_font_family(&#x27;codes&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Font size</span><br><span class="line">$font-size-base           = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.global.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.global.size&#x27;), em) : 1em;</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.5em;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Headings font size</span><br><span class="line">$font-size-headings-step  = .125em;</span><br><span class="line">$font-size-headings-base  = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.headings.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.headings.size&#x27;), em) : 1.625em;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Global line height</span><br><span class="line">$line-height-base         = 2;</span><br><span class="line">$line-height-code-block   = 1.6; // Can&#x27;t be less than 1.3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Z-index master list</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Fix issue https://github.com/next-theme/theme-next-docs/issues/54</span><br><span class="line">$zindex-0       = 5;</span><br><span class="line">$zindex-1       = 10;</span><br><span class="line">$zindex-2       = 20;</span><br><span class="line">$zindex-3       = 30;</span><br><span class="line">$zindex-4       = 40;</span><br><span class="line">$zindex-5       = 50;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Table</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$table-border-color             = $grey-lighter;</span><br><span class="line">$table-font-size                = $font-size-small;</span><br><span class="line">$table-cell-border-bottom-color = $grey-lighter;</span><br><span class="line">$table-row-odd-bg-color         = #f9f9f9;</span><br><span class="line">$table-row-odd-bg-color-dark    = #282828;</span><br><span class="line">$table-row-hover-bg-color       = $whitesmoke;</span><br><span class="line">$table-row-hover-bg-color-dark  = #363636;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace;</span><br><span class="line"></span><br><span class="line">$highlight-background        = convert(hexo-config(&#x27;highlight.light.background&#x27;));</span><br><span class="line">$highlight-foreground        = convert(hexo-config(&#x27;highlight.light.foreground&#x27;));</span><br><span class="line">$highlight-gutter-background = mix($highlight-background, $highlight-foreground, 90%);</span><br><span class="line">$highlight-gutter-foreground = mix($highlight-background, $highlight-foreground, 10%);</span><br><span class="line"></span><br><span class="line">$highlight-background-dark        = convert(hexo-config(&#x27;highlight.dark.background&#x27;));</span><br><span class="line">$highlight-foreground-dark        = convert(hexo-config(&#x27;highlight.dark.foreground&#x27;));</span><br><span class="line">$highlight-gutter-background-dark = mix($highlight-background-dark, $highlight-foreground-dark, 90%);</span><br><span class="line">$highlight-gutter-foreground-dark = mix($highlight-background-dark, $highlight-foreground-dark, 10%);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Buttons</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$btn-default-radius                    = 0;</span><br><span class="line">$btn-default-bg                        = $black-deep;</span><br><span class="line">$btn-default-bg-dark                   = $black-deep;</span><br><span class="line">$btn-default-color                     = white;</span><br><span class="line">$btn-default-color-dark                = $text-color-dark;</span><br><span class="line">$btn-default-border-color              = $black-deep;</span><br><span class="line">$btn-default-border-color-dark         = $black-light;</span><br><span class="line">$btn-default-hover-bg                  = white;</span><br><span class="line">$btn-default-hover-bg-dark             = $grey-dim;</span><br><span class="line">$btn-default-hover-color               = $black-deep;</span><br><span class="line">$btn-default-hover-color-dark          = $text-color-dark;</span><br><span class="line">$btn-default-hover-border-color        = $black-deep;</span><br><span class="line">$btn-default-hover-border-color-dark   = $grey-dim;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Pagination</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$pagination-border              = $gainsboro;</span><br><span class="line"></span><br><span class="line">$pagination-link-bg             = transparent;</span><br><span class="line">$pagination-link-color          = $link-color;</span><br><span class="line">$pagination-link-border         = $gainsboro;</span><br><span class="line"></span><br><span class="line">$pagination-link-hover-bg       = transparent;</span><br><span class="line">$pagination-link-hover-color    = $link-color;</span><br><span class="line">$pagination-link-hover-border   = var(--link-hover-color);</span><br><span class="line"></span><br><span class="line">$pagination-active-bg           = $grey-light;</span><br><span class="line">$pagination-active-color        = var(--content-bg-color);</span><br><span class="line">$pagination-active-border       = $grey-light;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Layout sizes</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">//$content-desktop                = 700px;</span><br><span class="line">//$content-desktop-large          = 800px;</span><br><span class="line">//$content-desktop-largest        = 900px;</span><br><span class="line"></span><br><span class="line">$content-desktop                = 90%;</span><br><span class="line">$content-desktop-large          = 90%;</span><br><span class="line">$content-desktop-largest        = 90%;</span><br><span class="line"></span><br><span class="line">$content-desktop-padding        = 40px;</span><br><span class="line">$content-tablet-padding         = 10px;</span><br><span class="line">$content-mobile-padding         = 8px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Headband</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$headband-height                = 3px;</span><br><span class="line">$headband-bg                    = var(--theme-color);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Site Meta</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$brand-color                    = white;</span><br><span class="line">$brand-hover-color              = white;</span><br><span class="line">$brand-color-dark               = $grey-lighter;</span><br><span class="line">$brand-hover-color-dark         = $grey-lighter;</span><br><span class="line">$brand-padding                  = 0 40px;</span><br><span class="line"></span><br><span class="line">$site-subtitle-margin           = 10px 0;</span><br><span class="line"></span><br><span class="line">$font-size-title                = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.title.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.title.size&#x27;), em) : 1.375em;</span><br><span class="line">$font-size-subtitle             = $font-size-smaller;</span><br><span class="line">$subtitle-color                 = $grey-dark;</span><br><span class="line">$site-subtitle-color            = $grey-dark;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Posts Collpase</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$posts-collapse-margin          = 35px;</span><br><span class="line">$posts-collapse-margin-mobile   = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Tag Cloud</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$tag-cloud-start      = #aaa;</span><br><span class="line">$tag-cloud-end        = #111;</span><br><span class="line">$tag-cloud-start-dark = #555;</span><br><span class="line">$tag-cloud-end-dark   = #eee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Sidebar</span><br><span class="line">// Variables for sidebar section elements.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line"></span><br><span class="line">$sidebar-padding                      = hexo-config(&#x27;sidebar.padding&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;sidebar.padding&#x27;), px) : 18px;</span><br><span class="line">$sidebar-offset                       = hexo-config(&#x27;sidebar.offset&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;sidebar.offset&#x27;), px) : 12px;</span><br><span class="line">$sidebar-nav-color                    = $grey-dim;</span><br><span class="line">$sidebar-nav-hover-color              = $whitesmoke;</span><br><span class="line">$sidebar-highlight                    = $blue-bright;</span><br><span class="line"></span><br><span class="line">$site-author-image-width              = 96px;</span><br><span class="line">$site-author-image-border-width       = 2px;</span><br><span class="line">$site-author-image-border-color       = $black-dim;</span><br><span class="line"></span><br><span class="line">$site-author-name-margin              = 5px 0 0;</span><br><span class="line">$site-author-name-color               = $whitesmoke;</span><br><span class="line">$site-author-name-weight              = normal;</span><br><span class="line"></span><br><span class="line">$site-description-font-size           = $font-size-medium;</span><br><span class="line">$site-description-color               = $grey-dark;</span><br><span class="line">$site-description-margin-top          = 5px;</span><br><span class="line"></span><br><span class="line">$site-state-item-count-font-size      = $font-size-larger;</span><br><span class="line">$site-state-item-name-font-size       = $font-size-small;</span><br><span class="line">$site-state-item-name-color           = inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Components</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Back to top</span><br><span class="line">$b2t-opacity                  = .8;</span><br><span class="line">$b2t-opacity-hover            = 1;</span><br><span class="line">$b2t-position-bottom          = -100px;</span><br><span class="line">$b2t-position-bottom-on       = 30px;</span><br><span class="line">$b2t-position-right           = 30px;</span><br><span class="line">$b2t-position-right-mobile    = 20px;</span><br><span class="line">$b2t-font-size                = 12px;</span><br><span class="line">$b2t-color                    = white;</span><br><span class="line">$b2t-bg-color                 = $black-deep;</span><br><span class="line"></span><br><span class="line">$sidebar-toggle-inner-size    = 16px;</span><br><span class="line">$sidebar-toggle-padding       = 5px;</span><br><span class="line">$sidebar-toggle-size          = $sidebar-toggle-inner-size + $sidebar-toggle-padding * 2;</span><br><span class="line"></span><br><span class="line">//  .post-expand .post-eof</span><br><span class="line">//  In Muse scheme, margin above and below the post separator</span><br><span class="line">$post-eof-margin-top          = 80px; //  or 160px for more white space;</span><br><span class="line">$post-eof-margin-bottom       = 60px; //  or 120px for less white space;</span><br><span class="line"></span><br><span class="line">$post-card-margin             = 1em 0 0;</span><br><span class="line">$post-reward-img-width        = 180px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Note colors</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Read note light_bg_offset from NexT config and set in &#x27;$lbg%&#x27; to use it as string variable.</span><br><span class="line">$lbg = hexo-config(&#x27;note.light_bg_offset&#x27;) is a &#x27;unit&#x27; ? unit(hexo-config(&#x27;note.light_bg_offset&#x27;), &#x27;%&#x27;) : 0;</span><br><span class="line">$note-types = &#x27;default&#x27; &#x27;primary&#x27; &#x27;info&#x27; &#x27;success&#x27; &#x27;warning&#x27; &#x27;danger&#x27;;</span><br><span class="line"></span><br><span class="line">$note-border-radius         = 3px;</span><br><span class="line"></span><br><span class="line">$note-border = &#123;</span><br><span class="line">  default : #777,</span><br><span class="line">  primary : #6f42c1,</span><br><span class="line">  info    : #428bca,</span><br><span class="line">  success : #5cb85c,</span><br><span class="line">  warning : #f0ad4e,</span><br><span class="line">  danger  : #d9534f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-bg = &#123;</span><br><span class="line">  default : lighten(spin($note-border.default, 0), 94% + $lbg),</span><br><span class="line">  primary : lighten(spin($note-border.primary, 10), 92% + $lbg),</span><br><span class="line">  info    : lighten(spin($note-border.info, -10), 91% + $lbg),</span><br><span class="line">  success : lighten(spin($note-border.success, 10), 90% + $lbg),</span><br><span class="line">  warning : lighten(spin($note-border.warning, 10), 88% + $lbg),</span><br><span class="line">  danger  : lighten(spin($note-border.danger, -10), 92% + $lbg)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-text = &#123;</span><br><span class="line">  default : $note-border.default,</span><br><span class="line">  primary : $note-border.primary,</span><br><span class="line">  info    : $note-border.info,</span><br><span class="line">  success : $note-border.success,</span><br><span class="line">  warning : $note-border.warning,</span><br><span class="line">  danger  : $note-border.danger</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-icon = &#123;</span><br><span class="line">  default : &#x27;\f0a9&#x27;,</span><br><span class="line">  primary : &#x27;\f055&#x27;,</span><br><span class="line">  info    : &#x27;\f05a&#x27;,</span><br><span class="line">  success : &#x27;\f058&#x27;,</span><br><span class="line">  warning : &#x27;\f06a&#x27;,</span><br><span class="line">  danger  : &#x27;\f056&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-border = &#123;</span><br><span class="line">  default : #e1e1e1,</span><br><span class="line">  primary : #e1c2ff,</span><br><span class="line">  info    : #b3e5ef,</span><br><span class="line">  success : #d0e6be,</span><br><span class="line">  warning : #fae4cd,</span><br><span class="line">  danger  : #ebcdd2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-bg = &#123;</span><br><span class="line">  default : lighten(spin($note-modern-border.default, 10), 60% + ($lbg * 4)),</span><br><span class="line">  primary : lighten(spin($note-modern-border.primary, 10), 40% + ($lbg * 4)),</span><br><span class="line">  info    : lighten(spin($note-modern-border.info, 10), 50% + ($lbg * 4)),</span><br><span class="line">  success : lighten(spin($note-modern-border.success, 10), 40% + ($lbg * 4)),</span><br><span class="line">  warning : lighten(spin($note-modern-border.warning, 10), 43% + ($lbg * 4)),</span><br><span class="line">  danger  : lighten(spin($note-modern-border.danger, 10), 35% + ($lbg * 4))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-text = &#123;</span><br><span class="line">  default : $grey-dim,</span><br><span class="line">  primary : #6f42c1,</span><br><span class="line">  info    : #31708f,</span><br><span class="line">  success : #3c763d,</span><br><span class="line">  warning : #8a6d3b,</span><br><span class="line">  danger  : #a94442</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$note-modern-hover = &#123;</span><br><span class="line">  default : darken(spin($note-modern-text.default, -10), 32%),</span><br><span class="line">  primary : darken(spin($note-modern-text.primary, -10), 22%),</span><br><span class="line">  info    : darken(spin($note-modern-text.info, -10), 32%),</span><br><span class="line">  success : darken(spin($note-modern-text.success, -10), 27%),</span><br><span class="line">  warning : darken(spin($note-modern-text.warning, -10), 18%),</span><br><span class="line">  danger  : darken(spin($note-modern-text.danger, -10), 22%)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Tabs border radius</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$tbr                        = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Label colors</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$label = &#123;</span><br><span class="line">  default : lighten(spin($note-border.default, 0), 89% + $lbg),</span><br><span class="line">  primary : lighten(spin($note-border.primary, 10), 87% + $lbg),</span><br><span class="line">  info    : lighten(spin($note-border.info, -10), 86% + $lbg),</span><br><span class="line">  success : lighten(spin($note-border.success, 10), 85% + $lbg),</span><br><span class="line">  warning : lighten(spin($note-border.warning, 10), 83% + $lbg),</span><br><span class="line">  danger  : lighten(spin($note-border.danger, -10), 87% + $lbg)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>D:\Hexo\themes\next\source\css\_variables</code>目录下找到<code>Mist.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">// Variables of Mist scheme</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line">@import &#x27;Muse&#x27;;</span><br><span class="line"></span><br><span class="line">$scheme-text-align          = left;</span><br><span class="line"></span><br><span class="line">$content-padding-bottom     = 80px;</span><br><span class="line">$posts-first-padding        = 80px;</span><br><span class="line">$posts-first-padding-mobile = 60px;</span><br><span class="line"></span><br><span class="line">$link-decoration-color   = $grey-light;</span><br><span class="line">$content-bg-color        = $whitesmoke;</span><br><span class="line">$menu-item-bg-color      = $grey-lighter;</span><br><span class="line"></span><br><span class="line">$brand-color             = $black-deep;</span><br><span class="line">$brand-hover-color       = $brand-color;</span><br><span class="line">$brand-padding           = 2px 1px;</span><br><span class="line"></span><br><span class="line">$posts-collapse-left     = 0;</span><br><span class="line"></span><br><span class="line">$btn-default-bg                 = transparent;</span><br><span class="line">$btn-default-color              = var(--link-color);</span><br><span class="line">$btn-default-hover-bg           = transparent;</span><br><span class="line">$btn-default-border-color       = var(--link-color);</span><br><span class="line">$btn-default-hover-color        = var(--link-hover-color);</span><br><span class="line">$btn-default-hover-border-color = var(--link-hover-color);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">// Variables of Mist scheme</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line">@import &#x27;Muse&#x27;;</span><br><span class="line"></span><br><span class="line">$scheme-text-align          = left;</span><br><span class="line"></span><br><span class="line">$content-padding-bottom     = 60px;</span><br><span class="line">$posts-first-padding        = 25px;</span><br><span class="line">$posts-first-padding-mobile = 35px;</span><br><span class="line"></span><br><span class="line">$link-decoration-color   = $grey-light;</span><br><span class="line">$content-bg-color        = $whitesmoke;</span><br><span class="line">$menu-item-bg-color      = $grey-lighter;</span><br><span class="line"></span><br><span class="line">$brand-color             = $black-deep;</span><br><span class="line">$brand-hover-color       = $brand-color;</span><br><span class="line">$brand-padding           = 2px 1px;</span><br><span class="line"></span><br><span class="line">$posts-collapse-left     = 0;</span><br><span class="line"></span><br><span class="line">$btn-default-bg                 = transparent;</span><br><span class="line">$btn-default-color              = var(--link-color);</span><br><span class="line">$btn-default-hover-bg           = transparent;</span><br><span class="line">$btn-default-border-color       = var(--link-color);</span><br><span class="line">$btn-default-hover-color        = var(--link-hover-color);</span><br><span class="line">$btn-default-hover-border-color = var(--link-hover-color);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>D:\Hexo\themes\next\source\css\_variables</code>目录下找到<code>Muse.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">// Variables of Muse scheme</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line">$sidebar-width           = hexo-config(&#x27;sidebar.width&#x27;) is a &#x27;unit&#x27; ? hexo-config(&#x27;sidebar.width&#x27;) : 320;</span><br><span class="line">$sidebar-desktop         = unit($sidebar-width, &#x27;px&#x27;);</span><br><span class="line"></span><br><span class="line">$content-padding-bottom     = 60px;</span><br><span class="line">$posts-first-padding        = 70px;</span><br><span class="line">$posts-first-padding-mobile = 35px;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">// Variables of Muse scheme</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line">$sidebar-width           = hexo-config(&#x27;sidebar.width&#x27;) is a &#x27;unit&#x27; ? hexo-config(&#x27;sidebar.width&#x27;) : 320;</span><br><span class="line">$sidebar-desktop         = unit($sidebar-width, &#x27;px&#x27;);</span><br><span class="line"></span><br><span class="line">$content-padding-bottom     = 60px;</span><br><span class="line">$posts-first-padding        = 25px;</span><br><span class="line">$posts-first-padding-mobile = 35px;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改黑暗模式的颜色及背景"><a href="#修改黑暗模式的颜色及背景" class="headerlink" title="修改黑暗模式的颜色及背景"></a>修改黑暗模式的颜色及背景</h2><p>在<code>D:\Hexo\themes\next\source\css</code>目录下找到<code>_colors.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">:root &#123;</span><br><span class="line">  --body-bg-color: $body-bg-color;</span><br><span class="line">  --content-bg-color: $content-bg-color;</span><br><span class="line">  --card-bg-color: $card-bg-color;</span><br><span class="line">  --text-color: $text-color;</span><br><span class="line">  --blockquote-color: $blockquote-color;</span><br><span class="line">  --link-color: $link-color;</span><br><span class="line">  --link-hover-color: $link-hover-color;</span><br><span class="line">  --brand-color: $brand-color;</span><br><span class="line">  --brand-hover-color: $brand-hover-color;</span><br><span class="line">  --table-row-odd-bg-color: $table-row-odd-bg-color;</span><br><span class="line">  --table-row-hover-bg-color: $table-row-hover-bg-color;</span><br><span class="line">  --menu-item-bg-color: $menu-item-bg-color;</span><br><span class="line">  --theme-color: $theme-color;</span><br><span class="line"></span><br><span class="line">  --btn-default-bg: $btn-default-bg;</span><br><span class="line">  --btn-default-color: $btn-default-color;</span><br><span class="line">  --btn-default-border-color: $btn-default-border-color;</span><br><span class="line">  --btn-default-hover-bg: $btn-default-hover-bg;</span><br><span class="line">  --btn-default-hover-color: $btn-default-hover-color;</span><br><span class="line">  --btn-default-hover-border-color: $btn-default-hover-border-color;</span><br><span class="line"></span><br><span class="line">  --highlight-background: $highlight-background;</span><br><span class="line">  --highlight-foreground: $highlight-foreground;</span><br><span class="line">  --highlight-gutter-background: $highlight-gutter-background;</span><br><span class="line">  --highlight-gutter-foreground: $highlight-gutter-foreground;</span><br><span class="line"></span><br><span class="line">  color-scheme: light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;darkmode&#x27;)) &#123;</span><br><span class="line">  @media (prefers-color-scheme: dark) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      --body-bg-color: $body-bg-color-dark;</span><br><span class="line">      --content-bg-color: $content-bg-color-dark;</span><br><span class="line">      --card-bg-color: $card-bg-color-dark;</span><br><span class="line">      --text-color: $text-color-dark;</span><br><span class="line">      --blockquote-color: $blockquote-color-dark;</span><br><span class="line">      --link-color: $link-color-dark;</span><br><span class="line">      --link-hover-color: $link-hover-color-dark;</span><br><span class="line">      --brand-color: $brand-color-dark;</span><br><span class="line">      --brand-hover-color: $brand-hover-color-dark;</span><br><span class="line">      --table-row-odd-bg-color: $table-row-odd-bg-color-dark;</span><br><span class="line">      --table-row-hover-bg-color: $table-row-hover-bg-color-dark;</span><br><span class="line">      --menu-item-bg-color: $menu-item-bg-color-dark;</span><br><span class="line">      --theme-color: $theme-color-dark;</span><br><span class="line"></span><br><span class="line">      --btn-default-bg: $btn-default-bg-dark;</span><br><span class="line">      --btn-default-color: $btn-default-color-dark;</span><br><span class="line">      --btn-default-border-color: $btn-default-border-color-dark;</span><br><span class="line">      --btn-default-hover-bg: $btn-default-hover-bg-dark;</span><br><span class="line">      --btn-default-hover-color: $btn-default-hover-color-dark;</span><br><span class="line">      --btn-default-hover-border-color: $btn-default-hover-border-color-dark;</span><br><span class="line"></span><br><span class="line">      --highlight-background: $highlight-background-dark;</span><br><span class="line">      --highlight-foreground: $highlight-foreground-dark;</span><br><span class="line">      --highlight-gutter-background: $highlight-gutter-background-dark;</span><br><span class="line">      --highlight-gutter-foreground: $highlight-gutter-foreground-dark;</span><br><span class="line"></span><br><span class="line">      color-scheme: dark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      opacity: .75;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        opacity: .9;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iframe &#123;</span><br><span class="line">      color-scheme: light;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改后</span><br><span class="line">:root &#123;</span><br><span class="line">  --body-bg-color: $body-bg-color;</span><br><span class="line">  --content-bg-color: $content-bg-color;</span><br><span class="line">  --card-bg-color: $card-bg-color;</span><br><span class="line">  --text-color: $text-color;</span><br><span class="line">  --blockquote-color: $blockquote-color;</span><br><span class="line">  --link-color: $link-color;</span><br><span class="line">  --link-hover-color: $link-hover-color;</span><br><span class="line">  --brand-color: $brand-color;</span><br><span class="line">  --brand-hover-color: $brand-hover-color;</span><br><span class="line">  --table-row-odd-bg-color: $table-row-odd-bg-color;</span><br><span class="line">  --table-row-hover-bg-color: $table-row-hover-bg-color;</span><br><span class="line">  --menu-item-bg-color: $menu-item-bg-color;</span><br><span class="line">  --theme-color: $theme-color;</span><br><span class="line"></span><br><span class="line">  --btn-default-bg: $btn-default-bg;</span><br><span class="line">  --btn-default-color: $btn-default-color;</span><br><span class="line">  --btn-default-border-color: $btn-default-border-color;</span><br><span class="line">  --btn-default-hover-bg: $btn-default-hover-bg;</span><br><span class="line">  --btn-default-hover-color: $btn-default-hover-color;</span><br><span class="line">  --btn-default-hover-border-color: $btn-default-hover-border-color;</span><br><span class="line"></span><br><span class="line">  --highlight-background: $highlight-background;</span><br><span class="line">  --highlight-foreground: $highlight-foreground;</span><br><span class="line">  --highlight-gutter-background: $highlight-gutter-background;</span><br><span class="line">  --highlight-gutter-foreground: $highlight-gutter-foreground;</span><br><span class="line"></span><br><span class="line">  body&#123;</span><br><span class="line">    background: url(/images/leather.svg);</span><br><span class="line">    background-size: 600px, 600px;</span><br><span class="line">    background-repeat: repeat;</span><br><span class="line">    background-attachment: fixed;</span><br><span class="line">    background-position: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  color-scheme: light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;darkmode&#x27;)) &#123;</span><br><span class="line">  @media (prefers-color-scheme: dark) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      --body-bg-color: $body-bg-color-dark;</span><br><span class="line">      --content-bg-color: $content-bg-color-dark;</span><br><span class="line">      --card-bg-color: $card-bg-color-dark;</span><br><span class="line">      --text-color: $text-color-dark;</span><br><span class="line">      --blockquote-color: $blockquote-color-dark;</span><br><span class="line">      --link-color: $link-color-dark;</span><br><span class="line">      --link-hover-color: $link-hover-color-dark;</span><br><span class="line">      --brand-color: $brand-color-dark;</span><br><span class="line">      --brand-hover-color: $brand-hover-color-dark;</span><br><span class="line">      --table-row-odd-bg-color: $table-row-odd-bg-color-dark;</span><br><span class="line">      --table-row-hover-bg-color: $table-row-hover-bg-color-dark;</span><br><span class="line">      --menu-item-bg-color: $menu-item-bg-color-dark;</span><br><span class="line">      --theme-color: $theme-color-dark;</span><br><span class="line"></span><br><span class="line">      --btn-default-bg: $btn-default-bg-dark;</span><br><span class="line">      --btn-default-color: $btn-default-color-dark;</span><br><span class="line">      --btn-default-border-color: $btn-default-border-color-dark;</span><br><span class="line">      --btn-default-hover-bg: $btn-default-hover-bg-dark;</span><br><span class="line">      --btn-default-hover-color: $btn-default-hover-color-dark;</span><br><span class="line">      --btn-default-hover-border-color: $btn-default-hover-border-color-dark;</span><br><span class="line"></span><br><span class="line">      --highlight-background: $highlight-background-dark;</span><br><span class="line">      --highlight-foreground: $highlight-foreground-dark;</span><br><span class="line">      --highlight-gutter-background: $highlight-gutter-background-dark;</span><br><span class="line">      --highlight-gutter-foreground: $highlight-gutter-foreground-dark;</span><br><span class="line"></span><br><span class="line">      body&#123;</span><br><span class="line">        background: url(/images/leather_dark.svg);</span><br><span class="line">        background-size: 600px, 600px;</span><br><span class="line">        background-repeat: repeat;</span><br><span class="line">        background-attachment: fixed;</span><br><span class="line">        background-position: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      color-scheme: dark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      opacity: .75;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        opacity: .9;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iframe &#123;</span><br><span class="line">      color-scheme: light;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此，美化完成。</p>
<hr>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 扩展语法</title>
    <url>/zh-CN/ebb2eba847fb/</url>
    <content><![CDATA[<hr>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><blockquote>
<p>即便 John Gruber 的原始设计文档中所列出的 Markdown 基本语法 已经囊括了许多满足日常所需的元素，但对于某些人来说仍然不够。这就是 Markdown 扩展语法出现的缘由。</p>
</blockquote>
<blockquote>
<p>一些个人和组织通过添加表格（tables）、代码块（code blocks）、语法高亮、将 URL 自动转换为链接和脚注（footnotes）等额外的元素来扩展 Markdown 的基本语法。这些额外添加的元素可以通过使用构建于 Markdown 之上的轻量级标记语言或通过向兼容的 Markdown 解析器添加扩展来启用这些新元素。</p>
</blockquote>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote>
<p>如需添加表格，请使用三个或更多个连字符（ — ）来为每个列创建表头，并使用管道符（ | ）来分隔每个列。为兼容考虑，你还应该在行的两侧添加管道符。</p>
</blockquote>
<blockquote>
<p>通过在标题行中的连字符（ hyphens ）的左侧或右侧或两侧添加冒号（ : ），可以将对应列中的文本向左或向右或居中对齐。</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>|First Header | Second Header | Third Header|</code><br><code>|:----------- | :-----------: | -----------:|</code><br><code>|Content Cell | Content Cell  | Content Cell|</code><br><code>|Content Cell | Content Cell  | Content Cell|</code></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><table>
<thead>
<tr>
<th align="left">First Header</th>
<th align="center">Second Header</th>
<th align="right">Third Header</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Content Cell</td>
<td align="center">Content Cell</td>
<td align="right">Content Cell</td>
</tr>
<tr>
<td align="left">Content Cell</td>
<td align="center">Content Cell</td>
<td align="right">Content Cell</td>
</tr>
</tbody></table>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<p>你可以为表格中的文本设置格式。例如，可以添加 链接（ links ）、代码（ code ）（注意，只能为单词或短语添加反引号 ( &#96; ) ，不能添加 代码块（ code blocks ））以及 强调（ emphasis ）。</p>
</blockquote>
<blockquote>
<p>不支持的格式包括标题（ headings ）、块引用（ blockquotes ）、列表（ lists ）、水平分割线（ horizontal rules ）、图片（ images ）或 HTML 标记。</p>
</blockquote>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote>
<p>Markdown 的基本语法允许你通过缩进四个空格或一个制表符来创建 代码块 。如果你觉得不方便，可以试试围栏代码块（ fenced code blocks ）。根据 Markdown 解析器或编辑器的不同，代码块的前后可以使用三个反引号（ &#96;&#96;&#96; ）或三个波浪号（ ~~~ ）来标记围栏代码块。</p>
</blockquote>
<blockquote>
<p>许多 Markdown 解析器都支持围栏代码块的语法高亮功能。此功能允许你为编写代码所用的编程语言添加带颜色的语法高亮显示。如需添加语法高亮，请在围栏代码块前的反引号旁指定所用的编程语言。</p>
</blockquote>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><code>~~~C</code><br><code>#include &lt;stdio.h&gt;</code><br><code>int main() &#123;</code><br><code>        // 打印 Hello, World!</code><br><code>        printf(&quot;Hello, World!\n&quot;);</code><br><code>        return 0;</code><br><code>&#125;</code><br><code>~~~</code>  </p>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 打印 Hello, World!</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><blockquote>
<p>你可以贯穿单词的中心放一条横线从而删除这些单词。其效果看起来是这样的： <del>这样</del> 。此功能允许你标记某些单词是错误的，不应该出现在文档中。在单词前面和后面分别放置两个波浪号（ ~~ ） 来表示删除这些单词。</p>
</blockquote>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><code>~~这是删除的文字~~</code></p>
<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><del>这是删除的文字</del></p>
<hr>
<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><blockquote>
<p>任务列表（task lists 或者 checklists）允许你创建带有复选框的项目列表。在支持任务列表的 Markdown 应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项前面添加破折号（-）和中间带空格的方括号（[ ]）。要选中复选框，请在方括号中间添加一个 x ，即（[\x]）。</p>
</blockquote>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p><code>- [x] 复选1</code><br><code>- [x] 复选2</code><br><code>- [ ] 复选3</code></p>
<h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 复选1</li>
<li><input checked="" disabled="" type="checkbox"> 复选2</li>
<li><input disabled="" type="checkbox"> 复选3</li>
</ul>
<hr>
<h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><blockquote>
<p>有两种方式可以将表情符号添加到 Markdown 文档中：将表情符号复制并粘贴到 Markdown 格式的文本中。</p>
</blockquote>
<blockquote>
<p>在大多数情况下，你可以简单地从 Emojipedia 等来源复制表情符号，然后将其粘贴到文档中。许多 Markdown 应用程序就会自动以 Markdown 格式的文本来显示表情符号。从 Markdown 应用程序导出的 HTML 和 PDF 文件也是可以显示表情符号的。</p>
</blockquote>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p><code>这是个表情: ❤️</code></p>
<h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><p>这是个表情: ❤️</p>
<hr>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p><code>$$</code><br><code>e=mc^2</code><br><code>$$</code></p>
<p><code>$$</code><br><code>\frac&#123;\partial u&#125;&#123;\partial t&#125;</code><br><code>= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +</code><br><code>\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +</code><br><code>\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)</code><br><code>$$</code></p>
<p><code>$$</code><br><code>cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta - 1</code><br><code>$$</code></p>
<p><code>$$</code><br><code>\begin&#123;aligned&#125;</code><br><code>\dot&#123;x&#125; &amp; = \sigma(y-x) \\\\</code><br><code>\dot&#123;y&#125; &amp; = \rho x - y - xz \\\\</code><br><code>\dot&#123;z&#125; &amp; = -\beta z + xy</code><br><code>\end&#123;aligned&#125;</code><br><code>$$</code></p>
<p><code>$$</code><br><code>\begin&#123;aligned&#125;</code><br><code>a &amp;= b + c \\\\</code><br><code>&amp;= d + e + f + g \\\\</code><br><code>&amp;= h + i</code><br><code>\end&#123;aligned&#125;</code><br><code>$$</code></p>
<h3 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3><p>$$<br>e&#x3D;mc^2<br>$$</p>
<p>$$<br>\frac{\partial u}{\partial t}<br>&#x3D; h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)<br>$$</p>
<p>$$<br>cos 2\theta &#x3D; \cos^2 \theta - \sin^2 \theta &#x3D; 2 \cos^2 \theta - 1<br>$$</p>
<p>$$<br>\begin{aligned}<br>\dot{x} &amp; &#x3D; \sigma(y-x) \\<br>\dot{y} &amp; &#x3D; \rho x - y - xz \\<br>\dot{z} &amp; &#x3D; -\beta z + xy<br>\end{aligned}<br>$$</p>
<p>$$<br>\begin{aligned}<br>a &amp;&#x3D; b + c \\<br>  &amp;&#x3D; d + e + f + g \\<br>  &amp;&#x3D; h + i<br>\end{aligned}<br>$$</p>
<hr>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>小雪</title>
    <url>/zh-CN/7bbf4878ee7e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/7bbf4878ee7e/201911220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小雪</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00001.两数之和</title>
    <url>/zh-CN/4ce06535e6e9/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$2 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li>
<li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li>
<li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li>
</ul>
<p><strong>只会存在一个有效答案</strong></p>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 $O(n^2)$ 的算法吗？</p>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash_map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (hash_map.<span class="built_in">find</span>(complement) != hash_map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;hash_map[complement], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hash_map[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 70.06% 使用 C++ 的用户</p>
<p>内存消耗 : 10.2 MB, 击败 0.82% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(complement), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 99.50% 使用 Java 的用户</p>
<p>内存消耗 : 43.02 MB, 击败 5.10% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num_indices = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            complement = target - num</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> num_indices:</span><br><span class="line">                <span class="keyword">return</span> [num_indices[complement], i]</span><br><span class="line">            num_indices[num] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 78.55% 使用 Python 的用户</p>
<p>内存消耗 : 13.66 MB, 击败 65.80% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        num_indices = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            complement = target - num</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> num_indices:</span><br><span class="line">                <span class="keyword">return</span> [num_indices[complement], i]</span><br><span class="line">            num_indices[num] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 92.95% 使用 Python3 的用户</p>
<p>内存消耗 : 17.39 MB, 击败 13.79% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numsSize; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 67.82% 使用 C 的用户</p>
<p>内存消耗 : 6.93 MB, 击败 49.60% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; numIndices = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (numIndices.ContainsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;numIndices[complement], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            numIndices[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 140 ms, 击败 73.82% 使用 C# 的用户</p>
<p>内存消耗 : 43.81 MB, 击败 32.02% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> numIndices = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (numIndices.<span class="title function_">has</span>(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [numIndices.<span class="title function_">get</span>(complement), i];</span><br><span class="line">        &#125;</span><br><span class="line">        numIndices.<span class="title function_">set</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 71.65% 使用 JavaScript 的用户</p>
<p>内存消耗 : 42.16 MB, 击败 40.42% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">numIndices</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">complement</span>: <span class="built_in">number</span> = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (numIndices.<span class="title function_">has</span>(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [numIndices.<span class="title function_">get</span>(complement)!, i];</span><br><span class="line">        &#125;</span><br><span class="line">        numIndices.<span class="title function_">set</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 68.51% 使用 TypeScript 的用户</p>
<p>内存消耗 : 44.71 MB, 击败 30.74% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$numIndices</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$nums</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$num</span>) &#123;</span><br><span class="line">            <span class="variable">$complement</span> = <span class="variable">$target</span> - <span class="variable">$num</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$complement</span>, <span class="variable">$numIndices</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">array</span>(<span class="variable">$numIndices</span>[<span class="variable">$complement</span>], <span class="variable">$index</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$numIndices</span>[<span class="variable">$num</span>] = <span class="variable">$index</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 99.66% 使用 PHP 的用户</p>
<p>内存消耗 : 20.01 MB, 击败 7.01% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">twoSum</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> numIndices <span class="operator">=</span> [<span class="type">Int</span>: <span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> (index, num) <span class="keyword">in</span> nums.enumerated() &#123;</span><br><span class="line">            <span class="keyword">let</span> complement <span class="operator">=</span> target <span class="operator">-</span> num</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> complementIndex <span class="operator">=</span> numIndices[complement] &#123;</span><br><span class="line">                <span class="keyword">return</span> [complementIndex, index]</span><br><span class="line">            &#125;</span><br><span class="line">            numIndices[num] <span class="operator">=</span> index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 93.84% 使用 Swift 的用户</p>
<p>内存消耗 : 14.39 MB, 击败 7.81% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    fun <span class="title function_">twoSum</span><span class="params">(nums: IntArray, target: Int)</span>: IntArray &#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">numIndices</span> <span class="operator">=</span> HashMap&lt;Int, Int&gt;()</span><br><span class="line">        <span class="keyword">for</span> (i in nums.indices) &#123;</span><br><span class="line">            <span class="type">val</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> (numIndices.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> intArrayOf(numIndices[complement]!!, i)</span><br><span class="line">            &#125;</span><br><span class="line">            numIndices[nums[i]] = i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intArrayOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 204 ms, 击败 66.38% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.57 MB, 击败 63.17% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; twoSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; numIndices = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (numIndices.containsKey(complement)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [numIndices[complement]!, i];</span><br><span class="line">        &#125;</span><br><span class="line">        numIndices[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 256 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 155.91 MB, 击败 20.20% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    numIndices := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        complement := target - num</span><br><span class="line">        <span class="keyword">if</span> idx, ok := numIndices[complement]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;idx, i&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        numIndices[num] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 94.26% 使用 Go 的用户</p>
<p>内存消耗 : 4.02 MB, 击败 63.86% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_sum</span>(<span class="params">nums, target</span>)</span><br><span class="line">    num_indices = &#123;&#125;</span><br><span class="line">    nums.each_with_index <span class="keyword">do</span> |<span class="params">num, index</span>|</span><br><span class="line">        complement = target - num</span><br><span class="line">        <span class="keyword">if</span> num_indices.key?(complement)</span><br><span class="line">            <span class="keyword">return</span> [num_indices[complement], index]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        num_indices[num] = index</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 75.61% 使用 Ruby 的用户</p>
<p>内存消耗 : 207.09 MB, 击败 41.46% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Array</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> numIndices = <span class="type">Map</span>.empty[<span class="type">Int</span>, <span class="type">Int</span>]</span><br><span class="line">    <span class="keyword">for</span> ((num, index) &lt;- nums.zipWithIndex) &#123;</span><br><span class="line">      <span class="keyword">val</span> complement = target - num</span><br><span class="line">      <span class="keyword">if</span> (numIndices.contains(complement)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(numIndices(complement), index)</span><br><span class="line">      &#125;</span><br><span class="line">      numIndices += (num -&gt; index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Array</span>.empty[<span class="type">Int</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 564 ms, 击败 58.23% 使用 Scala 的用户</p>
<p>内存消耗 : 55.63 MB, 击败 29.12% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">two_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num_indices</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">for</span> (index, &amp;num) <span class="keyword">in</span> nums.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">complement</span> = target - num;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;complement_index) = num_indices.<span class="title function_ invoke__">get</span>(&amp;complement) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">vec!</span>[complement_index <span class="keyword">as</span> <span class="type">i32</span>, index <span class="keyword">as</span> <span class="type">i32</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            num_indices.<span class="title function_ invoke__">insert</span>(num, index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vec!</span>[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.44 MB, 击败 29.41% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">two-sum</span> nums target)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">find-indexes</span> nums index seen)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">null?</span></span> nums) &#x27;())</span><br><span class="line">      ((<span class="name">hash-has-key?</span> seen (<span class="name"><span class="built_in">-</span></span> target (<span class="name"><span class="built_in">car</span></span> nums)))</span><br><span class="line">       (<span class="name"><span class="built_in">list</span></span> (<span class="name">hash-ref</span> seen (<span class="name"><span class="built_in">-</span></span> target (<span class="name"><span class="built_in">car</span></span> nums))) index))</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name">hash-set!</span> seen (<span class="name"><span class="built_in">car</span></span> nums) index)</span><br><span class="line">       (<span class="name">find-indexes</span> (<span class="name"><span class="built_in">cdr</span></span> nums) (<span class="name"><span class="built_in">+</span></span> index <span class="number">1</span>) seen))))</span><br><span class="line">  (<span class="name">find-indexes</span> nums <span class="number">0</span> (<span class="name">make-hash</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 280 ms, 击败 42.86% 使用 Racket 的用户</p>
<p>内存消耗 : 124.89 MB, 击败 14.29% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> two_sum<span class="params">(Nums :: [integer()], Target :: integer())</span> -&gt; [integer<span class="params">()</span>].</span><br><span class="line"><span class="function"><span class="title">two_sum</span><span class="params">(Nums, Target)</span> -&gt;</span></span><br><span class="line">    lists:reverse(get_indices(Nums, Target, <span class="number">0</span>, length(Nums), #&#123;&#125;)).</span><br><span class="line"><span class="function"><span class="title">get_indices</span><span class="params">(_, _, _, <span class="number">0</span>, _)</span> -&gt;</span></span><br><span class="line">    [];</span><br><span class="line"><span class="function"><span class="title">get_indices</span><span class="params">(Nums, Target, Index1, Index2, Seen)</span> -&gt;</span></span><br><span class="line">    Head = hd(Nums),</span><br><span class="line">    RestNums = tl(Nums),</span><br><span class="line">    <span class="keyword">case</span> maps:is_key(Target - Head, Seen) <span class="keyword">of</span></span><br><span class="line">        <span class="literal">true</span> -&gt;</span><br><span class="line">            [maps:get(Target - Head, Seen), Index1];</span><br><span class="line">        <span class="literal">false</span> -&gt;</span><br><span class="line">            NewSeen = maps:put(Head, Index1, Seen),</span><br><span class="line">            get_indices(RestNums, Target, Index1 + <span class="number">1</span>, Index2 - <span class="number">1</span>, NewSeen)</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 81.25% 使用 Erlang 的用户</p>
<p>内存消耗 : 48.04 MB, 击败 50.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> two_sum(nums :: [integer], target :: integer) :: [integer]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">two_sum</span></span>(nums, target) <span class="keyword">do</span></span><br><span class="line">    two_sum_helper(nums, target, <span class="number">0</span>, %&#123;&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">two_sum_helper</span></span>([], _, _, _), <span class="symbol">do:</span> []</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">two_sum_helper</span></span>([num | rest], target, index, seen) <span class="keyword">do</span></span><br><span class="line">    complement = target - num</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Map</span>.get(seen, complement) <span class="keyword">do</span></span><br><span class="line">      <span class="literal">nil</span> -&gt;</span><br><span class="line">        two_sum_helper(rest, target, index + <span class="number">1</span>, <span class="title class_">Map</span>.put(seen, num, index))</span><br><span class="line">      comp_index -&gt;</span><br><span class="line">        [comp_index, index]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 272 ms, 击败 77.78% 使用 Elixir 的用户</p>
<p>内存消耗 : 61.56 MB, 击败 11.11% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00002.两数相加</title>
    <url>/zh-CN/2cec71fed826/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/2cec71fed826/201911260001.jpg" class="" title="示例1">

<blockquote>
<p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>每个链表中的节点数在范围 [1, 100] 内</li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 9</li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 || l2 || carry) &#123;</span><br><span class="line">            <span class="type">int</span> val1 = (l1 != <span class="literal">nullptr</span>) ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> val2 = (l2 != <span class="literal">nullptr</span>) ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum = val1 + val2 + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            current-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l1) l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l2) l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 71.16% 使用 C++ 的用户</p>
<p>内存消耗 : 70.01 MB, 击败 74.88% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> (l1 != <span class="literal">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val2</span> <span class="operator">=</span> (l2 != <span class="literal">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> val1 + val2 + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            current.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 42.10 MB, 击败 49.96% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            val1 = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            val2 = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            total = val1 + val2 + carry</span><br><span class="line">            carry = total // <span class="number">10</span></span><br><span class="line">            current.<span class="built_in">next</span> = ListNode(total % <span class="number">10</span>)</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 91.45% 使用 Python 的用户</p>
<p>内存消耗 : 12.86 MB, 击败 97.89% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            val1 = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            val2 = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            total = val1 + val2 + carry</span><br><span class="line">            carry = total // <span class="number">10</span></span><br><span class="line">            current.<span class="built_in">next</span> = ListNode(total % <span class="number">10</span>)</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 38.97% 使用 Python3 的用户</p>
<p>内存消耗 : 16.16 MB, 击败 17.37% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">current</span> =</span> dummy;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> val1 = (l1 != <span class="literal">NULL</span>) ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> val2 = (l2 != <span class="literal">NULL</span>) ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = val1 + val2 + carry;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        current-&gt;next = (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">        current-&gt;val = sum % <span class="number">10</span>;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="literal">NULL</span>) l1 = l1-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="literal">NULL</span>) l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">result</span> =</span> dummy-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(dummy);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 14.59% 使用 C 的用户</p>
<p>内存消耗 : 8.39 MB, 击败 27.32% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">AddTwoNumbers</span>(<span class="params">ListNode l1, ListNode l2</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> val1 = (l1 != <span class="literal">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> val2 = (l2 != <span class="literal">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = val1 + val2 + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            current.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 99.82% 使用 C# 的用户</p>
<p>内存消耗 : 50.63 MB, 击败 5.13% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span> || carry !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val1 = (l1 !== <span class="literal">null</span>) ? l1.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> val2 = (l2 !== <span class="literal">null</span>) ? l2.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> sum = val1 + val2 + carry;</span><br><span class="line">        carry = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        current.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) l1 = l1.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) l2 = l2.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 92 ms, 击败 81.79% 使用 JavaScript 的用户</p>
<p>内存消耗 : 45.96 MB, 击败 55.34% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTwoNumbers</span>(<span class="params">l1: ListNode | <span class="literal">null</span>, l2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span> || carry !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val1 = (l1 !== <span class="literal">null</span>) ? l1.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> val2 = (l2 !== <span class="literal">null</span>) ? l2.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> sum = val1 + val2 + carry;</span><br><span class="line">        carry = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        current.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) l1 = l1.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) l2 = l2.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 15.47% 使用 TypeScript 的用户</p>
<p>内存消耗 : 56.84 MB, 击败 5.07% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $l2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params"><span class="variable">$l1</span>, <span class="variable">$l2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="variable">$carry</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$l1</span> !== <span class="literal">null</span> || <span class="variable">$l2</span> !== <span class="literal">null</span> || <span class="variable">$carry</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$val1</span> = (<span class="variable">$l1</span> !== <span class="literal">null</span>) ? <span class="variable">$l1</span>-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="variable">$val2</span> = (<span class="variable">$l2</span> !== <span class="literal">null</span>) ? <span class="variable">$l2</span>-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="variable">$sum</span> = <span class="variable">$val1</span> + <span class="variable">$val2</span> + <span class="variable">$carry</span>;</span><br><span class="line">            <span class="variable">$carry</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$sum</span> / <span class="number">10</span>);</span><br><span class="line">            <span class="variable">$current</span>-&gt;next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="variable">$sum</span> % <span class="number">10</span>);</span><br><span class="line">            <span class="variable">$current</span> = <span class="variable">$current</span>-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$l1</span> !== <span class="literal">null</span>) <span class="variable">$l1</span> = <span class="variable">$l1</span>-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$l2</span> !== <span class="literal">null</span>) <span class="variable">$l2</span> = <span class="variable">$l2</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 87.39% 使用 PHP 的用户</p>
<p>内存消耗 : 18.92 MB, 击败 76.12% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addTwoNumbers</span>(<span class="keyword">_</span> <span class="params">l1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">l2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> current: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">var</span> carry <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> l1 <span class="operator">=</span> l1</span><br><span class="line">        <span class="keyword">var</span> l2 <span class="operator">=</span> l2</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> l2 <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> carry <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> val1 <span class="operator">=</span> l1<span class="operator">?</span>.val <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> val2 <span class="operator">=</span> l2<span class="operator">?</span>.val <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> sum <span class="operator">=</span> val1 <span class="operator">+</span> val2 <span class="operator">+</span> carry</span><br><span class="line">            carry <span class="operator">=</span> sum <span class="operator">/</span> <span class="number">10</span></span><br><span class="line">            current<span class="operator">?</span>.next <span class="operator">=</span> <span class="type">ListNode</span>(sum <span class="operator">%</span> <span class="number">10</span>)</span><br><span class="line">            current <span class="operator">=</span> current<span class="operator">?</span>.next</span><br><span class="line">            l1 <span class="operator">=</span> l1<span class="operator">?</span>.next</span><br><span class="line">            l2 <span class="operator">=</span> l2<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 65.63% 使用 Swift 的用户</p>
<p>内存消耗 : 13.84 MB, 击败 50.15% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addTwoNumbers</span><span class="params">(l1: <span class="type">ListNode</span>?, l2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> current: ListNode? = dummy</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> p1 = l1</span><br><span class="line">        <span class="keyword">var</span> p2 = l2</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">null</span> || p2 != <span class="literal">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> val1 = p1?.`<span class="keyword">val</span>` ?: <span class="number">0</span></span><br><span class="line">            <span class="keyword">val</span> val2 = p2?.`<span class="keyword">val</span>` ?: <span class="number">0</span></span><br><span class="line">            <span class="keyword">val</span> sum = val1 + val2 + carry</span><br><span class="line">            carry = sum / <span class="number">10</span></span><br><span class="line">            current?.next = ListNode(sum % <span class="number">10</span>)</span><br><span class="line">            current = current?.next</span><br><span class="line">            p1 = p1?.next</span><br><span class="line">            p2 = p2?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 29.05% 使用 Kotlin 的用户</p>
<p>内存消耗 : 43.02 MB, 击败 41.21% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) &#123;</span><br><span class="line">    ListNode dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode? current = dummy;</span><br><span class="line">    <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">int</span> val1 = l1?.val ?? <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">int</span> val2 = l2?.val ?? <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">int</span> sum = val1 + val2 + carry;</span><br><span class="line">      carry = sum ~/ <span class="number">10</span>;</span><br><span class="line">      current!.next = ListNode(sum % <span class="number">10</span>);</span><br><span class="line">      current = current.next;</span><br><span class="line">      <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">      <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 160.98 MB, 击败 85.71% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;&#125; <span class="comment">// 创建一个哑节点</span></span><br><span class="line">    current := dummy</span><br><span class="line">    carry := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> || carry != <span class="number">0</span> &#123;</span><br><span class="line">        val1, val2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">            val1 = l1.Val</span><br><span class="line">            l1 = l1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            val2 = l2.Val</span><br><span class="line">            l2 = l2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        sum := val1 + val2 + carry</span><br><span class="line">        carry = sum / <span class="number">10</span></span><br><span class="line">        current.Next = &amp;ListNode&#123;Val: sum % <span class="number">10</span>&#125;</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 31.30% 使用 Go 的用户</p>
<p>内存消耗 : 4.15 MB, 击败 90.24% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_two_numbers</span>(<span class="params">l1, l2</span>)</span><br><span class="line">    dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">    current = dummy</span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l1 |<span class="params"></span>| l2 |<span class="params"></span>| carry != <span class="number">0</span></span><br><span class="line">        val1 = l1 ? l1.val : <span class="number">0</span></span><br><span class="line">        val2 = l2 ? l2.val : <span class="number">0</span></span><br><span class="line">        sum = val1 + val2 + carry</span><br><span class="line">        carry = sum / <span class="number">10</span></span><br><span class="line">        current.<span class="keyword">next</span> = <span class="title class_">ListNode</span>.new(sum % <span class="number">10</span>)</span><br><span class="line">        current = current.<span class="keyword">next</span></span><br><span class="line">        l1 = l1.<span class="keyword">next</span> <span class="keyword">if</span> l1</span><br><span class="line">        l2 = l2.<span class="keyword">next</span> <span class="keyword">if</span> l2</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 100 ms, 击败 40.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.91 MB, 击败 8.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span></span>(l1: <span class="type">ListNode</span>, l2: <span class="type">ListNode</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> dummy = <span class="keyword">new</span> <span class="type">ListNode</span>()</span><br><span class="line">    <span class="keyword">var</span> current = dummy</span><br><span class="line">    <span class="keyword">var</span> carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> p1 = l1</span><br><span class="line">    <span class="keyword">var</span> p2 = l2</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">null</span> || p2 != <span class="literal">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> x = <span class="keyword">if</span> (p1 != <span class="literal">null</span>) p1.x <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">      <span class="keyword">val</span> y = <span class="keyword">if</span> (p2 != <span class="literal">null</span>) p2.x <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">      <span class="keyword">val</span> sum = x + y + carry</span><br><span class="line">      carry = sum / <span class="number">10</span></span><br><span class="line">      current.next = <span class="keyword">new</span> <span class="type">ListNode</span>(sum % <span class="number">10</span>)</span><br><span class="line">      current = current.next</span><br><span class="line">      <span class="keyword">if</span> (p1 != <span class="literal">null</span>) p1 = p1.next</span><br><span class="line">      <span class="keyword">if</span> (p2 != <span class="literal">null</span>) p2 = p2.next</span><br><span class="line">    &#125;</span><br><span class="line">    dummy.next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 588 ms, 击败 53.33% 使用 Scala 的用户</p>
<p>内存消耗 : 57.63 MB, 击败 66.67% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_two_numbers</span>(l1: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, l2: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">add_two</span>(&amp;l1, &amp;l2, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add_two</span>(l1: &amp;<span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, l2: &amp;<span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, carry: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">match</span> (l1, l2) &#123;</span><br><span class="line">            (<span class="literal">None</span>, <span class="literal">None</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> carry == <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode::<span class="title function_ invoke__">new</span>(carry)))</span><br><span class="line">            &#125;</span><br><span class="line">            (<span class="literal">None</span>, <span class="title function_ invoke__">Some</span>(n2)) =&gt; <span class="keyword">Self</span>::<span class="title function_ invoke__">add_two</span>(l2, l1, carry),</span><br><span class="line">            (<span class="title function_ invoke__">Some</span>(n1), <span class="literal">None</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">l1</span> = n1.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">sum</span> = carry + l1.val;</span><br><span class="line">                l1.val = sum % <span class="number">10</span>;</span><br><span class="line">                l1.next = <span class="keyword">Self</span>::<span class="title function_ invoke__">add_two</span>(&amp;n1.next, &amp;<span class="literal">None</span>, sum / <span class="number">10</span>);</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(l1)</span><br><span class="line">            &#125;</span><br><span class="line">            (<span class="title function_ invoke__">Some</span>(n1), <span class="title function_ invoke__">Some</span>(n2)) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">l1</span> = n1.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">l2</span> = n2.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">sum</span> = carry + l1.val + l2.val;</span><br><span class="line">                l1.val = sum % <span class="number">10</span>;</span><br><span class="line">                l1.next = <span class="keyword">Self</span>::<span class="title function_ invoke__">add_two</span>(&amp;l1.next, &amp;l2.next, sum / <span class="number">10</span>);</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(l1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 2.21% 使用 Rust 的用户</p>
<p>内存消耗 : 2.15 MB, 击败 42.59% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">; Definition for singly-linked list:</span></span><br><span class="line"><span class="comment">#|</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; val : integer?</span></span><br><span class="line"><span class="comment">; next : (or/c list-node? #f)</span></span><br><span class="line"><span class="comment">(struct list-node</span></span><br><span class="line"><span class="comment">  (val next) #:mutable #:transparent)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; constructor</span></span><br><span class="line"><span class="comment">(define (make-list-node [val 0])</span></span><br><span class="line"><span class="comment">  (list-node val #f))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|#</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">add-two-numbers</span> l1 l2)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">calculate-carry</span> x)</span><br><span class="line">    (<span class="name">quotient/remainder</span> x <span class="number">10</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> loop ([<span class="name">list1</span> l1] [<span class="name">list2</span> l2] [<span class="name"><span class="built_in">remainder</span></span> <span class="number">0</span>])</span><br><span class="line">    (<span class="name">match*</span> (<span class="name">list1</span> list2)</span><br><span class="line">      [(<span class="literal">#f</span> <span class="literal">#f</span>) (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">zero?</span></span> remainder) <span class="literal">#f</span> (<span class="name">make-list-node</span> remainder))]</span><br><span class="line">      [((<span class="name">list-node</span> val rest) <span class="literal">#f</span>)</span><br><span class="line">       (<span class="name">define-values</span> (<span class="name">new-remainder</span> result) (<span class="name">calculate-carry</span> (<span class="name"><span class="built_in">+</span></span> val remainder)))</span><br><span class="line">       (<span class="name">list-node</span> result (<span class="name">loop</span> rest <span class="literal">#f</span> new-remainder))]</span><br><span class="line">      [(<span class="literal">#f</span> (<span class="name">list-node</span> val rest))</span><br><span class="line">       (<span class="name">define-values</span> (<span class="name">new-remainder</span> result) (<span class="name">calculate-carry</span> (<span class="name"><span class="built_in">+</span></span> val remainder)))</span><br><span class="line">       (<span class="name">list-node</span> result (<span class="name">loop</span> <span class="literal">#f</span> rest new-remainder))]</span><br><span class="line">      [((<span class="name">list-node</span> val1 rest1) (<span class="name">list-node</span> val2 rest2))</span><br><span class="line">       (<span class="name">define-values</span> (<span class="name">new-remainder</span> result) (<span class="name">calculate-carry</span> (<span class="name"><span class="built_in">+</span></span> val1 val2 remainder)))</span><br><span class="line">       (<span class="name">list-node</span> result (<span class="name">loop</span> rest1 rest2 new-remainder))])))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 280 ms, 击败 14.29% 使用 Racket 的用户</p>
<p>内存消耗 : 124.67 MB, 击败 28.57% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%% -record(list_node, &#123;val = 0 :: integer(),</span></span><br><span class="line"><span class="comment">%%                     next = null :: &#x27;null&#x27; | #list_node&#123;&#125;&#125;).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">-spec</span> add_two_numbers<span class="params">(L1 :: #list_node&#123;&#125; | null, L2 :: #list_node&#123;&#125; | null)</span> -&gt; #list_node&#123;&#125; | null.</span><br><span class="line"><span class="function"><span class="title">add_two_numbers</span><span class="params">(L1, L2)</span> -&gt;</span></span><br><span class="line">    add_two_numbers(L1, L2, <span class="number">0</span>).</span><br><span class="line"><span class="function"><span class="title">add_two_numbers</span><span class="params">(null, null, <span class="number">0</span>)</span> -&gt;</span></span><br><span class="line">    null;</span><br><span class="line"><span class="function"><span class="title">add_two_numbers</span><span class="params">(null, L2, Carry)</span> -&gt;</span></span><br><span class="line">    add_carry(L2, Carry);</span><br><span class="line"><span class="function"><span class="title">add_two_numbers</span><span class="params">(L1, null, Carry)</span> -&gt;</span></span><br><span class="line">    add_carry(L1, Carry);</span><br><span class="line"><span class="function"><span class="title">add_two_numbers</span><span class="params">(#list_node&#123;val = Val1, next = Next1&#125; = L1, #list_node&#123;val = Val2, next = Next2&#125;, Carry)</span> -&gt;</span></span><br><span class="line">    &#123;Sum, NewCarry&#125; = calculate_carry(Val1 + Val2 + Carry),</span><br><span class="line">    #list_node&#123;val = Sum, next = add_two_numbers(Next1, Next2, NewCarry)&#125;.</span><br><span class="line"><span class="function"><span class="title">calculate_carry</span><span class="params">(Sum)</span> <span class="title">when</span> S<span class="title">um</span> &lt; 10 -&gt;</span></span><br><span class="line">    &#123;Sum, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="title">calculate_carry</span><span class="params">(Sum)</span> -&gt;</span></span><br><span class="line">    &#123;Sum rem <span class="number">10</span>, <span class="number">1</span>&#125;.</span><br><span class="line"><span class="function"><span class="title">add_carry</span><span class="params">(null, <span class="number">0</span>)</span> -&gt;</span></span><br><span class="line">    null;</span><br><span class="line"><span class="function"><span class="title">add_carry</span><span class="params">(null, Carry)</span> -&gt;</span></span><br><span class="line">    #list_node&#123;val = Carry, next = null&#125;;</span><br><span class="line"><span class="function"><span class="title">add_carry</span><span class="params">(#list_node&#123;val = Val, next = Next&#125;, Carry)</span> -&gt;</span></span><br><span class="line">    &#123;Sum, NewCarry&#125; = calculate_carry(Val + Carry),</span><br><span class="line">    #list_node&#123;val = Sum, next = add_carry(Next, NewCarry)&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 296 ms, 击败 20.00% 使用 Erlang 的用户</p>
<p>内存消耗 : 49.96 MB, 击败 60.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># defmodule ListNode do</span></span><br><span class="line"><span class="comment">#   @type t :: %__MODULE__&#123;</span></span><br><span class="line"><span class="comment">#           val: integer,</span></span><br><span class="line"><span class="comment">#           next: ListNode.t() | nil</span></span><br><span class="line"><span class="comment">#         &#125;</span></span><br><span class="line"><span class="comment">#   defstruct val: 0, next: nil</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> add_two_numbers(<span class="title class_">ListNode</span>.t() | <span class="literal">nil</span>, <span class="title class_">ListNode</span>.t() | <span class="literal">nil</span>) :: <span class="title class_">ListNode</span>.t() | <span class="literal">nil</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span></span>(<span class="literal">nil</span>, <span class="literal">nil</span>), <span class="symbol">do:</span> <span class="literal">nil</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span></span>(<span class="literal">nil</span>, l2), <span class="symbol">do:</span> l2</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span></span>(l1, <span class="literal">nil</span>), <span class="symbol">do:</span> l1</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span></span>(%<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val1, <span class="symbol">next:</span> next1&#125; = l1, %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val2, <span class="symbol">next:</span> next2&#125; = l2) <span class="keyword">do</span></span><br><span class="line">    &#123;sum, carry&#125; = calculate_sum_and_carry(val1 + val2)</span><br><span class="line">    new_node = %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> sum, <span class="symbol">next:</span> add_two_numbers(next1, next2)&#125;</span><br><span class="line">    adjust_node(new_node, carry)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">calculate_sum_and_carry</span></span>(sum) <span class="keyword">when</span> sum &lt; <span class="number">10</span>, <span class="symbol">do:</span> &#123;sum, <span class="number">0</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">calculate_sum_and_carry</span></span>(sum), <span class="symbol">do:</span> &#123;rem(sum, <span class="number">10</span>), <span class="number">1</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">adjust_node</span></span>(node, <span class="number">0</span>), <span class="symbol">do:</span> node</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">adjust_node</span></span>(node, carry), <span class="symbol">do:</span> %<span class="title class_">ListNode</span>&#123;node | <span class="symbol">next:</span> add_carry(node.next, carry)&#125;</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">add_carry</span></span>(<span class="literal">nil</span>, <span class="number">0</span>), <span class="symbol">do:</span> <span class="literal">nil</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">add_carry</span></span>(<span class="literal">nil</span>, carry), <span class="symbol">do:</span> %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> carry, <span class="symbol">next:</span> <span class="literal">nil</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">add_carry</span></span>(%<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val, <span class="symbol">next:</span> next&#125;, carry) <span class="keyword">do</span></span><br><span class="line">    &#123;sum, new_carry&#125; = calculate_sum_and_carry(val + carry)</span><br><span class="line">    %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> sum, <span class="symbol">next:</span> add_carry(next, new_carry)&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 364 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 68.29 MB, 击败 -% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00003.无重复字符的最长子串</title>
    <url>/zh-CN/e515cf11c2a4/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10^4$</li>
<li>s 由英文字母、数字、符号和空格组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; charIndex;</span><br><span class="line">        <span class="type">int</span> maxLength = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charIndex.<span class="built_in">find</span>(s[i]) != charIndex.<span class="built_in">end</span>() &amp;&amp; charIndex[s[i]] &gt;= start) &#123;</span><br><span class="line">                start = charIndex[s[i]] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLength = <span class="built_in">max</span>(maxLength, i - start + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 81.24% 使用 C++ 的用户</p>
<p>内存消耗 : 8.53 MB, 击败 67.64% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; charIndex = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">currentChar</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (charIndex.containsKey(currentChar) &amp;&amp; charIndex.get(currentChar) &gt;= start) &#123;</span><br><span class="line">                start = charIndex.get(currentChar) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLength = Math.max(maxLength, i - start + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex.put(currentChar, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 63.77% 使用 Java 的用户</p>
<p>内存消耗 : 43.25 MB, 击败 7.96% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span><br><span class="line">        char_index = &#123;&#125;</span><br><span class="line">        max_length = start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> char_index <span class="keyword">and</span> char_index[char] &gt;= start:</span><br><span class="line">                start = char_index[char] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_length = <span class="built_in">max</span>(max_length, i - start + <span class="number">1</span>)</span><br><span class="line">            char_index[char] = i</span><br><span class="line">        <span class="keyword">return</span> max_length</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 94.92% 使用 Python 的用户</p>
<p>内存消耗 : 13.45 MB, 击败 66.22% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        char_index = &#123;&#125;</span><br><span class="line">        max_length = start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> char_index <span class="keyword">and</span> char_index[char] &gt;= start:</span><br><span class="line">                start = char_index[char] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_length = <span class="built_in">max</span>(max_length, i - start + <span class="number">1</span>)</span><br><span class="line">            char_index[char] = i</span><br><span class="line">        <span class="keyword">return</span> max_length</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 99.64% 使用 Python3 的用户</p>
<p>内存消耗 : 18.11 MB, 击败 5.01% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> charIndex[<span class="number">128</span>];</span><br><span class="line">    <span class="type">int</span> maxLength = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">        charIndex[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> currentChar = s[i];</span><br><span class="line">        <span class="keyword">if</span> (charIndex[currentChar] &gt;= start) &#123;</span><br><span class="line">            start = charIndex[currentChar] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxLength = (i - start + <span class="number">1</span>) &gt; maxLength ? (i - start + <span class="number">1</span>) : maxLength;</span><br><span class="line">        &#125;</span><br><span class="line">        charIndex[currentChar] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 83.04% 使用 C 的用户</p>
<p>内存消耗 : 6.39 MB, 击败 81.61% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">LengthOfLongestSubstring</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] charIndex = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">int</span> maxLength = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">            charIndex[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++) &#123;</span><br><span class="line">            <span class="built_in">char</span> currentChar = s[i];</span><br><span class="line">            <span class="keyword">if</span> (charIndex[currentChar] &gt;= start) &#123;</span><br><span class="line">                start = charIndex[currentChar] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLength = Math.Max(maxLength, i - start + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex[currentChar] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 99.93% 使用 C# 的用户</p>
<p>内存消耗 : 40.70 MB, 击败 27.18% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> charIndex = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (charIndex[char] !== <span class="literal">undefined</span> &amp;&amp; charIndex[char] &gt;= start) &#123;</span><br><span class="line">            start = charIndex[char] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLength, i - start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        charIndex[char] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 59.77% 使用 JavaScript 的用户</p>
<p>内存消耗 : 46.90 MB, 击败 30.01% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">charIndex</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (charIndex[char] !== <span class="literal">undefined</span> &amp;&amp; charIndex[char] &gt;= start) &#123;</span><br><span class="line">            start = charIndex[char] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLength, i - start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        charIndex[char] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 58.76% 使用 TypeScript 的用户</p>
<p>内存消耗 : 47.76 MB, 击败 38.63% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$charIndex</span> = [];</span><br><span class="line">        <span class="variable">$maxLength</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$char</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$char</span>, <span class="variable">$charIndex</span>) &amp;&amp; <span class="variable">$charIndex</span>[<span class="variable">$char</span>] &gt;= <span class="variable">$start</span>) &#123;</span><br><span class="line">                <span class="variable">$start</span> = <span class="variable">$charIndex</span>[<span class="variable">$char</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$maxLength</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxLength</span>, <span class="variable">$i</span> - <span class="variable">$start</span> + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$charIndex</span>[<span class="variable">$char</span>] = <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxLength</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 49.42% 使用 PHP 的用户</p>
<p>内存消耗 : 19.57 MB, 击败 10.46% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> charIndex <span class="operator">=</span> [<span class="type">Character</span>: <span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">var</span> maxLength <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i, char) <span class="keyword">in</span> s.enumerated() &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> index <span class="operator">=</span> charIndex[char], index <span class="operator">&gt;=</span> start &#123;</span><br><span class="line">                start <span class="operator">=</span> index <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLength <span class="operator">=</span> <span class="built_in">max</span>(maxLength, i <span class="operator">-</span> start <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex[char] <span class="operator">=</span> i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 62.76% 使用 Swift 的用户</p>
<p>内存消耗 : 15.63 MB, 击败 5.14% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> charIndex = mutableMapOf&lt;<span class="built_in">Char</span>, <span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">var</span> maxLength = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> s.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> char = s[i]</span><br><span class="line">            <span class="keyword">if</span> (charIndex.containsKey(char) &amp;&amp; charIndex[char]!! &gt;= start) &#123;</span><br><span class="line">                start = charIndex[char]!! + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLength = maxLength.coerceAtLeast(i - start + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex[char] = i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 60.94% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.87 MB, 击败 39.48% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int</span> lengthOfLongestSubstring(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; charIndex = &#123;&#125;;</span><br><span class="line">    <span class="built_in">int</span> maxLength = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="built_in">String</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (charIndex.containsKey(char) &amp;&amp; charIndex[char]! &gt;= start) &#123;</span><br><span class="line">        start = charIndex[char]! + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxLength = maxLength &gt; i - start + <span class="number">1</span> ? maxLength : i - start + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        charIndex[char] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 352 ms, 击败 41.18% 使用 Dart 的用户</p>
<p>内存消耗 : 147.63 MB, 击败 97.06% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    charIndex := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    maxLength, start := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> index, exists := charIndex[s[i]]; exists &amp;&amp; index &gt;= start &#123;</span><br><span class="line">            start = index + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxLength = max(maxLength, i-start+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        charIndex[s[i]] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 88.47% 使用 Go 的用户</p>
<p>内存消耗 : 3.07 MB, 击败 23.56% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length_of_longest_substring</span>(<span class="params">s</span>)</span><br><span class="line">    char_index = &#123;&#125;</span><br><span class="line">    max_length = start = <span class="number">0</span></span><br><span class="line">    s.each_char.with_index <span class="keyword">do</span> |<span class="params">char, i</span>|</span><br><span class="line">        <span class="keyword">if</span> char_index.key?(char) &amp;&amp; char_index[char] &gt;= start</span><br><span class="line">            start = char_index[char] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            max_length = [max_length, i - start + <span class="number">1</span>].max</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        char_index[char] = i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    max_length</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.75 MB, 击败 15.79% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> charIndex = <span class="type">Map</span>[<span class="type">Char</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">var</span> maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- s.indices) &#123;</span><br><span class="line">      <span class="keyword">val</span> char = s(i)</span><br><span class="line">      <span class="keyword">if</span> (charIndex.contains(char) &amp;&amp; charIndex(char) &gt;= start) &#123;</span><br><span class="line">        start = charIndex(char) + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxLength = maxLength.max(i - start + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      charIndex += (char -&gt; i)</span><br><span class="line">    &#125;</span><br><span class="line">    maxLength</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 596 ms, 击败 38.89% 使用 Scala 的用户</p>
<p>内存消耗 : 58.82 MB, 击败 5.55% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">length_of_longest_substring</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">char_index</span> = HashMap::<span class="title function_ invoke__">new</span>(); <span class="comment">// 用于存储字符的索引</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_length</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i, c) <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;index) = char_index.<span class="title function_ invoke__">get</span>(&amp;c) &#123;</span><br><span class="line">                <span class="keyword">if</span> index &gt;= start &#123;</span><br><span class="line">                    start = index + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_length = max_length.<span class="title function_ invoke__">max</span>(i - start + <span class="number">1</span>);</span><br><span class="line">            char_index.<span class="title function_ invoke__">insert</span>(c, i);</span><br><span class="line">        &#125;</span><br><span class="line">        max_length <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 69.79% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 61.59% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">length-of-longest-substring</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> left <span class="number">0</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> cur-len <span class="number">0</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> max-len <span class="number">0</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> lookup (<span class="name">mutable-set</span>))</span><br><span class="line"></span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">update-lengths!</span> c)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> loop ()</span><br><span class="line">      (<span class="name"><span class="built_in">when</span></span> (<span class="name">set-member?</span> lookup c)</span><br><span class="line">        (<span class="name">set-remove!</span> lookup (<span class="name"><span class="built_in">string-ref</span></span> s left))</span><br><span class="line">        (<span class="name"><span class="built_in">set!</span></span> left (<span class="name"><span class="built_in">+</span></span> left <span class="number">1</span>))</span><br><span class="line">        (<span class="name"><span class="built_in">set!</span></span> cur-len (<span class="name"><span class="built_in">-</span></span> cur-len <span class="number">1</span>))</span><br><span class="line">        (<span class="name">loop</span>))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name">for</span> ([<span class="name">c</span> s])</span><br><span class="line">    (<span class="name">update-lengths!</span> c)</span><br><span class="line">    (<span class="name">set-add!</span> lookup c)</span><br><span class="line">    (<span class="name"><span class="built_in">set!</span></span> cur-len (<span class="name"><span class="built_in">+</span></span> cur-len <span class="number">1</span>))</span><br><span class="line">    (<span class="name"><span class="built_in">set!</span></span> max-len (<span class="name"><span class="built_in">max</span></span> cur-len max-len)))</span><br><span class="line">  </span><br><span class="line">  max-len)</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 66.67% 使用 Racket 的用户</p>
<p>内存消耗 : 99.09 MB, 击败 66.67% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> length_of_longest_substring<span class="params">(S :: unicode:unicode_binary())</span> -&gt; integer<span class="params">()</span>.</span><br><span class="line"><span class="function"><span class="title">length_of_longest_substring</span><span class="params">(S)</span> -&gt;</span></span><br><span class="line">    StrList = unicode:characters_to_list(S),</span><br><span class="line">    the_max_length(StrList, <span class="number">0</span>, queue:new(), sets:new([&#123;version, <span class="number">2</span>&#125;]), <span class="number">0</span>).</span><br><span class="line"><span class="function"><span class="title">the_max_length</span><span class="params">([Char | RestChars], Length, Window, CharSet, MaxLength)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> sets:is_element(Char, CharSet) <span class="keyword">of</span></span><br><span class="line">        <span class="literal">false</span> -&gt;  </span><br><span class="line">            the_max_length(RestChars, Length + <span class="number">1</span>, queue:in(Char, Window), sets:add_element(Char, CharSet), MaxLength);</span><br><span class="line">        <span class="literal">true</span> -&gt; </span><br><span class="line">            &#123;CharSet1, Win1&#125; = remove_from_window(CharSet, Window, Char),</span><br><span class="line">            the_max_length(RestChars, queue:len(Win1) + <span class="number">1</span>, queue:in(Char, Win1), sets:add_element(Char, CharSet1), max(MaxLength, Length))</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">the_max_length</span><span class="params">([], Length, _, _, MaxLength)</span> -&gt;</span> max(MaxLength, Length).</span><br><span class="line"><span class="function"><span class="title">remove_from_window</span><span class="params">(CharSet, Window, Char)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> queue:is_empty(Window) <span class="keyword">of</span></span><br><span class="line">        <span class="literal">true</span> -&gt; &#123;CharSet, Window&#125;;</span><br><span class="line">        <span class="literal">false</span> -&gt;</span><br><span class="line">            &#123;&#123;value, W&#125;, Win1&#125; = queue:out(Window),</span><br><span class="line">            CharSet1 = sets:del_element(W, CharSet),</span><br><span class="line">            <span class="keyword">case</span> sets:is_element(Char, CharSet1) <span class="keyword">of</span></span><br><span class="line">                <span class="literal">true</span> -&gt; </span><br><span class="line">                    remove_from_window(CharSet1, Win1, Char);</span><br><span class="line">                <span class="literal">false</span> -&gt; &#123;CharSet1, Win1&#125;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 300 ms, 击败 100.00% 使用 Erlang 的用户</p>
<p>内存消耗 : 58.43 MB, 击败 100.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00004.寻找两个正序数组的中位数</title>
    <url>/zh-CN/142cf4ce617d/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 中位数 。</p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]<br>输出：2.00000<br>解释：合并数组 &#x3D; [1,2,3] ，中位数 2</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]<br>输出：2.50000<br>解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>nums1.length &#x3D;&#x3D; m</li>
<li>nums2.length &#x3D;&#x3D; n</li>
<li>0 &lt;&#x3D; m &lt;&#x3D; 1000</li>
<li>0 &lt;&#x3D; n &lt;&#x3D; 1000</li>
<li>1 &lt;&#x3D; m + n &lt;&#x3D; 2000</li>
<li>$-10^6 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10^6$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums1, nums2);</span><br><span class="line">            <span class="built_in">swap</span>(m, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = m;</span><br><span class="line">        <span class="type">int</span> halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> partition1 = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> partition2 = halfLen - partition1;</span><br><span class="line">            <span class="type">int</span> maxLeft1 = (partition1 == <span class="number">0</span>) ? INT_MIN : nums1[partition1 - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> minRight1 = (partition1 == m) ? INT_MAX : nums1[partition1];</span><br><span class="line">            <span class="type">int</span> maxLeft2 = (partition2 == <span class="number">0</span>) ? INT_MIN : nums2[partition2 - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> minRight2 = (partition2 == n) ? INT_MAX : nums2[partition2];</span><br><span class="line">            <span class="keyword">if</span> (maxLeft1 &lt;= minRight2 &amp;&amp; maxLeft2 &lt;= minRight1) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="built_in">max</span>(maxLeft1, maxLeft2) + <span class="built_in">min</span>(minRight1, minRight2)) / <span class="number">2.0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">max</span>(maxLeft1, maxLeft2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxLeft1 &gt; minRight2) &#123;</span><br><span class="line">                right = partition1 - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = partition1 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 63.85% 使用 C++ 的用户</p>
<p>内存消耗 : 87.49 MB, 击败 90.99% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="type">int</span>[] temp = nums1;</span><br><span class="line">            nums1 = nums2;</span><br><span class="line">            nums2 = temp;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> m;</span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = m, halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition1</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partition2</span> <span class="operator">=</span> halfLen - partition1;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLeft1</span> <span class="operator">=</span> (partition1 == <span class="number">0</span>) ? Integer.MIN_VALUE : nums1[partition1 - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">minRight1</span> <span class="operator">=</span> (partition1 == m) ? Integer.MAX_VALUE : nums1[partition1];</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLeft2</span> <span class="operator">=</span> (partition2 == <span class="number">0</span>) ? Integer.MIN_VALUE : nums2[partition2 - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">minRight2</span> <span class="operator">=</span> (partition2 == n) ? Integer.MAX_VALUE : nums2[partition2];</span><br><span class="line">            <span class="keyword">if</span> (maxLeft1 &lt;= minRight2 &amp;&amp; maxLeft2 &lt;= minRight1) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (Math.max(maxLeft1, maxLeft2) + Math.min(minRight1, minRight2)) / <span class="number">2.0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Math.max(maxLeft1, maxLeft2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxLeft1 &gt; minRight2) &#123;</span><br><span class="line">                right = partition1 - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = partition1 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 44.79 MB, 击败 5.05% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMedianSortedArrays</span>(<span class="params">self, nums1, nums2</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_kth</span>(<span class="params">nums1, start1, nums2, start2, k</span>):</span><br><span class="line">            <span class="keyword">if</span> start1 &gt;= <span class="built_in">len</span>(nums1):</span><br><span class="line">                <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> start2 &gt;= <span class="built_in">len</span>(nums2):</span><br><span class="line">                <span class="keyword">return</span> nums1[start1 + k - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">min</span>(nums1[start1], nums2[start2])</span><br><span class="line">            mid_val1 = nums1[start1 + k // <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> start1 + k // <span class="number">2</span> - <span class="number">1</span> &lt; <span class="built_in">len</span>(nums1) <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            mid_val2 = nums2[start2 + k // <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> start2 + k // <span class="number">2</span> - <span class="number">1</span> &lt; <span class="built_in">len</span>(nums2) <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mid_val1 &lt; mid_val2:</span><br><span class="line">                <span class="keyword">return</span> find_kth(nums1, start1 + k // <span class="number">2</span>, nums2, start2, k - k // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> find_kth(nums1, start1, nums2, start2 + k // <span class="number">2</span>, k - k // <span class="number">2</span>)</span><br><span class="line">        total_len = <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">        <span class="keyword">if</span> total_len % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span>) + find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 36.83% 使用 Python 的用户</p>
<p>内存消耗 : 13.29 MB, 击败 18.41% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMedianSortedArrays</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_kth</span>(<span class="params">nums1, start1, nums2, start2, k</span>):</span><br><span class="line">            <span class="keyword">if</span> start1 &gt;= <span class="built_in">len</span>(nums1):</span><br><span class="line">                <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> start2 &gt;= <span class="built_in">len</span>(nums2):</span><br><span class="line">                <span class="keyword">return</span> nums1[start1 + k - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">min</span>(nums1[start1], nums2[start2])</span><br><span class="line">            mid_val1 = nums1[start1 + k // <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> start1 + k // <span class="number">2</span> - <span class="number">1</span> &lt; <span class="built_in">len</span>(nums1) <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            mid_val2 = nums2[start2 + k // <span class="number">2</span> - <span class="number">1</span>] <span class="keyword">if</span> start2 + k // <span class="number">2</span> - <span class="number">1</span> &lt; <span class="built_in">len</span>(nums2) <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mid_val1 &lt; mid_val2:</span><br><span class="line">                <span class="keyword">return</span> find_kth(nums1, start1 + k // <span class="number">2</span>, nums2, start2, k - k // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> find_kth(nums1, start1, nums2, start2 + k // <span class="number">2</span>, k - k // <span class="number">2</span>)</span><br><span class="line">        total_len = <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">        <span class="keyword">if</span> total_len % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span>) + find_kth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, total_len // <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 65.76% 使用 Python3 的用户</p>
<p>内存消耗 : 18.09 MB, 击败 5.00% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>* nums1, <span class="type">int</span> nums1Size, <span class="type">int</span>* nums2, <span class="type">int</span> nums2Size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> totalSize = nums1Size + nums2Size;</span><br><span class="line">    <span class="type">int</span> *mergedArray = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * totalSize);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums1Size &amp;&amp; j &lt; nums2Size) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt;= nums2[j]) &#123;</span><br><span class="line">            mergedArray[k++] = nums1[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergedArray[k++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums1Size) &#123;</span><br><span class="line">        mergedArray[k++] = nums1[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; nums2Size) &#123;</span><br><span class="line">        mergedArray[k++] = nums2[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (totalSize % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)(mergedArray[totalSize / <span class="number">2</span> - <span class="number">1</span>] + mergedArray[totalSize / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)mergedArray[totalSize / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 83.01% 使用 C 的用户</p>
<p>内存消耗 : 7.38 MB, 击败 15.06% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">FindMedianSortedArrays</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = nums1.Length;</span><br><span class="line">        <span class="built_in">int</span> n = nums2.Length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="built_in">int</span>[] temp = nums1;</span><br><span class="line">            nums1 = nums2;</span><br><span class="line">            nums2 = temp;</span><br><span class="line">            <span class="built_in">int</span> tmp = m;</span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = m, halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> partition1 = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">int</span> partition2 = halfLen - partition1;</span><br><span class="line">            <span class="built_in">int</span> maxLeft1 = (partition1 == <span class="number">0</span>) ? <span class="built_in">int</span>.MinValue : nums1[partition1 - <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">int</span> minRight1 = (partition1 == m) ? <span class="built_in">int</span>.MaxValue : nums1[partition1];</span><br><span class="line">            <span class="built_in">int</span> maxLeft2 = (partition2 == <span class="number">0</span>) ? <span class="built_in">int</span>.MinValue : nums2[partition2 - <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">int</span> minRight2 = (partition2 == n) ? <span class="built_in">int</span>.MaxValue : nums2[partition2];</span><br><span class="line">            <span class="keyword">if</span> (maxLeft1 &lt;= minRight2 &amp;&amp; maxLeft2 &lt;= minRight1) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (Math.Max(maxLeft1, maxLeft2) + Math.Min(minRight1, minRight2)) / <span class="number">2.0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Math.Max(maxLeft1, maxLeft2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxLeft1 &gt; minRight2) &#123;</span><br><span class="line">                right = partition1 - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = partition1 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 97.55% 使用 C# 的用户</p>
<p>内存消耗 : 53.73 MB, 击败 5.22% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mergedArray = [...nums1, ...nums2].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> totalLength = mergedArray.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (totalLength % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> midIndex = totalLength / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (mergedArray[midIndex - <span class="number">1</span>] + mergedArray[midIndex]) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mergedArray[<span class="title class_">Math</span>.<span class="title function_">floor</span>(totalLength / <span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 38.49% 使用 JavaScript 的用户</p>
<p>内存消耗 : 54.34 MB, 击败 5.09% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findMedianSortedArrays</span>(<span class="params">nums1: <span class="built_in">number</span>[], nums2: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = nums1.<span class="property">length</span> + nums2.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">findKth</span>(nums1, nums2, n &gt;&gt; <span class="number">1</span>) + <span class="title function_">findKth</span>(nums1, nums2, (n - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">findKth</span>(<span class="params">nums1: <span class="built_in">number</span>[], nums2: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> nums2[k];</span><br><span class="line">    <span class="keyword">if</span> (nums2.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> nums1[k];</span><br><span class="line">    <span class="keyword">const</span> i1 = nums1.<span class="property">length</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> i2 = nums2.<span class="property">length</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> m1 = nums1[i1];</span><br><span class="line">    <span class="keyword">const</span> m2 = nums2[i2];</span><br><span class="line">    <span class="keyword">if</span> (i1 + i2 &lt; k) &#123;</span><br><span class="line">      <span class="keyword">if</span> (m1 &gt; m2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findKth</span>(nums1, nums2.<span class="title function_">slice</span>(i2 + <span class="number">1</span>), k - (i2 + <span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findKth</span>(nums1.<span class="title function_">slice</span>(i1 + <span class="number">1</span>), nums2, k - (i1 + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (m1 &gt; m2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findKth</span>(nums1.<span class="title function_">slice</span>(<span class="number">0</span>, i1), nums2, k);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findKth</span>(nums1, nums2.<span class="title function_">slice</span>(<span class="number">0</span>, i2), k);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 95.23% 使用 TypeScript 的用户</p>
<p>内存消耗 : 46.54 MB, 击败 55.23% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span>(<span class="params"><span class="variable">$nums1</span>, <span class="variable">$nums2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$m</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums1</span>);</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$m</span> &gt; <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable">$nums1</span>;</span><br><span class="line">            <span class="variable">$nums1</span> = <span class="variable">$nums2</span>;</span><br><span class="line">            <span class="variable">$nums2</span> = <span class="variable">$temp</span>;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable">$m</span>;</span><br><span class="line">            <span class="variable">$m</span> = <span class="variable">$n</span>;</span><br><span class="line">            <span class="variable">$n</span> = <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable">$halfLen</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$m</span> + <span class="variable">$n</span> + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$partition1</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$left</span> + <span class="variable">$right</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="variable">$partition2</span> = <span class="variable">$halfLen</span> - <span class="variable">$partition1</span>;</span><br><span class="line">            <span class="variable">$maxLeft1</span> = (<span class="variable">$partition1</span> == <span class="number">0</span>) ? PHP_INT_MIN : <span class="variable">$nums1</span>[<span class="variable">$partition1</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$minRight1</span> = (<span class="variable">$partition1</span> == <span class="variable">$m</span>) ? PHP_INT_MAX : <span class="variable">$nums1</span>[<span class="variable">$partition1</span>];</span><br><span class="line">            <span class="variable">$maxLeft2</span> = (<span class="variable">$partition2</span> == <span class="number">0</span>) ? PHP_INT_MIN : <span class="variable">$nums2</span>[<span class="variable">$partition2</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$minRight2</span> = (<span class="variable">$partition2</span> == <span class="variable">$n</span>) ? PHP_INT_MAX : <span class="variable">$nums2</span>[<span class="variable">$partition2</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$maxLeft1</span> &lt;= <span class="variable">$minRight2</span> &amp;&amp; <span class="variable">$maxLeft2</span> &lt;= <span class="variable">$minRight1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="variable">$m</span> + <span class="variable">$n</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="title function_ invoke__">max</span>(<span class="variable">$maxLeft1</span>, <span class="variable">$maxLeft2</span>) + <span class="title function_ invoke__">min</span>(<span class="variable">$minRight1</span>, <span class="variable">$minRight2</span>)) / <span class="number">2.0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">max</span>(<span class="variable">$maxLeft1</span>, <span class="variable">$maxLeft2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$maxLeft1</span> &gt; <span class="variable">$minRight2</span>) &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$partition1</span> - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$partition1</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 96.20% 使用 PHP 的用户</p>
<p>内存消耗 : 19.61 MB, 击败 5.06% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">findMedianSortedArrays</span>(<span class="keyword">_</span> <span class="params">nums1</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">nums2</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> mergeArray <span class="operator">=</span> [<span class="type">Int</span>](repeating: <span class="number">0</span>, count: nums1.count <span class="operator">+</span> nums2.count)</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> j <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> index <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index <span class="operator">&lt;</span> mergeArray.count &#123;</span><br><span class="line">            <span class="keyword">if</span> j <span class="operator">&gt;=</span> nums2.count <span class="operator">||</span> (i <span class="operator">&lt;</span> nums1.count <span class="operator">&amp;&amp;</span> nums1[i] <span class="operator">&lt;=</span> nums2[j]) &#123;</span><br><span class="line">                mergeArray[index] <span class="operator">=</span> nums1[i]</span><br><span class="line">                i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeArray[index] <span class="operator">=</span> nums2[j]</span><br><span class="line">                j <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            index <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mergeArray.count <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Double</span>(mergeArray[mergeArray.count <span class="operator">/</span> <span class="number">2</span> <span class="operator">-</span> <span class="number">1</span>] <span class="operator">+</span> mergeArray[mergeArray.count <span class="operator">/</span> <span class="number">2</span>]) <span class="operator">/</span> <span class="number">2.0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Double</span>(mergeArray[mergeArray.count <span class="operator">/</span> <span class="number">2</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 22.31% 使用 Swift 的用户</p>
<p>内存消耗 : 15.58 MB, 击败 5.79% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1: <span class="type">IntArray</span>, nums2: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> mergeArray = IntArray(nums1.size + nums2.size)</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; mergeArray.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= nums2.size || (i &lt; nums1.size &amp;&amp; nums1[i] &lt;= nums2[j])) &#123;</span><br><span class="line">                mergeArray[index] = nums1[i]</span><br><span class="line">                i++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeArray[index] = nums2[j]</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (mergeArray.size % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            (mergeArray[mergeArray.size / <span class="number">2</span> - <span class="number">1</span>] + mergeArray[mergeArray.size / <span class="number">2</span>]) / <span class="number">2.0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeArray[mergeArray.size / <span class="number">2</span>].toDouble()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 268 ms, 击败 63.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 46.55 MB, 击败 56.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">double</span> findMedianSortedArrays(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums1, <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums2) &#123;</span><br><span class="line">    <span class="built_in">int</span> totalLength = nums1.length + nums2.length;</span><br><span class="line">    <span class="built_in">int</span> mid = totalLength ~/ <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> prev = <span class="number">0</span>, current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i + j &lt;= mid) &#123;</span><br><span class="line">        prev = current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; nums1.length &amp;&amp; (j &gt;= nums2.length || nums1[i] &lt;= nums2[j])) &#123;</span><br><span class="line">        current = nums1[i];</span><br><span class="line">        i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = nums2[j];</span><br><span class="line">        j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (totalLength.isOdd) &#123;</span><br><span class="line">        <span class="keyword">return</span> current.toDouble();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (prev + current) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 396 ms, 击败 43.75% 使用 Dart 的用户</p>
<p>内存消耗 : 148.22 MB, 击败 87.50% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    totalLength := <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">    mid := totalLength / <span class="number">2</span></span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    prev, current := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i+j &lt;= mid &#123;</span><br><span class="line">        prev = current</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums1) &amp;&amp; (j &gt;= <span class="built_in">len</span>(nums2) || nums1[i] &lt;= nums2[j]) &#123;</span><br><span class="line">            current = nums1[i]</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = nums2[j]</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> totalLength%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(current)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(prev+current) / <span class="number">2.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 90.78% 使用 Go 的用户</p>
<p>内存消耗 : 4.59 MB, 击败 99.81% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Float&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_median_sorted_arrays</span>(<span class="params">nums1, nums2</span>)</span><br><span class="line">  total_length = nums1.length + nums2.length</span><br><span class="line">  mid = total_length / <span class="number">2</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  j = <span class="number">0</span></span><br><span class="line">  prev = <span class="number">0</span></span><br><span class="line">  current = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i + j &lt;= mid</span><br><span class="line">    prev = current</span><br><span class="line">    <span class="keyword">if</span> i &lt; nums1.length &amp;&amp; (j &gt;= nums2.length |<span class="params"></span>| nums1[i] &lt;= nums2[j])</span><br><span class="line">      current = nums1[i]</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      current = nums2[j]</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> total_length % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> current.to_f</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (prev + current) / <span class="number">2.0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 50.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 208.75 MB, 击败 16.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span></span>(nums1: <span class="type">Array</span>[<span class="type">Int</span>], nums2: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> totalLength = nums1.length + nums2.length</span><br><span class="line">    <span class="keyword">val</span> mid = totalLength / <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> prev = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i + j &lt;= mid) &#123;</span><br><span class="line">      prev = current</span><br><span class="line">      <span class="keyword">if</span> (i &lt; nums1.length &amp;&amp; (j &gt;= nums2.length || nums1(i) &lt;= nums2(j))) &#123;</span><br><span class="line">        current = nums1(i)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = nums2(j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (totalLength % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      current.toDouble</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (prev + current) / <span class="number">2.0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 680 ms, 击败 40.00% 使用 Scala 的用户</p>
<p>内存消耗 : 56.56 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">find_median_sorted_arrays</span>(nums1: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, nums2: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">total_length</span> = nums1.<span class="title function_ invoke__">len</span>() + nums2.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">mid</span> = total_length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">j</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prev</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> i + j &lt;= mid &#123;</span><br><span class="line">            prev = current;</span><br><span class="line">            <span class="keyword">if</span> i &lt; nums1.<span class="title function_ invoke__">len</span>() &amp;&amp; (j &gt;= nums2.<span class="title function_ invoke__">len</span>() || nums1[i] &lt;= nums2[j]) &#123;</span><br><span class="line">                current = nums1[i];</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = nums2[j];</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> total_length % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">            current <span class="keyword">as</span> <span class="type">f64</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            (prev + current) <span class="keyword">as</span> <span class="type">f64</span> / <span class="number">2.0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.05 MB, 击败 48.63% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">find-median-sorted-arrays</span> nums1 nums2)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> exact-integer?) (<span class="name">listof</span> exact-integer?) flonum?)</span><br><span class="line">    (<span class="name"><span class="built_in">string-&gt;number</span></span></span><br><span class="line">        (<span class="name">real-&gt;decimal-string</span></span><br><span class="line">            (<span class="name">find-midian-num-general</span> nums1 nums2)</span><br><span class="line">            <span class="number">5</span>))</span><br><span class="line">  )</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">find-midian-num-general</span> nums1 nums2)</span><br><span class="line">    (<span class="name"><span class="built_in">let*</span></span> ((<span class="name">nums</span> (<span class="name">get-median-list</span> nums1 nums2))</span><br><span class="line">            (<span class="name">len</span> (<span class="name"><span class="built_in">length</span></span> nums)))</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">odd?</span></span> len)</span><br><span class="line">            (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> len <span class="number">1</span>)</span><br><span class="line">                (<span class="name"><span class="built_in">list-ref</span></span> nums (<span class="name"><span class="built_in">-</span></span> len <span class="number">1</span>))</span><br><span class="line">                (<span class="name"><span class="built_in">let</span></span> ((<span class="name">id</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> len <span class="number">1</span>) <span class="number">2</span>)))</span><br><span class="line">                    (<span class="name"><span class="built_in">list-ref</span></span> nums id)))</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">id</span> (<span class="name"><span class="built_in">/</span></span> len <span class="number">2</span>)))</span><br><span class="line">                (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums (<span class="name"><span class="built_in">-</span></span> id <span class="number">1</span>))</span><br><span class="line">                      (<span class="name"><span class="built_in">list-ref</span></span> nums id))</span><br><span class="line">                    <span class="number">2</span>)))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">get-median-list</span> nums1 nums2)</span><br><span class="line">    (<span class="name">sort</span> (<span class="name"><span class="built_in">append</span></span> nums1 nums2) &lt;))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 236 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 122.28 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> find_median_sorted_arrays<span class="params">(Nums1 :: [integer()], Nums2 :: [integer()])</span> -&gt; float<span class="params">()</span>.</span><br><span class="line"><span class="function"><span class="title">find_median_sorted_arrays</span><span class="params">(Nums1, Nums2)</span> -&gt;</span></span><br><span class="line">    Merged = lists:sort(Nums1 ++ Nums2),</span><br><span class="line">    Length = length(Merged),</span><br><span class="line">    Mid = Length <span class="keyword">div</span> <span class="number">2</span>,</span><br><span class="line">    <span class="keyword">case</span> Length <span class="keyword">rem</span> <span class="number">2</span> <span class="keyword">of</span></span><br><span class="line">        <span class="number">0</span> -&gt; (lists:nth(Mid, Merged) + lists:nth(Mid + <span class="number">1</span>, Merged)) / <span class="number">2.0</span>;</span><br><span class="line">        _ -&gt; lists:nth(Mid + <span class="number">1</span>, Merged)</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 464 ms, 击败 -% 使用 Erlang 的用户</p>
<p>内存消耗 : 61.45 MB, 击败 -% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_median_sorted_arrays</span></span>(nums1, nums2) <span class="keyword">do</span></span><br><span class="line">    merged = <span class="title class_">Enum</span>.sort(nums1 ++ nums2)</span><br><span class="line">    length = length(merged)</span><br><span class="line">    mid = div(length, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">case</span> rem(length, <span class="number">2</span>) <span class="keyword">do</span></span><br><span class="line">      <span class="number">0</span> -&gt; (<span class="title class_">Enum</span>.at(merged, mid - <span class="number">1</span>) + <span class="title class_">Enum</span>.at(merged, mid)) / <span class="number">2.0</span></span><br><span class="line">      _ -&gt; <span class="title class_">Enum</span>.at(merged, mid)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 520 ms, 击败 -% 使用 Elixir 的用户</p>
<p>内存消耗 : 69.50 MB, 击败 -% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00005.最长回文子串</title>
    <url>/zh-CN/6aaf7c1d87d8/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “cbbd”<br>输出：”bb”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 1000</li>
<li>s 仅由数字和英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, max_length = <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                max_length = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> length = <span class="number">3</span>; length &lt;= n; ++length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - length; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> j = i + length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                    max_length = length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, max_length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 188 ms, 击败 50.83% 使用 C++ 的用户</p>
<p>内存消耗 : 22.71 MB, 击败 52.86% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 87.41% 使用 Java 的用户</p>
<p>内存消耗 : 41.15 MB, 击败 71.32% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        start, max_length = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[i][i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[i + <span class="number">1</span>]:</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line">                start = i</span><br><span class="line">                max_length = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - length + <span class="number">1</span>):</span><br><span class="line">                j = i + length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j] <span class="keyword">and</span> dp[i + <span class="number">1</span>][j - <span class="number">1</span>]:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">                    start = i</span><br><span class="line">                    max_length = length</span><br><span class="line">        <span class="keyword">return</span> s[start:start + max_length]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2744 ms, 击败 50.76% 使用 Python 的用户</p>
<p>内存消耗 : 20.48 MB, 击败 33.90% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        start, max_length = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[i][i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[i + <span class="number">1</span>]:</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line">                start = i</span><br><span class="line">                max_length = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - length + <span class="number">1</span>):</span><br><span class="line">                j = i + length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j] <span class="keyword">and</span> dp[i + <span class="number">1</span>][j - <span class="number">1</span>]:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">                    start = i</span><br><span class="line">                    max_length = length</span><br><span class="line">        <span class="keyword">return</span> s[start:start + max_length]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1988 ms, 击败 58.06% 使用 Python3 的用户</p>
<p>内存消耗 : 25.75 MB, 击败 5.00% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">longestPalindrome</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span> || *s == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>, max_length = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> dp[n][n];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            start = i;</span><br><span class="line">            max_length = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> length = <span class="number">3</span>; length &lt;= n; ++length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                max_length = length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>((max_length + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(result, s + start, max_length);</span><br><span class="line">    result[max_length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 112 ms, 击败 35.91% 使用 C 的用户</p>
<p>内存消耗 : 11.07 MB, 击败 8.11% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">LongestPalindrome</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> n = s.Length;</span><br><span class="line">        <span class="built_in">int</span> start = <span class="number">0</span>, maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">bool</span>[,] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[n, n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i, i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i, i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                maxLength = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> length = <span class="number">3</span>; length &lt;= n; length++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n - length; i++) &#123;</span><br><span class="line">                <span class="built_in">int</span> j = i + length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>, j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i, j] = <span class="literal">true</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                    maxLength = length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.Substring(start, maxLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 104 ms, 击败 62.37% 使用 C# 的用户</p>
<p>内存消耗 : 42.81 MB, 击败 39.55% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(n), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            start = i;</span><br><span class="line">            maxLength = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> length = <span class="number">3</span>; length &lt;= n; length++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n - length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> j = i + length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] === s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                maxLength = length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">substring</span>(start, start + maxLength);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 608 ms, 击败 25.61% 使用 JavaScript 的用户</p>
<p>内存消耗 : 70.17 MB, 击败 14.82% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestPalindrome</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dp</span>: <span class="built_in">boolean</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(n), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            start = i;</span><br><span class="line">            maxLength = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> length = <span class="number">3</span>; length &lt;= n; length++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n - length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> j = i + length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] === s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                maxLength = length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">substring</span>(start, start + maxLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 676 ms, 击败 24.04% 使用 TypeScript 的用户</p>
<p>内存消耗 : 71.98 MB, 击败 17.54% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$s</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="variable">$start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$maxLength</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$i</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span> - <span class="number">1</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$s</span>[<span class="variable">$i</span>] == <span class="variable">$s</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$i</span> + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$start</span> = <span class="variable">$i</span>;</span><br><span class="line">                <span class="variable">$maxLength</span> = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$length</span> = <span class="number">3</span>; <span class="variable">$length</span> &lt;= <span class="variable">$n</span>; <span class="variable">$length</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span> - <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">                <span class="variable">$j</span> = <span class="variable">$i</span> + <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$s</span>[<span class="variable">$i</span>] == <span class="variable">$s</span>[<span class="variable">$j</span>] &amp;&amp; <span class="variable">$dp</span>[<span class="variable">$i</span> + <span class="number">1</span>][<span class="variable">$j</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$start</span> = <span class="variable">$i</span>;</span><br><span class="line">                    <span class="variable">$maxLength</span> = <span class="variable">$length</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="variable">$start</span>, <span class="variable">$maxLength</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1048 ms, 击败 36.36% 使用 PHP 的用户</p>
<p>内存消耗 : 37.88 MB, 击败 36.36% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">longestPalindrome</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> chars <span class="operator">=</span> <span class="type">Array</span>(s)</span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> <span class="number">0</span>, end <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>chars.count &#123;</span><br><span class="line">            <span class="keyword">let</span> len1 <span class="operator">=</span> expandAroundCenter(chars, i, i)</span><br><span class="line">            <span class="keyword">let</span> len2 <span class="operator">=</span> expandAroundCenter(chars, i, i <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> len <span class="operator">=</span> <span class="built_in">max</span>(len1, len2)</span><br><span class="line">            <span class="keyword">if</span> len <span class="operator">&gt;</span> end <span class="operator">-</span> start &#123;</span><br><span class="line">                start <span class="operator">=</span> i <span class="operator">-</span> (len <span class="operator">-</span> <span class="number">1</span>) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">                end <span class="operator">=</span> i <span class="operator">+</span> len <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(chars[start<span class="operator">...</span>end])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">expandAroundCenter</span>(<span class="keyword">_</span> <span class="params">chars</span>: [<span class="type">Character</span>], <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> left, right <span class="operator">=</span> right</span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> right <span class="operator">&lt;</span> chars.count <span class="operator">&amp;&amp;</span> chars[left] <span class="operator">==</span> chars[right] &#123;</span><br><span class="line">            left <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            right <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right <span class="operator">-</span> left <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 76.19% 使用 Swift 的用户</p>
<p>内存消耗 : 15.47 MB, 击败 5.71% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">longestPalindrome</span><span class="params">(s: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> n = s.length</span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> maxLength = <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> dp = Array(n) &#123; BooleanArray(n) &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">true</span></span><br><span class="line">                start = i</span><br><span class="line">                maxLength = <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (length <span class="keyword">in</span> <span class="number">3.</span>.n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - length + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> j = i + length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span></span><br><span class="line">                    start = i</span><br><span class="line">                    maxLength = length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxLength)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 268 ms, 击败 59.81% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.95 MB, 击败 23.36% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> longestPalindrome(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="built_in">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">      <span class="built_in">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">int</span> len = max(len1, len2);</span><br><span class="line">      <span class="keyword">if</span> (len &gt; maxLen) &#123;</span><br><span class="line">        maxLen = len;</span><br><span class="line">        start = i - (maxLen - <span class="number">1</span>) ~/ <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> expandAroundCenter(<span class="built_in">String</span> s, <span class="built_in">int</span> left, <span class="built_in">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] == s[right]) &#123;</span><br><span class="line">      left--;</span><br><span class="line">      right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 280 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 141.77 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> start, end <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        len1 := expandAroundCenter(s, i, i)</span><br><span class="line">        len2 := expandAroundCenter(s, i, i+<span class="number">1</span>)</span><br><span class="line">        length := max(len1, len2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> length &gt; end-start &#123;</span><br><span class="line">            start = i - (length<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">            end = i + length/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[start : end+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandAroundCenter</span><span class="params">(s <span class="type">string</span>, left, right <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> left &gt;= <span class="number">0</span> &amp;&amp; right &lt; <span class="built_in">len</span>(s) &amp;&amp; s[left] == s[right] &#123;</span><br><span class="line">        left--</span><br><span class="line">        right++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.34 MB, 击败 65.18% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_palindrome</span>(<span class="params">s</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? |<span class="params"></span>| s.empty?</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    max_len = <span class="number">1</span></span><br><span class="line">    (<span class="number">0</span>...s.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        len1 = expand_around_center(s, i, i)</span><br><span class="line">        len2 = expand_around_center(s, i, i + <span class="number">1</span>)</span><br><span class="line">        len = [len1, len2].max</span><br><span class="line">        <span class="keyword">if</span> len &gt; max_len</span><br><span class="line">            max_len = len</span><br><span class="line">            start = i - (max_len - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    s[start...(start + max_len)]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">expand_around_center</span>(<span class="params">s, left, right</span>)</span><br><span class="line">    <span class="keyword">while</span> left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] == s[right]</span><br><span class="line">        left -= <span class="number">1</span></span><br><span class="line">        right += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    right - left - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 620 ms, 击败 83.33% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.72 MB, 击败 16.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span></span>(s: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> end = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandAroundCenter</span></span>(left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> l = left</span><br><span class="line">      <span class="keyword">var</span> r = right</span><br><span class="line">      <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.length &amp;&amp; s.charAt(l) == s.charAt(r)) &#123;</span><br><span class="line">        l -= <span class="number">1</span></span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      r - l - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until s.length) &#123;</span><br><span class="line">      <span class="keyword">val</span> len1 = expandAroundCenter(i, i)</span><br><span class="line">      <span class="keyword">val</span> len2 = expandAroundCenter(i, i + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> len = <span class="type">Math</span>.max(len1, len2)</span><br><span class="line">      <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">        start = i - (len - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">end</span> = i + len / <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.substring(start, end + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 600 ms, 击败 76.92% 使用 Scala 的用户</p>
<p>内存消耗 : 54.00 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">longest_palindrome</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">s</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dp</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>; n]; n];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_len</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[i + <span class="number">1</span>] &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                max_len = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">k</span> <span class="keyword">in</span> <span class="number">3</span>..=n &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..=n - k &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">j</span> = i + k - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> k &gt; max_len &#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        max_len = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s[start..start + max_len].<span class="title function_ invoke__">iter</span>().collect::&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 58.62% 使用 Rust 的用户</p>
<p>内存消耗 : 3.30 MB, 击败 5.17% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">longest-palindrome</span> s)</span><br><span class="line">  (<span class="name">-&gt;</span> string? string?)</span><br><span class="line">    (<span class="name">longest-palindrome/center-better</span> s)</span><br><span class="line">  )</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">longest-palindrome/center-better</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">palindrome/in</span> s n/begin n/end)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">&gt;=</span></span> n/begin <span class="number">0</span>) (<span class="name"><span class="built_in">&lt;</span></span> n/end (<span class="name"><span class="built_in">string-length</span></span> s)))</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">string-ref</span></span> s n/begin) (<span class="name"><span class="built_in">string-ref</span></span> s n/end))</span><br><span class="line">            (<span class="name">palindrome/in</span> s (<span class="name">sub1</span> n/begin) (<span class="name">add1</span> n/end))</span><br><span class="line">            (<span class="name"><span class="built_in">list</span></span> (<span class="name">add1</span> n/begin) (<span class="name">sub1</span> n/end)))</span><br><span class="line">        (<span class="name"><span class="built_in">list</span></span> (<span class="name">add1</span> n/begin) (<span class="name">sub1</span> n/end))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">palindrome/center</span> s n/begin n/end n)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;=</span></span> n (<span class="name"><span class="built_in">string-length</span></span> s))</span><br><span class="line">        (<span class="name"><span class="built_in">substring</span></span> s n/begin (<span class="name">add1</span> n/end))</span><br><span class="line">        (<span class="name">match-let</span> ([(<span class="name"><span class="built_in">list</span></span> begin1 end1) (<span class="name">palindrome/in</span> s n n)]</span><br><span class="line">                    [(<span class="name"><span class="built_in">list</span></span> begin2 end2) (<span class="name">palindrome/in</span> s n (<span class="name">add1</span> n))])</span><br><span class="line">          (<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">            [(<span class="name"><span class="built_in">&gt;</span></span> (<span class="name"><span class="built_in">-</span></span> end2 begin2) (<span class="name"><span class="built_in">-</span></span> n/end n/begin)) (<span class="name">palindrome/center</span> s begin2 end2 (<span class="name">add1</span> n))]</span><br><span class="line">            [(<span class="name"><span class="built_in">&gt;</span></span> (<span class="name"><span class="built_in">-</span></span> end1 begin1) (<span class="name"><span class="built_in">-</span></span> n/end n/begin)) (<span class="name">palindrome/center</span> s begin1 end1 (<span class="name">add1</span> n))]</span><br><span class="line">            [<span class="name"><span class="built_in">else</span></span> (<span class="name">palindrome/center</span> s n/begin n/end (<span class="name">add1</span> n))]))))</span><br><span class="line">  (<span class="name">palindrome/center</span> s <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 236 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 99.04 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> longest_palindrome<span class="params">(S :: unicode:unicode_binary())</span> -&gt; unicode:unicode_binary<span class="params">()</span>.</span><br><span class="line"><span class="function"><span class="title">longest_palindrome</span><span class="params">(S)</span> -&gt;</span></span><br><span class="line">    list_to_binary(main(binary_to_list(S))).</span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(S)</span> -&gt;</span></span><br><span class="line">    &#123;FromZeroString, FromZeroLength&#125; = loop(S, get_zero_list(S), <span class="number">0</span>),</span><br><span class="line">    &#123;FromOneString, FromOneLength&#125; = loop(S, get_one_list(S), <span class="number">1</span>),</span><br><span class="line">    Longer = FromZeroLength &gt; FromOneLength,</span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        Longer -&gt;</span><br><span class="line">            substr(FromZeroString, FromZeroLength);</span><br><span class="line">        <span class="literal">true</span> -&gt;</span><br><span class="line">            substr(FromOneString, FromOneLength)</span><br><span class="line">    <span class="keyword">end</span>.</span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(S, [ResultHead|ResultTail], N)</span> -&gt;</span></span><br><span class="line">    NextList = next_list(S, ResultTail),</span><br><span class="line">    CheckListResult = check_list(NextList),</span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        CheckListResult -&gt;</span><br><span class="line">            loop(S, NextList, N + <span class="number">2</span>);</span><br><span class="line">        <span class="literal">true</span> -&gt;</span><br><span class="line">            &#123;find_first(S, [ResultHead|ResultTail]), N&#125;</span><br><span class="line">    <span class="keyword">end</span>.</span><br><span class="line"><span class="function"><span class="title">substr</span><span class="params">(_, N)</span> <span class="title">when</span> N == 0 -&gt;</span></span><br><span class="line">    [];</span><br><span class="line"><span class="function"><span class="title">substr</span><span class="params">([Head|Tail], N)</span> -&gt;</span></span><br><span class="line">    [Head|substr(Tail, N - <span class="number">1</span>)].</span><br><span class="line"><span class="function"><span class="title">get_zero_list</span><span class="params">([Head|Tail])</span> -&gt;</span></span><br><span class="line">    [&#123;true, [Head|Tail]&#125; | get_zero_list(Tail)];</span><br><span class="line"><span class="function"><span class="title">get_zero_list</span><span class="params">([])</span> -&gt;</span></span><br><span class="line">    [].</span><br><span class="line"><span class="function"><span class="title">get_one_list</span><span class="params">([_ | Tail])</span> -&gt;</span></span><br><span class="line">    [&#123;true, Tail&#125; | get_one_list(Tail)];</span><br><span class="line"><span class="function"><span class="title">get_one_list</span><span class="params">([])</span> -&gt;</span></span><br><span class="line">    [].</span><br><span class="line"><span class="function"><span class="title">next_list</span><span class="params">([Head1|Tail1], [&#123;IsPalindrome, [Head2|Tail2]&#125; | ResultTail])</span> -&gt;</span></span><br><span class="line">    [&#123;(Head1 == Head2) and IsPalindrome, Tail2&#125; | next_list(Tail1, ResultTail)];</span><br><span class="line"><span class="function"><span class="title">next_list</span><span class="params">(_, [&#123;_, []&#125;])</span> -&gt;</span></span><br><span class="line">    [];</span><br><span class="line"><span class="function"><span class="title">next_list</span><span class="params">(_, [])</span> -&gt;</span></span><br><span class="line">    [].</span><br><span class="line"><span class="function"><span class="title">check_list</span><span class="params">(S)</span> -&gt;</span></span><br><span class="line">    check_list(S, false).</span><br><span class="line"><span class="function"><span class="title">check_list</span><span class="params">([&#123;IsPalindrome, _&#125; | Tail], Result)</span> -&gt;</span></span><br><span class="line">    check_list(Tail, IsPalindrome or Result);</span><br><span class="line"><span class="function"><span class="title">check_list</span><span class="params">([], Result)</span> -&gt;</span></span><br><span class="line">    Result.</span><br><span class="line"><span class="function"><span class="title">find_first</span><span class="params">([Head1|Tail1], [&#123;IsPalindrome, _&#125; | Tail2])</span> -&gt;</span></span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        IsPalindrome -&gt;</span><br><span class="line">            [Head1|Tail1];</span><br><span class="line">        <span class="literal">true</span> -&gt;</span><br><span class="line">            find_first(Tail1, Tail2)</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">find_first</span><span class="params">(_, [])</span> -&gt;</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 516 ms, 击败 100.00% 使用 Erlang 的用户</p>
<p>内存消耗 : 57.55 MB, 击败 100.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>利刃出鞘</title>
    <url>/zh-CN/95f60a530a95/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　富豪小说家哈兰·斯隆比在自己85岁生日第二天，被发现在自家庄园离奇自杀，遗留了亿万遗产。久负盛名的大侦探布兰科（丹尼尔·克雷格饰）突然被匿名人士雇佣调查此案真相。同时，哈兰的孙子兰森（克里斯·埃文斯饰）也正在秘密调查此案。当布兰科和哈兰·斯隆比家族的其他人对谈时， 他发现事情并没有想象中那么简单。</p>
<p>　　哈兰家族没有表面上那么和睦，每个人都有着不可告人的秘密，每个人都想得到遗产……究竟这起命案是自杀还是他杀？似乎每个人都有嫌疑。随着一位遗产继承人的意外亮相，真相谜底渐渐浮出水面……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00006.N字形变换</title>
    <url>/zh-CN/e6368f225a69/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p>
<blockquote>
<p><code>P</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>A</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>H</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>N</code><br><code>A</code>&nbsp;<code>P</code>   &nbsp;<code>L</code>&nbsp;<code>S</code>   &nbsp;<code>I</code>&nbsp;<code>I</code>   &nbsp;<code>G</code><br><code>Y</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>I</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>R</code></p>
</blockquote>
<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<blockquote>
<p>string convert(string s, int numRows);</p>
</blockquote>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “PAYPALISHIRING”, numRows &#x3D; 3<br>输出：”PAHNAPLSIIGYIR”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “PAYPALISHIRING”, numRows &#x3D; 4<br>输出：”PINALSIGYAHRPI”<br>解释：<br><code>P</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>I</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>N</code><br><code>A</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>L</code> <code>S</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>I</code> <code>G</code><br><code>Y</code> <code>A</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>H</code> <code>R</code><br><code>P</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>I</code></p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “A”, numRows &#x3D; 1<br>输出：”A”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 1000</li>
<li>s 由英文字母（小写和大写）、’,’ 和 ‘.’ 组成</li>
<li>1 &lt;&#x3D; numRows &lt;&#x3D; 1000</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">convert</span><span class="params">(std::string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.<span class="built_in">length</span>() &lt;= numRows) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::vector&lt;std::string&gt; <span class="title">rows</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            rows[row].<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="keyword">if</span> (row == <span class="number">0</span>) &#123;</span><br><span class="line">                step = <span class="number">1</span>; <span class="comment">// 到达第一行，改变方向向下</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (row == numRows - <span class="number">1</span>) &#123;</span><br><span class="line">                step = <span class="number">-1</span>; <span class="comment">// 到达最后一行，改变方向向上</span></span><br><span class="line">            &#125;</span><br><span class="line">            row += step;</span><br><span class="line">        &#125;</span><br><span class="line">        std::string result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; rowStr : rows) &#123;</span><br><span class="line">            result += rowStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 91.30% 使用 C++ 的用户</p>
<p>内存消耗 : 10.46 MB, 击败 58.69% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.length() &lt;= numRows) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder[] rows = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>[numRows];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            rows[i] = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            rows[row].append(c);</span><br><span class="line">            <span class="keyword">if</span> (row == <span class="number">0</span>) &#123;</span><br><span class="line">                step = <span class="number">1</span>; <span class="comment">// 到达第一行，改变方向向下</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (row == numRows - <span class="number">1</span>) &#123;</span><br><span class="line">                step = -<span class="number">1</span>; <span class="comment">// 到达最后一行，改变方向向上</span></span><br><span class="line">            &#125;</span><br><span class="line">            row += step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (StringBuilder rowStr : rows) &#123;</span><br><span class="line">            result.append(rowStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 86.05% 使用 Java 的用户</p>
<p>内存消耗 : 43.73 MB, 击败 20.70% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">self, s, numRows</span>):</span><br><span class="line">        <span class="keyword">if</span> numRows &lt;= <span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(s) &lt;= numRows:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        rows = [<span class="string">&#x27;&#x27;</span>] * numRows</span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            rows[row] += char</span><br><span class="line">            <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">                step = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> row == numRows - <span class="number">1</span>:</span><br><span class="line">                step = -<span class="number">1</span></span><br><span class="line">            row += step</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(rows)</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 29.33% 使用 Python 的用户</p>
<p>内存消耗 : 13.10 MB, 击败 75.91% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">self, s: <span class="built_in">str</span>, numRows: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> numRows &lt;= <span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(s) &lt;= numRows:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        rows = [<span class="string">&#x27;&#x27;</span>] * numRows</span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            rows[row] += char</span><br><span class="line">            <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">                step = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> row == numRows - <span class="number">1</span>:</span><br><span class="line">                step = -<span class="number">1</span></span><br><span class="line">            row += step</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(rows)</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 97.61% 使用 Python3 的用户</p>
<p>内存消耗 : 17.09 MB, 击败 14.32% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">convert</span><span class="params">(<span class="type">char</span>* s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s), r = numRows;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">1</span> || r &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t = r * <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = (n + t - <span class="number">1</span>) / t * (r - <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span>** mat = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        mat[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * c);</span><br><span class="line">        <span class="built_in">memset</span>(mat[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        mat[x][y] = s[i];</span><br><span class="line">        <span class="keyword">if</span> (i % t &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">            ++x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --x;</span><br><span class="line">            ++y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[i][j]) &#123;</span><br><span class="line">                result[pos++] = mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(mat[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(mat);</span><br><span class="line">    result[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(s, result);</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 24.86% 使用 C 的用户</p>
<p>内存消耗 : 30.42 MB, 击败 13.58% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">int</span> numRows</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.Length &lt;= numRows) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> n = s.Length;</span><br><span class="line">        <span class="built_in">int</span> t = numRows * <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> c = (n + t - <span class="number">1</span>) / t * (numRows - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">char</span>[,] mat = <span class="keyword">new</span> <span class="built_in">char</span>[numRows, c];</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            mat[x, y] = s[i];</span><br><span class="line">            <span class="keyword">if</span> (i % t &lt; numRows - <span class="number">1</span>) &#123;</span><br><span class="line">                ++x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --x;</span><br><span class="line">                ++y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mat[i, j] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                    result += mat[i, j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 49.10% 使用 C# 的用户</p>
<p>内存消耗 : 58.23 MB, 击败 42.19% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">numRows</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="keyword">function</span>(<span class="params">s, numRows</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.<span class="property">length</span> &lt;= numRows) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> t = numRows * <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n / t) * (numRows - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> mat = <span class="keyword">new</span> <span class="title class_">Array</span>(numRows).<span class="title function_">fill</span>().<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(c).<span class="title function_">fill</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        mat[x][y] = s[i];</span><br><span class="line">        <span class="keyword">if</span> (i % t &lt; numRows - <span class="number">1</span>) &#123;</span><br><span class="line">            ++x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --x;</span><br><span class="line">            ++y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[i][j] !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                result += mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 21.61% 使用 JavaScript 的用户</p>
<p>内存消耗 : 64.30 MB, 击败 8.54% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">s: <span class="built_in">string</span>, numRows: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.<span class="property">length</span> &lt;= numRows) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">t</span>: <span class="built_in">number</span> = numRows * <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">c</span>: <span class="built_in">number</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n / t) * (numRows - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mat</span>: <span class="built_in">string</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: numRows &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(c).<span class="title function_">fill</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">number</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        mat[x][y] = s[i];</span><br><span class="line">        <span class="keyword">if</span> (i % t &lt; numRows - <span class="number">1</span>) &#123;</span><br><span class="line">            ++x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --x;</span><br><span class="line">            ++y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[i][j] !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                result += mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 11.05% 使用 TypeScript 的用户</p>
<p>内存消耗 : 63.39 MB, 击败 5.23% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $numRows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$numRows</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$numRows</span> &lt;= <span class="number">1</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) &lt;= <span class="variable">$numRows</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable">$numRows</span> * <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">ceil</span>(<span class="variable">$n</span> / <span class="variable">$t</span>) * (<span class="variable">$numRows</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$mat</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$numRows</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$c</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">        <span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$mat</span>[<span class="variable">$x</span>][<span class="variable">$y</span>] = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> % <span class="variable">$t</span> &lt; <span class="variable">$numRows</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                ++<span class="variable">$x</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --<span class="variable">$x</span>;</span><br><span class="line">                ++<span class="variable">$y</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$numRows</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$c</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$mat</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$result</span> .= <span class="variable">$mat</span>[<span class="variable">$i</span>][<span class="variable">$j</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 276 ms, 击败 6.98% 使用 PHP 的用户</p>
<p>内存消耗 : 35.56 MB, 击败 6.98% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">convert</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">numRows</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> numRows <span class="operator">&lt;=</span> <span class="number">1</span> <span class="operator">||</span> s.count <span class="operator">&lt;=</span> numRows &#123;</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> s.count</span><br><span class="line">        <span class="keyword">let</span> t <span class="operator">=</span> numRows <span class="operator">*</span> <span class="number">2</span> <span class="operator">-</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> c <span class="operator">=</span> <span class="type">Int</span>(ceil(<span class="type">Double</span>(n) <span class="operator">/</span> <span class="type">Double</span>(t)) <span class="operator">*</span> <span class="type">Double</span>(numRows <span class="operator">-</span> <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">var</span> mat <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="type">Character</span>(<span class="string">&quot; &quot;</span>), count: c), count: numRows)</span><br><span class="line">        <span class="keyword">var</span> x <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> y <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i, char) <span class="keyword">in</span> s.enumerated() &#123;</span><br><span class="line">            mat[x][y] <span class="operator">=</span> char</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">%</span> t <span class="operator">&lt;</span> numRows <span class="operator">-</span> <span class="number">1</span> &#123;</span><br><span class="line">                x <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                y <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>numRows &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>c &#123;</span><br><span class="line">                <span class="keyword">if</span> mat[i][j] <span class="operator">!=</span> <span class="string">&quot; &quot;</span> &#123;</span><br><span class="line">                    result.append(mat[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 172 ms, 击败 16.22% 使用 Swift 的用户</p>
<p>内存消耗 : 28.77 MB, 击败 5.40% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">convert</span><span class="params">(s: <span class="type">String</span>, numRows: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.length &lt;= numRows) &#123;</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> n = s.length</span><br><span class="line">        <span class="keyword">val</span> t = numRows * <span class="number">2</span> - <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> c = ((n + t - <span class="number">1</span>) / t) * (numRows - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> mat = Array(numRows) &#123; CharArray(c) &#123; <span class="string">&#x27; &#x27;</span> &#125; &#125;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> s.indices) &#123;</span><br><span class="line">            mat[x][y] = s[i]</span><br><span class="line">            <span class="keyword">if</span> (i % t &lt; numRows - <span class="number">1</span>) &#123;</span><br><span class="line">                ++x</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --x</span><br><span class="line">                ++y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until numRows) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mat[i][j] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                    result += mat[i][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 276 ms, 击败 29.79% 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.07 MB, 击败 14.89% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> convert(<span class="built_in">String</span> s, <span class="built_in">int</span> numRows) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length == <span class="number">1</span> || numRows == <span class="number">1</span> || s.length &lt; numRows) &#123;</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; rows = <span class="built_in">List</span>.filled(numRows, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> currentRow = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> zigzagLength = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; s.length) &#123;</span><br><span class="line">      rows[currentRow] += s[index];</span><br><span class="line">      <span class="keyword">if</span> (index % zigzagLength &lt; numRows - <span class="number">1</span>) &#123;</span><br><span class="line">        currentRow++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentRow--;</span><br><span class="line">      &#125;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rows.join();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 368 ms, 击败 37.50% 使用 Dart 的用户</p>
<p>内存消耗 : 149.43 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="type">string</span>, numRows <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> numRows &lt;= <span class="number">1</span> || <span class="built_in">len</span>(s) &lt;= numRows &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    rows := <span class="built_in">make</span>([]<span class="type">string</span>, numRows)</span><br><span class="line">    index, step := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        rows[index] += <span class="type">string</span>(s[i])</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == numRows<span class="number">-1</span> &#123;</span><br><span class="line">            step = <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        index += step</span><br><span class="line">    &#125;</span><br><span class="line">    result := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> _, row := <span class="keyword">range</span> rows &#123;</span><br><span class="line">        result += row</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 68.58% 使用 Go 的用户</p>
<p>内存消耗 : 7.21 MB, 击败 27.36% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num_rows</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">s, num_rows</span>)</span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">if</span> num_rows &lt;= <span class="number">1</span> |<span class="params"></span>| s.length &lt;= num_rows</span><br><span class="line">    rows = <span class="title class_">Array</span>.new(num_rows, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    index, step = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    s.each_char <span class="keyword">do</span> |<span class="params">char</span>|</span><br><span class="line">        rows[index] += char</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span></span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elsif</span> index == num_rows - <span class="number">1</span></span><br><span class="line">            step = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        index += step</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    rows.join</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 96 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.76 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(s: <span class="type">String</span>, numRows: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span> || s.length &lt;= numRows) &#123;</span><br><span class="line">      <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> rows = <span class="type">Array</span>.fill(numRows)(<span class="string">&quot;&quot;</span>) <span class="comment">// 创建一个包含 numRows 个空字符串的数组</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> step = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (char &lt;- s) &#123;</span><br><span class="line">      rows(index) += char.toString</span><br><span class="line">      <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == numRows - <span class="number">1</span>) &#123;</span><br><span class="line">        step = <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">      index += step</span><br><span class="line">    &#125;</span><br><span class="line">    rows.mkString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 516 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.05 MB, 击败 87.50% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">convert</span>(s: <span class="type">String</span>, num_rows: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num_rows &lt;= <span class="number">1</span> || s.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> &lt;= num_rows &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rows</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">new</span>(); num_rows <span class="keyword">as</span> <span class="type">usize</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">step</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">ch</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            rows[index <span class="keyword">as</span> <span class="type">usize</span>].<span class="title function_ invoke__">push</span>(ch);</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                step = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == num_rows - <span class="number">1</span> &#123;</span><br><span class="line">                step = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index += step;</span><br><span class="line">        &#125;</span><br><span class="line">        rows.<span class="title function_ invoke__">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.37 MB, 击败 9.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">convert</span> s num-rows)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">make-log</span> char row)</span><br><span class="line">    `(log ,char ,row))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">log?</span> log)</span><br><span class="line">    (<span class="name">symbol=?</span> (<span class="name"><span class="built_in">car</span></span> log) <span class="symbol">&#x27;log</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">log-char</span> log)</span><br><span class="line">    (<span class="name"><span class="built_in">cadr</span></span> log))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">log-row</span> log)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name">log?</span> log)</span><br><span class="line">        (<span class="name">caddr</span> log)</span><br><span class="line">        (<span class="name">error</span> log)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">construct-result</span> log-list)</span><br><span class="line">    (<span class="name"><span class="built_in">define</span></span> (<span class="name">iterator</span> row)</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;=</span></span> row num-rows)</span><br><span class="line">          <span class="string">&quot;&quot;</span></span><br><span class="line">          (<span class="name"><span class="built_in">string-append</span></span></span><br><span class="line">           (<span class="name">foldl</span> (<span class="name"><span class="built_in">lambda</span></span> (current accumulator)</span><br><span class="line">                    (<span class="name"><span class="built_in">string-append</span></span> accumulator</span><br><span class="line">                                   (<span class="name"><span class="built_in">string</span></span> (<span class="name">log-char</span> current))))</span><br><span class="line">                  <span class="string">&quot;&quot;</span></span><br><span class="line">                  (<span class="name">filter</span> (<span class="name"><span class="built_in">lambda</span></span> (current)</span><br><span class="line">                            (<span class="name"><span class="built_in">=</span></span> row (<span class="name">log-row</span> current)))</span><br><span class="line">                          log-list))</span><br><span class="line">           (<span class="name">iterator</span> (<span class="name"><span class="built_in">+</span></span> row <span class="number">1</span>)))))</span><br><span class="line">    (<span class="name">iterator</span> <span class="number">0</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">construct-log-list</span> rest-string state row col)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> rest-string)</span><br><span class="line">        &#x27;()</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name">symbol=?</span> <span class="symbol">&#x27;down</span> state)</span><br><span class="line">            (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">-</span></span> num-rows <span class="number">1</span>) row)</span><br><span class="line">                `(,(make-log (car rest-string) row) .</span><br><span class="line">                  ,(construct-log-list (cdr rest-string) <span class="symbol">&#x27;up</span></span><br><span class="line">                                       (- row <span class="number">1</span>) (+ col <span class="number">1</span>)))</span><br><span class="line">                `(,(make-log (car rest-string) row) .</span><br><span class="line">                  ,(construct-log-list (cdr rest-string) <span class="symbol">&#x27;down</span></span><br><span class="line">                                       (+ row <span class="number">1</span>) col)))</span><br><span class="line">            (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> <span class="number">0</span> row)</span><br><span class="line">                `(,(make-log (car rest-string) row) .</span><br><span class="line">                  ,(construct-log-list (cdr rest-string) <span class="symbol">&#x27;down</span></span><br><span class="line">                                       (+ row <span class="number">1</span>) col))</span><br><span class="line">                `(,(make-log (car rest-string) row) .</span><br><span class="line">                  ,(construct-log-list (cdr rest-string) <span class="symbol">&#x27;up</span></span><br><span class="line">                                       (- row <span class="number">1</span>) (+ col <span class="number">1</span>)))))))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> <span class="number">1</span> num-rows) (<span class="name"><span class="built_in">&gt;</span></span> num-rows (<span class="name"><span class="built_in">string-length</span></span> s)))</span><br><span class="line">      s</span><br><span class="line">      (<span class="name">construct-result</span></span><br><span class="line">       (<span class="name">construct-log-list</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> s) <span class="symbol">&#x27;down</span> <span class="number">0</span> <span class="number">0</span>))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 368 ms, 击败 -% 使用 Racket 的用户</p>
<p>内存消耗 : 12368 MB, 击败 -% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> convert(s :: <span class="title class_">String</span>.t(), num_rows :: integer) :: <span class="title class_">String</span>.t()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(s, <span class="number">1</span>) <span class="keyword">do</span></span><br><span class="line">    s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(s, num_rows) <span class="keyword">when</span> is_binary(s) <span class="keyword">and</span> is_integer(num_rows) <span class="keyword">and</span> num_rows &gt; <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    group_size = num_rows * <span class="number">2</span> - <span class="number">2</span></span><br><span class="line">    offset = gen_offset([], <span class="number">0</span>, <span class="number">0</span>, num_rows) |&gt; <span class="title class_">Enum</span>.reverse() |&gt; <span class="title class_">List</span>.to_tuple()</span><br><span class="line">    ss = <span class="title class_">String</span>.split(s, <span class="string">&quot;&quot;</span>, <span class="symbol">trim:</span> <span class="literal">true</span>)</span><br><span class="line">    mp = gen_map(<span class="number">0</span>, ss, offset, group_size, num_rows, %&#123;&#125;)</span><br><span class="line">    len = length(ss)</span><br><span class="line">    w = div(len, group_size)</span><br><span class="line">    w = w * (num_rows - <span class="number">1</span>)</span><br><span class="line">    r = rem(len, group_size)</span><br><span class="line">    w =</span><br><span class="line">      <span class="keyword">cond</span> <span class="keyword">do</span></span><br><span class="line">        r == <span class="number">0</span> -&gt; w</span><br><span class="line">        r &lt; num_rows -&gt; w + <span class="number">1</span></span><br><span class="line">        <span class="literal">true</span> -&gt; w + (r - num_rows + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    gen_str_i(<span class="number">0</span>, num_rows, <span class="string">&quot;&quot;</span>, w, mp)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">gen_offset</span></span>(offset, x, y, num_rows) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">cond</span> <span class="keyword">do</span></span><br><span class="line">      y &lt; num_rows - <span class="number">1</span> &amp;&amp; x == <span class="number">0</span> -&gt;</span><br><span class="line">        gen_offset([&#123;x, y&#125; | offset], x, y + <span class="number">1</span>, num_rows)</span><br><span class="line">      x &lt; num_rows - <span class="number">1</span> -&gt;</span><br><span class="line">        gen_offset([&#123;x, y&#125; | offset], x + <span class="number">1</span>, y - <span class="number">1</span>, num_rows)</span><br><span class="line">      <span class="literal">true</span> -&gt;</span><br><span class="line">        offset</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">gen_map</span></span>(_, [], _, _, _, mp), <span class="symbol">do:</span> mp</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">gen_map</span></span>(step, [head | tail], offset, group_size, num_rows, mp) <span class="keyword">do</span></span><br><span class="line">    r = div(step, group_size)</span><br><span class="line">    i = rem(step, group_size)</span><br><span class="line">    op = elem(offset, i)</span><br><span class="line">    gen_map(</span><br><span class="line">      step + <span class="number">1</span>,</span><br><span class="line">      tail,</span><br><span class="line">      offset,</span><br><span class="line">      group_size,</span><br><span class="line">      num_rows,</span><br><span class="line">      <span class="title class_">Map</span>.put(mp, &#123;r * (num_rows - <span class="number">1</span>) + elem(op, <span class="number">0</span>), elem(op, <span class="number">1</span>)&#125;, head)</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">gen_str_i</span></span>(step, num_rows, str, w, mp) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> step &lt;= num_rows - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">      gen_str_i(step + <span class="number">1</span>, num_rows, gen_str_j(<span class="number">0</span>, str, w, mp, step), w, mp)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      str</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">gen_str_j</span></span>(step, str, w, mp, i) <span class="keyword">do</span></span><br><span class="line">    j = step</span><br><span class="line">    <span class="keyword">if</span> step &lt;= w <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> <span class="title class_">Map</span>.has_key?(mp, &#123;j, i&#125;) <span class="keyword">do</span></span><br><span class="line">        nc = <span class="title class_">Map</span>.get(mp, &#123;j, i&#125;)</span><br><span class="line">        gen_str_j(step + <span class="number">1</span>, str &lt;&gt; nc, w, mp, i)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        gen_str_j(step + <span class="number">1</span>, str, w, mp, i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      str</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 748 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 70.40 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00007.整数反转</title>
    <url>/zh-CN/7dbe0ca6a88b/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 [$−2^{31},  2^{31} − 1$] ，就返回 0。</p>
<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：x &#x3D; 123<br>输出：321</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：x &#x3D; -123<br>输出：-321</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：x &#x3D; 120<br>输出：21</p>
</blockquote>
<h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote>
<p>输入：x &#x3D; 0<br>输出：0</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$-2^{31} &lt;&#x3D; x &lt;&#x3D; 2^{31} - 1$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maximum = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">        <span class="type">int</span> minimum = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">min</span>();</span><br><span class="line">        <span class="type">int</span> sign = (x &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">abs</span>(x);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> reversed_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            reversed_num = reversed_num * <span class="number">10</span> + pop;</span><br><span class="line">            <span class="keyword">if</span> (reversed_num &gt; maximum || reversed_num &lt; minimum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign * reversed_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 6.39 MB, 击败 23.92% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MIN_VALUE</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> (x &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        x = Math.abs(x);</span><br><span class="line">        <span class="type">long</span> <span class="variable">reversedNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            reversedNum = reversedNum * <span class="number">10</span> + pop;</span><br><span class="line">            <span class="keyword">if</span> (reversedNum &gt; MAX_VALUE || reversedNum &lt; MIN_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (sign * reversedNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 47.24% 使用 Java 的用户</p>
<p>内存消耗 : 39.78 MB, 击败 5.22% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, x</span>):</span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        x = <span class="built_in">abs</span>(x)</span><br><span class="line">        reversed_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            pop = x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> reversed_num &gt; INT_MAX // <span class="number">10</span> <span class="keyword">or</span> (reversed_num == INT_MAX // <span class="number">10</span> <span class="keyword">and</span> pop &gt; <span class="number">7</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> reversed_num &lt; INT_MIN // <span class="number">10</span> <span class="keyword">or</span> (reversed_num == INT_MIN // <span class="number">10</span> <span class="keyword">and</span> pop &lt; -<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            reversed_num = reversed_num * <span class="number">10</span> + pop</span><br><span class="line">        <span class="keyword">return</span> sign * reversed_num</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 42.98% 使用 Python 的用户</p>
<p>内存消耗 : 13.20 MB, 击败 5.80% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        x = <span class="built_in">abs</span>(x)</span><br><span class="line">        reversed_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            pop = x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> reversed_num &gt; INT_MAX // <span class="number">10</span> <span class="keyword">or</span> (reversed_num == INT_MAX // <span class="number">10</span> <span class="keyword">and</span> pop &gt; <span class="number">7</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> reversed_num &lt; INT_MIN // <span class="number">10</span> <span class="keyword">or</span> (reversed_num == INT_MIN // <span class="number">10</span> <span class="keyword">and</span> pop &lt; -<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            reversed_num = reversed_num * <span class="number">10</span> + pop</span><br><span class="line">        <span class="keyword">return</span> sign * reversed_num</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 98.79% 使用 Python3 的用户</p>
<p>内存消耗 : 16.86 MB, 击败 5.02% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> upper_limit = INT_MAX / <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> lower_limit = INT_MIN / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (reversed &gt; upper_limit || (reversed == upper_limit &amp;&amp; digit &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reversed &lt; lower_limit || (reversed == lower_limit &amp;&amp; digit &lt; <span class="number">-8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 6.21 MB, 击败 50.59% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Reverse</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> reversed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (reversed &gt; <span class="built_in">int</span>.MaxValue / <span class="number">10</span> || (reversed == <span class="built_in">int</span>.MaxValue / <span class="number">10</span> &amp;&amp; digit &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reversed &lt; <span class="built_in">int</span>.MinValue / <span class="number">10</span> || (reversed == <span class="built_in">int</span>.MinValue / <span class="number">10</span> &amp;&amp; digit &lt; <span class="number">-8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 89.43% 使用 C# 的用户</p>
<p>内存消耗 : 25.87 MB, 击败 95.35% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">INT_MAX</span> = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">INT_MIN</span> = -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        x = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (reversed &gt; <span class="variable constant_">INT_MAX</span> / <span class="number">10</span> || (reversed === <span class="variable constant_">INT_MAX</span> / <span class="number">10</span> &amp;&amp; digit &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reversed &lt; <span class="variable constant_">INT_MIN</span> / <span class="number">10</span> || (reversed === <span class="variable constant_">INT_MIN</span> / <span class="number">10</span> &amp;&amp; digit &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reversed;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 77.92% 使用 JavaScript 的用户</p>
<p>内存消耗 : 42.45 MB, 击败 75.56% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">INT_MAX</span> = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">INT_MIN</span> = -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        x = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (reversed &gt; <span class="variable constant_">INT_MAX</span> / <span class="number">10</span> || (reversed === <span class="variable constant_">INT_MAX</span> / <span class="number">10</span> &amp;&amp; digit &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reversed &lt; <span class="variable constant_">INT_MIN</span> / <span class="number">10</span> || (reversed === <span class="variable constant_">INT_MIN</span> / <span class="number">10</span> &amp;&amp; digit &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 35.94% 使用 TypeScript 的用户</p>
<p>内存消耗 : 43.93 MB, 击败 75.78% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$reversed</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$INT_MAX</span> = <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$INT_MIN</span> = -<span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$x</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$digit</span> = <span class="variable">$x</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="variable">$x</span> = (<span class="keyword">int</span>)(<span class="variable">$x</span> / <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$reversed</span> &gt; <span class="variable">$INT_MAX</span> / <span class="number">10</span> || (<span class="variable">$reversed</span> == <span class="variable">$INT_MAX</span> / <span class="number">10</span> &amp;&amp; <span class="variable">$digit</span> &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$reversed</span> &lt; <span class="variable">$INT_MIN</span> / <span class="number">10</span> || (<span class="variable">$reversed</span> == <span class="variable">$INT_MIN</span> / <span class="number">10</span> &amp;&amp; <span class="variable">$digit</span> &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$reversed</span> = <span class="variable">$reversed</span> * <span class="number">10</span> + <span class="variable">$digit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$reversed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 68.57% 使用 PHP 的用户</p>
<p>内存消耗 : 19.14 MB, 击败 5.72% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">reverse</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> reversed <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MAX</span> <span class="operator">=</span> <span class="type">Int32</span>.max</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MIN</span> <span class="operator">=</span> <span class="type">Int32</span>.min</span><br><span class="line">        <span class="keyword">var</span> mutableX <span class="operator">=</span> x</span><br><span class="line">        <span class="keyword">while</span> mutableX <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> digit <span class="operator">=</span> mutableX <span class="operator">%</span> <span class="number">10</span></span><br><span class="line">            mutableX <span class="operator">/=</span> <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> reversed <span class="operator">&gt;</span> <span class="type">INT_MAX</span> <span class="operator">/</span> <span class="number">10</span> <span class="operator">||</span> (reversed <span class="operator">==</span> <span class="type">INT_MAX</span> <span class="operator">/</span> <span class="number">10</span> <span class="operator">&amp;&amp;</span> digit <span class="operator">&gt;</span> <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> reversed <span class="operator">&lt;</span> <span class="type">INT_MIN</span> <span class="operator">/</span> <span class="number">10</span> <span class="operator">||</span> (reversed <span class="operator">==</span> <span class="type">INT_MIN</span> <span class="operator">/</span> <span class="number">10</span> <span class="operator">&amp;&amp;</span> digit <span class="operator">&lt;</span> <span class="operator">-</span><span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            reversed <span class="operator">=</span> reversed <span class="operator">*</span> <span class="number">10</span> <span class="operator">+</span> digit</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 22.22% 使用 Swift 的用户</p>
<p>内存消耗 : 14.84 MB, 击败 5.56% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reverse</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> reversed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line">        <span class="keyword">var</span> mutableX = x</span><br><span class="line">        <span class="keyword">while</span> (mutableX != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> digit = mutableX % <span class="number">10</span></span><br><span class="line">            mutableX /= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> (reversed &gt; INT_MAX / <span class="number">10</span> || (reversed == INT_MAX / <span class="number">10</span> &amp;&amp; digit &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reversed &lt; INT_MIN / <span class="number">10</span> || (reversed == INT_MIN / <span class="number">10</span> &amp;&amp; digit &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 132 ms, 击败 93.18% 使用 Kotlin 的用户</p>
<p>内存消耗 : 32.98 MB, 击败 70.45% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> reverse(<span class="built_in">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">-10</span> &amp;&amp; x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> minInt = <span class="number">-2147483648</span>;</span><br><span class="line">    <span class="keyword">final</span> maxInt = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="built_in">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      sign = <span class="number">-1</span>;</span><br><span class="line">      x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sign * res &lt; minInt ~/ <span class="number">10</span> || sign * res &gt; maxInt ~/ <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">      x ~/= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign * res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 148.46 MB, 击败 90.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">-10</span> &amp;&amp; x &lt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    minInt := <span class="number">-2147483648</span></span><br><span class="line">    maxInt := <span class="number">2147483647</span></span><br><span class="line">    sign := <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        sign = <span class="number">-1</span></span><br><span class="line">        x = -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> x != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> sign*res &lt; minInt/<span class="number">10</span> || sign*res &gt; maxInt/<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = res*<span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">        x /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign * res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 26.89% 使用 Go 的用户</p>
<p>内存消耗 : 2.02 MB, 击败 23.89% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">x</span>)</span><br><span class="line">    abs = <span class="number">1</span></span><br><span class="line">    abs = -<span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">0</span></span><br><span class="line">    reversed = x.abs.to_s.reverse.to_i * abs</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> -<span class="number">2</span>**<span class="number">31</span> &lt;= reversed &amp;&amp; reversed &lt; <span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">return</span> reversed</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.73 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">-10</span> &amp;&amp; x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> minInt = <span class="number">-2147483648</span></span><br><span class="line">        <span class="keyword">val</span> maxInt = <span class="number">2147483647</span></span><br><span class="line">        <span class="keyword">var</span> reversed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> num = x</span><br><span class="line">        <span class="keyword">var</span> sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            sign = <span class="number">-1</span></span><br><span class="line">            num = -x</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> digit = num % <span class="number">10</span></span><br><span class="line">            num /= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> (sign * reversed &lt; minInt / <span class="number">10</span> || sign * reversed &gt; maxInt / <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit</span><br><span class="line">        &#125;</span><br><span class="line">        sign * reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 424 ms, 击败 66.67% 使用 Scala 的用户</p>
<p>内存消耗 : 51.57 MB, 击败 16.67% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">reverse</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x &gt; -<span class="number">10</span> &amp;&amp; x &lt; <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">min_int</span> = <span class="type">i32</span>::MIN;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">max_int</span> = <span class="type">i32</span>::MAX;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">reversed</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = x;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sign</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">            sign = -<span class="number">1</span>;</span><br><span class="line">            num = -x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">digit</span> = num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> sign * reversed &lt; min_int / <span class="number">10</span> || sign * reversed &gt; max_int / <span class="number">10</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        sign * reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.16 MB, 击败 16.03% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">reverse</span></span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> _reverse</span><br><span class="line">    (<span class="name"><span class="built_in">lambda</span></span> (ls)</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> ls)</span><br><span class="line">          &#x27;()</span><br><span class="line">          (<span class="name"><span class="built_in">append</span></span> (<span class="name">_reverse</span> (<span class="name"><span class="built_in">cdr</span></span> ls)) (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">car</span></span> ls))))))</span><br><span class="line">  (<span class="name"><span class="built_in">let*</span></span> ((<span class="name">to-list</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> (<span class="name"><span class="built_in">number-&gt;string</span></span> (<span class="name"><span class="built_in">abs</span></span> x))))</span><br><span class="line">         (<span class="name">reversed-list</span> (<span class="name">_reverse</span> to-list))</span><br><span class="line">         (<span class="name">reversed-str</span> (<span class="name"><span class="built_in">list-&gt;string</span></span> reversed-list))</span><br><span class="line">         (<span class="name">reversed-num</span> (<span class="name"><span class="built_in">string-&gt;number</span></span> reversed-str))</span><br><span class="line">         (<span class="name">reversed</span> (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>) (<span class="name"><span class="built_in">-</span></span> <span class="number">0</span> reversed-num) reversed-num)))</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">&gt;=</span></span> reversed <span class="number">-2147483648</span>) (<span class="name"><span class="built_in">&lt;=</span></span> reversed <span class="number">2147483647</span>))</span><br><span class="line">        reversed</span><br><span class="line">        <span class="number">0</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 98.86 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-export</span><span class="params">([reverse/<span class="number">1</span>])</span>.</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">(X)</span> <span class="title">when</span> X &gt;= -9, X =&lt; 9 -&gt;</span></span><br><span class="line">    X;</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">(X)</span> -&gt;</span></span><br><span class="line">    Sign = <span class="keyword">if</span> X &lt; <span class="number">0</span> -&gt; -<span class="number">1</span>; <span class="literal">true</span> -&gt; <span class="number">1</span> <span class="keyword">end</span>,</span><br><span class="line">    AbsX = abs(X),</span><br><span class="line">    Reversed = reverse_helper(AbsX, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">case</span> Reversed * Sign <span class="keyword">of</span></span><br><span class="line">        Result <span class="keyword">when</span> Result &gt;= -<span class="number">2147483648</span>, Result =&lt; <span class="number">2147483647</span> -&gt; Result;</span><br><span class="line">        _ -&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span>.</span><br><span class="line"><span class="function"><span class="title">reverse_helper</span><span class="params">(<span class="number">0</span>, Acc)</span> -&gt;</span></span><br><span class="line">    Acc;</span><br><span class="line"><span class="function"><span class="title">reverse_helper</span><span class="params">(X, Acc)</span> -&gt;</span></span><br><span class="line">    Digit = X <span class="keyword">rem</span> <span class="number">10</span>,</span><br><span class="line">    NewAcc = Acc * <span class="number">10</span> + Digit,</span><br><span class="line">    NewX = X <span class="keyword">div</span> <span class="number">10</span>,</span><br><span class="line">    reverse_helper(NewX, NewAcc).</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 256 ms, 击败 -% 使用 Erlang 的用户</p>
<p>内存消耗 : 55.36 MB, 击败 -% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> reverse(x :: integer) :: integer</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverse</span></span>(x) <span class="keyword">when</span> x <span class="keyword">in</span> <span class="number">-9</span>..<span class="number">9</span> <span class="keyword">do</span></span><br><span class="line">    x</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverse</span></span>(x) <span class="keyword">do</span></span><br><span class="line">    sign = <span class="keyword">if</span> x &lt; <span class="number">0</span>, <span class="symbol">do:</span> <span class="number">-1</span>, <span class="symbol">else:</span> <span class="number">1</span></span><br><span class="line">    abs_x = abs(x)</span><br><span class="line">    reversed = reverse_helper(abs_x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> reversed * sign <span class="keyword">do</span></span><br><span class="line">      result <span class="keyword">when</span> result &gt;= <span class="number">-2147483648</span> <span class="keyword">and</span> result &lt;= <span class="number">2147483647</span> -&gt; result</span><br><span class="line">      _ -&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">reverse_helper</span></span>(<span class="number">0</span>, acc), <span class="symbol">do:</span> acc</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">reverse_helper</span></span>(x, acc) <span class="keyword">do</span></span><br><span class="line">    digit = rem(x, <span class="number">10</span>)</span><br><span class="line">    new_acc = acc * <span class="number">10</span> + digit</span><br><span class="line">    new_x = div(x, <span class="number">10</span>)</span><br><span class="line">    reverse_helper(new_x, new_acc)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 304 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 68.14 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00008.字符串转换整数(atoi)</title>
    <url>/zh-CN/b9627de17441/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 atoi 函数）。</p>
<p>函数 myAtoi(string s) 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>
<li>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li>
<li>如果整数数超过 32 位有符号整数范围 [$−2^{31},  2^{31} − 1$] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 $−2^{31}$ 的整数应该被固定为 $−2^{31}$ ，大于 $2^{31} − 1$ 的整数应该被固定为 $2^{31} − 1$ 。</li>
<li>返回整数作为最终结果。</li>
</ol>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><blockquote>
<p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</p>
</blockquote>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “42”<br>输出：42<br>解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。<br>第 1 步：”42”（当前没有读入字符，因为没有前导空格）<br>第 2 步：”42”（当前没有读入字符，因为这里不存在 ‘-‘ 或者 ‘+’）<br>第 3 步：”42”（读入 “42”）<br>解析得到整数 42 。<br>由于 “42” 在范围 [$−2^{31}, 2^{31} − 1$] 内，最终结果为 42 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “&nbsp;&nbsp;&nbsp;-42”<br>输出：-42<br>解释：<br>第 1 步：”&nbsp;&nbsp;&nbsp;-42”（读入前导空格，但忽视掉）<br>第 2 步：”&nbsp;&nbsp;&nbsp;-42”（读入 ‘-‘ 字符，所以结果应该是负数）<br>第 3 步：”&nbsp;&nbsp;&nbsp;-42”（读入 “42”）<br>解析得到整数 -42 。<br>由于 “-42” 在范围 [$−2^{31}, 2^{31} − 1$] 内，最终结果为 -42 。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “4193 with words”<br>输出：4193<br>解释：<br>第 1 步：”4193 with words”（当前没有读入字符，因为没有前导空格）<br>第 2 步：”4193 with words”（当前没有读入字符，因为这里不存在 ‘-‘ 或者 ‘+’）<br>第 3 步：”4193 with words”（读入 “4193”；由于下一个字符不是一个数字，所以读入停止）<br>解析得到整数 4193 。<br>由于 “4193” 在范围 [$−2^{31}, 2^{31} − 1$] 内，最终结果为 4193 。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>0 &lt;&#x3D; s.length &lt;&#x3D; 200</li>
<li>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        s.<span class="built_in">erase</span>(<span class="number">0</span>, s.<span class="built_in">find_first_not_of</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = (s[i++] == <span class="string">&#x27;-&#x27;</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">length</span>() &amp;&amp; <span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + (s[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (result * sign &gt;= INT_MAX)</span><br><span class="line">                <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= INT_MIN)</span><br><span class="line">                <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 6.43 MB, 击败 68.82% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;+&#x27;</span> || s.charAt(i) == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = (s.charAt(i++) == <span class="string">&#x27;-&#x27;</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + (s.charAt(i++) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (result * sign &gt;= Integer.MAX_VALUE)</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= Integer.MIN_VALUE)</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (result * sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.44 MB, 击败 6.90% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">self, s</span>):</span><br><span class="line">        s = s.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            sign = -<span class="number">1</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">            result = result * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> result * sign &gt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> result * sign &lt;= -<span class="number">2</span>**<span class="number">31</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">return</span> result * sign</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 82.57% 使用 Python 的用户</p>
<p>内存消耗 : 13.01 MB, 击败 77.81% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        s = s.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            sign = -<span class="number">1</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">            result = result * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> result * sign &gt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> result * sign &lt;= -<span class="number">2</span>**<span class="number">31</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">return</span> result * sign</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 76.98% 使用 Python3 的用户</p>
<p>内存消耗 : 16.98 MB, 击败 5.10% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s &amp;&amp; <span class="built_in">isspace</span>(*s)) &#123;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*s == <span class="string">&#x27;-&#x27;</span> || *s == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        sign = (*s == <span class="string">&#x27;-&#x27;</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s &amp;&amp; <span class="built_in">isdigit</span>(*s)) &#123;</span><br><span class="line">        result = result * <span class="number">10</span> + (*s - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (result * sign &gt;= INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(result * sign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 6.07 MB, 击败 98.05% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MyAtoi</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(s))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        s = s.Trim();</span><br><span class="line">        <span class="built_in">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = (s[i++] == <span class="string">&#x27;-&#x27;</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.Length &amp;&amp; <span class="built_in">char</span>.IsDigit(s[i])) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + (s[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (result * sign &gt;= <span class="built_in">int</span>.MaxValue)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>.MaxValue;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= <span class="built_in">int</span>.MinValue)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>.MinValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)(result * sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 93.48% 使用 C# 的用户</p>
<p>内存消耗 : 38.67 MB, 击败 23.48% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myAtoi = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    s = s.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (!s)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[i] === <span class="string">&#x27;+&#x27;</span> || s[i] === <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        sign = (s[i++] === <span class="string">&#x27;-&#x27;</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.<span class="property">length</span> &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(s[i]))) &#123;</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">parseInt</span>(s[i++]);</span><br><span class="line">        <span class="keyword">if</span> (result * sign &gt;= <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result * sign;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 58.19% 使用 JavaScript 的用户</p>
<p>内存消耗 : 43.27 MB, 击败 48.14% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAtoi</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    s = s.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (!s)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[i] === <span class="string">&#x27;+&#x27;</span> || s[i] === <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        sign = (s[i++] === <span class="string">&#x27;-&#x27;</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.<span class="property">length</span> &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(s[i]))) &#123;</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">parseInt</span>(s[i++]);</span><br><span class="line">        <span class="keyword">if</span> (result * sign &gt;= <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result * sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 24.75% 使用 TypeScript 的用户</p>
<p>内存消耗 : 44.51 MB, 击败 64.64% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myAtoi</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$s</span> === <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$sign</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$s</span>[<span class="variable">$i</span>] === <span class="string">&#x27;+&#x27;</span> || <span class="variable">$s</span>[<span class="variable">$i</span>] === <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$sign</span> = (<span class="variable">$s</span>[<span class="variable">$i</span>++] === <span class="string">&#x27;-&#x27;</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$s</span>[<span class="variable">$i</span>])) &#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$result</span> * <span class="number">10</span> + (<span class="keyword">int</span>)(<span class="variable">$s</span>[<span class="variable">$i</span>++]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span> * <span class="variable">$sign</span> &gt;= <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$result</span> * <span class="variable">$sign</span> &lt;= -<span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span> * <span class="variable">$sign</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 26.09% 使用 PHP 的用户</p>
<p>内存消耗 : 19.36 MB, 击败 8.70% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">myAtoi</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> trimmed <span class="operator">=</span> s.trimmingCharacters(in: .whitespaces)</span><br><span class="line">        <span class="keyword">if</span> trimmed.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sign <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> trimmed.startIndex</span><br><span class="line">        <span class="keyword">if</span> trimmed[i] <span class="operator">==</span> <span class="string">&quot;+&quot;</span> <span class="operator">||</span> trimmed[i] <span class="operator">==</span> <span class="string">&quot;-&quot;</span> &#123;</span><br><span class="line">            sign <span class="operator">=</span> trimmed[i] <span class="operator">==</span> <span class="string">&quot;-&quot;</span> <span class="operator">?</span> <span class="operator">-</span><span class="number">1</span> : <span class="number">1</span></span><br><span class="line">            i <span class="operator">=</span> trimmed.index(after: i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i <span class="operator">&lt;</span> trimmed.endIndex <span class="operator">&amp;&amp;</span> trimmed[i].isNumber &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> digit <span class="operator">=</span> <span class="type">Int</span>(<span class="type">String</span>(trimmed[i])) &#123;</span><br><span class="line">                result <span class="operator">=</span> result <span class="operator">*</span> <span class="number">10</span> <span class="operator">+</span> digit</span><br><span class="line">                <span class="keyword">if</span> result <span class="operator">*</span> sign <span class="operator">&gt;=</span> <span class="type">Int32</span>.max &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">Int32</span>.max)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> result <span class="operator">*</span> sign <span class="operator">&lt;=</span> <span class="type">Int32</span>.min &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">Int32</span>.min)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i <span class="operator">=</span> trimmed.index(after: i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result <span class="operator">*</span> sign</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 27.50% 使用 Swift 的用户</p>
<p>内存消耗 : 16.10 MB, 击败 5.00% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">myAtoi</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> trimmed = s.trim()</span><br><span class="line">        <span class="keyword">if</span> (trimmed.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (trimmed[i] == <span class="string">&#x27;+&#x27;</span> || trimmed[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = <span class="keyword">if</span> (trimmed[i] == <span class="string">&#x27;-&#x27;</span>) -<span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0L</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; trimmed.length &amp;&amp; trimmed[i].isDigit()) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + (trimmed[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (result * sign &gt;= <span class="built_in">Int</span>.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result * sign &lt;= <span class="built_in">Int</span>.MIN_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line">            &#125;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (result * sign).toInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 16.22% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.90 MB, 击败 29.73% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> myAtoi(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    s = s.trim();</span><br><span class="line">    <span class="built_in">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> maxVal = (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> minVal = -(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        sign = <span class="number">-1</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length &amp;&amp; s[i].compareTo(<span class="string">&#x27;0&#x27;</span>) &gt;= <span class="number">0</span> &amp;&amp; s[i].compareTo(<span class="string">&#x27;9&#x27;</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> digit = s.codeUnitAt(i) - <span class="string">&#x27;0&#x27;</span>.codeUnitAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; (maxVal - digit) ~/ <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sign == <span class="number">1</span> ? maxVal : minVal;</span><br><span class="line">        &#125;</span><br><span class="line">        result = result * <span class="number">10</span> + digit;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result * sign;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 340 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 143.98 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    s = strings.TrimSpace(s)</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    sign := <span class="number">1</span></span><br><span class="line">    result := <span class="number">0</span></span><br><span class="line">    maxVal := <span class="type">int</span>(math.Pow(<span class="number">2</span>, <span class="number">31</span>)) - <span class="number">1</span></span><br><span class="line">    minVal := -<span class="type">int</span>(math.Pow(<span class="number">2</span>, <span class="number">31</span>))</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">        sign = <span class="number">-1</span></span><br><span class="line">        i++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;+&#x27;</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(s) &amp;&amp; unicode.IsDigit(<span class="type">rune</span>(s[i])) &#123;</span><br><span class="line">        digit := <span class="type">int</span>(s[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> result &gt; (maxVal-digit)/<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> sign == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> maxVal</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> minVal</span><br><span class="line">        &#125;</span><br><span class="line">        result = result*<span class="number">10</span> + digit</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result * sign</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.02 MB, 击败 100.00% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_atoi</span>(<span class="params">s</span>)</span><br><span class="line">    s = s.strip</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> s.empty?</span><br><span class="line">    sign = <span class="number">1</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    max_val = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">    min_val = -(<span class="number">2</span>**<span class="number">31</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span></span><br><span class="line">        sign = -<span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> s[i] == <span class="string">&#x27;+&#x27;</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; s.length &amp;&amp; s[i].match?(<span class="regexp">/\d/</span>)</span><br><span class="line">        digit = s[i].to_i</span><br><span class="line">        <span class="keyword">if</span> result &gt; (max_val - digit) / <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> sign == <span class="number">1</span> ? max_val : min_val</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        result = result * <span class="number">10</span> + digit</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result * sign</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 -% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.60 MB, 击败 33.33% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> trimmed = s.trim</span><br><span class="line">    <span class="keyword">if</span> (trimmed.isEmpty) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> sign = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> maxVal = <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">    <span class="keyword">val</span> minVal = <span class="type">Int</span>.<span class="type">MinValue</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (trimmed(i) == &#x27;-&#x27;) &#123;</span><br><span class="line">      sign = <span class="number">-1</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (trimmed(i) == &#x27;+&#x27;) &#123;</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; trimmed.length &amp;&amp; trimmed(i).isDigit) &#123;</span><br><span class="line">      <span class="keyword">val</span> digit = trimmed(i).asDigit</span><br><span class="line">      <span class="keyword">if</span> (result &gt; (maxVal - digit) / <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (sign == <span class="number">1</span>) maxVal <span class="keyword">else</span> minVal</span><br><span class="line">      &#125;</span><br><span class="line">      result = result * <span class="number">10</span> + digit</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    result * sign</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 480 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 54.23 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">my_atoi</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">trimmed</span> = s.<span class="title function_ invoke__">trim</span>();</span><br><span class="line">        <span class="keyword">if</span> trimmed.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sign</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">i64</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">max_val</span> = <span class="type">i32</span>::MAX <span class="keyword">as</span> <span class="type">i64</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">min_val</span> = <span class="type">i32</span>::MIN <span class="keyword">as</span> <span class="type">i64</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> trimmed.<span class="title function_ invoke__">as_bytes</span>()[i] <span class="keyword">as</span> <span class="type">char</span> == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">            sign = -<span class="number">1</span>;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> trimmed.<span class="title function_ invoke__">as_bytes</span>()[i] <span class="keyword">as</span> <span class="type">char</span> == <span class="string">&#x27;+&#x27;</span> &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; trimmed.<span class="title function_ invoke__">len</span>() &amp;&amp; (trimmed.<span class="title function_ invoke__">as_bytes</span>()[i] <span class="keyword">as</span> <span class="type">char</span>).<span class="title function_ invoke__">is_digit</span>(<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">digit</span> = trimmed.<span class="title function_ invoke__">as_bytes</span>()[i] <span class="keyword">as</span> <span class="type">char</span>;</span><br><span class="line">            result = result * <span class="number">10</span> + digit.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>() <span class="keyword">as</span> <span class="type">i64</span>;</span><br><span class="line">            <span class="keyword">if</span> result * sign &gt;= max_val &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">i32</span>::MAX;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> result * sign &lt;= min_val &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">i32</span>::MIN;</span><br><span class="line">            &#125;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result <span class="keyword">as</span> <span class="type">i32</span> * sign <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.01 MB, 击败 59.21% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> my_atoi<span class="params">(S :: unicode:unicode_binary())</span> -&gt; integer<span class="params">()</span>.</span><br><span class="line"><span class="function"><span class="title">my_atoi</span><span class="params">(S)</span> -&gt;</span></span><br><span class="line">    Str = unicode:characters_to_list(S),</span><br><span class="line">    Str2 = string:strip(Str),</span><br><span class="line">    <span class="keyword">case</span> string:to_integer(Str2) <span class="keyword">of</span></span><br><span class="line">        &#123;Num, _&#125; <span class="keyword">when</span> is_integer(Num) -&gt;</span><br><span class="line">            <span class="keyword">case</span> &#123;Num &lt; -<span class="number">2147483648</span>, Num &gt; <span class="number">2147483647</span>&#125; <span class="keyword">of</span></span><br><span class="line">                &#123;true, false&#125; -&gt; -<span class="number">2147483648</span>;</span><br><span class="line">                &#123;false, true&#125; -&gt; <span class="number">2147483647</span>;</span><br><span class="line">                &#123;false, false&#125; -&gt; Num</span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        _ -&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 288 ms, 击败 100.00% 使用 Erlang 的用户</p>
<p>内存消耗 : 59.31 MB, 击败 100.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00009.回文数</title>
    <url>/zh-CN/b80f588f5148/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p>例如，121 是回文，而 123 不是。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：x &#x3D; 121<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：x &#x3D; -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：x &#x3D; 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$-2^{31} &lt;&#x3D; x &lt;&#x3D; 2^{31} - 1$</li>
</ul>
<h2 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h2><p>你能不将整数转为字符串来解决这个问题吗？</p>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::string strX = std::<span class="built_in">to_string</span>(x);</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = strX.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strX[left] != strX[right]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 52.12% 使用 C++ 的用户</p>
<p>内存消耗 : 6.23 MB, 击败 43.77% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strX</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> strX.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strX.charAt(left) != strX.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 55.42% 使用 Java 的用户</p>
<p>内存消耗 : 42.70 MB, 击败 9.49% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        str_x = <span class="built_in">str</span>(x)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(str_x) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> str_x[left] != str_x[right]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 82 ms, 击败 81.38% 使用 Python 的用户</p>
<p>内存消耗 : 12.87 MB, 击败 85.78% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        str_x = <span class="built_in">str</span>(x)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(str_x) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> str_x[left] != str_x[right]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 92.88% 使用 Python3 的用户</p>
<p>内存消耗 : 17.05 MB, 击败 5.11% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> original = x;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        reversed = reversed * <span class="number">10LL</span> + digit;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> original == reversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 77.34% 使用 C 的用户</p>
<p>内存消耗 : 6.36 MB, 击败 88.88% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsPalindrome</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> original = x;</span><br><span class="line">        <span class="built_in">int</span> reversed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original == reversed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 51.96% 使用 C# 的用户</p>
<p>内存消耗 : 30.38 MB, 击败 32.71% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> original = x;</span><br><span class="line">    <span class="keyword">let</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">        x = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> original === reversed;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 172 ms, 击败 25.28% 使用 JavaScript 的用户</p>
<p>内存消耗 : 55.16 MB, 击败 6.23% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindrome</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> original = x;</span><br><span class="line">    <span class="keyword">let</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> digit = x % <span class="number">10</span>;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">        x = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> original === reversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 144 ms, 击败 78.49% 使用 TypeScript 的用户</p>
<p>内存消耗 : 55.14 MB, 击败 7.92% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$original</span> = <span class="variable">$x</span>;</span><br><span class="line">        <span class="variable">$reversed</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$x</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$digit</span> = <span class="variable">$x</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="variable">$reversed</span> = <span class="variable">$reversed</span> * <span class="number">10</span> + <span class="variable">$digit</span>;</span><br><span class="line">            <span class="variable">$x</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$x</span> / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$original</span> === <span class="variable">$reversed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 68.75% 使用 PHP 的用户</p>
<p>内存消耗 : 19.27 MB, 击败 9.38% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isPalindrome</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> original <span class="operator">=</span> x</span><br><span class="line">        <span class="keyword">var</span> reversed <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> num <span class="operator">=</span> x</span><br><span class="line">        <span class="keyword">while</span> num <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> digit <span class="operator">=</span> num <span class="operator">%</span> <span class="number">10</span></span><br><span class="line">            reversed <span class="operator">=</span> reversed <span class="operator">*</span> <span class="number">10</span> <span class="operator">+</span> digit</span><br><span class="line">            num <span class="operator">/=</span> <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original <span class="operator">==</span> reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 79.49% 使用 Swift 的用户</p>
<p>内存消耗 : 15.09 MB, 击败 5.13% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isPalindrome</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> original = x</span><br><span class="line">        <span class="keyword">var</span> reversed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> num = x</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> digit = num % <span class="number">10</span></span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit</span><br><span class="line">            num /= <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original == reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 200 ms, 击败 85.11% 使用 Kotlin 的用户</p>
<p>内存消耗 : 35.91 MB, 击败 45.75% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isPalindrome(<span class="built_in">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> strX = x.toString();</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = strX.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (strX[left] != strX[right]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      left++;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 496 ms, 击败 11.76% 使用 Dart 的用户</p>
<p>内存消耗 : 146.45 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    strX := strconv.Itoa(x)</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(strX)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">if</span> strX[left] != strX[right] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 66.98% 使用 Go 的用户</p>
<p>内存消耗 : 4.36 MB, 击败 22.27% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">x</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> x &lt; <span class="number">0</span></span><br><span class="line">    str_x = x.to_s</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = str_x.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> str_x[left] != str_x[right]</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 69.23% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.53 MB, 击败 7.69% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> strX = x.toString</span><br><span class="line">            <span class="keyword">val</span> len = strX.length</span><br><span class="line">            <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> right = len - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (strX(left) != strX(right)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 504 ms, 击败 66.67% 使用 Scala 的用户</p>
<p>内存消耗 : 52.84 MB, 击败 79.17% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_palindrome</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = x;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">reversed</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">original</span> = x;</span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">digit</span> = num % <span class="number">10</span>;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        original == reversed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 76.59% 使用 Rust 的用户</p>
<p>内存消耗 : 2.08 MB, 击败 38.68% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">is-palindrome</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-number</span> n)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">num</span> n) (<span class="name">reversed</span> <span class="number">0</span>))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> num <span class="number">0</span>)</span><br><span class="line">          reversed</span><br><span class="line">          (<span class="name">loop</span> (<span class="name"><span class="built_in">quotient</span></span> num <span class="number">10</span>) (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">*</span></span> reversed <span class="number">10</span>) (<span class="name"><span class="built_in">remainder</span></span> num <span class="number">10</span>))))))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>)</span><br><span class="line">      <span class="literal">#f</span></span><br><span class="line">      (<span class="name"><span class="built_in">=</span></span> x (<span class="name">reverse-number</span> x))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 300 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 121.48 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-export</span><span class="params">([is_palindrome/<span class="number">1</span>])</span>.</span><br><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(X)</span> <span class="title">when</span> X &lt; 0 -&gt;</span></span><br><span class="line">    <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(X)</span> -&gt;</span></span><br><span class="line">    is_palindrome(X, <span class="number">0</span>, X).</span><br><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(<span class="number">0</span>, Rev, Original)</span> -&gt;</span></span><br><span class="line">    Original =:= Rev;</span><br><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(Num, Rev, Original)</span> -&gt;</span></span><br><span class="line">    Digit = Num <span class="keyword">rem</span> <span class="number">10</span>,</span><br><span class="line">    NewRev = Rev * <span class="number">10</span> + Digit,</span><br><span class="line">    NewNum = Num <span class="keyword">div</span> <span class="number">10</span>,</span><br><span class="line">    is_palindrome(NewNum, NewRev, Original).</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1144 ms, 击败 -% 使用 Erlang 的用户</p>
<p>内存消耗 : 55.36 MB, 击败 -% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> is_palindrome(x :: integer) :: boolean</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span></span>(x) <span class="keyword">when</span> x &lt; <span class="number">0</span>, <span class="symbol">do:</span> <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span></span>(x) <span class="keyword">do</span></span><br><span class="line">    is_palindrome(x, <span class="number">0</span>, x)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">is_palindrome</span></span>(<span class="number">0</span>, rev, original), <span class="symbol">do:</span> original == rev</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">is_palindrome</span></span>(num, rev, original) <span class="keyword">do</span></span><br><span class="line">    digit = rem(num, <span class="number">10</span>)</span><br><span class="line">    new_rev = rev * <span class="number">10</span> + digit</span><br><span class="line">    new_num = div(num, <span class="number">10</span>)</span><br><span class="line">    is_palindrome(new_num, new_rev, original)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1056 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 67.73 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00010.正则表达式匹配</title>
    <url>/zh-CN/3b504d42a3b9/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<ul>
<li>‘.’ 匹配任意单个字符</li>
<li>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “aa”, p &#x3D; “a”<br>输出：false<br>解释：”a” 无法匹配 “aa” 整个字符串。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “aa”, p &#x3D; “a*”<br>输出：true<br>解释：因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “ab”, p &#x3D; “.<em>“<br>输出：true<br>解释：”.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 20</li>
<li>1 &lt;&#x3D; p.length &lt;&#x3D; 20</li>
<li>s 只包含从 a-z 的小写字母。</li>
<li>p 只包含从 a-z 的小写字母，以及字符 . 和 *。</li>
<li>保证每次出现字符 * 时，前面都匹配到有效的字符</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n = p.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 88.69% 使用 C++ 的用户</p>
<p>内存消耗 : 6.96 MB, 击败 71.57% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span> || p.charAt(j - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.96 MB, 击败 14.24% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s, p</span>):</span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] <span class="keyword">or</span> (dp[i - <span class="number">1</span>][j] <span class="keyword">and</span> (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] <span class="keyword">or</span> p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 48.50% 使用 Python 的用户</p>
<p>内存消耗 : 12.98 MB, 击败 65.87% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] <span class="keyword">or</span> (dp[i - <span class="number">1</span>][j] <span class="keyword">and</span> (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] <span class="keyword">or</span> p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 90.66% 使用 Python3 的用户</p>
<p>内存消耗 : 17.07 MB, 击败 5.29% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isMatch</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="type">bool</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="literal">false</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 85.05% 使用 C 的用户</p>
<p>内存消耗 : 6.22 MB, 击败 51.22% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> p</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = s.Length;</span><br><span class="line">        <span class="built_in">int</span> n = p.Length;</span><br><span class="line">        <span class="built_in">bool</span>[,] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[m + <span class="number">1</span>, n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>, <span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>, j] = dp[<span class="number">0</span>, j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i, j] = dp[i - <span class="number">1</span>, j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i, j] = dp[i, j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>, j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m, n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 98.17% 使用 C# 的用户</p>
<p>内存消耗 : 39.55 MB, 击败 38.53% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">p</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="keyword">function</span>(<span class="params">s, p</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] === p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] === <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 95.81% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.29 MB, 击败 6.59% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">s: <span class="built_in">string</span>, p: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">m</span>: <span class="built_in">number</span> = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dp</span>: <span class="built_in">boolean</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] === p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] === <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 83.00% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.92 MB, 击败 5.00% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$m</span> + <span class="number">1</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span> + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="variable">$dp</span>[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">2</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span> - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="variable">$m</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">1</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || <span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] == <span class="variable">$s</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span> - <span class="number">2</span>] || (<span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span>] &amp;&amp; (<span class="variable">$s</span>[<span class="variable">$i</span> - <span class="number">1</span>] == <span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">2</span>] || <span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$m</span>][<span class="variable">$n</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.39 MB, 击败 7.69% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isMatch</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">p</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m <span class="operator">=</span> s.count</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> p.count</span><br><span class="line">        <span class="keyword">var</span> dp <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="literal">false</span>, count: n <span class="operator">+</span> <span class="number">1</span>), count: m <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">let</span> sArr <span class="operator">=</span> <span class="type">Array</span>(s)</span><br><span class="line">        <span class="keyword">let</span> pArr <span class="operator">=</span> <span class="type">Array</span>(p)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">2</span>, through: n, by: <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> pArr[j <span class="operator">-</span> <span class="number">1</span>] <span class="operator">==</span> <span class="string">&quot;*&quot;</span> &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] <span class="operator">=</span> dp[<span class="number">0</span>][j <span class="operator">-</span> <span class="number">2</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">1</span>, through: m, by: <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">1</span>, through: n, by: <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> pArr[j <span class="operator">-</span> <span class="number">1</span>] <span class="operator">==</span> <span class="string">&quot;.&quot;</span> <span class="operator">||</span> pArr[j <span class="operator">-</span> <span class="number">1</span>] <span class="operator">==</span> sArr[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] <span class="operator">=</span> dp[i <span class="operator">-</span> <span class="number">1</span>][j <span class="operator">-</span> <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> pArr[j <span class="operator">-</span> <span class="number">1</span>] <span class="operator">==</span> <span class="string">&quot;*&quot;</span> &#123;</span><br><span class="line">                    dp[i][j] <span class="operator">=</span> dp[i][j <span class="operator">-</span> <span class="number">2</span>] <span class="operator">||</span> (dp[i <span class="operator">-</span> <span class="number">1</span>][j] <span class="operator">&amp;&amp;</span> (sArr[i <span class="operator">-</span> <span class="number">1</span>] <span class="operator">==</span> pArr[j <span class="operator">-</span> <span class="number">2</span>] <span class="operator">||</span> pArr[j <span class="operator">-</span> <span class="number">2</span>] <span class="operator">==</span> <span class="string">&quot;.&quot;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.19 MB, 击败 7.14% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isMatch</span><span class="params">(s: <span class="type">String</span>, p: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> m = s.length</span><br><span class="line">        <span class="keyword">val</span> n = p.length</span><br><span class="line">        <span class="keyword">val</span> dp = Array(m + <span class="number">1</span>) &#123; BooleanArray(n + <span class="number">1</span>) &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">2.</span>.n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 164 ms, 击败 70.83% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.23 MB, 击败 70.83% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bool</span> isMatch(<span class="built_in">String</span> s, <span class="built_in">String</span> p) &#123;</span><br><span class="line">    <span class="built_in">int</span> m = s.length;</span><br><span class="line">    <span class="built_in">int</span> n = p.length;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt;&gt; dp = <span class="built_in">List</span>.generate(m + <span class="number">1</span>, (_) =&gt; <span class="built_in">List</span>.filled(n + <span class="number">1</span>, <span class="keyword">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 332 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.81 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="type">string</span>, p <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">len</span>(s)</span><br><span class="line">    n := <span class="built_in">len</span>(p)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">bool</span>, m+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">2</span>; j &lt;= n; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span> || p[j<span class="number">-1</span>] == s[i<span class="number">-1</span>] &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i][j<span class="number">-2</span>] || (dp[i<span class="number">-1</span>][j] &amp;&amp; (s[i<span class="number">-1</span>] == p[j<span class="number">-2</span>] || p[j<span class="number">-2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.16 MB, 击败 46.23% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; p</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_match</span>(<span class="params">s, p</span>)</span><br><span class="line">    m = s.length</span><br><span class="line">    n = p.length</span><br><span class="line">    dp = <span class="title class_">Array</span>.new(m + <span class="number">1</span>) &#123; <span class="title class_">Array</span>.new(n + <span class="number">1</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    (<span class="number">2</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>] <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (<span class="number">1</span>..m).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (<span class="number">1</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> |<span class="params"></span>| p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>]</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elsif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">2</span>] |<span class="params"></span>| (dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] |<span class="params"></span>| p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    dp[m][n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.64 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>, p: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> m = s.length</span><br><span class="line">        <span class="keyword">val</span> n = p.length</span><br><span class="line">        <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">        dp(<span class="number">0</span>)(<span class="number">0</span>) = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> (j &lt;- <span class="number">2</span> to n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">                dp(<span class="number">0</span>)(j) = dp(<span class="number">0</span>)(j - <span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;.&#x27; || p(j - <span class="number">1</span>) == s(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">                    dp(i)(j) = dp(i)(j - <span class="number">2</span>) || (dp(i - <span class="number">1</span>)(j) &amp;&amp; (s(i - <span class="number">1</span>) == p(j - <span class="number">2</span>) || p(j - <span class="number">2</span>) == &#x27;.&#x27;))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp(m)(n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 516 ms, 击败 -% 使用 Scala 的用户</p>
<p>内存消耗 : 54.05 MB, 击败 -% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_match</span>(s: <span class="type">String</span>, p: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">s_chars</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">p_chars</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">m</span> = s_chars.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = p_chars.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dp</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>; n + <span class="number">1</span>]; m + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">2</span>..=n &#123;</span><br><span class="line">            <span class="keyword">if</span> p_chars[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=m &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">                <span class="keyword">if</span> p_chars[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> || p_chars[j - <span class="number">1</span>] == s_chars[i - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> p_chars[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s_chars[i - <span class="number">1</span>] == p_chars[j - <span class="number">2</span>] || p_chars[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.30 MB, 击败 6.35% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>大雪</title>
    <url>/zh-CN/3dc074bb3cc0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/3dc074bb3cc0/201912070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大雪</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00011.盛最多水的容器</title>
    <url>/zh-CN/04eddde1909a/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p>
<p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>你不能倾斜容器。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/04eddde1909a/201912090001.jpg" class="" title="示例1">

<blockquote>
<p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：height &#x3D; [1,1]<br>输出：1</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$n &#x3D;&#x3D; height.length$</li>
<li>$2 &lt;&#x3D; n &lt;&#x3D; 10^5$</li>
<li>$0 &lt;&#x3D; height[i] &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max_area = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> current_area = std::<span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">            max_area = std::<span class="built_in">max</span>(max_area, current_area);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 73.27% 使用 C++ 的用户</p>
<p>内存消耗 : 58.09 MB, 击败 17.81% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentArea</span> <span class="operator">=</span> Math.min(height[left], height[right]) * (right - left);</span><br><span class="line">            maxArea = Math.max(maxArea, currentArea);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 60.64% 使用 Java 的用户</p>
<p>内存消耗 : 56.42 MB, 击败 5.85% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>):</span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            current_area = <span class="built_in">min</span>(height[left], height[right]) * (right - left)</span><br><span class="line">            max_area = <span class="built_in">max</span>(max_area, current_area)</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max_area</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 148 ms, 击败 13.12% 使用 Python 的用户</p>
<p>内存消耗 : 21.30 MB, 击败 5.26% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            current_area = <span class="built_in">min</span>(height[left], height[right]) * (right - left)</span><br><span class="line">            max_area = <span class="built_in">max</span>(max_area, current_area)</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max_area</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 72.12% 使用 Python3 的用户</p>
<p>内存消耗 : 27.78 MB, 击败 5.13% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> max_area = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = heightSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> current_area = (height[left] &lt; height[right]) ? height[left] * (right - left) : height[right] * (right - left);</span><br><span class="line">        max_area = (current_area &gt; max_area) ? current_area : max_area;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 42.07% 使用 C 的用户</p>
<p>内存消耗 : 12.04 MB, 击败 80.31% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxArea</span>(<span class="params"><span class="built_in">int</span>[] height</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> right = height.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="built_in">int</span> currentArea = Math.Min(height[left], height[right]) * (right - left);</span><br><span class="line">            maxArea = Math.Max(maxArea, currentArea);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 292 ms, 击败 5.03% 使用 C# 的用户</p>
<p>内存消耗 : 60.38 MB, 击败 6.09% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentArea = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">        maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea, currentArea);</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 86.66% 使用 JavaScript 的用户</p>
<p>内存消耗 : 55.49 MB, 击败 5.07% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxArea</span>(<span class="params">height: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxArea</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">right</span>: <span class="built_in">number</span> = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">currentArea</span>: <span class="built_in">number</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">        maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea, currentArea);</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 71.65% 使用 TypeScript 的用户</p>
<p>内存消耗 : 57.73 MB, 击败 5.08% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxArea</span>(<span class="params"><span class="variable">$height</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$maxArea</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$height</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$currentArea</span> = <span class="title function_ invoke__">min</span>(<span class="variable">$height</span>[<span class="variable">$left</span>], <span class="variable">$height</span>[<span class="variable">$right</span>]) * (<span class="variable">$right</span> - <span class="variable">$left</span>);</span><br><span class="line">            <span class="variable">$maxArea</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxArea</span>, <span class="variable">$currentArea</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &lt; <span class="variable">$height</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                <span class="variable">$left</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxArea</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 80.25% 使用 PHP 的用户</p>
<p>内存消耗 : 25.96 MB, 击败 96.30% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">maxArea</span>(<span class="keyword">_</span> <span class="params">height</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxArea <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> height.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> currentArea <span class="operator">=</span> <span class="built_in">min</span>(height[left], height[right]) <span class="operator">*</span> (right <span class="operator">-</span> left)</span><br><span class="line">            maxArea <span class="operator">=</span> <span class="built_in">max</span>(maxArea, currentArea)</span><br><span class="line">            <span class="keyword">if</span> height[left] <span class="operator">&lt;</span> height[right] &#123;</span><br><span class="line">                left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 628 ms, 击败 5.38% 使用 Swift 的用户</p>
<p>内存消耗 : 19.45 MB, 击败 5.38% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">maxArea</span><span class="params">(height: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxArea = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = height.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentArea = minOf(height[left], height[right]) * (right - left)</span><br><span class="line">            maxArea = maxOf(maxArea, currentArea)</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 400 ms, 击败 45.71% 使用 Kotlin 的用户</p>
<p>内存消耗 : 51.34 MB, 击败 68.57% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> maxArea(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; height) &#123;</span><br><span class="line">    <span class="built_in">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="built_in">int</span> currentArea = height[left] &lt; height[right]</span><br><span class="line">          ? height[left] * (right - left)</span><br><span class="line">          : height[right] * (right - left);</span><br><span class="line">      maxArea = currentArea &gt; maxArea ? currentArea : maxArea;</span><br><span class="line">      <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 332 ms, 击败 22.22% 使用 Dart 的用户</p>
<p>内存消耗 : 167.73 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    maxArea := <span class="number">0</span></span><br><span class="line">    left := <span class="number">0</span></span><br><span class="line">    right := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        currentArea := min(height[left], height[right]) * (right - left)</span><br><span class="line">        <span class="keyword">if</span> currentArea &gt; maxArea &#123;</span><br><span class="line">            maxArea = currentArea</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 20.43% 使用 Go 的用户</p>
<p>内存消耗 : 8.11 MB, 击败 48.25% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; height</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_area</span>(<span class="params">height</span>)</span><br><span class="line">  max_area = <span class="number">0</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = height.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right</span><br><span class="line">    current_area = [height[left], height[right]].min * (right - left)</span><br><span class="line">    max_area = [max_area, current_area].max</span><br><span class="line">    <span class="keyword">if</span> height[left] &lt; height[right]</span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  max_area</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 85.71% 使用 Ruby 的用户</p>
<p>内存消耗 : 213.06 MB, 击败 14.29% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span></span>(height: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> maxArea = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = height.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">val</span> currentArea = math.min(height(left), height(right)) * (right - left)</span><br><span class="line">      maxArea = math.max(maxArea, currentArea)</span><br><span class="line">      <span class="keyword">if</span> (height(left) &lt; height(right)) &#123;</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxArea</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 706 ms, 击败 28.57% 使用 Scala 的用户</p>
<p>内存消耗 : 75.38 MB, 击败 76.19% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">max_area</span>(height: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_area</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = height.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">current_area</span> = std::cmp::<span class="title function_ invoke__">min</span>(height[left], height[right]) * (right - left) <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            max_area = std::cmp::<span class="title function_ invoke__">max</span>(max_area, current_area);</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_area</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 98.87% 使用 Rust 的用户</p>
<p>内存消耗 : 3.07 MB, 击败 6.02% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>新 超级马力欧兄弟U 豪华版</title>
    <url>/zh-CN/be83ef99d7fe/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Pro（Intel，2019年）</title>
    <url>/zh-CN/6d94f958ada8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Mac Pro</p>
  <p>这台 Mac，在众多方面再一次超越</p>
  <p>自我。Mac Pro 拥有强悍的性能和</p>
  <p>卓越的配置潜能，可助你一往无前，</p>
  <p>挑战不可能。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6d94f958ada8/201912110001.png" class="" title="Mac Pro（Intel，2019年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Pro Display XDR（2019年）</title>
    <url>/zh-CN/7acba7977b91/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Pro Display XDR</p>
  <p>Apple 的首款</p>
  <p>32 英寸 6K 视网膜显示器。</p>
  <p>峰值亮度可达 1600 尼特;</p>
  <p>对比度高达 1000000:1,</p>
  <p>可呈现超过十亿色彩;</p>
  <p>极致动态范围，</p>
  <p>可让专业工作流程焕然一新。</p>
  <p>而且，在整个制作过程中，</p>
  <p>每位专业用户看到的影像都能</p>
  <p>保持一致的鲜活出色。</p>
  <p>这就是 Pro Display XDR，</p>
  <p>专业显示器的巅峰之作。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/7acba7977b91/201912110001.png" class="" title="Pro Display XDR（2019年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Display</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00012.整数转罗马数字</title>
    <url>/zh-CN/5b2e4ebdebbf/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">数值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">I</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">50</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">100</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">500</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">1000</td>
</tr>
</tbody></table>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>
<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li>
<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给你一个整数，将其转为罗马数字。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: num &#x3D; 3<br>输出: “III”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: num &#x3D; 4<br>输出: “IV”</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: num &#x3D; 9<br>输出: “IX”</p>
</blockquote>
<h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote>
<p>输入: num &#x3D; 58<br>输出: “LVIII”<br>解释: L &#x3D; 50, V &#x3D; 5, III &#x3D; 3.</p>
</blockquote>
<h2 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h2><blockquote>
<p>输入: num &#x3D; 1994<br>输出: “MCMXCIV”<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; num &lt;&#x3D; 3999</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val[] = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        string syms[] = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        string romanNum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                romanNum += syms[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 85.27% 使用 C++ 的用户</p>
<p>内存消耗 : 6.16 MB, 击败 84.14% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] val = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        String[] syms = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">romanNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                romanNum.append(syms[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 98.23% 使用 Java 的用户</p>
<p>内存消耗 : 43.08 MB, 击败 12.68% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intToRoman</span>(<span class="params">self, num</span>):</span><br><span class="line">        val = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        syms = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num // val[i]):</span><br><span class="line">                roman_num += syms[i]</span><br><span class="line">                num -= val[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> roman_num</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 34.85% 使用 Python 的用户</p>
<p>内存消耗 : 13.04 MB, 击败 32.88% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        val = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        syms = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num // val[i]):</span><br><span class="line">                roman_num += syms[i]</span><br><span class="line">                num -= val[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> roman_num</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 5.82% 使用 Python3 的用户</p>
<p>内存消耗 : 16.88 MB, 击败 10.91% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> values[] = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* symbols[] = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    result[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(result, symbols[i]);</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 85.58% 使用 C 的用户</p>
<p>内存消耗 : 6.68 MB, 击败 25.77% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">IntToRoman</span>(<span class="params"><span class="built_in">int</span> num</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] values = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span>[] symbols = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line">        StringBuilder romanNum = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">                romanNum.Append(symbols[i]);</span><br><span class="line">                num -= values[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 95.39% 使用 C# 的用户</p>
<p>内存消耗 : 44.50 MB, 击败 27.31% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intToRoman = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> romanNum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            romanNum += symbols[i];</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 48.51% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.22 MB, 击败 6.03% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">intToRoman</span>(<span class="params">num: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">values</span>: <span class="built_in">number</span>[] = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">symbols</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">romanNum</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            romanNum += symbols[i];</span><br><span class="line">            num -= values[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 52.74% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.53 MB, 击败 5.47% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">intToRoman</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$values</span> = <span class="keyword">array</span>(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$symbols</span> = <span class="keyword">array</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">        <span class="variable">$romanNum</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">13</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$num</span> &gt;= <span class="variable">$values</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="variable">$romanNum</span> .= <span class="variable">$symbols</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="variable">$num</span> -= <span class="variable">$values</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$romanNum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 25.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.44 MB, 击败 6.25% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">intToRoman</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> values <span class="operator">=</span> [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> symbols <span class="operator">=</span> [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">        <span class="keyword">var</span> romanNum <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> number <span class="operator">=</span> num</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> number <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> number <span class="operator">&gt;=</span> values[i] &#123;</span><br><span class="line">                romanNum <span class="operator">+=</span> symbols[i]</span><br><span class="line">                number <span class="operator">-=</span> values[i]</span><br><span class="line">            &#125;</span><br><span class="line">            i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 87.88% 使用 Swift 的用户</p>
<p>内存消耗 : 14.98 MB, 击败 6.06% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">intToRoman</span><span class="params">(num: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> values = listOf(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> symbols = listOf(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> romanNum = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> number = num</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &gt;= values[i]) &#123;</span><br><span class="line">                romanNum += symbols[i]</span><br><span class="line">                number -= values[i]</span><br><span class="line">            &#125;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> romanNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 212 ms, 击败 55.56% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.36 MB, 击败 27.78% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> intToRoman(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">    <span class="built_in">String</span> romanNum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">num</span> &gt;= values[i]) &#123;</span><br><span class="line">        romanNum += symbols[i];</span><br><span class="line">        <span class="built_in">num</span> -= values[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 149.71 MB, 击败 50.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    values := []<span class="type">int</span>&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;</span><br><span class="line">    symbols := []<span class="type">string</span>&#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> romanNum strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">13</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> num &gt;= values[i] &#123;</span><br><span class="line">            romanNum.WriteString(symbols[i])</span><br><span class="line">            num -= values[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> romanNum.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 88.52% 使用 Go 的用户</p>
<p>内存消耗 : 2.93 MB, 击败 89.29% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_roman</span>(<span class="params">num</span>)</span><br><span class="line">    values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">    roman_num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    (<span class="number">0</span>...<span class="number">13</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">while</span> num &gt;= values[i]</span><br><span class="line">            roman_num += symbols[i]</span><br><span class="line">            num -= values[i]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    roman_num</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 88 ms, 击败 50.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.59 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span></span>(num: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> values = <span class="type">List</span>(<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> symbols = <span class="type">List</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> romanNum = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> number = num</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (number &gt;= values(i)) &#123;</span><br><span class="line">        romanNum += symbols(i)</span><br><span class="line">        number -= values(i)</span><br><span class="line">      &#125;</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    romanNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 500 ms, 击败 66.67% 使用 Scala 的用户</p>
<p>内存消耗 : 53.13 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">int_to_roman</span>(num: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">values</span> = <span class="built_in">vec!</span>[<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">symbols</span> = <span class="built_in">vec!</span>[<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">roman_num</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = num;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">13</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> number &gt;= values[i] &#123;</span><br><span class="line">                roman_num += symbols[i];</span><br><span class="line">                number -= values[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        roman_num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 63.10% 使用 Rust 的用户</p>
<p>内存消耗 : 2.11 MB, 击败 25.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">int-to-roman</span> num)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> values &#x27;(<span class="number">1000</span> <span class="number">900</span> <span class="number">500</span> <span class="number">400</span> <span class="number">100</span> <span class="number">90</span> <span class="number">50</span> <span class="number">40</span> <span class="number">10</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> symbols &#x27;(<span class="string">&quot;M&quot;</span> <span class="string">&quot;CM&quot;</span> <span class="string">&quot;D&quot;</span> <span class="string">&quot;CD&quot;</span> <span class="string">&quot;C&quot;</span> <span class="string">&quot;XC&quot;</span> <span class="string">&quot;L&quot;</span> <span class="string">&quot;XL&quot;</span> <span class="string">&quot;X&quot;</span> <span class="string">&quot;IX&quot;</span> <span class="string">&quot;V&quot;</span> <span class="string">&quot;IV&quot;</span> <span class="string">&quot;I&quot;</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">convert</span> num values symbols)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">num</span> num) (<span class="name"><span class="built_in">values</span></span> values) (<span class="name">symbols</span> symbols) (<span class="name">result</span> &#x27;()))</span><br><span class="line">      (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> num <span class="number">0</span>) (<span class="name"><span class="built_in">apply</span></span> string-append (<span class="name"><span class="built_in">reverse</span></span> result)))</span><br><span class="line">        ((<span class="name"><span class="built_in">&gt;=</span></span> num (<span class="name"><span class="built_in">car</span></span> values))</span><br><span class="line">         (<span class="name">loop</span> (<span class="name"><span class="built_in">-</span></span> num (<span class="name"><span class="built_in">car</span></span> values)) values symbols (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> symbols) result)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">loop</span> num (<span class="name"><span class="built_in">cdr</span></span> values) (<span class="name"><span class="built_in">cdr</span></span> symbols) result)))))</span><br><span class="line">  (<span class="name">convert</span> num values symbols))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 240 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 99.15 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> int_to_roman(num :: integer) :: <span class="title class_">String</span>.t</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">int_to_roman</span></span>(num) <span class="keyword">do</span></span><br><span class="line">    values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    symbols = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line">    int_to_roman(num, values, symbols, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(_, [], _, acc), <span class="symbol">do:</span> acc</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(num, [value | rest_values], [symbol | rest_symbols], acc) <span class="keyword">when</span> num &gt;= value <span class="keyword">do</span></span><br><span class="line">    int_to_roman(num - value, [value | rest_values], [symbol | rest_symbols], acc &lt;&gt; symbol)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">int_to_roman</span></span>(num, [_ | rest_values], [_ | rest_symbols], acc) <span class="keyword">do</span></span><br><span class="line">    int_to_roman(num, rest_values, rest_symbols, acc)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 556 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 68.21 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00013.罗马数字转整数</title>
    <url>/zh-CN/854ee8d5e69b/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">数值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">I</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">50</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">100</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">500</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">1000</td>
</tr>
</tbody></table>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>
<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li>
<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: s &#x3D; “III”<br>输出: 3</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: s &#x3D; “IV”<br>输出: 4</p>
</blockquote>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h2><blockquote>
<p>输入: s &#x3D; “IX”<br>输出: 9</p>
</blockquote>
<h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h2><blockquote>
<p>输入: s &#x3D; “LVIII”<br>输出: 58<br>解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</p>
</blockquote>
<h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h2><blockquote>
<p>输入: s &#x3D; “MCMXCIV”<br>输出: 1994<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li>
<li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li>
<li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li>
<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>
<li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; roman_values = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;, &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;, &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;, &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="built_in">length</span>() &amp;&amp; roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += roman_values[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 63.8% 使用 C++ 的用户</p>
<p>内存消耗 : 8.18 MB, 击败 62.73% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; romanValues = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        romanValues.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        romanValues.put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; romanValues.get(s.charAt(i)) &lt; romanValues.get(s.charAt(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                total += romanValues.get(s.charAt(i + <span class="number">1</span>)) - romanValues.get(s.charAt(i));</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues.get(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 18.77% 使用 Java 的用户</p>
<p>内存消耗 : 43.35 MB, 击败 17.83% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s</span>):</span><br><span class="line">        roman_values = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += roman_values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 91.49% 使用 Python 的用户</p>
<p>内存消耗 : 12.98 MB, 击败 60.24% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        roman_values = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += roman_values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 60.20% 使用 Python3 的用户</p>
<p>内存消耗 : 17.10 MB, 击败 5.04% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">value</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> current = value(s[i]);</span><br><span class="line">        <span class="type">int</span> next = value(s[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (current &lt; next) &#123;</span><br><span class="line">            result += (next - current);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 58.83% 使用 C 的用户</p>
<p>内存消耗 : 6.36 MB, 击败 87.77% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RomanToInt</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt; romanValues = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt;() &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;, &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;, &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;, &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.Length &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 85.78% 使用 C# 的用户</p>
<p>内存消耗 : 47.64 MB, 击败 18.79% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> romanValues = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="property">length</span> &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">            total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 116 ms, 击败 63.20% 使用 JavaScript 的用户</p>
<p>内存消耗 : 53.13 MB, 击败 7.86% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">romanToInt</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">romanValues</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="property">length</span> &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">            total += romanValues[s[i + <span class="number">1</span>]] - romanValues[s[i]];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 44.44% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.39 MB, 击败 11.57% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">romanToInt</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$romanValues</span> = [</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> =&gt; <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> =&gt; <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> =&gt; <span class="number">1000</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> + <span class="number">1</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) &amp;&amp; <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]] &lt; <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span> + <span class="number">1</span>]]) &#123;</span><br><span class="line">                <span class="variable">$total</span> += <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span> + <span class="number">1</span>]] - <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]];</span><br><span class="line">                <span class="variable">$i</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$total</span> += <span class="variable">$romanValues</span>[<span class="variable">$s</span>[<span class="variable">$i</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 72.29% 使用 PHP 的用户</p>
<p>内存消耗 : 19.67 MB, 击败 6.03% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">romanToInt</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> romanValues: [<span class="type">Character</span>: <span class="type">Int</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;I&quot;</span>: <span class="number">1</span>, <span class="string">&quot;V&quot;</span>: <span class="number">5</span>, <span class="string">&quot;X&quot;</span>: <span class="number">10</span>, <span class="string">&quot;L&quot;</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="number">100</span>, <span class="string">&quot;D&quot;</span>: <span class="number">500</span>, <span class="string">&quot;M&quot;</span>: <span class="number">1000</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> s.startIndex</span><br><span class="line">        <span class="keyword">while</span> i <span class="operator">&lt;</span> s.endIndex &#123;</span><br><span class="line">            <span class="keyword">let</span> current <span class="operator">=</span> s[i]</span><br><span class="line">            <span class="keyword">let</span> nextIndex <span class="operator">=</span> s.index(after: i)</span><br><span class="line">            <span class="keyword">if</span> nextIndex <span class="operator">&lt;</span> s.endIndex &#123;</span><br><span class="line">                <span class="keyword">let</span> next <span class="operator">=</span> s[nextIndex]</span><br><span class="line">                <span class="keyword">if</span> romanValues[current]<span class="operator">!</span> <span class="operator">&lt;</span> romanValues[next]<span class="operator">!</span> &#123;</span><br><span class="line">                    total <span class="operator">+=</span> romanValues[next]<span class="operator">!</span> <span class="operator">-</span> romanValues[current]<span class="operator">!</span></span><br><span class="line">                    i <span class="operator">=</span> s.index(after: nextIndex)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            total <span class="operator">+=</span> romanValues[current]<span class="operator">!</span></span><br><span class="line">            i <span class="operator">=</span> s.index(after: i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 32.26% 使用 Swift 的用户</p>
<p>内存消耗 : 15.66 MB, 击败 6.45% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">romanToInt</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> romanValues = hashMapOf(</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span> to <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> to <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> to <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> to <span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span> to <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> to <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> to <span class="number">1000</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp; romanValues[s[i]]!! &lt; romanValues[s[i + <span class="number">1</span>]]!!) &#123;</span><br><span class="line">                total += romanValues[s[i + <span class="number">1</span>]]!! - romanValues[s[i]]!!</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total += romanValues[s[i]]!!</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 40.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.78 MB, 击败 40.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> romanToInt(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; romanValues = &#123;</span><br><span class="line">      <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp;</span><br><span class="line">          romanValues[s[i]]! &lt; romanValues[s[i + <span class="number">1</span>]]!) &#123;</span><br><span class="line">        total += romanValues[s[i + <span class="number">1</span>]]! - romanValues[s[i]]!;</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        total += romanValues[s[i]]!;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 380 ms, 击败 20.00% 使用 Dart 的用户</p>
<p>内存消耗 : 148.83 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    romanValues := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; romanValues[s[i]] &lt; romanValues[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">            total += romanValues[s[i+<span class="number">1</span>]] - romanValues[s[i]]</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total += romanValues[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 52.05% 使用 Go 的用户</p>
<p>内存消耗 : 2.64 MB, 击败 78.89% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roman_to_int</span>(<span class="params">s</span>)</span><br><span class="line">    roman_values = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span> =&gt; <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span> =&gt; <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span> =&gt; <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; s.length</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; s.length &amp;&amp; roman_values[s[i]] &lt; roman_values[s[i + <span class="number">1</span>]]</span><br><span class="line">            total += roman_values[s[i + <span class="number">1</span>]] - roman_values[s[i]]</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            total += roman_values[s[i]]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.81 MB, 击败 16.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> romanValues = <span class="type">Map</span>(</span><br><span class="line">      &#x27;<span class="type">I</span>&#x27; -&gt; <span class="number">1</span>, &#x27;<span class="type">V</span>&#x27; -&gt; <span class="number">5</span>, &#x27;<span class="type">X</span>&#x27; -&gt; <span class="number">10</span>, &#x27;<span class="type">L</span>&#x27; -&gt; <span class="number">50</span>,</span><br><span class="line">      &#x27;<span class="type">C</span>&#x27; -&gt; <span class="number">100</span>, &#x27;<span class="type">D</span>&#x27; -&gt; <span class="number">500</span>, &#x27;<span class="type">M</span>&#x27; -&gt; <span class="number">1000</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length &amp;&amp; romanValues(s(i)) &lt; romanValues(s(i + <span class="number">1</span>))) &#123;</span><br><span class="line">        total += romanValues(s(i + <span class="number">1</span>)) - romanValues(s(i))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        total += romanValues(s(i))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    total</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 540 ms, 击败 87.50% 使用 Scala 的用户</p>
<p>内存消耗 : 54.98 MB, 击败 62.50% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">roman_to_int</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">roman_values</span>: HashMap&lt;<span class="type">char</span>, <span class="type">i32</span>&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        roman_values.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prev</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">curr</span> = roman_values[&amp;c];</span><br><span class="line">            total += curr;</span><br><span class="line">            <span class="keyword">if</span> curr &gt; prev &#123;</span><br><span class="line">                total -= <span class="number">2</span> * prev;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.20 MB, 击败 17.91% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">roman-to-int</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> roman-values</span><br><span class="line">    &#x27;((<span class="literal">#\I</span> . <span class="number">1</span>) (<span class="literal">#\V</span> . <span class="number">5</span>) (<span class="literal">#\X</span> . <span class="number">10</span>) (<span class="literal">#\L</span> . <span class="number">50</span>)</span><br><span class="line">      (<span class="literal">#\C</span> . <span class="number">100</span>) (<span class="literal">#\D</span> . <span class="number">500</span>) (<span class="literal">#\M</span> . <span class="number">1000</span>)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">get-value</span> c)</span><br><span class="line">    (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">assoc</span></span> c roman-values)))</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">chars</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> s))</span><br><span class="line">             (<span class="name">result</span> <span class="number">0</span>))</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">null?</span></span> chars) result)</span><br><span class="line">      ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">length</span></span> chars) <span class="number">1</span>) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">get-value</span> (<span class="name"><span class="built_in">car</span></span> chars))))</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">current</span> (<span class="name">get-value</span> (<span class="name"><span class="built_in">car</span></span> chars)))</span><br><span class="line">             (<span class="name">next</span> (<span class="name">get-value</span> (<span class="name"><span class="built_in">cadr</span></span> chars))))</span><br><span class="line">         (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> current next)</span><br><span class="line">             (<span class="name">loop</span> (<span class="name">cddr</span> chars) (<span class="name"><span class="built_in">+</span></span> result (<span class="name"><span class="built_in">-</span></span> next current)))</span><br><span class="line">             (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> chars) (<span class="name"><span class="built_in">+</span></span> result current))))))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 97.95 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00014.最长公共前缀</title>
    <url>/zh-CN/674a8ae5c290/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 “”。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：strs &#x3D; [“flower”,”flow”,”flight”]<br>输出：”fl”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：strs &#x3D; [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; strs.length &lt;&#x3D; 200</li>
<li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200</li>
<li>strs[i] 仅由小写英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].<span class="built_in">find</span>(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.<span class="built_in">substr</span>(<span class="number">0</span>, prefix.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 74.94% 使用 C++ 的用户</p>
<p>内存消耗 : 9.45 MB, 击败 36.89% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.09 MB, 击败 23.36% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> string <span class="keyword">in</span> strs[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">while</span> string.find(prefix) != <span class="number">0</span>:</span><br><span class="line">                prefix = prefix[:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> prefix:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 86.01% 使用 Python 的用户</p>
<p>内存消耗 : 13.26 MB, 击败 17.29% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        prefix = <span class="string">&quot;&quot;</span></span><br><span class="line">        min_length = <span class="built_in">min</span>(<span class="built_in">len</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> strs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_length):</span><br><span class="line">            char = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(s[i] == char <span class="keyword">for</span> s <span class="keyword">in</span> strs):</span><br><span class="line">                prefix += char</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 64.70% 使用 Python3 的用户</p>
<p>内存消耗 : 17.16 MB, 击败 5.01% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">longestCommonPrefix</span><span class="params">(<span class="type">char</span>** strs, <span class="type">int</span> strsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(strs[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; strsSize; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[j][i] != strs[<span class="number">0</span>][i] || strs[j][i] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (i + <span class="number">1</span>));</span><br><span class="line">                <span class="built_in">strncpy</span>(result, strs[<span class="number">0</span>], i);</span><br><span class="line">                result[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(result, strs[<span class="number">0</span>], i);</span><br><span class="line">    result[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 53.70% 使用 C 的用户</p>
<p>内存消耗 : 6.52 MB, 击败 47.21% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">LongestCommonPrefix</span>(<span class="params"><span class="built_in">string</span>[] strs</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; strs.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (strs[i].IndexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefix = prefix.Substring(<span class="number">0</span>, prefix.Length - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prefix.Length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 90.59% 使用 C# 的用户</p>
<p>内存消耗 : 42.74 MB, 击败 5.02% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs === <span class="literal">null</span> || strs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].<span class="title function_">indexOf</span>(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">            prefix = prefix.<span class="title function_">substring</span>(<span class="number">0</span>, prefix.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (prefix.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 55.60% 使用 JavaScript 的用户</p>
<p>内存消耗 : 47.75 MB, 击败 12.44% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">strs: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs === <span class="literal">null</span> || strs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">prefix</span>: <span class="built_in">string</span> = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].<span class="title function_">indexOf</span>(prefix) !== <span class="number">0</span>) &#123;</span><br><span class="line">            prefix = prefix.<span class="title function_">substring</span>(<span class="number">0</span>, prefix.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (prefix.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 97.39% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.28 MB, 击败 8.64% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[] $strs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longestCommonPrefix</span>(<span class="params"><span class="variable">$strs</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$strs</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$prefix</span> = <span class="variable">$strs</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$strs</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$strs</span>[<span class="variable">$i</span>], <span class="variable">$prefix</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$prefix</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$prefix</span>, <span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$prefix</span>) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$prefix</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$prefix</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 77.67% 使用 PHP 的用户</p>
<p>内存消耗 : 19.42 MB, 击败 5.82% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">longestCommonPrefix</span>(<span class="keyword">_</span> <span class="params">strs</span>: [<span class="type">String</span>]) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>strs.isEmpty <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>strs.count &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="operator">!</span>strs[i].hasPrefix(<span class="keyword">prefix</span>) &#123;</span><br><span class="line">                <span class="keyword">prefix</span> <span class="operator">=</span> <span class="type">String</span>(<span class="keyword">prefix</span>.dropLast())</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">prefix</span>.isEmpty &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">prefix</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 93.33% 使用 Swift 的用户</p>
<p>内存消耗 : 15.48 MB, 击败 14.08% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">longestCommonPrefix</span><span class="params">(strs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until strs.size) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">                prefix = prefix.dropLast(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 51.52% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.44 MB, 击败 40.40% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> longestCommonPrefix(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">        prefix = prefix.substring(<span class="number">0</span>, prefix.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (prefix.isEmpty) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 284 ms, 击败 0.00% 使用 Dart 的用户</p>
<p>内存消耗 : 146.90 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    prefix := strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(strs); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> !strings.HasPrefix(strs[i], prefix) &#123;</span><br><span class="line">            prefix = prefix[:<span class="built_in">len</span>(prefix)<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> prefix == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 19.36% 使用 Go 的用户</p>
<p>内存消耗 : 2.21 MB, 击败 36.25% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> strs.empty?</span><br><span class="line">  prefix = strs[<span class="number">0</span>]</span><br><span class="line">  (<span class="number">1</span>...strs.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">while</span> strs[i].index(prefix) != <span class="number">0</span></span><br><span class="line">      prefix = prefix.chop</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> prefix.empty?</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  prefix</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.80 MB, 击败 10.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span></span>(strs: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prefix = strs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until strs.length) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!strs(i).startsWith(prefix)) &#123;</span><br><span class="line">        prefix = prefix.dropRight(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (prefix.isEmpty) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    prefix</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 488 ms, 击败 73.33% 使用 Scala 的用户</p>
<p>内存消耗 : 54.09 MB, 击败 86.67% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">longest_common_prefix</span>(strs: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> strs.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prefix</span> = strs[<span class="number">0</span>].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..strs.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">while</span> !strs[i].<span class="title function_ invoke__">starts_with</span>(&amp;prefix) &#123;</span><br><span class="line">                prefix.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> prefix.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prefix</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.12 MB, 击败 35.11% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00016.最接近的三数之和</title>
    <url>/zh-CN/a4f1727f21ed/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p>
<p>返回这三个数的和。</p>
<p>假定每组输入只存在恰好一个解。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [-1,2,1,-4], target &#x3D; 1<br>输出：2<br>解释：与 target 最接近的和是 2 (-1 + 2 + 1 &#x3D; 2) 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,0,0], target &#x3D; 1<br>输出：0</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$3 &lt;&#x3D; nums.length &lt;&#x3D; 1000$</li>
<li>$-1000 &lt;&#x3D; nums[i] &lt;&#x3D; 1000$</li>
<li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> closest_sum = INT_MAX; <span class="comment">// 设置初始最接近值为最大整数值</span></span><br><span class="line">        <span class="type">int</span> min_diff = INT_MAX; <span class="comment">// 设置初始最小差值为最大整数值</span></span><br><span class="line">        std::<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 对数组进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> current_sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="type">int</span> diff = <span class="built_in">abs</span>(target - current_sum);</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; min_diff) &#123;</span><br><span class="line">                    min_diff = diff;</span><br><span class="line">                    closest_sum = current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (current_sum &lt; target) &#123;</span><br><span class="line">                    ++left;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current_sum &gt; target) &#123;</span><br><span class="line">                    --right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closest_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 55.31% 使用 C++ 的用户</p>
<p>内存消耗 : 10.40 MB, 击败 27.05% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">threeSumClosest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">closestSum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDiff</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentSum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> Math.abs(target - currentSum);</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                    minDiff = diff;</span><br><span class="line">                    closestSum = currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 77.58% 使用 Java 的用户</p>
<p>内存消耗 : 41.82 MB, 击败 71.00% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSumClosest</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        nums.sort()</span><br><span class="line">        closest_sum = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>):</span><br><span class="line">            left, right = i + <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(target - current_sum) &lt; <span class="built_in">abs</span>(target - closest_sum):</span><br><span class="line">                    closest_sum = current_sum</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> current_sum &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> current_sum</span><br><span class="line">        <span class="keyword">return</span> closest_sum</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 68.17% 使用 Python 的用户</p>
<p>内存消耗 : 12.94 MB, 击败 84.08% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSumClosest</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        closest_sum = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>):</span><br><span class="line">            left, right = i + <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(target - current_sum) &lt; <span class="built_in">abs</span>(target - closest_sum):</span><br><span class="line">                    closest_sum = current_sum</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> current_sum &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> current_sum</span><br><span class="line">        <span class="keyword">return</span> closest_sum</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 376 ms, 击败 80.23% 使用 Python3 的用户</p>
<p>内存消耗 : 16.85 MB, 击败 14.26% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span> *)a - *(<span class="type">int</span> *)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">threeSumClosest</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    <span class="type">int</span> closestSum = INT_MAX;</span><br><span class="line">    <span class="type">int</span> minDiff = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left = i + <span class="number">1</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="type">int</span> diff = <span class="built_in">abs</span>(target - currentSum);</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                minDiff = diff;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 65.84% 使用 C 的用户</p>
<p>内存消耗 : 6.64 MB, 击败 27.88% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">ThreeSumClosest</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        <span class="built_in">int</span> closestSum = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> left = i + <span class="number">1</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="built_in">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (Math.Abs(target - currentSum) &lt; Math.Abs(target - closestSum)) &#123;</span><br><span class="line">                    closestSum = currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 92 ms, 击败 58.71% 使用 C# 的用户</p>
<p>内存消耗 : 41.35 MB, 击败 5.80% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> closestSum = <span class="title class_">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">const</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - currentSum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - closestSum)) &#123;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 99.54% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.55 MB, 击败 5.43% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSumClosest</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">closestSum</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = i + <span class="number">1</span>, <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">currentSum</span>: <span class="built_in">number</span> = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - currentSum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - closestSum)) &#123;</span><br><span class="line">                closestSum = currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 88.81% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.18 MB, 击败 5.59% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSumClosest</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="variable">$closestSum</span> = PHP_INT_MAX;</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$left</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                <span class="variable">$currentSum</span> = <span class="variable">$nums</span>[<span class="variable">$i</span>] + <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">abs</span>(<span class="variable">$target</span> - <span class="variable">$currentSum</span>) &lt; <span class="title function_ invoke__">abs</span>(<span class="variable">$target</span> - <span class="variable">$closestSum</span>)) &#123;</span><br><span class="line">                    <span class="variable">$closestSum</span> = <span class="variable">$currentSum</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$currentSum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                    <span class="variable">$left</span>++;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$currentSum</span> &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                    <span class="variable">$right</span>--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$currentSum</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$closestSum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 26.67% 使用 PHP 的用户</p>
<p>内存消耗 : 19.53 MB, 击败 6.67%用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">threeSumClosest</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sorted <span class="operator">=</span> nums.sorted()</span><br><span class="line">        <span class="keyword">var</span> gap <span class="operator">=</span> <span class="type">Int</span>.max</span><br><span class="line">        <span class="keyword">var</span> finalSum <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> sorted.count <span class="operator">-</span> <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right <span class="operator">=</span> sorted.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(left <span class="operator">&lt;</span> right) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum <span class="operator">=</span> sorted[i] <span class="operator">+</span> sorted[left] <span class="operator">+</span> sorted[right]</span><br><span class="line">                <span class="keyword">let</span> tmp <span class="operator">=</span> <span class="built_in">abs</span>(sum <span class="operator">-</span> target)</span><br><span class="line">                <span class="keyword">if</span>(tmp <span class="operator">&lt;</span> gap) &#123;</span><br><span class="line">                    gap <span class="operator">=</span> tmp</span><br><span class="line">                    finalSum <span class="operator">=</span> sum</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum <span class="operator">&lt;</span> target) &#123;</span><br><span class="line">                    left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum <span class="operator">&gt;</span> target) &#123;</span><br><span class="line">                    right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> sum</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 61.70% 使用 Swift 的用户</p>
<p>内存消耗 : 15.40 MB, 击败 6.38% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">threeSumClosest</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">var</span> closestSum = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until nums.size - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">val</span> currentSum = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(target - currentSum) &lt; Math.abs(target - closestSum)) &#123;</span><br><span class="line">                    closestSum = currentSum</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> currentSum <span class="comment">// 如果等于目标值，直接返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 208 ms, 击败 84.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.36 MB, 击败 40.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> threeSumClosest(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="built_in">int</span> closestSum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="built_in">int</span> currentSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">        <span class="keyword">if</span> ((target - currentSum).abs() &lt; (target - closestSum).abs()) &#123;</span><br><span class="line">          closestSum = currentSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">          left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">          right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> currentSum;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 348 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 152.27 MB, 击败 50.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    closestSum := nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-2</span>; i++ &#123;</span><br><span class="line">        left := i + <span class="number">1</span></span><br><span class="line">        right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">            currentSum := nums[i] + nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> abs(target-currentSum) &lt; abs(target-closestSum) &#123;</span><br><span class="line">                closestSum = currentSum</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> currentSum &lt; target &#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> currentSum &gt; target &#123;</span><br><span class="line">                right--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentSum</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> closestSum</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 95.37% 使用 Go 的用户</p>
<p>内存消耗 : 2.74 MB, 击败 97.61% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three_sum_closest</span>(<span class="params">nums, target</span>)</span><br><span class="line">    nums.sort!</span><br><span class="line">    closest_sum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    (<span class="number">0</span>..nums.size-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        left = i + <span class="number">1</span></span><br><span class="line">        right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right</span><br><span class="line">            current_sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> (target - current_sum).abs &lt; (target - closest_sum).abs</span><br><span class="line">                closest_sum = current_sum</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> current_sum &lt; target</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elsif</span> current_sum &gt; target</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> current_sum</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    closest_sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 344 ms, 击败 50.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.89 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sorted = nums.sorted</span><br><span class="line">    <span class="keyword">var</span> closestSum = sorted(<span class="number">0</span>) + sorted(<span class="number">1</span>) + sorted(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sorted.length - <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> right = sorted.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentSum = sorted(i) + sorted(left) + sorted(right)</span><br><span class="line">        <span class="keyword">if</span> (math.abs(target - currentSum) &lt; math.abs(target - closestSum)) &#123;</span><br><span class="line">          closestSum = currentSum</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentSum &lt; target) &#123;</span><br><span class="line">          left += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">          right -= <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> currentSum</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closestSum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 -% 使用 Scala 的用户</p>
<p>内存消耗 : 54.30 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">three_sum_closest</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted</span> = nums;</span><br><span class="line">        sorted.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">closest_sum</span> = sorted[<span class="number">0</span>] + sorted[<span class="number">1</span>] + sorted[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..sorted.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = sorted.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_sum</span> = sorted[i] + sorted[left] + sorted[right];</span><br><span class="line">                <span class="keyword">if</span> (target - current_sum).<span class="title function_ invoke__">abs</span>() &lt; (target - closest_sum).<span class="title function_ invoke__">abs</span>() &#123;</span><br><span class="line">                    closest_sum = current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> current_sum &lt; target &#123;</span><br><span class="line">                    left += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> current_sum &gt; target &#123;</span><br><span class="line">                    right -= <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> current_sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closest_sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 86.75% 使用 Rust 的用户</p>
<p>内存消耗 : 2.05 MB, 击败 51.81% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00017.电话号码的字母组合</title>
    <url>/zh-CN/4b6f5fbc1f12/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<img src="/zh-CN/4b6f5fbc1f12/201912190001.png" class="" title="题目">

<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：digits &#x3D; “23”<br>输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：digits &#x3D; “”<br>输出：[]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：digits &#x3D; “2”<br>输出：[“a”,”b”,”c”]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>0 &lt;&#x3D; digits.length &lt;&#x3D; 4</li>
<li>digits[i] 是范围 [‘2’, ‘9’] 的一个数字。</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; phone = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        vector&lt;string&gt; combinations;</span><br><span class="line">        <span class="built_in">backtrack</span>(digits, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, combinations, phone);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> string&amp; digits, <span class="type">int</span> index, string current, vector&lt;string&gt;&amp; combinations, <span class="type">const</span> vector&lt;string&gt;&amp; phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            combinations.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string letters = phone[digits[index] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> letter : letters) &#123;</span><br><span class="line">            current.<span class="built_in">push_back</span>(letter);</span><br><span class="line">            <span class="built_in">backtrack</span>(digits, index + <span class="number">1</span>, current, combinations, phone);</span><br><span class="line">            current.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 31.65% 使用 C++ 的用户</p>
<p>内存消耗 : 6.75 MB, 击败 75.08% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        List&lt;String&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="literal">null</span> || digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] phone = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        backtrack(digits, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), combinations, phone);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String digits, <span class="type">int</span> index, StringBuilder current, List&lt;String&gt; combinations, String[] phone)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.length()) &#123;</span><br><span class="line">            combinations.add(current.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">letters</span> <span class="operator">=</span> phone[digits.charAt(index) - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> letter : letters.toCharArray()) &#123;</span><br><span class="line">            current.append(letter);</span><br><span class="line">            backtrack(digits, index + <span class="number">1</span>, current, combinations, phone);</span><br><span class="line">            current.deleteCharAt(current.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.78 MB, 击败 15.89% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        phone = &#123;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">index, path</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(digits):</span><br><span class="line">                combinations.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> phone[digits[index]]:</span><br><span class="line">                path.append(letter)</span><br><span class="line">                backtrack(index + <span class="number">1</span>, path)</span><br><span class="line">                path.pop()</span><br><span class="line">        combinations = []</span><br><span class="line">        backtrack(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 40.96% 使用 Python 的用户</p>
<p>内存消耗 : 13.01 MB, 击败 69.30% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        phone = &#123;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">index, path</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(digits):</span><br><span class="line">                combinations.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> phone[digits[index]]:</span><br><span class="line">                path.append(letter)</span><br><span class="line">                backtrack(index + <span class="number">1</span>, path)</span><br><span class="line">                path.pop()</span><br><span class="line">        combinations = []</span><br><span class="line">        backtrack(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 89.86% 使用 Python3 的用户</p>
<p>内存消耗 : 16.86 MB, 击败 16.18% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span>* phone[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>* digits, <span class="type">int</span> index, <span class="type">char</span>* path, <span class="type">char</span>** combinations, <span class="type">int</span>* count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits[index] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        combinations[*count] = strdup(path);</span><br><span class="line">        (*count)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* letters = phone[digit];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(letters); i++) &#123;</span><br><span class="line">        path[index] = letters[i];</span><br><span class="line">        backtrack(digits, index + <span class="number">1</span>, path, combinations, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>** <span class="title function_">letterCombinations</span><span class="params">(<span class="type">char</span>* digits, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits == <span class="literal">NULL</span> || *digits == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *returnSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(digits);</span><br><span class="line">    <span class="type">int</span> total_combinations = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> digit = digits[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        total_combinations *= <span class="built_in">strlen</span>(phone[digit]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>** combinations = (<span class="type">char</span>**)<span class="built_in">malloc</span>(total_combinations * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="type">char</span>* path = (<span class="type">char</span>*)<span class="built_in">malloc</span>((len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    path[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    backtrack(digits, <span class="number">0</span>, path, combinations, &amp;count);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">    *returnSize = count;</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 6.61 MB, 击败 31.77% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] phone = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">LetterCombinations</span>(<span class="params"><span class="built_in">string</span> digits</span>)</span> &#123;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; combinations = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(digits)) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        Backtrack(digits, <span class="number">0</span>, <span class="keyword">new</span> List&lt;<span class="built_in">char</span>&gt;(), combinations);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">string</span> digits, <span class="built_in">int</span> index, List&lt;<span class="built_in">char</span>&gt; path, IList&lt;<span class="built_in">string</span>&gt; combinations</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.Length) &#123;</span><br><span class="line">            combinations.Add(<span class="keyword">new</span> <span class="built_in">string</span>(path.ToArray()));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">string</span> letters = phone[digit];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">            path.Add(letter);</span><br><span class="line">            Backtrack(digits, index + <span class="number">1</span>, path, combinations);</span><br><span class="line">            path.RemoveAt(path.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 87.74% 使用 C# 的用户</p>
<p>内存消耗 : 46.07 MB, 击败 5.37% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">digits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="keyword">function</span>(<span class="params">digits</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits === <span class="literal">null</span> || digits.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> phone = &#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> combinations = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">index, path</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === digits.<span class="property">length</span>) &#123;</span><br><span class="line">            combinations.<span class="title function_">push</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> letters = phone[digits[index]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> letter <span class="keyword">of</span> letters) &#123;</span><br><span class="line">            path.<span class="title function_">push</span>(letter);</span><br><span class="line">            <span class="title function_">backtrack</span>(index + <span class="number">1</span>, path);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, []);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 84.24% 使用 JavaScript 的用户</p>
<p>内存消耗 : 47.66 MB, 击败 8.30% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letterCombinations</span>(<span class="params">digits: <span class="built_in">string</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">    <span class="keyword">if</span> (!digits || digits.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">phone</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>[] &#125; = &#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">combinations</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">index: <span class="built_in">number</span>, path: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === digits.<span class="property">length</span>) &#123;</span><br><span class="line">            combinations.<span class="title function_">push</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> letters = phone[digits.<span class="title function_">charAt</span>(index)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> letter <span class="keyword">of</span> letters) &#123;</span><br><span class="line">            path.<span class="title function_">push</span>(letter);</span><br><span class="line">            <span class="title function_">backtrack</span>(index + <span class="number">1</span>, path);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, []);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 7.96% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.34 MB, 击败 5.09% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">letterCombinations</span>(<span class="params"><span class="variable">$digits</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$digits</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$phone</span> = [</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span> =&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span> =&gt; [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span> =&gt; [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span> =&gt; [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span> =&gt; [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span> =&gt; [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span> =&gt; [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span> =&gt; [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$combinations</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$digits</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$combinations</span>, <span class="variable">$phone</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$combinations</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$digits</span>, <span class="variable">$index</span>, <span class="variable">$path</span>, &amp;<span class="variable">$combinations</span>, <span class="variable">$phone</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> === <span class="title function_ invoke__">strlen</span>(<span class="variable">$digits</span>)) &#123;</span><br><span class="line">            <span class="variable">$combinations</span>[] = <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$letters</span> = <span class="variable">$phone</span>[<span class="variable">$digits</span>[<span class="variable">$index</span>]];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$letters</span> <span class="keyword">as</span> <span class="variable">$letter</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$digits</span>, <span class="variable">$index</span> + <span class="number">1</span>, <span class="variable">$path</span> . <span class="variable">$letter</span>, <span class="variable">$combinations</span>, <span class="variable">$phone</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 18.52% 使用 PHP 的用户</p>
<p>内存消耗 : 19.43 MB, 击败 11.11% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> phone: [<span class="type">Character</span>: [<span class="type">Character</span>]] <span class="operator">=</span> [</span><br><span class="line">        <span class="string">&quot;2&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>: [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>: [<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>: [<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>: [<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>: [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>: [<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>: [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">letterCombinations</span>(<span class="keyword">_</span> <span class="params">digits</span>: <span class="type">String</span>) -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>digits.isEmpty <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> combinations <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">        backtrack(<span class="type">Array</span>(digits), <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="operator">&amp;</span>combinations)</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">digits</span>: [<span class="type">Character</span>], <span class="keyword">_</span> <span class="params">index</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">path</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">combinations</span>: <span class="keyword">inout</span> [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> index <span class="operator">==</span> digits.count &#123;</span><br><span class="line">            combinations.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> currentDigit <span class="operator">=</span> digits[index]</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> letters <span class="operator">=</span> phone[currentDigit] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> letters &#123;</span><br><span class="line">            backtrack(digits, index <span class="operator">+</span> <span class="number">1</span>, path <span class="operator">+</span> <span class="type">String</span>(letter), <span class="operator">&amp;</span>combinations)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.64 MB, 击败 15.04% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> phone = mapOf(</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> to listOf(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span> to listOf(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span> to listOf(<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span> to listOf(<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span> to listOf(<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span> to listOf(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span> to listOf(<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span> to listOf(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">letterCombinations</span><span class="params">(digits: <span class="type">String</span>)</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> emptyList()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> combinations = mutableListOf&lt;String&gt;()</span><br><span class="line">        backtrack(digits.toCharArray(), <span class="number">0</span>, StringBuilder(), combinations)</span><br><span class="line">        <span class="keyword">return</span> combinations</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(digits: <span class="type">CharArray</span>, index: <span class="type">Int</span>, path: <span class="type">StringBuilder</span>, combinations: <span class="type">MutableList</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.size) &#123;</span><br><span class="line">            combinations.add(path.toString())</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> letters = phone[digits[index]] ?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> (letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">            path.append(letter)</span><br><span class="line">            backtrack(digits, index + <span class="number">1</span>, path, combinations)</span><br><span class="line">            path.deleteCharAt(path.length - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 216 ms, 击败 5.45% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.51 MB, 击败 10.91% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; phone = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; letterCombinations(<span class="built_in">String</span> digits) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; combinations = [];</span><br><span class="line">    <span class="keyword">if</span> (digits.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    _backtrack(digits, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, combinations);</span><br><span class="line">    <span class="keyword">return</span> combinations;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _backtrack(<span class="built_in">String</span> digits, <span class="built_in">int</span> index, <span class="built_in">String</span> current, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; combinations) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == digits.length) &#123;</span><br><span class="line">      combinations.add(current);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; letters = phone[digits[index]]!;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> letter <span class="keyword">in</span> letters) &#123;</span><br><span class="line">      _backtrack(digits, index + <span class="number">1</span>, current + letter, combinations);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 296 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 147.34 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phone = <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;</span><br><span class="line">	<span class="string">&quot;2&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;3&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;4&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;5&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;6&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;7&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;8&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;9&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> combinations []<span class="type">string</span></span><br><span class="line">	<span class="keyword">if</span> digits == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> combinations</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, path <span class="type">string</span>)</span></span></span><br><span class="line">	backtrack = <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> index == <span class="built_in">len</span>(digits) &#123;</span><br><span class="line">			combinations = <span class="built_in">append</span>(combinations, path)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		letters := phone[<span class="type">string</span>(digits[index])]</span><br><span class="line">		<span class="keyword">for</span> _, letter := <span class="keyword">range</span> letters &#123;</span><br><span class="line">			backtrack(index+<span class="number">1</span>, path+letter)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	backtrack(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> combinations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 9.81% 使用 Go 的用户</p>
<p>内存消耗 : 1.94 MB, 击败 39.95% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; digits</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="variable constant_">PHONE</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span> =&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span> =&gt; [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span> =&gt; [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;5&#x27;</span> =&gt; [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;6&#x27;</span> =&gt; [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;7&#x27;</span> =&gt; [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;8&#x27;</span> =&gt; [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;9&#x27;</span> =&gt; [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">letter_combinations</span>(<span class="params">digits</span>)</span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> digits.empty?</span><br><span class="line">  combinations = []</span><br><span class="line">  backtrack(digits, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, combinations)</span><br><span class="line">  combinations</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">digits, index, path, combinations</span>)</span><br><span class="line">  <span class="keyword">if</span> index == digits.length</span><br><span class="line">    combinations &lt;&lt; path</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  letters = <span class="variable constant_">PHONE</span>[digits[index]]</span><br><span class="line">  letters.each <span class="keyword">do</span> |<span class="params">letter</span>|</span><br><span class="line">    backtrack(digits, index + <span class="number">1</span>, path + letter, combinations)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 25.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.65 MB, 击败 25.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> phone = <span class="type">Map</span>(</span><br><span class="line">    &#x27;<span class="number">2</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">3</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">4</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">5</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">6</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">7</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">8</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>),</span><br><span class="line">    &#x27;<span class="number">9</span>&#x27; -&gt; <span class="type">List</span>(<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span></span>(digits: <span class="type">String</span>): <span class="type">List</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">List</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> combinations = <span class="type">List</span>[<span class="type">String</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(index: <span class="type">Int</span>, path: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (index == digits.length) &#123;</span><br><span class="line">        combinations = path :: combinations</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">val</span> letters = phone(digits(index))</span><br><span class="line">      letters.foreach(letter =&gt; backtrack(index + <span class="number">1</span>, path + letter))</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    combinations.reverse</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 452 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 53.96 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">letter_combinations</span>(digits: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">phone</span> = [</span><br><span class="line">            (<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>),</span><br><span class="line">            (<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">        .<span class="title function_ invoke__">cloned</span>()</span><br><span class="line">        .collect::&lt;std::collections::HashMap&lt;_, _&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> digits.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vec!</span>[];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="built_in">vec!</span>[<span class="string">&quot;&quot;</span>.<span class="title function_ invoke__">to_string</span>()];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">digit</span> <span class="keyword">in</span> digits.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(letters) = phone.<span class="title function_ invoke__">get</span>(&amp;digit) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">temp</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">letter</span> <span class="keyword">in</span> letters.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> &amp;result &#123;</span><br><span class="line">                        temp.<span class="title function_ invoke__">push</span>(item.<span class="title function_ invoke__">clone</span>() + &amp;letter.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 26.85% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> letter-map</span><br><span class="line">  #hash((<span class="literal">#\2</span> . (<span class="literal">#\a</span> <span class="literal">#\b</span> <span class="literal">#\c</span>))</span><br><span class="line">        (<span class="literal">#\3</span> . (<span class="literal">#\d</span> <span class="literal">#\e</span> <span class="literal">#\f</span>))</span><br><span class="line">        (<span class="literal">#\4</span> . (<span class="literal">#\g</span> <span class="literal">#\h</span> <span class="literal">#\i</span>))</span><br><span class="line">        (<span class="literal">#\5</span> . (<span class="literal">#\j</span> <span class="literal">#\k</span> <span class="literal">#\l</span>))</span><br><span class="line">        (<span class="literal">#\6</span> . (<span class="literal">#\m</span> <span class="literal">#\n</span> <span class="literal">#\o</span>))</span><br><span class="line">        (<span class="literal">#\7</span> . (<span class="literal">#\p</span> <span class="literal">#\q</span> <span class="literal">#\r</span> <span class="literal">#\s</span>))</span><br><span class="line">        (<span class="literal">#\8</span> . (<span class="literal">#\t</span> <span class="literal">#\u</span> <span class="literal">#\v</span>))</span><br><span class="line">        (<span class="literal">#\9</span> . (<span class="literal">#\w</span> <span class="literal">#\x</span> <span class="literal">#\y</span> <span class="literal">#\z</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">get-letters</span> n)</span><br><span class="line">  (<span class="name">hash-ref</span> letter-map n))</span><br><span class="line">(<span class="name">define/contract</span> (<span class="name">letter-combinations</span> digits)</span><br><span class="line">  (<span class="name">-&gt;</span> string? (<span class="name">listof</span> string?))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> <span class="number">0</span> (<span class="name"><span class="built_in">string-length</span></span> digits))</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">map</span></span> list-&gt;string</span><br><span class="line">           (<span class="name">char-combinations</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> digits)))))</span><br><span class="line">(<span class="name">define/contract</span> (<span class="name">char-combinations</span> ns)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> char?) (<span class="name">listof</span> (<span class="name">listof</span> char?)))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> ns)</span><br><span class="line">      &#x27;(())</span><br><span class="line">      (<span class="name">for*/list</span> ([<span class="name">rest-combinations</span> (<span class="name">char-combinations</span> (<span class="name"><span class="built_in">cdr</span></span> ns))]</span><br><span class="line">                  [<span class="name">current-letter</span> (<span class="name">get-letters</span> (<span class="name"><span class="built_in">car</span></span> ns))])</span><br><span class="line">        (<span class="name"><span class="built_in">cons</span></span> current-letter rest-combinations))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 184 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 98.10 MB, 击败 -% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00015.三数之和</title>
    <url>/zh-CN/e8fd96f06a8e/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请</p>
<p>你返回所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>解释：<br>nums[0] + nums[1] + nums[2] &#x3D; (-1) + 0 + 1 &#x3D; 0 。<br>nums[1] + nums[2] + nums[4] &#x3D; 0 + 1 + (-1) &#x3D; 0 。<br>nums[0] + nums[3] + nums[4] &#x3D; (-1) + 2 + (-1) &#x3D; 0 。<br>不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。<br>注意，输出的顺序和三元组的顺序并不重要。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,1,1]<br>输出：[]<br>解释：唯一可能的三元组和不为 0 。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [0,0,0]<br>输出：[[0,0,0]]<br>解释：唯一可能的三元组和为 0 。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$3 &lt;&#x3D; nums.length &lt;&#x3D; 3000$</li>
<li>$-10^5 &lt;&#x3D; nums[i] &lt;&#x3D; 10^5$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> total = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 58.25% 使用 C++ 的用户</p>
<p>内存消耗 : 23.80 MB, 击败 64.63% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 59.30% 使用 Java 的用户</p>
<p>内存消耗 : 49.95 MB, 击败 50.66% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums</span>):</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left, right = i + <span class="number">1</span>, length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                total = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> total &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> total &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 716 ms, 击败 71.67% 使用 Python 的用户</p>
<p>内存消耗 : 18.73 MB, 击败 63.92% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left, right = i + <span class="number">1</span>, length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                total = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> total &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> total &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 612 ms, 击败 92.99% 使用 Python3 的用户</p>
<p>内存消耗 : 20.02 MB, 击败 15.62% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* pa, <span class="type">const</span> <span class="type">void</span>* pb)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">int</span>*)pa;</span><br><span class="line">    <span class="type">int</span> b = *(<span class="type">int</span>*)pb;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span>&#123;</span><br><span class="line">    <span class="type">int</span> initialSize = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * initialSize);</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * initialSize);</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right = numsSize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">3</span>);</span><br><span class="line">                (*returnColumnSizes)[*returnSize] = <span class="number">3</span>;</span><br><span class="line">                result[*returnSize][<span class="number">0</span>] = nums[i];</span><br><span class="line">                result[*returnSize][<span class="number">1</span>] = nums[left];</span><br><span class="line">                result[*returnSize][<span class="number">2</span>] = nums[right];</span><br><span class="line">                (*returnSize)++;</span><br><span class="line">                <span class="keyword">if</span> (*returnSize == initialSize) &#123;</span><br><span class="line">                    initialSize *= <span class="number">2</span>;</span><br><span class="line">                    result = (<span class="type">int</span>**)<span class="built_in">realloc</span>(result, <span class="keyword">sizeof</span>(<span class="type">int</span>*) * initialSize);</span><br><span class="line">                    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">realloc</span>(*returnColumnSizes, <span class="keyword">sizeof</span>(<span class="type">int</span>) * initialSize);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                    left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                    right--;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 276 ms, 击败 16.27% 使用 C 的用户</p>
<p>内存消耗 : 31.54 MB, 击败 68.67% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; ThreeSum(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        <span class="built_in">int</span> length = nums.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="built_in">int</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="built_in">int</span> sum = nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[left], nums[right] &#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 180 ms, 击败 86.80% 使用 C# 的用户</p>
<p>内存消耗 : 73.13 MB, 击败 5.19% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> length = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] !== nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">let</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 152 ms, 击败 77.73% 使用 JavaScript 的用户</p>
<p>内存消耗 : 63.00 MB, 击败 6.25% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeSum</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> length = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] !== nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">let</span> left = i + <span class="number">1</span>, right = length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 172 ms, 击败 45.17% 使用 TypeScript 的用户</p>
<p>内存消耗 : 63.81 MB, 击败 10.84% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSum</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">0</span> || (<span class="variable">$i</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$target</span> = -<span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                    <span class="variable">$sum</span> = <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$sum</span> === <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$result</span>[] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$left</span>], <span class="variable">$nums</span>[<span class="variable">$right</span>]];</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$left</span>] === <span class="variable">$nums</span>[<span class="variable">$left</span> + <span class="number">1</span>]) <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$right</span>] === <span class="variable">$nums</span>[<span class="variable">$right</span> - <span class="number">1</span>]) <span class="variable">$right</span>--;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="variable">$sum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 236 ms, 击败 72.28% 使用 PHP 的用户</p>
<p>内存消耗 : 26.17 MB, 击败 94.06% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">threeSum</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">let</span> length <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">let</span> sortedNums <span class="operator">=</span> nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>length <span class="operator">-</span> <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> (i <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> sortedNums[i] <span class="operator">!=</span> sortedNums[i <span class="operator">-</span> <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right <span class="operator">=</span> length <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">let</span> target <span class="operator">=</span> <span class="operator">-</span>sortedNums[i]</span><br><span class="line">                <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">                    <span class="keyword">let</span> sum <span class="operator">=</span> sortedNums[left] <span class="operator">+</span> sortedNums[right]</span><br><span class="line">                    <span class="keyword">if</span> sum <span class="operator">==</span> target &#123;</span><br><span class="line">                        result.append([sortedNums[i], sortedNums[left], sortedNums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[left] <span class="operator">==</span> sortedNums[left <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">                            left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[right] <span class="operator">==</span> sortedNums[right <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                            right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                        right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                        left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 184 ms, 击败 37.55% 使用 Swift 的用户</p>
<p>内存消耗 : 19.67 MB, 击败 9.30% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">threeSum</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result: MutableList&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; = mutableListOf()</span><br><span class="line">        <span class="keyword">val</span> length = nums.size</span><br><span class="line">        <span class="keyword">val</span> sortedNums = nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until length - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; sortedNums[i] != sortedNums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">val</span> target = -sortedNums[i]</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="keyword">val</span> sum = sortedNums[left] + sortedNums[right]</span><br><span class="line">                    <span class="keyword">when</span> &#123;</span><br><span class="line">                        sum == target -&gt; &#123;</span><br><span class="line">                            result.add(listOf(sortedNums[i], sortedNums[left], sortedNums[right]))</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[left] == sortedNums[left + <span class="number">1</span>]) left++</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[right] == sortedNums[right - <span class="number">1</span>]) right--</span><br><span class="line">                            left++</span><br><span class="line">                            right--</span><br><span class="line">                        &#125;</span><br><span class="line">                        sum &lt; target -&gt; left++</span><br><span class="line">                        <span class="keyword">else</span> -&gt; right--</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 528 ms, 击败 42.86% 使用 Kotlin 的用户</p>
<p>内存消耗 : 54.28 MB, 击败 45.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; threeSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="built_in">int</span> left = i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="built_in">int</span> sum = nums[left] + nums[right];</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result.add([nums[i], nums[left], nums[right]]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 396 ms, 击败 58.33% 使用 Dart 的用户</p>
<p>内存消耗 : 157.53 MB, 击败 75.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    length := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length<span class="number">-2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            left, right := i+<span class="number">1</span>, length<span class="number">-1</span></span><br><span class="line">            target := -nums[i]</span><br><span class="line">            <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">                sum := nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                    result = <span class="built_in">append</span>(result, []<span class="type">int</span>&#123;nums[i], nums[left], nums[right]&#125;)</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>] &#123;</span><br><span class="line">                        left++</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>] &#123;</span><br><span class="line">                        right--</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 90.27% 使用 Go 的用户</p>
<p>内存消耗 : 8.68 MB, 击败 35.24% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three_sum</span>(<span class="params">nums</span>)</span><br><span class="line">    nums.sort!</span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">0</span>..nums.length - <span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> |<span class="params"></span>| (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = nums.length - <span class="number">1</span></span><br><span class="line">            target = -nums[i]</span><br><span class="line">            <span class="keyword">while</span> left &lt; right</span><br><span class="line">                sum = nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target</span><br><span class="line">                    result &lt;&lt; [nums[i], nums[left], nums[right]]</span><br><span class="line">                    left += <span class="number">1</span> <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]</span><br><span class="line">                    right -= <span class="number">1</span> <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elsif</span> sum &lt; target</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 620 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 211.62 MB, 击败 16.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> sortedNums = nums.sorted</span><br><span class="line">    <span class="keyword">val</span> result = scala.collection.mutable.<span class="type">ListBuffer</span>[<span class="type">List</span>[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sortedNums.length - <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; sortedNums(i) != sortedNums(i - <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> right = sortedNums.length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> target = -sortedNums(i)</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="keyword">val</span> sum = sortedNums(left) + sortedNums(right)</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result += <span class="type">List</span>(sortedNums(i), sortedNums(left), sortedNums(right))</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(left) == sortedNums(left + <span class="number">1</span>)) left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(right) == sortedNums(right - <span class="number">1</span>)) right -= <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 748 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 66.24 MB, 击败 85.71% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">three_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">nums</span> = nums;</span><br><span class="line">        nums.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">target</span> = -nums[i];</span><br><span class="line">                <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">sum</span> = nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                        result.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[nums[i], nums[left], nums[right]]);</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>] &#123;</span><br><span class="line">                            left += <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>] &#123;</span><br><span class="line">                            right -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 85.36% 使用 Rust 的用户</p>
<p>内存消耗 : 3.91 MB, 击败 67.78% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00018.四数之和</title>
    <url>/zh-CN/ebb20949ccd5/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li>0 &lt;&#x3D; a, b, c, d &lt; n</li>
<li>a、b、c 和 d 互不相同</li>
<li>nums[a] + nums[b] + nums[c] + nums[d] &#x3D;&#x3D; target</li>
</ul>
<p>你可以按 任意顺序 返回答案 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,0,-1,0,-2,2], target &#x3D; 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [2,2,2,2,2], target &#x3D; 8<br>输出：[[2,2,2,2]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 200$</li>
<li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li>
<li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n - <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="type">long</span> sum = <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[i]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[j]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[left]) + <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(nums[right]);</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        result.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 56.26% 使用 C++ 的用户</p>
<p>内存消耗 : 13.43 MB, 击败 19.12% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; quadruplets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> quadruplets;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>, right = length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        quadruplets.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quadruplets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 99.83% 使用 Java 的用户</p>
<p>内存消耗 : 42.84 MB, 击败 46.30% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        quadruplets = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length - <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    total = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> total == target:</span><br><span class="line">                        quadruplets.append([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> total &lt; target:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> quadruplets</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 96.53% 使用 Python 的用户</p>
<p>内存消耗 : 12.91 MB, 击败 85.86% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        quadruplets = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[length - <span class="number">3</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length - <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">1</span>] &lt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = length - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    total = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> total == target:</span><br><span class="line">                        quadruplets.append([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> total &lt; target:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> quadruplets</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 98.70% 使用 Python3 的用户</p>
<p>内存消耗 : 17.07 MB, 击败 12.39% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numsSize - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = numsSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> sum = (<span class="type">long</span> <span class="type">long</span>)nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*returnSize == capacity) &#123;</span><br><span class="line">                        capacity *= <span class="number">2</span>;</span><br><span class="line">                        result = (<span class="type">int</span>**)<span class="built_in">realloc</span>(result, capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">                        *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">realloc</span>(*returnColumnSizes, capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                    result[*returnSize][<span class="number">0</span>] = nums[i];</span><br><span class="line">                    result[*returnSize][<span class="number">1</span>] = nums[j];</span><br><span class="line">                    result[*returnSize][<span class="number">2</span>] = nums[left];</span><br><span class="line">                    result[*returnSize][<span class="number">3</span>] = nums[right];</span><br><span class="line">                    (*returnColumnSizes)[*returnSize] = <span class="number">4</span>;</span><br><span class="line">                    (*returnSize)++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 25.54% 使用 C 的用户</p>
<p>内存消耗 : 7.29 MB, 击败 94.96% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; FourSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target)</span><br><span class="line">    &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length - <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.Length - <span class="number">2</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">int</span> right = nums.Length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">long</span> sum = (<span class="built_in">long</span>)nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[j], nums[left], nums[right] &#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                            right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 124 ms, 击败 97.50% 使用 C# 的用户</p>
<p>内存消耗 : 46.96 MB, 击败 9.38% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 96 ms, 击败 34.66% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.09 MB, 击败 12.46% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fourSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 21.46% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.43 MB, 击败 7.32% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fourSum</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span> - <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] == <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span> + <span class="number">1</span>; <span class="variable">$j</span> &lt; <span class="variable">$length</span> - <span class="number">2</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$j</span> &gt; <span class="variable">$i</span> + <span class="number">1</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$j</span>] == <span class="variable">$nums</span>[<span class="variable">$j</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$j</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">                    <span class="variable">$sum</span> = <span class="variable">$nums</span>[<span class="variable">$i</span>] + <span class="variable">$nums</span>[<span class="variable">$j</span>] + <span class="variable">$nums</span>[<span class="variable">$left</span>] + <span class="variable">$nums</span>[<span class="variable">$right</span>];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$sum</span> == <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$result</span>[] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$j</span>], <span class="variable">$nums</span>[<span class="variable">$left</span>], <span class="variable">$nums</span>[<span class="variable">$right</span>]];</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$left</span>] == <span class="variable">$nums</span>[<span class="variable">$left</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="variable">$left</span>++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$right</span>] == <span class="variable">$nums</span>[<span class="variable">$right</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="variable">$right</span>--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="variable">$sum</span> &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                        <span class="variable">$left</span>++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$right</span>--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 188 ms, 击败 25.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.44 MB, 击败 12.50% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">fourSum</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">      <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">      <span class="keyword">let</span> sortedNums <span class="operator">=</span> nums.sorted()</span><br><span class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>sortedNums.count &#123;</span><br><span class="line">          <span class="keyword">if</span> k <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> sortedNums[k] <span class="operator">==</span> sortedNums[k <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">              <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> (k <span class="operator">+</span> <span class="number">1</span>)<span class="operator">..&lt;</span>sortedNums.count &#123;</span><br><span class="line">              <span class="keyword">if</span> i <span class="operator">&gt;</span> k <span class="operator">+</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span> sortedNums[i] <span class="operator">==</span> sortedNums[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                  <span class="keyword">continue</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">var</span> left <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">              <span class="keyword">var</span> right <span class="operator">=</span> sortedNums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">              <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">                  <span class="keyword">let</span> sum <span class="operator">=</span> sortedNums[k] <span class="operator">+</span> sortedNums[i] <span class="operator">+</span> sortedNums[left] <span class="operator">+</span> sortedNums[right]</span><br><span class="line">                  <span class="keyword">if</span> sum <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                      left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                      right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      result.append([sortedNums[k], sortedNums[i], sortedNums[left], sortedNums[right]])</span><br><span class="line">                      <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[left] <span class="operator">==</span> sortedNums[left <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">                          left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">while</span> left <span class="operator">&lt;</span> right <span class="operator">&amp;&amp;</span> sortedNums[right] <span class="operator">==</span> sortedNums[right <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                          right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                      &#125;</span><br><span class="line">                      left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                      right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 62.86% 使用 Swift 的用户</p>
<p>内存消耗 : 15.23 MB, 击败 22.86% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fourSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> sortedNums = nums.sorted()</span><br><span class="line">        <span class="keyword">for</span> (k <span class="keyword">in</span> <span class="number">0</span> until sortedNums.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; sortedNums[k] == sortedNums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> k + <span class="number">1</span> until sortedNums.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; sortedNums[i] == sortedNums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> left = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">var</span> right = sortedNums.size - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="keyword">val</span> sum = sortedNums[k].toLong() + sortedNums[i].toLong() + sortedNums[left].toLong() + sortedNums[right].toLong()</span><br><span class="line">                    <span class="keyword">when</span> &#123;</span><br><span class="line">                        sum &lt; target -&gt; left++</span><br><span class="line">                        sum &gt; target -&gt; right--</span><br><span class="line">                        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                            result.add(listOf(sortedNums[k], sortedNums[i], sortedNums[left], sortedNums[right]))</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[left] == sortedNums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                                left++</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums[right] == sortedNums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                                right--</span><br><span class="line">                            &#125;</span><br><span class="line">                            left++</span><br><span class="line">                            right--</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 336 ms, 击败 11.11% 使用 Kotlin 的用户</p>
<p>内存消耗 : 41.36 MB, 击败 11.11% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; fourSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="built_in">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">          <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result.add([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">              left++;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">              right--;</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 448 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 153.90 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums)<span class="number">-2</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            left, right := j+<span class="number">1</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">                sum := nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">                    result = <span class="built_in">append</span>(result, []<span class="type">int</span>&#123;nums[i], nums[j], nums[left], nums[right]&#125;)</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>] &#123;</span><br><span class="line">                        left++</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++</span><br><span class="line">                    <span class="keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>] &#123;</span><br><span class="line">                        right--</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 45.41% 使用 Go 的用户</p>
<p>内存消耗 : 2.56 MB, 击败 96.90% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">four_sum</span>(<span class="params">nums, target</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> nums.length &lt; <span class="number">4</span></span><br><span class="line">    nums.sort!</span><br><span class="line">    (<span class="number">0</span>...nums.length-<span class="number">3</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">next</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]</span><br><span class="line">        (i+<span class="number">1</span>...nums.length-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]</span><br><span class="line">            left = j + <span class="number">1</span></span><br><span class="line">            right = nums.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right</span><br><span class="line">                sum = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> sum == target</span><br><span class="line">                    result.push([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elsif</span> sum &lt; target</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 416 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.90 MB, 击败 20.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> sortedNums = nums.sorted</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until sortedNums.length - <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; sortedNums(i) == sortedNums(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        ()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i + <span class="number">1</span> until sortedNums.length - <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; sortedNums(j) == sortedNums(j - <span class="number">1</span>)) &#123;</span><br><span class="line">            ()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> left = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> right = sortedNums.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">              <span class="keyword">val</span> sum = sortedNums(i).toLong + sortedNums(j).toLong + sortedNums(left).toLong + sortedNums(right).toLong</span><br><span class="line">              <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                result = result :+ <span class="type">List</span>(sortedNums(i), sortedNums(j), sortedNums(left), sortedNums(right))</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                  left += <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(left) == sortedNums(left - <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                  right -= <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">while</span> (left &lt; right &amp;&amp; sortedNums(right) == sortedNums(right + <span class="number">1</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 604 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.20 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">four_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="title function_ invoke__">len</span>() &lt; <span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted_nums</span> = nums;</span><br><span class="line">        sorted_nums.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; sorted_nums[i] == sorted_nums[i - <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> i + <span class="number">1</span>..sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> &amp;&amp; sorted_nums[j] == sorted_nums[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = sorted_nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">sum</span> = sorted_nums[i] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[j] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[left] <span class="keyword">as</span> <span class="type">i64</span> + sorted_nums[right] <span class="keyword">as</span> <span class="type">i64</span>;</span><br><span class="line">                    <span class="keyword">if</span> sum == target <span class="keyword">as</span> <span class="type">i64</span> &#123;</span><br><span class="line">                        result.<span class="title function_ invoke__">push</span>(<span class="built_in">vec!</span>[sorted_nums[i], sorted_nums[j], sorted_nums[left], sorted_nums[right]]);</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; sorted_nums[left] == sorted_nums[left + <span class="number">1</span>] &#123;</span><br><span class="line">                            left += <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right &amp;&amp; sorted_nums[right] == sorted_nums[right - <span class="number">1</span>] &#123;</span><br><span class="line">                            right -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; target <span class="keyword">as</span> <span class="type">i64</span> &#123;</span><br><span class="line">                        left += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right -= <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 67.74% 使用 Rust 的用户</p>
<p>内存消耗 : 2.17 MB, 击败 32.26% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/zh-CN/39c7a7159eb2/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>冬至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/39c7a7159eb2/201912220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>冬至</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00019.删除链表的倒数第 N 个结点</title>
    <url>/zh-CN/1baff17c8f20/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2>

<blockquote>
<p>输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2<br>输出：[1,2,3,5]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：head &#x3D; [1], n &#x3D; 1<br>输出：[]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：head &#x3D; [1,2], n &#x3D; 1<br>输出：[1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>链表中结点的数目为 sz</li>
<li>1 &lt;&#x3D; sz &lt;&#x3D; 30</li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 100</li>
<li>1 &lt;&#x3D; n &lt;&#x3D; sz</li>
</ul>
<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummy;</span><br><span class="line">        ListNode* slow = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* toDelete = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 10.97 MB, 击败 11.94% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.65 MB, 击败 7.23% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head, n</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        fast = slow = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">None</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = slow.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 29.15% 使用 Python 的用户</p>
<p>内存消耗 : 13.18 MB, 击败 7.92% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        fast = slow = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = slow.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 40 ms, 击败 81.53% 使用 Python3 的用户</p>
<p>内存消耗 : 16.98 MB, 击败 8.12% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">removeNthFromEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> dummy;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">toDelete</span> =</span> slow-&gt;next;</span><br><span class="line">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(toDelete);</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 6.30 MB, 击败 82.47% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">RemoveNthFromEnd</span>(<span class="params">ListNode head, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode fast = dummy;</span><br><span class="line">        ListNode slow = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 85.59% 使用 C# 的用户</p>
<p>内存消耗 : 40.11 MB, 击败 10.36% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> fast = dummy;</span><br><span class="line">    <span class="keyword">let</span> slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 40.96% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.12 MB, 击败 7.04% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">head: ListNode | <span class="literal">null</span>, n: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fast</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">slow</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (slow !== <span class="literal">null</span> &amp;&amp; slow.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">        slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 43.59% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.61 MB, 击败 8.16% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeNthFromEnd</span>(<span class="params"><span class="variable">$head</span>, <span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$fast</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="variable">$slow</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$fast</span> = <span class="variable">$fast</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$fast</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$slow</span> = <span class="variable">$slow</span>-&gt;next;</span><br><span class="line">            <span class="variable">$fast</span> = <span class="variable">$fast</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$slow</span>-&gt;next = <span class="variable">$slow</span>-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 58.70% 使用 PHP 的用户</p>
<p>内存消耗 : 19.46 MB, 击败 6.52% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeNthFromEnd</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> fast: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">var</span> slow: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span>n &#123;</span><br><span class="line">            fast <span class="operator">=</span> fast<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> fast <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            slow <span class="operator">=</span> slow<span class="operator">?</span>.next</span><br><span class="line">            fast <span class="operator">=</span> fast<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow<span class="operator">?</span>.next <span class="operator">=</span> slow<span class="operator">?</span>.next<span class="operator">?</span>.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 97.71% 使用 Swift 的用户</p>
<p>内存消耗 : 15.30 MB, 击败 6.29% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeNthFromEnd</span><span class="params">(head: <span class="type">ListNode</span>?, n: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> fast: ListNode? = dummy</span><br><span class="line">        <span class="keyword">var</span> slow: ListNode? = dummy</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.n) &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow?.next</span><br><span class="line">            fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow?.next = slow?.next?.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 156 ms, 击败 88.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 33.89 MB, 击败 51.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? removeNthFromEnd(ListNode? head, <span class="built_in">int</span> n) &#123;</span><br><span class="line">    ListNode? dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode? fast = dummy;</span><br><span class="line">    ListNode? slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      fast = fast!.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">      slow = slow!.next;</span><br><span class="line">      fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow!.next = slow.next!.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 388 ms, 击败 0.00% 使用 Dart 的用户</p>
<p>内存消耗 : 148.34 MB, 击败 85.71% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">	dummy := &amp;ListNode&#123;Val: <span class="number">0</span>, Next: head&#125;</span><br><span class="line">	fast, slow := dummy, dummy</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		fast = fast.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> fast != <span class="literal">nil</span> &#123;</span><br><span class="line">		fast = fast.Next</span><br><span class="line">		slow = slow.Next</span><br><span class="line">	&#125;</span><br><span class="line">	slow.Next = slow.Next.Next</span><br><span class="line">	<span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.07 MB, 击败 83.45% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_nth_from_end</span>(<span class="params">head, n</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  fast = dummy</span><br><span class="line">  slow = dummy</span><br><span class="line">  (n + <span class="number">1</span>).times &#123; fast = fast.<span class="keyword">next</span> &#125;</span><br><span class="line">  <span class="keyword">while</span> fast != <span class="literal">nil</span></span><br><span class="line">    slow = slow.<span class="keyword">next</span></span><br><span class="line">    fast = fast.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  slow.<span class="keyword">next</span> = slow.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.75 MB, 击败 16.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span></span>(head: <span class="type">ListNode</span>, n: <span class="type">Int</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dummy = <span class="keyword">new</span> <span class="type">ListNode</span>()</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">var</span> fast = dummy</span><br><span class="line">    <span class="keyword">var</span> slow = dummy</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to n) &#123;</span><br><span class="line">      fast = fast.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">      slow = slow.next</span><br><span class="line">      fast = fast.next</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next</span><br><span class="line">    dummy.next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 556 ms, 击败 12.50% 使用 Scala 的用户</p>
<p>内存消耗 : 56.24 MB, 击败 62.50% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_nth_from_end</span>(head: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dummy</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode &#123; val: <span class="number">0</span>, next: head &#125;);</span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">slow</span> = &amp;<span class="keyword">mut</span> dummy <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">Box</span>&lt;ListNode&gt;;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">fast</span> = &amp;<span class="keyword">mut</span> dummy <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">Box</span>&lt;ListNode&gt;;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">                fast = (*fast).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (*fast).next.<span class="title function_ invoke__">is_some</span>() &#123;</span><br><span class="line">                fast = (*fast).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                slow = (*slow).next.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            (*slow).next = (*slow).next.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">unwrap</span>().next;</span><br><span class="line">        &#125;</span><br><span class="line">        dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 16.30% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00020.有效的括号</title>
    <url>/zh-CN/f6fa43793369/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “()”<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “()[]{}”<br>输出：true</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “(]”<br>输出：false</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; s.length &lt;&#x3D; 10^4$</li>
<li>s 仅由括号 ‘()[]{}’ 组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stack;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; mapping = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>&amp; c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.<span class="built_in">find</span>(c) != mapping.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">char</span> top_element = stack.<span class="built_in">empty</span>() ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (top_element != mapping[c]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 34.94% 使用 C++ 的用户</p>
<p>内存消耗 : 6.66 MB, 击败 20.29% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, Character&gt; mapping = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapping.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        mapping.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        mapping.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.containsKey(c)) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">topElement</span> <span class="operator">=</span> stack.isEmpty() ? <span class="string">&#x27;#&#x27;</span> : stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (topElement != mapping.get(c)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 51.90% 使用 Java 的用户</p>
<p>内存消耗 : 40.38 MB, 击败 15.69% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s</span>):</span><br><span class="line">        stack = []</span><br><span class="line">        mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> mapping:</span><br><span class="line">                top_element = stack.pop() <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> mapping[char] != top_element:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 28.80% 使用 Python 的用户</p>
<p>内存消耗 : 13.06 MB, 击败 58.31% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> mapping:</span><br><span class="line">                top_element = stack.pop() <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> mapping[char] != top_element:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 97.63% 使用 Python3 的用户</p>
<p>内存消耗 : 16.83 MB, 击败 16.72% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> <span class="built_in">stack</span>[len];</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">stack</span>[++top] = s[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> temp = <span class="built_in">stack</span>[top--];</span><br><span class="line">            <span class="keyword">if</span> ((s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;(&#x27;</span>) || (s[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;[&#x27;</span>) || (s[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 41.72% 使用 C 的用户</p>
<p>内存消耗 : 6.13 MB, 击败 89.19% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        Stack&lt;<span class="built_in">char</span>&gt; stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">        Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">char</span>&gt; mapping = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>, <span class="built_in">char</span>&gt; &#123;&#123;<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>&#125;, &#123;<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>&#125;, &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.ContainsValue(c)) &#123;</span><br><span class="line">                stack.Push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mapping.TryGetValue(c, <span class="keyword">out</span> <span class="built_in">char</span> <span class="keyword">value</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.Count == <span class="number">0</span> || stack.Pop() != <span class="keyword">value</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.Count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 95.95% 使用 C# 的用户</p>
<p>内存消耗 : 38.44 MB, 击败 12.55% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">const</span> mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> topElement = stack.<span class="property">length</span> === <span class="number">0</span> ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (mapping[char] !== topElement) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(char);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 71.45% 使用 JavaScript 的用户</p>
<p>内存消耗 : 48.31 MB, 击败 12.49% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">stack</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mapping</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125; = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> char = s[i];</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> topElement = stack.<span class="property">length</span> === <span class="number">0</span> ? <span class="string">&#x27;#&#x27;</span> : stack.<span class="title function_">pop</span>()!;</span><br><span class="line">            <span class="keyword">if</span> (mapping[char] !== topElement) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(char);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 64.87% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.40 MB, 击败 6.85% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$s</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$stack</span> = [];</span><br><span class="line">        <span class="variable">$mapping</span> = [<span class="string">&#x27;)&#x27;</span> =&gt; <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> =&gt; <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$char</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$char</span>, <span class="variable">$mapping</span>)) &#123;</span><br><span class="line">                <span class="variable">$topElement</span> = <span class="keyword">empty</span>(<span class="variable">$stack</span>) ? <span class="string">&#x27;#&#x27;</span> : <span class="title function_ invoke__">array_pop</span>(<span class="variable">$stack</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$mapping</span>[<span class="variable">$char</span>] !== <span class="variable">$topElement</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$char</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable">$stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 63.54% 使用 PHP 的用户</p>
<p>内存消耗 : 19.52 MB, 击败 6.25% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isValid</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stack <span class="operator">=</span> [<span class="type">Character</span>]()</span><br><span class="line">        <span class="keyword">let</span> mapping: [<span class="type">Character</span>: <span class="type">Character</span>] <span class="operator">=</span> [<span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>, <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> leftBracket <span class="operator">=</span> mapping[char] &#123;</span><br><span class="line">                <span class="keyword">if</span> stack.isEmpty <span class="operator">||</span> stack.popLast() <span class="operator">!=</span> leftBracket &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.append(char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.52 MB, 击败 5.91% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isValid</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> stack = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> mapping = mapOf(<span class="string">&#x27;)&#x27;</span> to <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> to <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> to <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (char <span class="keyword">in</span> s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mapping.containsKey(char)) &#123;</span><br><span class="line">                <span class="keyword">val</span> topElement = <span class="keyword">if</span> (stack.isEmpty()) <span class="string">&#x27;#&#x27;</span> <span class="keyword">else</span> stack.pop()</span><br><span class="line">                <span class="keyword">if</span> (mapping[char] != topElement) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 148 ms, 击败 66.67% 使用 Kotlin 的用户</p>
<p>内存消耗 : 33.78 MB, 击败 44.17% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isValid(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stack = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="built_in">String</span> char = s[i];</span><br><span class="line">      <span class="keyword">if</span> (mapping.containsKey(char)) &#123;</span><br><span class="line">        <span class="built_in">String</span> topElement = stack.isEmpty ? <span class="string">&#x27;#&#x27;</span> : stack.removeLast();</span><br><span class="line">        <span class="keyword">if</span> (mapping[char] != topElement) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.add(char);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 256 ms, 击败 85.71% 使用 Dart 的用户</p>
<p>内存消耗 : 147.11 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    mapping := <span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">rune</span>&#123;</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    stack := []<span class="type">rune</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, char := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> val, ok := mapping[char]; ok &#123;</span><br><span class="line">            <span class="keyword">var</span> topElement <span class="type">rune</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">                topElement = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                topElement, stack = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>], stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> val != topElement &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 1.93 MB, 击败 16.11% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">s</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> s.empty?</span><br><span class="line">    mapping = &#123; <span class="string">&#x27;)&#x27;</span> =&gt; <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span> =&gt; <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#x27;</span> &#125;</span><br><span class="line">    stack = []</span><br><span class="line">    s.each_char <span class="keyword">do</span> |<span class="params">char</span>|</span><br><span class="line">        <span class="keyword">if</span> mapping.key?(char)</span><br><span class="line">            top_element = stack.empty? ? <span class="string">&#x27;#&#x27;</span> : stack.pop</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> mapping[char] != top_element</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stack.push(char)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    stack.empty?</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 16.67% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.79 MB, 击败 8.33% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Stack</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">val</span> mapping = <span class="type">Map</span>(&#x27;)&#x27; -&gt; &#x27;(&#x27;, &#x27;]&#x27; -&gt; &#x27;[&#x27;, &#x27;&#125;&#x27; -&gt; &#x27;&#123;&#x27;)</span><br><span class="line">    <span class="keyword">val</span> stack = <span class="type">Stack</span>[<span class="type">Char</span>]()</span><br><span class="line">    <span class="keyword">for</span> (char &lt;- s) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mapping.contains(char)) &#123;</span><br><span class="line">        <span class="keyword">val</span> topElement = <span class="keyword">if</span> (stack.isEmpty) &#x27;#&#x27; <span class="keyword">else</span> stack.pop()</span><br><span class="line">        <span class="keyword">if</span> (mapping(char) != topElement) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.push(char)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 492 ms, 击败 28.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.64 MB, 击败 84.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_valid</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">mapping</span>: <span class="type">Vec</span>&lt;(<span class="type">char</span>, <span class="type">char</span>)&gt; = <span class="built_in">vec!</span>[(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>), (<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>), (<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>)];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">            <span class="keyword">match</span> c &#123;</span><br><span class="line">                <span class="string">&#x27;(&#x27;</span> | <span class="string">&#x27;[&#x27;</span> | <span class="string">&#x27;&#123;&#x27;</span> =&gt; stack.<span class="title function_ invoke__">push</span>(c),</span><br><span class="line">                _ =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;top) = stack.<span class="title function_ invoke__">last</span>() &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;(_, close)) = mapping.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">find</span>(|&amp;&amp;(open, _)| open == top) &#123;</span><br><span class="line">                            <span class="keyword">if</span> close == c &#123;</span><br><span class="line">                                stack.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.<span class="title function_ invoke__">is_empty</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.03 MB, 击败 65.16% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">is-valid</span> s)</span><br><span class="line">  (<span class="name">-&gt;</span> string? boolean?)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">string=?</span></span> s <span class="string">&quot;&quot;</span>) <span class="literal">#t</span></span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> loop ((<span class="name">s</span> (<span class="name"><span class="built_in">string-&gt;list</span></span> s)) (<span class="name">stack</span> &#x27;()))</span><br><span class="line">        (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">          ((<span class="name"><span class="built_in">null?</span></span> s) (<span class="name"><span class="built_in">null?</span></span> stack))</span><br><span class="line">          ((<span class="name"><span class="built_in">member</span></span> (<span class="name"><span class="built_in">car</span></span> s) &#x27;(<span class="literal">#\(</span> <span class="literal">#\[</span> <span class="literal">#\&#123;</span>)) (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> s) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s) stack)))</span><br><span class="line">          ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">member</span></span> (<span class="name"><span class="built_in">car</span></span> s) &#x27;(<span class="literal">#\)</span> <span class="literal">#\]</span> <span class="literal">#\&#125;</span>)) (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">null?</span></span> stack)) (<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> s)</span><br><span class="line">                                                                               (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\(</span>) <span class="literal">#\)</span>)</span><br><span class="line">                                                                                     ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\[</span>) <span class="literal">#\]</span>)</span><br><span class="line">                                                                                     ((<span class="name"><span class="built_in">char=?</span></span> (<span class="name"><span class="built_in">car</span></span> stack) <span class="literal">#\&#123;</span>) <span class="literal">#\&#125;</span>)))</span><br><span class="line">                                                 (<span class="name">loop</span> (<span class="name"><span class="built_in">cdr</span></span> s) (<span class="name"><span class="built_in">cdr</span></span> stack))))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> <span class="literal">#f</span>)))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 188 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 98.05 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00021.合并两个有序链表</title>
    <url>/zh-CN/87f52842f77d/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/87f52842f77d/201912250001.jpg" class="" title="示例1">

<blockquote>
<p>输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>两个链表的节点数目范围是 [0, 50]</li>
<li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li>
<li>l1 和 l2 均按 非递减顺序 排列</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">                current-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;next = list1 ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 55.64% 使用 C++ 的用户</p>
<p>内存消耗 : 14.73 MB, 击败 77.93% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                current.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.36 MB, 击败 9.94% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1, list2</span>):</span><br><span class="line">        dummy = ListNode(-<span class="number">1</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                current.<span class="built_in">next</span> = list1</span><br><span class="line">                list1 = list1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.<span class="built_in">next</span> = list2</span><br><span class="line">                list2 = list2.<span class="built_in">next</span></span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = list1 <span class="keyword">if</span> list1 <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 94.38% 使用 Python 的用户</p>
<p>内存消耗 : 12.98 MB, 击败 77.98% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list1:</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list2:</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">            list1.<span class="built_in">next</span> = self.mergeTwoLists(list1.<span class="built_in">next</span>, list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list2.<span class="built_in">next</span> = self.mergeTwoLists(list1, list2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 47.07% 使用 Python3 的用户</p>
<p>内存消耗 : 16.86 MB, 击败 15.63% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode* list1, <span class="keyword">struct</span> ListNode* list2)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> <span class="title">dummy</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">current</span> =</span> &amp;dummy;</span><br><span class="line">    dummy.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">            current-&gt;next = list1;</span><br><span class="line">            list1 = list1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;next = list2;</span><br><span class="line">            list2 = list2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;next = (list1 != <span class="literal">NULL</span>) ? list1 : list2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 70.71% 使用 C 的用户</p>
<p>内存消耗 : 6.79 MB, 击败 33.43% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode list1, ListNode list2</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                current.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 87.27% 使用 C# 的用户</p>
<p>内存消耗 : 40.66 MB, 击败 15.22% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">list1, list2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (list1 !== <span class="literal">null</span> &amp;&amp; list2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1.<span class="property">val</span> &lt;= list2.<span class="property">val</span>) &#123;</span><br><span class="line">            current.<span class="property">next</span> = list1;</span><br><span class="line">            list1 = list1.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.<span class="property">next</span> = list2;</span><br><span class="line">            list2 = list2.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current.<span class="property">next</span> = list1 !== <span class="literal">null</span> ? list1 : list2;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 16.68% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.72 MB, 击败 13.06% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">list1: ListNode | <span class="literal">null</span>, list2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.<span class="property">val</span> &lt;= list2.<span class="property">val</span>) &#123;</span><br><span class="line">        list1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1.<span class="property">next</span>, list2);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1, list2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 28.31% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.95 MB, 击败 8.20% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeTwoLists</span>(<span class="params"><span class="variable">$list1</span>, <span class="variable">$list2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$list1</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable">$list2</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$list1</span>-&gt;val &lt;= <span class="variable">$list2</span>-&gt;val) &#123;</span><br><span class="line">                <span class="variable">$current</span>-&gt;next = <span class="variable">$list1</span>;</span><br><span class="line">                <span class="variable">$list1</span> = <span class="variable">$list1</span>-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$current</span>-&gt;next = <span class="variable">$list2</span>;</span><br><span class="line">                <span class="variable">$list2</span> = <span class="variable">$list2</span>-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$current</span> = <span class="variable">$current</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$current</span>-&gt;next = (<span class="variable">$list1</span> !== <span class="literal">null</span>) ? <span class="variable">$list1</span> : <span class="variable">$list2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 73.13% 使用 PHP 的用户</p>
<p>内存消耗 : 19.55 MB, 击败 5.97% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mergeTwoLists</span>(<span class="keyword">_</span> <span class="params">list1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">list2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l1 <span class="operator">=</span> list1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> list2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l2 <span class="operator">=</span> list2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> list1 &#125;</span><br><span class="line">        <span class="keyword">if</span> l1.val <span class="operator">&lt;</span> l2.val &#123;</span><br><span class="line">            l1.next <span class="operator">=</span> mergeTwoLists(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next <span class="operator">=</span> mergeTwoLists(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 14.80% 使用 Swift 的用户</p>
<p>内存消耗 : 15.41 MB, 击败 5.06% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mergeTwoLists</span><span class="params">(list1: <span class="type">ListNode</span>?, list2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1.`<span class="keyword">val</span>` &lt;= list2.`<span class="keyword">val</span>`) &#123;</span><br><span class="line">            list1.next = mergeTwoLists(list1.next, list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list2.next = mergeTwoLists(list1, list2.next)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 200 ms, 击败 6.76% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.70 MB, 击败 52.03% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? mergeTwoLists(ListNode? l1, ListNode? l2) &#123;</span><br><span class="line">    ListNode dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode? current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">        current!.next = l1;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current!.next = l2;</span><br><span class="line">        l2 = l2.next;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current!.next = l1 ?? l2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 372 ms, 击败 6.67% 使用 Dart 的用户</p>
<p>内存消耗 : 147.40 MB, 击败 93.33% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	dummy := &amp;ListNode&#123;&#125;</span><br><span class="line">	current := dummy</span><br><span class="line">	<span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> list1.Val &lt;= list2.Val &#123;</span><br><span class="line">			current.Next = list1</span><br><span class="line">			list1 = list1.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			current.Next = list2</span><br><span class="line">			list2 = list2.Next</span><br><span class="line">		&#125;</span><br><span class="line">		current = current.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		current.Next = list1</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		current.Next = list2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 36.50% 使用 Go 的用户</p>
<p>内存消耗 : 2.35 MB, 击败 60.06% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; list1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; list2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">list1, list2</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(-<span class="number">1</span>)</span><br><span class="line">  current = dummy</span><br><span class="line">  <span class="keyword">while</span> list1 &amp;&amp; list2</span><br><span class="line">    <span class="keyword">if</span> list1.val &lt;= list2.val</span><br><span class="line">      current.<span class="keyword">next</span> = list1</span><br><span class="line">      list1 = list1.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      current.<span class="keyword">next</span> = list2</span><br><span class="line">      list2 = list2.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    current = current.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  current.<span class="keyword">next</span> = list1 |<span class="params"></span>| list2</span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.81 MB, 击败 22.22% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span></span>(list1: <span class="type">ListNode</span>, list2: <span class="type">ListNode</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.x &lt;= list2.x) &#123;</span><br><span class="line">      list1.next = mergeTwoLists(list1.next, list2)</span><br><span class="line">      <span class="keyword">return</span> list1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list2.next = mergeTwoLists(list1, list2.next)</span><br><span class="line">      <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 488 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 56.16 MB, 击败 94.12% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">merge_two_lists</span>(<span class="keyword">mut</span> list1: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, <span class="keyword">mut</span> list2: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dummy</span> = <span class="title function_ invoke__">Some</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode &#123; val: <span class="number">0</span>, next: <span class="literal">None</span> &#125;));</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = &amp;<span class="keyword">mut</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> (<span class="title function_ invoke__">Some</span>(node1), <span class="title function_ invoke__">Some</span>(node2)) = (list1.<span class="title function_ invoke__">as_deref_mut</span>(), list2.<span class="title function_ invoke__">as_deref_mut</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> node1.val &lt;= node2.val &#123;</span><br><span class="line">                current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list1.<span class="title function_ invoke__">take</span>();</span><br><span class="line">                list1 = current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">as_deref_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">take</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list2.<span class="title function_ invoke__">take</span>();</span><br><span class="line">                list2 = current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">as_deref_mut</span>().<span class="title function_ invoke__">unwrap</span>().next.<span class="title function_ invoke__">take</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            current = &amp;<span class="keyword">mut</span> current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next = list1.<span class="title function_ invoke__">or</span>(list2);</span><br><span class="line">        dummy.<span class="title function_ invoke__">unwrap</span>().next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.04 MB, 击败 56.83% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%% -record(list_node, &#123;val = 0 :: integer(),</span></span><br><span class="line"><span class="comment">%%                     next = null :: &#x27;null&#x27; | #list_node&#123;&#125;&#125;).</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">merge_two_lists</span><span class="params">(List1, List2)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> &#123;List1, List2&#125; <span class="keyword">of</span></span><br><span class="line">        &#123;null, List2&#125; -&gt; List2;</span><br><span class="line">        &#123;List1, null&#125; -&gt; List1;</span><br><span class="line">        &#123;Node1 = #list_node&#123;val = Val1, next = Next1&#125;, Node2 = #list_node&#123;val = Val2, next = Next2&#125;&#125; -&gt;</span><br><span class="line">            <span class="keyword">if</span> Val1 =&lt; Val2 -&gt;</span><br><span class="line">                Node1#list_node&#123;next = merge_two_lists(Next1, Node2)&#125;;</span><br><span class="line">            <span class="literal">true</span> -&gt;</span><br><span class="line">                Node2#list_node&#123;next = merge_two_lists(Node1, Next2)&#125;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 268 ms, 击败 -% 使用 Erlang 的用户</p>
<p>内存消耗 : 59.08 MB, 击败 -% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># defmodule ListNode do</span></span><br><span class="line"><span class="comment">#   @type t :: %__MODULE__&#123;</span></span><br><span class="line"><span class="comment">#           val: integer,</span></span><br><span class="line"><span class="comment">#           next: ListNode.t() | nil</span></span><br><span class="line"><span class="comment">#         &#125;</span></span><br><span class="line"><span class="comment">#   defstruct val: 0, next: nil</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> merge_two_lists(list1 :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span>, list2 :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span>) :: <span class="title class_">ListNode</span>.t | <span class="literal">nil</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(<span class="literal">nil</span>, list2), <span class="symbol">do:</span> list2</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(list1, <span class="literal">nil</span>), <span class="symbol">do:</span> list1</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span></span>(%<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val1, <span class="symbol">next:</span> next1&#125; = list1, %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val2, <span class="symbol">next:</span> next2&#125; = list2) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> val1 &lt;= val2 <span class="keyword">do</span></span><br><span class="line">      %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val1, <span class="symbol">next:</span> merge_two_lists(next1, list2)&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      %<span class="title class_">ListNode</span>&#123;<span class="symbol">val:</span> val2, <span class="symbol">next:</span> merge_two_lists(list1, next2)&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 344 ms, 击败 -% 使用 Elixir 的用户</p>
<p>内存消耗 : 67.86 MB, 击败 -% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00022.括号生成</title>
    <url>/zh-CN/5455ee7e9622/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：n &#x3D; 3<br>输出：[“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 1<br>输出：[“()”]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 8</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;std::string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        <span class="built_in">generate</span>(<span class="string">&quot;&quot;</span>, n, n, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generate</span><span class="params">(string current, <span class="type">int</span> left, <span class="type">int</span> right, vector&lt;string&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">            <span class="built_in">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 70.78% 使用 C++ 的用户</p>
<p>内存消耗 : 15.12 MB, 击败 31.77% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(String current, <span class="type">int</span> left, <span class="type">int</span> right, List&lt;String&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">            generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 71.45% 使用 Java 的用户</p>
<p>内存消耗 : 42.19 MB, 击败 31.97% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">current, left, right, result</span>):</span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">and</span> right == <span class="number">0</span>:</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; <span class="number">0</span>:</span><br><span class="line">                generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result)</span><br><span class="line">            <span class="keyword">if</span> right &gt; left:</span><br><span class="line">                generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result)</span><br><span class="line">        result = []</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 61.89% 使用 Python 的用户</p>
<p>内存消耗 : 13.23 MB, 击败 66.19% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">current, left, right, result</span>):</span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">and</span> right == <span class="number">0</span>:</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; <span class="number">0</span>:</span><br><span class="line">                generate(current + <span class="string">&#x27;(&#x27;</span>, left - <span class="number">1</span>, right, result)</span><br><span class="line">            <span class="keyword">if</span> right &gt; left:</span><br><span class="line">                generate(current + <span class="string">&#x27;)&#x27;</span>, left, right - <span class="number">1</span>, result)</span><br><span class="line">        result = []</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 99.93% 使用 Python3 的用户</p>
<p>内存消耗 : 17.18 MB, 击败 13.63% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">backTarck</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> *returnSize, <span class="type">char</span> **returnStr, <span class="type">int</span> leftNum, <span class="type">int</span> rightNum, <span class="type">char</span> *<span class="built_in">stack</span>, <span class="type">int</span> top)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((rightNum + leftNum) &gt;= <span class="number">2</span> * n) &#123; </span><br><span class="line">        <span class="comment">// 当前长度已达2n</span></span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        returnStr[*returnSize] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (top + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(returnStr[*returnSize], <span class="built_in">stack</span>);</span><br><span class="line">        (*returnSize)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftNum &lt; n) &#123;</span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        backTarck(n, returnSize, returnStr, leftNum + <span class="number">1</span>, rightNum, <span class="built_in">stack</span>, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rightNum &lt; leftNum) &#123;</span><br><span class="line">        <span class="built_in">stack</span>[top] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        backTarck(n, returnSize, returnStr, leftNum, rightNum + <span class="number">1</span>, <span class="built_in">stack</span>, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>** <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> *returnSize)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **returnStr = (<span class="type">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span> *) * <span class="number">2000</span>);</span><br><span class="line">    <span class="type">char</span> *<span class="built_in">stack</span> = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    backTarck(n, returnSize, returnStr, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">stack</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> returnStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 7.05 MB, 击败 72.42% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">GenerateParenthesis</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Generate(result, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Generate</span>(<span class="params">IList&lt;<span class="built_in">string</span>&gt; result, <span class="built_in">string</span> current, <span class="built_in">int</span> left, <span class="built_in">int</span> right, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.Length == <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.Add(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            Generate(result, current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            Generate(result, current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 98.27% 使用 C# 的用户</p>
<p>内存消耗 : 48.10 MB, 击败 12.14% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">current, left, right</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">length</span> === <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">generate</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 33.89% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.30 MB, 击败 9.30% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateParenthesis</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">current: <span class="built_in">string</span>, left: <span class="built_in">number</span>, right: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">length</span> === <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            <span class="title function_">generate</span>(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">generate</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 13.04% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.48 MB, 击败 9.88% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateParenthesis</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$current</span>, <span class="variable">$left</span>, <span class="variable">$right</span>, <span class="variable">$n</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$current</span>) === <span class="number">2</span> * <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$result</span>, <span class="variable">$current</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$left</span> &lt; <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$current</span> . <span class="string">&#x27;(&#x27;</span>, <span class="variable">$left</span> + <span class="number">1</span>, <span class="variable">$right</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$right</span> &lt; <span class="variable">$left</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$current</span> . <span class="string">&#x27;)&#x27;</span>, <span class="variable">$left</span>, <span class="variable">$right</span> + <span class="number">1</span>, <span class="variable">$n</span>, <span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 25.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.68 MB, 击败 18.75% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">generateParenthesis</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line">        backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">current</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">result</span>: <span class="keyword">inout</span> [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> current.count <span class="operator">==</span> <span class="number">2</span> <span class="operator">*</span> n &#123;</span><br><span class="line">            result.append(current)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left <span class="operator">&lt;</span> n &#123;</span><br><span class="line">            backtrack(current <span class="operator">+</span> <span class="string">&quot;(&quot;</span>, left <span class="operator">+</span> <span class="number">1</span>, right, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right <span class="operator">&lt;</span> left &#123;</span><br><span class="line">            backtrack(current <span class="operator">+</span> <span class="string">&quot;)&quot;</span>, left, right <span class="operator">+</span> <span class="number">1</span>, n, <span class="operator">&amp;</span>result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 8.82% 使用 Swift 的用户</p>
<p>内存消耗 : 15.61 MB, 击败 7.84% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">generateParenthesis</span><span class="params">(n: <span class="type">Int</span>)</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result: MutableList&lt;String&gt; = mutableListOf()</span><br><span class="line">        backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(current: <span class="type">String</span>, left: <span class="type">Int</span>, right: <span class="type">Int</span>, n: <span class="type">Int</span>, result: <span class="type">MutableList</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">            result.add(current)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            backtrack(<span class="string">&quot;<span class="variable">$current</span>(&quot;</span>, left + <span class="number">1</span>, right, n, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">            backtrack(<span class="string">&quot;<span class="variable">$current</span>)&quot;</span>, left, right + <span class="number">1</span>, n, result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 204 ms, 击败 15.38% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.29 MB, 击败 75.38% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; generateParenthesis(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; result = [];</span><br><span class="line">    _backtrack(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _backtrack(<span class="built_in">String</span> current, <span class="built_in">int</span> left, <span class="built_in">int</span> right, <span class="built_in">int</span> n, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; result) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">      result.add(current);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">      _backtrack(<span class="string">&#x27;<span class="subst">$current</span>(&#x27;</span>, left + <span class="number">1</span>, right, n, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">      _backtrack(<span class="string">&#x27;<span class="subst">$current</span>)&#x27;</span>, left, right + <span class="number">1</span>, n, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 288 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.64 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="type">int</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> result []<span class="type">string</span></span><br><span class="line">	backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, &amp;result)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(current <span class="type">string</span>, left <span class="type">int</span>, right <span class="type">int</span>, n <span class="type">int</span>, result *[]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(current) == <span class="number">2</span>*n &#123;</span><br><span class="line">		*result = <span class="built_in">append</span>(*result, current)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> left &lt; n &#123;</span><br><span class="line">		backtrack(current+<span class="string">&quot;(&quot;</span>, left+<span class="number">1</span>, right, n, result)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> right &lt; left &#123;</span><br><span class="line">		backtrack(current+<span class="string">&quot;)&quot;</span>, left, right+<span class="number">1</span>, n, result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.61 MB, 击败 62.59% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_parenthesis</span>(<span class="params">n</span>)</span><br><span class="line">  result = []</span><br><span class="line">  backtrack(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, n, result)</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">current, left, right, n, result</span>)</span><br><span class="line">  <span class="keyword">if</span> current.length == <span class="number">2</span> * n</span><br><span class="line">    result &lt;&lt; current</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> left &lt; n</span><br><span class="line">    backtrack(current + <span class="string">&#x27;(&#x27;</span>, left + <span class="number">1</span>, right, n, result)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> right &lt; left</span><br><span class="line">    backtrack(current + <span class="string">&#x27;)&#x27;</span>, left, right + <span class="number">1</span>, n, result)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.92 MB, 击败 12.50% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span></span>(n: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(current: <span class="type">String</span>, left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.length == <span class="number">2</span> * n) &#123;</span><br><span class="line">        result = current :: result</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">        backtrack(current + <span class="string">&quot;(&quot;</span>, left + <span class="number">1</span>, right)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (right &lt; left) &#123;</span><br><span class="line">        backtrack(current + <span class="string">&quot;)&quot;</span>, left, right + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 452 ms, 击败 -% 使用 Scala 的用户</p>
<p>内存消耗 : 52.77 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">generate_parenthesis</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(<span class="type">String</span>::<span class="title function_ invoke__">new</span>(), <span class="number">0</span>, <span class="number">0</span>, n, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">backtrack</span>(current: <span class="type">String</span>, left: <span class="type">i32</span>, right: <span class="type">i32</span>, n: <span class="type">i32</span>, result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">if</span> current.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> == <span class="number">2</span> * n &#123;</span><br><span class="line">            result.<span class="title function_ invoke__">push</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left &lt; n &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_current</span> = current.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">            new_current.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(new_current, left + <span class="number">1</span>, right, n, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right &lt; left &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_current</span> = current.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">            new_current.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">Self</span>::<span class="title function_ invoke__">backtrack</span>(new_current, left, right + <span class="number">1</span>, n, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.31 MB, 击败 18.09% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00023.合并 K 个升序链表</title>
    <url>/zh-CN/3c6e9a69b6fb/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表数组，每个链表都已经按升序排列。</p>
<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：lists &#x3D; [[1,4,5],[1,3,4],[2,6]]<br>输出：[1,1,2,3,4,4,5,6]<br>解释：链表数组如下：<br>[<br> 1-&gt;4-&gt;5,<br> 1-&gt;3-&gt;4,<br> 2-&gt;6<br>]<br>将它们合并到一个有序链表中得到。<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：lists &#x3D; []<br>输出：[]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：lists &#x3D; [[]]<br>输出：[]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>k &#x3D;&#x3D; lists.length</li>
<li>$0 &lt;&#x3D; k &lt;&#x3D; 10^4$</li>
<li>0 &lt;&#x3D; lists[i].length &lt;&#x3D; 500</li>
<li>$-10^4 &lt;&#x3D; lists[i][j] &lt;&#x3D; 10^4$</li>
<li>lists[i] 按 升序 排列</li>
<li>$lists[i].length 的总和不超过 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(std::vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeLists</span><span class="params">(std::vector&lt;ListNode*&gt;&amp; lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        ListNode* l1 = <span class="built_in">mergeLists</span>(lists, left, mid);</span><br><span class="line">        ListNode* l2 = <span class="built_in">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            l1-&gt;next = <span class="built_in">mergeTwoLists</span>(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2-&gt;next = <span class="built_in">mergeTwoLists</span>(l1, l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 89.11% 使用 C++ 的用户</p>
<p>内存消耗 : 16.66 MB, 击败 14.97% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">mergeLists</span><span class="params">(ListNode[] lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> mergeLists(lists, left, mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> mergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 79.3% 使用 Java 的用户</p>
<p>内存消耗 : 43.41 MB, 击败 14.48% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.merge_lists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">self, lists, left, right</span>):</span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        l1 = self.merge_lists(lists, left, mid)</span><br><span class="line">        l2 = self.merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> self.merge_two_lists(l1, l2)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            l1.<span class="built_in">next</span> = self.merge_two_lists(l1.<span class="built_in">next</span>, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.<span class="built_in">next</span> = self.merge_two_lists(l1, l2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 98 ms, 击败 35.65% 使用 Python 的用户</p>
<p>内存消耗 : 23.25 MB, 击败 12.82% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.merge_lists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        l1 = self.merge_lists(lists, left, mid)</span><br><span class="line">        l2 = self.merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> self.merge_two_lists(l1, l2)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            l1.<span class="built_in">next</span> = self.merge_two_lists(l1.<span class="built_in">next</span>, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l2.<span class="built_in">next</span> = self.merge_two_lists(l1, l2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 76.55% 使用 Python3 的用户</p>
<p>内存消耗 : 20.19 MB, 击败 17.06% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">        l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeKLists</span><span class="params">(<span class="keyword">struct</span> ListNode** lists, <span class="type">int</span> listsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (listsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (listsSize == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = listsSize / <span class="number">2</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">l1</span> =</span> mergeKLists(lists, mid);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">l2</span> =</span> mergeKLists(lists + mid, listsSize - mid);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 97.55% 使用 C 的用户</p>
<p>内存消耗 : 8.04 MB, 击败 98.02% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">MergeKLists</span>(<span class="params">ListNode[] lists</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MergeLists(lists, <span class="number">0</span>, lists.Length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">MergeLists</span>(<span class="params">ListNode[] lists, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        ListNode l1 = MergeLists(lists, left, mid);</span><br><span class="line">        ListNode l2 = MergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> MergeTwoLists(l1, l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">MergeTwoLists</span>(<span class="params">ListNode l1, ListNode l2</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = MergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = MergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 73 ms, 击败 98.76% 使用 C# 的用户</p>
<p>内存消耗 : 46.32 MB, 击败 7.46% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode[]</span>&#125; <span class="variable">lists</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeKLists = <span class="keyword">function</span>(<span class="params">lists</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lists || lists.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mergeLists = <span class="keyword">function</span>(<span class="params">lists, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> l1 = <span class="title function_">mergeLists</span>(lists, left, mid);</span><br><span class="line">    <span class="keyword">var</span> l2 = <span class="title function_">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeTwoLists</span>(l1, l2);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>) &#123;</span><br><span class="line">        l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 77 ms, 击败 92.51% 使用 JavaScript 的用户</p>
<p>内存消耗 : 55.14 MB, 击败 11.95% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeKLists</span>(<span class="params">lists: <span class="built_in">Array</span>&lt;ListNode | <span class="literal">null</span>&gt;</span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lists || lists.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeLists</span>(lists, <span class="number">0</span>, lists.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeLists</span>(<span class="params">lists: <span class="built_in">Array</span>&lt;ListNode | <span class="literal">null</span>&gt;, left: <span class="built_in">number</span>, right: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> l1 = <span class="title function_">mergeLists</span>(lists, left, mid);</span><br><span class="line">    <span class="keyword">const</span> l2 = <span class="title function_">mergeLists</span>(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeTwoLists</span>(l1, l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">l1: ListNode | <span class="literal">null</span>, l2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!l2) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>) &#123;</span><br><span class="line">        l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 95.94% 使用 TypeScript 的用户</p>
<p>内存消耗 : 56.80 MB, 击败 10.66% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode[] $lists</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeKLists</span>(<span class="params"><span class="variable">$lists</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$lists</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$lists</span>) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeLists</span>(<span class="params"><span class="variable">$lists</span>, <span class="variable">$left</span>, <span class="variable">$right</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$left</span> == <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$lists</span>[<span class="variable">$left</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>(<span class="variable">$right</span> - <span class="variable">$left</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$l1</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="variable">$left</span>, <span class="variable">$mid</span>);</span><br><span class="line">        <span class="variable">$l2</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeLists</span>(<span class="variable">$lists</span>, <span class="variable">$mid</span> + <span class="number">1</span>, <span class="variable">$right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>, <span class="variable">$l2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeTwoLists</span>(<span class="params"><span class="variable">$l1</span>, <span class="variable">$l2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$l1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$l2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$l1</span>-&gt;val &lt; <span class="variable">$l2</span>-&gt;val) &#123;</span><br><span class="line">            <span class="variable">$l1</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>-&gt;next, <span class="variable">$l2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$l2</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mergeTwoLists</span>(<span class="variable">$l1</span>, <span class="variable">$l2</span>-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$l2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 26.56 MB, 击败 27.27% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mergeKLists</span>(<span class="keyword">_</span> <span class="params">lists</span>: [<span class="type">ListNode</span>?]) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> lists.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">mergeLists</span>(<span class="keyword">_</span> <span class="params">lists</span>: [<span class="type">ListNode</span>?], <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> left <span class="operator">==</span> right &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> l1 <span class="operator">=</span> mergeLists(lists, left, mid)</span><br><span class="line">        <span class="keyword">let</span> l2 <span class="operator">=</span> mergeLists(lists, mid <span class="operator">+</span> <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">mergeTwoLists</span>(<span class="keyword">_</span> <span class="params">l1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">l2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l1 <span class="operator">=</span> l1 <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> l2 <span class="operator">=</span> l2 <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l1.val <span class="operator">&lt;</span> l2.val &#123;</span><br><span class="line">            l1.next <span class="operator">=</span> mergeTwoLists(l1.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next <span class="operator">=</span> mergeTwoLists(l1, l2.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 77.22% 使用 Swift 的用户</p>
<p>内存消耗 : 16.79 MB, 击败 5.06% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mergeKLists</span><span class="params">(lists: <span class="type">Array</span>&lt;<span class="type">ListNode</span>?&gt;)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.size - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">mergeLists</span><span class="params">(lists: <span class="type">Array</span>&lt;<span class="type">ListNode</span>?&gt;, left: <span class="type">Int</span>, right: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> l1 = mergeLists(lists, left, mid)</span><br><span class="line">        <span class="keyword">val</span> l2 = mergeLists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">mergeTwoLists</span><span class="params">(l1: <span class="type">ListNode</span>?, l2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (l1.`<span class="keyword">val</span>` &lt; l2.`<span class="keyword">val</span>`) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2)</span><br><span class="line">            l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next)</span><br><span class="line">            l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 191 ms, 击败 98.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.37 MB, 击败 98.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? mergeKLists(<span class="built_in">List</span>&lt;ListNode?&gt; lists) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? mergeLists(<span class="built_in">List</span>&lt;ListNode?&gt; lists, <span class="built_in">int</span> left, <span class="built_in">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">      <span class="keyword">return</span> lists[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">    ListNode? l1 = mergeLists(lists, left, mid);</span><br><span class="line">    ListNode? l2 = mergeLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? mergeTwoLists(ListNode? l1, ListNode? l2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">      l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">      <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">      <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 341 ms, 击败 71.43% 使用 Dart 的用户</p>
<p>内存消耗 : 149.57 MB, 击败 57.14% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeLists(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeLists</span><span class="params">(lists []*ListNode, left <span class="type">int</span>, right <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> left == right &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[left]</span><br><span class="line">    &#125;</span><br><span class="line">    mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">    l1 := mergeLists(lists, left, mid)</span><br><span class="line">    l2 := mergeLists(lists, mid+<span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l1.Val &lt; l2.Val &#123;</span><br><span class="line">        l1.Next = mergeTwoLists(l1.Next, l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.Next = mergeTwoLists(l1, l2.Next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 70.42% 使用 Go 的用户</p>
<p>内存消耗 : 5.17 MB, 击败 22.50% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode[]&#125; lists</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_k_lists</span>(<span class="params">lists</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> lists.<span class="literal">nil</span>? |<span class="params"></span>| lists.empty?</span><br><span class="line">  merge_lists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_lists</span>(<span class="params">lists, left, right</span>)</span><br><span class="line">  <span class="keyword">return</span> lists[left] <span class="keyword">if</span> left == right</span><br><span class="line">  mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">  l1 = merge_lists(lists, left, mid)</span><br><span class="line">  l2 = merge_lists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">  merge_two_lists(l1, l2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_two_lists</span>(<span class="params">l1, l2</span>)</span><br><span class="line">  <span class="keyword">return</span> l2 <span class="keyword">if</span> l1.<span class="literal">nil</span>?</span><br><span class="line">  <span class="keyword">return</span> l1 <span class="keyword">if</span> l2.<span class="literal">nil</span>?</span><br><span class="line">  <span class="keyword">if</span> l1.val &lt; l2.val</span><br><span class="line">    l1.<span class="keyword">next</span> = merge_two_lists(l1.<span class="keyword">next</span>, l2)</span><br><span class="line">    l1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    l2.<span class="keyword">next</span> = merge_two_lists(l1, l2.<span class="keyword">next</span>)</span><br><span class="line">    l2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 208.77 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span></span>(lists: <span class="type">Array</span>[precompiled.<span class="type">ListNode</span>]): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists == <span class="literal">null</span> || lists.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    mergeLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeLists</span></span>(lists: <span class="type">Array</span>[precompiled.<span class="type">ListNode</span>], left: <span class="type">Int</span>, right: <span class="type">Int</span>): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">      <span class="keyword">return</span> lists(left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> l1 = mergeLists(lists, left, mid)</span><br><span class="line">    <span class="keyword">val</span> l2 = mergeLists(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">    mergeTwoLists(l1, l2)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span></span>(l1: precompiled.<span class="type">ListNode</span>, l2: precompiled.<span class="type">ListNode</span>): precompiled.<span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.x &lt; l2.x) &#123; <span class="comment">// assuming x is the field for value</span></span><br><span class="line">      l1.next = mergeTwoLists(l1.next, l2)</span><br><span class="line">      l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      l2.next = mergeTwoLists(l1, l2.next)</span><br><span class="line">      l2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 594 ms, 击败 75.00% 使用 Scala 的用户</p>
<p>内存消耗 : 58.96 MB, 击败 37.50% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>暂时未解决</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00024.两两交换链表中的节点</title>
    <url>/zh-CN/9623394395b7/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/9623394395b7/201912300001.jpg" class="" title="示例1">

<blockquote>
<p>输入：head &#x3D; [1,2,3,4]<br>输出：[2,1,4,3]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：head &#x3D; []<br>输出：[]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：head &#x3D; [1]<br>输出：[1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>链表中节点的数目在范围 [0, 100] 内</li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 100</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (current-&gt;next &amp;&amp; current-&gt;next-&gt;next) &#123;</span><br><span class="line">            ListNode* node1 = current-&gt;next;</span><br><span class="line">            ListNode* node2 = current-&gt;next-&gt;next;</span><br><span class="line">            current-&gt;next = node2;</span><br><span class="line">            node1-&gt;next = node2-&gt;next;</span><br><span class="line">            node2-&gt;next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 9.32 MB, 击败 5.03% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> current.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> current.next.next;</span><br><span class="line">            current.next = node2;</span><br><span class="line">            node1.next = node2.next;</span><br><span class="line">            node2.next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.38 MB, 击败 5.18% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span> <span class="keyword">and</span> current.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            node1 = current.<span class="built_in">next</span></span><br><span class="line">            node2 = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = node2</span><br><span class="line">            node1.<span class="built_in">next</span> = node2.<span class="built_in">next</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            current = node1</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 75.45% 使用 Python 的用户</p>
<p>内存消耗 : 11.44 MB, 击败 97.48% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span> <span class="keyword">and</span> current.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            node1 = current.<span class="built_in">next</span></span><br><span class="line">            node2 = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = node2</span><br><span class="line">            node1.<span class="built_in">next</span> = node2.<span class="built_in">next</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            current = node1</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 33 ms, 击败 90.27% 使用 Python3 的用户</p>
<p>内存消耗 : 16.45 MB, 击败 30.15% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">swapPairs</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">current</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (current-&gt;next &amp;&amp; current-&gt;next-&gt;next) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">node1</span> =</span> current-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">node2</span> =</span> current-&gt;next-&gt;next;</span><br><span class="line">        current-&gt;next = node2;</span><br><span class="line">        node1-&gt;next = node2-&gt;next;</span><br><span class="line">        node2-&gt;next = node1;</span><br><span class="line">        current = node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 5.71 MB, 击败 95.91% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">SwapPairs</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            ListNode node1 = current.next;</span><br><span class="line">            ListNode node2 = current.next.next;</span><br><span class="line">            current.next = node2;</span><br><span class="line">            node1.next = node2.next;</span><br><span class="line">            node2.next = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 88.57% 使用 C# 的用户</p>
<p>内存消耗 : 39.66 MB, 击败 5.71% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> current = dummy;</span><br><span class="line">    <span class="keyword">while</span> (current.<span class="property">next</span> &amp;&amp; current.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> node2 = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        current.<span class="property">next</span> = node2;</span><br><span class="line">        node1.<span class="property">next</span> = node2.<span class="property">next</span>;</span><br><span class="line">        node2.<span class="property">next</span> = node1;</span><br><span class="line">        current = node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 37 ms, 击败 100.00% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.33 MB, 击败 5.29% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapPairs</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">dummy</span>: <span class="title class_">ListNode</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = dummy;</span><br><span class="line">    <span class="keyword">while</span> (current?.<span class="property">next</span> &amp;&amp; current?.<span class="property">next</span>?.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">node1</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = current.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">node2</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1 &amp;&amp; node2) &#123;</span><br><span class="line">            current.<span class="property">next</span> = node2;</span><br><span class="line">            node1.<span class="property">next</span> = node2.<span class="property">next</span>;</span><br><span class="line">            node2.<span class="property">next</span> = node1;</span><br><span class="line">            current = node1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 86.10% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.79 MB, 击败 5.02% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapPairs</span>(<span class="params"><span class="variable">$head</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$current</span>-&gt;next &amp;&amp; <span class="variable">$current</span>-&gt;next-&gt;next) &#123;</span><br><span class="line">            <span class="variable">$node1</span> = <span class="variable">$current</span>-&gt;next;</span><br><span class="line">            <span class="variable">$node2</span> = <span class="variable">$current</span>-&gt;next-&gt;next;</span><br><span class="line">            <span class="variable">$current</span>-&gt;next = <span class="variable">$node2</span>;</span><br><span class="line">            <span class="variable">$node1</span>-&gt;next = <span class="variable">$node2</span>-&gt;next;</span><br><span class="line">            <span class="variable">$node2</span>-&gt;next = <span class="variable">$node1</span>;</span><br><span class="line">            <span class="variable">$current</span> = <span class="variable">$node1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 16.67% 使用 PHP 的用户</p>
<p>内存消耗 : 19.93 MB, 击败 5.55% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swapPairs</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> current: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">while</span> current<span class="operator">?</span>.next <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">&amp;&amp;</span> current<span class="operator">?</span>.next<span class="operator">?</span>.next <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> node1 <span class="operator">=</span> current<span class="operator">?</span>.next</span><br><span class="line">            <span class="keyword">let</span> node2 <span class="operator">=</span> current<span class="operator">?</span>.next<span class="operator">?</span>.next</span><br><span class="line">            current<span class="operator">?</span>.next <span class="operator">=</span> node2</span><br><span class="line">            node1<span class="operator">?</span>.next <span class="operator">=</span> node2<span class="operator">?</span>.next</span><br><span class="line">            node2<span class="operator">?</span>.next <span class="operator">=</span> node1</span><br><span class="line">            current <span class="operator">=</span> node1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.22 MB, 击败 20.67% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">swapPairs</span><span class="params">(head: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> current: ListNode? = dummy</span><br><span class="line">        <span class="keyword">while</span> (current?.next != <span class="literal">null</span> &amp;&amp; current.next?.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> node1 = current.next</span><br><span class="line">            <span class="keyword">val</span> node2 = current.next?.next</span><br><span class="line">            current.next = node2</span><br><span class="line">            node1?.next = node2?.next</span><br><span class="line">            node2?.next = node1</span><br><span class="line">            current = node1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 138 ms, 击败 81.08% 使用 Kotlin 的用户</p>
<p>内存消耗 : 33.44 MB, 击败 32.43% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? swapPairs(ListNode? head) &#123;</span><br><span class="line">    ListNode? tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line">      tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode? pre;</span><br><span class="line">    ListNode? cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != tail) &#123;</span><br><span class="line">      ListNode? temp = cur?.next;</span><br><span class="line">      cur?.next = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    head?.next = swapPairs(tail);</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 302 ms, 击败 22.22% 使用 Dart 的用户</p>
<p>内存消耗 : 147.56 MB, 击败 55.56% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	dummy := &amp;ListNode&#123;Val: <span class="number">0</span>, Next: head&#125;</span><br><span class="line">	current := dummy</span><br><span class="line">	<span class="keyword">for</span> current.Next != <span class="literal">nil</span> &amp;&amp; current.Next.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">		node1 := current.Next</span><br><span class="line">		node2 := current.Next.Next</span><br><span class="line">		current.Next = node2</span><br><span class="line">		node1.Next = node2.Next</span><br><span class="line">		node2.Next = node1</span><br><span class="line">		current = node1</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 1.97 MB, 击败 26.06% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_pairs</span>(<span class="params">head</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  current = dummy</span><br><span class="line">  <span class="keyword">while</span> current.<span class="keyword">next</span> &amp;&amp; current.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">    node1 = current.<span class="keyword">next</span></span><br><span class="line">    node2 = current.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">    current.<span class="keyword">next</span> = node2</span><br><span class="line">    node1.<span class="keyword">next</span> = node2.<span class="keyword">next</span></span><br><span class="line">    node2.<span class="keyword">next</span> = node1</span><br><span class="line">    current = node1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.64 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, _next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = _next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span></span>(head: <span class="type">ListNode</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> t1 = head.next</span><br><span class="line">    <span class="keyword">val</span> t2 = head.next.next</span><br><span class="line">    t1.next = head</span><br><span class="line">    head.next = swapPairs(t2)</span><br><span class="line">    t1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 460 ms, 击败 85.71% 使用 Scala 的用户</p>
<p>内存消耗 : 56.41 MB, 击败 14.29% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// #[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="comment">// pub struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//   pub val: i32,</span></span><br><span class="line"><span class="comment">//   pub next: Option&lt;Box&lt;ListNode&gt;&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// impl ListNode &#123;</span></span><br><span class="line"><span class="comment">//   #[inline]</span></span><br><span class="line"><span class="comment">//   fn new(val: i32) -&gt; Self &#123;</span></span><br><span class="line"><span class="comment">//     ListNode &#123;</span></span><br><span class="line"><span class="comment">//       next: None,</span></span><br><span class="line"><span class="comment">//       val</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">swap_pairs</span>(head: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">mut</span> node) = head &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">mut</span> next) = node.next.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">                node.next = <span class="keyword">Self</span>::<span class="title function_ invoke__">swap_pairs</span>(next.next.<span class="title function_ invoke__">take</span>());</span><br><span class="line">                next.next = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(next)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.15 MB, 击败 21.54% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">; Definition for singly-linked list:</span></span><br><span class="line"><span class="comment">#|</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; val : integer?</span></span><br><span class="line"><span class="comment">; next : (or/c list-node? #f)</span></span><br><span class="line"><span class="comment">(struct list-node</span></span><br><span class="line"><span class="comment">  (val next) #:mutable #:transparent)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">; constructor</span></span><br><span class="line"><span class="comment">(define (make-list-node [val 0])</span></span><br><span class="line"><span class="comment">  (list-node val #f))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|#</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">swap-pairs</span> head)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">    ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">not</span></span> head) (<span class="name"><span class="built_in">not</span></span> (<span class="name">list-node?</span> head)) (<span class="name"><span class="built_in">not</span></span> (<span class="name">list-node?</span> (<span class="name">list-node-next</span> head))))</span><br><span class="line">     head)</span><br><span class="line">    (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">     (<span class="name"><span class="built_in">let</span></span> ((<span class="name">node1</span> head)</span><br><span class="line">           (<span class="name">node2</span> (<span class="name">list-node-next</span> head))</span><br><span class="line">           (<span class="name">rest</span> (<span class="name">list-node-next</span> (<span class="name">list-node-next</span> head))))</span><br><span class="line">       (<span class="name">set-list-node-next!</span> node1 (<span class="name">swap-pairs</span> rest))</span><br><span class="line">       (<span class="name">set-list-node-next!</span> node2 node1)</span><br><span class="line">       node2))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 175 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 98.80 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%% -record(list_node, &#123;val = 0 :: integer(),</span></span><br><span class="line"><span class="comment">%%                     next = null :: &#x27;null&#x27; | #list_node&#123;&#125;&#125;).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">-spec</span> swap_pairs<span class="params">(Head :: #list_node&#123;&#125; | null)</span> -&gt; #list_node&#123;&#125; | null.</span><br><span class="line"><span class="function"><span class="title">swap_pairs</span><span class="params">(Head)</span> <span class="title">when</span> H<span class="title">ead</span> =:= <span class="title">null</span> -&gt;</span> null;</span><br><span class="line"><span class="function"><span class="title">swap_pairs</span><span class="params">(Head)</span> <span class="title">when</span> <span class="title">is_record</span><span class="params">(Head, list_node)</span> -&gt;</span> </span><br><span class="line">    <span class="keyword">case</span> Head#list_node.next <span class="keyword">of</span></span><br><span class="line">        null -&gt; Head;</span><br><span class="line">        Next -&gt; </span><br><span class="line">            NewNext = swap_pairs(Next#list_node.next),</span><br><span class="line">            NewHead = Head#list_node&#123;next = NewNext&#125;,</span><br><span class="line">            Next#list_node&#123;next = NewHead&#125;</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 222 ms, 击败 -% 使用 Erlang 的用户</p>
<p>内存消耗 : 59.48 MB, 击败 -% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00025.K 个一组翻转链表</title>
    <url>/zh-CN/55d70033c857/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。</p>
<p>k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/55d70033c857/201912310001.jpg" class="" title="示例1">

<blockquote>
<p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[2,1,4,3,5]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/55d70033c857/201912310002.jpg" class="" title="示例2">

<blockquote>
<p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 3<br>输出：[3,2,1,4,5]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>链表中的节点数目为 n</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 5000</li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 1000</li>
</ul>
<p><strong>进阶：</strong>你可以设计一个只用 O(1) 额外内存空间的算法解决此问题吗？</p>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode* prev_group_end = dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ListNode* group_start = prev_group_end-&gt;next;</span><br><span class="line">            ListNode* group_end = <span class="built_in">getGroupEnd</span>(group_start, k);</span><br><span class="line">            <span class="keyword">if</span> (!group_end) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode* next_group_start = group_end-&gt;next;</span><br><span class="line">            group_end-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            prev_group_end-&gt;next = <span class="built_in">reverseList</span>(group_start);</span><br><span class="line">            group_start-&gt;next = next_group_start;</span><br><span class="line">            prev_group_end = group_start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getGroupEnd</span><span class="params">(ListNode* start, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            ListNode* next_node = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next_node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 29.79% 使用 C++ 的用户</p>
<p>内存消耗 : 14.58 MB, 击败 7.15% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prevGroupEnd</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">groupStart</span> <span class="operator">=</span> prevGroupEnd.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">groupEnd</span> <span class="operator">=</span> getGroupEnd(groupStart, k);</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextGroupStart</span> <span class="operator">=</span> groupEnd.next;</span><br><span class="line">            groupEnd.next = <span class="literal">null</span>;</span><br><span class="line">            prevGroupEnd.next = reverseList(groupStart);</span><br><span class="line">            groupStart.next = nextGroupStart;</span><br><span class="line">            prevGroupEnd = groupStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">getGroupEnd</span><span class="params">(ListNode start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">null</span>; ++i) &#123;</span><br><span class="line">            start = start.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 43.32 MB, 击败 5.99% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head, k</span>):</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        prev_group_end = dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            group_start = prev_group_end.<span class="built_in">next</span></span><br><span class="line">            group_end = self.get_group_end(group_start, k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> group_end:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            next_group_start = group_end.<span class="built_in">next</span></span><br><span class="line">            group_end.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            prev_group_end.<span class="built_in">next</span> = self.reverse_list(group_start)</span><br><span class="line">            group_start.<span class="built_in">next</span> = next_group_start</span><br><span class="line">            prev_group_end = group_start</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">self, start, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k):</span><br><span class="line">            <span class="keyword">if</span> start:</span><br><span class="line">                start = start.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">self, head</span>):</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            next_node = curr.<span class="built_in">next</span></span><br><span class="line">            curr.<span class="built_in">next</span> = prev</span><br><span class="line">            prev, curr = curr, next_node</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 67.63% 使用 Python 的用户</p>
<p>内存消耗 : 13.03 MB, 击败 97.28% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], k: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        prev_group_end = dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            group_start = prev_group_end.<span class="built_in">next</span></span><br><span class="line">            group_end = self.get_group_end(group_start, k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> group_end:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            next_group_start = group_end.<span class="built_in">next</span></span><br><span class="line">            group_end.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            prev_group_end.<span class="built_in">next</span> = self.reverse_list(group_start)</span><br><span class="line">            group_start.<span class="built_in">next</span> = next_group_start</span><br><span class="line">            prev_group_end = group_start</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">self, start, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k):</span><br><span class="line">            <span class="keyword">if</span> start:</span><br><span class="line">                start = start.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">self, head</span>):</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            next_node = curr.<span class="built_in">next</span></span><br><span class="line">            curr.<span class="built_in">next</span> = prev</span><br><span class="line">            prev, curr = curr, next_node</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 87.58% 使用 Python3 的用户</p>
<p>内存消耗 : 17.23 MB, 击败 40.79% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">getGroupEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* start, <span class="type">int</span> k)</span>;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseKGroup</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev_group_end</span> =</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">group_start</span> =</span> prev_group_end-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">group_end</span> =</span> getGroupEnd(group_start, k);</span><br><span class="line">        <span class="keyword">if</span> (!group_end) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next_group_start</span> =</span> group_end-&gt;next;</span><br><span class="line">        group_end-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        prev_group_end-&gt;next = reverseList(group_start);</span><br><span class="line">        group_start-&gt;next = next_group_start;</span><br><span class="line">        prev_group_end = group_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">getGroupEnd</span><span class="params">(<span class="keyword">struct</span> ListNode* start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">        start = start-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">curr</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next_node</span> =</span> curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 60.44% 使用 C 的用户</p>
<p>内存消耗 : 6.59 MB, 击败 99.47% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public ListNode next;</span></span><br><span class="line"><span class="comment"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseKGroup</span>(<span class="params">ListNode head, <span class="built_in">int</span> k</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode prevGroupEnd = dummy;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ListNode groupStart = prevGroupEnd.next;</span><br><span class="line">            ListNode groupEnd = GetGroupEnd(groupStart, k);</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode nextGroupStart = groupEnd.next;</span><br><span class="line">            groupEnd.next = <span class="literal">null</span>;</span><br><span class="line">            prevGroupEnd.next = ReverseList(groupStart);</span><br><span class="line">            groupStart.next = nextGroupStart;</span><br><span class="line">            prevGroupEnd = groupStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">GetGroupEnd</span>(<span class="params">ListNode start, <span class="built_in">int</span> k</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">null</span>; ++i) &#123;</span><br><span class="line">            start = start.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">ReverseList</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        ListNode prev = <span class="literal">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            ListNode nextNode = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 81 ms, 击败 50.00% 使用 C# 的用户</p>
<p>内存消耗 : 43.74 MB, 击败 5.55% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseKGroup = <span class="keyword">function</span>(<span class="params">head, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> prevGroupEnd = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> groupStart = prevGroupEnd.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> groupEnd = <span class="title function_">getGroupEnd</span>(groupStart, k);</span><br><span class="line">        <span class="keyword">if</span> (!groupEnd) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> nextGroupStart = groupEnd.<span class="property">next</span>;</span><br><span class="line">        groupEnd.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        prevGroupEnd.<span class="property">next</span> = <span class="title function_">reverseList</span>(groupStart);</span><br><span class="line">        groupStart.<span class="property">next</span> = nextGroupStart;</span><br><span class="line">        prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getGroupEnd</span>(<span class="params">start, k</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">let</span> nextNode = curr.<span class="property">next</span>;</span><br><span class="line">            curr.<span class="property">next</span> = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 34.35% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.97 MB, 击败 10.36% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     next: ListNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseKGroup</span>(<span class="params">head: ListNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">dummy</span>: <span class="title class_">ListNode</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">prevGroupEnd</span>: <span class="title class_">ListNode</span> = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">groupStart</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = prevGroupEnd.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">groupEnd</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = <span class="title function_">getGroupEnd</span>(groupStart, k);</span><br><span class="line">        <span class="keyword">if</span> (!groupEnd) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">nextGroupStart</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = groupEnd.<span class="property">next</span>;</span><br><span class="line">        groupEnd.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        prevGroupEnd.<span class="property">next</span> = <span class="title function_">reverseList</span>(groupStart);</span><br><span class="line">        groupStart.<span class="property">next</span> = nextGroupStart;</span><br><span class="line">        prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getGroupEnd</span>(<span class="params">start: ListNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start; ++i) &#123;</span><br><span class="line">            start = start.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">prev</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curr</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">nextNode</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span> = curr.<span class="property">next</span>;</span><br><span class="line">            curr.<span class="property">next</span> = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 79 ms, 击败 79.55% 使用 TypeScript 的用户</p>
<p>内存消耗 : 54.74 MB, 击败 10.46% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val = 0, $next = null) &#123;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;val = $val;</span></span><br><span class="line"><span class="comment"> *         $this-&gt;next = $next;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reverseKGroup</span>(<span class="params"><span class="variable">$head</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dummy</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$dummy</span>-&gt;next = <span class="variable">$head</span>;</span><br><span class="line">        <span class="variable">$prevGroupEnd</span> = <span class="variable">$dummy</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable">$groupStart</span> = <span class="variable">$prevGroupEnd</span>-&gt;next;</span><br><span class="line">            <span class="variable">$groupEnd</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getGroupEnd</span>(<span class="variable">$groupStart</span>, <span class="variable">$k</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$groupEnd</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$nextGroupStart</span> = <span class="variable">$groupEnd</span>-&gt;next;</span><br><span class="line">            <span class="variable">$groupEnd</span>-&gt;next = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable">$prevGroupEnd</span>-&gt;next = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverseList</span>(<span class="variable">$groupStart</span>);</span><br><span class="line">            <span class="variable">$groupStart</span>-&gt;next = <span class="variable">$nextGroupStart</span>;</span><br><span class="line">            <span class="variable">$prevGroupEnd</span> = <span class="variable">$groupStart</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dummy</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroupEnd</span>(<span class="params"><span class="variable">$start</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$k</span> &amp;&amp; <span class="variable">$start</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$start</span> = <span class="variable">$start</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reverseList</span>(<span class="params"><span class="variable">$head</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$prev</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$curr</span> = <span class="variable">$head</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$curr</span>) &#123;</span><br><span class="line">            <span class="variable">$nextNode</span> = <span class="variable">$curr</span>-&gt;next;</span><br><span class="line">            <span class="variable">$curr</span>-&gt;next = <span class="variable">$prev</span>;</span><br><span class="line">            <span class="variable">$prev</span> = <span class="variable">$curr</span>;</span><br><span class="line">            <span class="variable">$curr</span> = <span class="variable">$nextNode</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$prev</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 13 ms, 击败 35.71% 使用 PHP 的用户</p>
<p>内存消耗 : 21.41 MB, 击败 7.14% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public var val: Int</span></span><br><span class="line"><span class="comment"> *     public var next: ListNode?</span></span><br><span class="line"><span class="comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span></span><br><span class="line"><span class="comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">reverseKGroup</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">k</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> dummy <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        dummy.next <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">var</span> prevGroupEnd: <span class="type">ListNode</span>? <span class="operator">=</span> dummy</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> groupStart: <span class="type">ListNode</span>? <span class="operator">=</span> prevGroupEnd<span class="operator">?</span>.next</span><br><span class="line">            <span class="keyword">let</span> groupEnd: <span class="type">ListNode</span>? <span class="operator">=</span> getGroupEnd(groupStart, k)</span><br><span class="line">            <span class="keyword">if</span> groupEnd <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> nextGroupStart: <span class="type">ListNode</span>? <span class="operator">=</span> groupEnd<span class="operator">?</span>.next</span><br><span class="line">            groupEnd<span class="operator">?</span>.next <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            prevGroupEnd<span class="operator">?</span>.next <span class="operator">=</span> reverseList(groupStart)</span><br><span class="line">            groupStart<span class="operator">?</span>.next <span class="operator">=</span> nextGroupStart</span><br><span class="line">            prevGroupEnd <span class="operator">=</span> groupStart</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">getGroupEnd</span>(<span class="keyword">_</span> <span class="params">start</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">k</span>: <span class="type">Int</span>) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> start</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>k <span class="keyword">where</span> start <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            start <span class="operator">=</span> start<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">reverseList</span>(<span class="keyword">_</span> <span class="params">head</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">var</span> curr: <span class="type">ListNode</span>? <span class="operator">=</span> head</span><br><span class="line">        <span class="keyword">while</span> curr <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> nextNode: <span class="type">ListNode</span>? <span class="operator">=</span> curr<span class="operator">?</span>.next</span><br><span class="line">            curr<span class="operator">?</span>.next <span class="operator">=</span> prev</span><br><span class="line">            prev <span class="operator">=</span> curr</span><br><span class="line">            curr <span class="operator">=</span> nextNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 36 ms, 击败 18.75% 使用 Swift 的用户</p>
<p>内存消耗 : 15.75 MB, 击败 6.25% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * var li = ListNode(5)</span></span><br><span class="line"><span class="comment"> * var v = li.`val`</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(var `val`: Int) &#123;</span></span><br><span class="line"><span class="comment"> *     var next: ListNode? = null</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reverseKGroup</span><span class="params">(head: <span class="type">ListNode</span>?, k: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">val</span> dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        <span class="keyword">var</span> prevGroupEnd: ListNode? = dummy</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> groupStart: ListNode? = prevGroupEnd?.next</span><br><span class="line">            <span class="keyword">val</span> groupEnd: ListNode? = getGroupEnd(groupStart, k)</span><br><span class="line">            <span class="keyword">if</span> (groupEnd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> nextGroupStart: ListNode? = groupEnd?.next</span><br><span class="line">            groupEnd?.next = <span class="literal">null</span></span><br><span class="line">            prevGroupEnd?.next = reverseList(groupStart)</span><br><span class="line">            groupStart?.next = nextGroupStart</span><br><span class="line">            prevGroupEnd = groupStart</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getGroupEnd</span><span class="params">(start: <span class="type">ListNode</span>?, k: <span class="type">Int</span>)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">var</span> start = start</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            start = start.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">reverseList</span><span class="params">(head: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: ListNode? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> curr: ListNode? = head</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> nextNode: ListNode? = curr?.next</span><br><span class="line">            curr?.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = nextNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 177 ms, 击败 87.88% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.66 MB, 击败 90.91% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/**</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span> Definition for singly-linked <span class="language-markdown"><span class="emphasis">list.</span></span></span></span><br><span class="line"><span class="emphasis"><span class="language-markdown"><span class="comment"> *</span> class ListNode &#123;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   int val;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode? next;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span>   ListNode([this.val = 0, this.next]);</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet"> *</span> &#125;</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  ListNode? reverseKGroup(ListNode? head, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    ListNode dummy = ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode? prevGroupEnd = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      ListNode? groupStart = prevGroupEnd?.next;</span><br><span class="line">      ListNode? groupEnd = getGroupEnd(groupStart, k);</span><br><span class="line">      <span class="keyword">if</span> (groupEnd == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ListNode? nextGroupStart = groupEnd.next;</span><br><span class="line">      groupEnd.next = <span class="keyword">null</span>;</span><br><span class="line">      prevGroupEnd?.next = reverseList(groupStart);</span><br><span class="line">      groupStart?.next = nextGroupStart;</span><br><span class="line">      prevGroupEnd = groupStart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? getGroupEnd(ListNode? start, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="keyword">null</span>; ++i) &#123;</span><br><span class="line">      start = start.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode? reverseList(ListNode? head) &#123;</span><br><span class="line">    ListNode? prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode? curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">      ListNode? nextNode = curr.next;</span><br><span class="line">      curr.next = prev;</span><br><span class="line">      prev = curr;</span><br><span class="line">      curr = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 287 ms, 击败 33.33% 使用 Dart 的用户</p>
<p>内存消耗 : 148.09 MB, 击败 66.67% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;<span class="number">0</span>, head&#125;</span><br><span class="line">    prevGroupEnd := dummy</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        groupStart := prevGroupEnd.Next</span><br><span class="line">        groupEnd := getGroupEnd(groupStart, k)</span><br><span class="line">        <span class="keyword">if</span> groupEnd == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        nextGroupStart := groupEnd.Next</span><br><span class="line">        groupEnd.Next = <span class="literal">nil</span></span><br><span class="line">        prevGroupEnd.Next = reverseList(groupStart)</span><br><span class="line">        groupStart.Next = nextGroupStart</span><br><span class="line">        prevGroupEnd = groupStart</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGroupEnd</span><span class="params">(start *ListNode, k <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; k &amp;&amp; start != <span class="literal">nil</span>; i++ &#123;</span><br><span class="line">        start = start.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">var</span> prev, curr *ListNode = <span class="literal">nil</span>, head</span><br><span class="line">    <span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line">        nextNode := curr.Next</span><br><span class="line">        curr.Next = prev</span><br><span class="line">        prev, curr = curr, nextNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 72.33% 使用 Go 的用户</p>
<p>内存消耗 : 3.39 MB, 击败 60.50% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val = 0, _next = nil)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = _next</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; k</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_k_group</span>(<span class="params">head, k</span>)</span><br><span class="line">  dummy = <span class="title class_">ListNode</span>.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  prev_group_end = dummy</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    group_start = prev_group_end.<span class="keyword">next</span></span><br><span class="line">    group_end = get_group_end(group_start, k)</span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">unless</span> group_end</span><br><span class="line">    next_group_start = group_end.<span class="keyword">next</span></span><br><span class="line">    group_end.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    prev_group_end.<span class="keyword">next</span> = reverse_list(group_start)</span><br><span class="line">    group_start.<span class="keyword">next</span> = next_group_start</span><br><span class="line">    prev_group_end = group_start</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_group_end</span>(<span class="params">start, k</span>)</span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; k &amp;&amp; start</span><br><span class="line">    start = start.<span class="keyword">next</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  start</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_list</span>(<span class="params">head</span>)</span><br><span class="line">  prev = <span class="literal">nil</span></span><br><span class="line">  curr = head</span><br><span class="line">  <span class="keyword">while</span> curr</span><br><span class="line">    next_node = curr.<span class="keyword">next</span></span><br><span class="line">    curr.<span class="keyword">next</span> = prev</span><br><span class="line">    prev = curr</span><br><span class="line">    curr = next_node</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  prev</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.84 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode(_x: Int = 0, next: ListNode = null) &#123;</span></span><br><span class="line"><span class="comment"> *   var next: ListNode = next</span></span><br><span class="line"><span class="comment"> *   var x: Int = _x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span></span>(head: <span class="type">ListNode</span>, k: <span class="type">Int</span>): <span class="type">ListNode</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> current = head</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class="line">      current = current.next</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == k) &#123;</span><br><span class="line">      <span class="keyword">var</span> prev: <span class="type">ListNode</span> = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">var</span> nextGroupStart = current</span><br><span class="line">      current = head</span><br><span class="line">      <span class="keyword">for</span> (_ &lt;- <span class="number">0</span> until k) &#123;</span><br><span class="line">        <span class="keyword">val</span> nextNode = current.next</span><br><span class="line">        current.next = prev</span><br><span class="line">        prev = current</span><br><span class="line">        current = nextNode</span><br><span class="line">      &#125;</span><br><span class="line">      head.next = reverseKGroup(nextGroupStart, k)</span><br><span class="line">      prev</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 565 ms, 击败 20.00% 使用 Scala 的用户</p>
<p>内存消耗 : 57.17 MB, 击败 20.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>暂时未解决</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/zh-CN/ad928147d8e8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元旦快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ad928147d8e8/202001010001.png" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00026.删除有序数组中的重复项</title>
    <url>/zh-CN/c769caeb9e53/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p>
<p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：</p>
<ul>
<li>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。</li>
<li>返回 k 。</li>
</ul>
<p>判题标准:</p>
<p>系统会用下面的代码来测试你的题解:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果所有断言都通过，那么您的题解将被 通过。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 已按 非严格递增 排列</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.81% 使用 C++ 的用户</p>
<p>内存消耗 : 20.66 MB, 击败 5.12% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 43.79 MB, 击败 18.76% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 49.67% 使用 Python 的用户</p>
<p>内存消耗 : 12.79 MB, 击败 95.46% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 41.19% 使用 Python3 的用户</p>
<p>内存消耗 : 17.69 MB, 击败 30.93% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 83.02% 使用 C 的用户</p>
<p>内存消耗 : 7.13 MB, 击败 97.58% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveDuplicates</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 117 ms, 击败 86.81% 使用 C# 的用户</p>
<p>内存消耗 : 49.80 MB, 击败 5.20% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 66.38% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.09 MB, 击败 5.05% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 99.11% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.73 MB, 击败 5.47% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span>(<span class="params">&amp;<span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$nums</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$k</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$count</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="variable">$nums</span>[<span class="variable">$k</span>++] = <span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$k</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 23 ms, 击败 67.26% 使用 PHP 的用户</p>
<p>内存消耗 : 21.22 MB, 击败 5.36% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeDuplicates</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> k <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="operator">!=</span> nums[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                nums[k] <span class="operator">=</span> nums[i]</span><br><span class="line">                k <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 59.11% 使用 Swift 的用户</p>
<p>内存消耗 : 16.09 MB, 击败 6.07% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeDuplicates</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until nums.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 230 ms, 击败 67.37% 使用 Kotlin 的用户</p>
<p>内存消耗 : 40.41 MB, 击败 23.69% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> removeDuplicates(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        nums[k++] = nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 306 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 144.93 MB, 击败 88.24% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    k := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] != nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            nums[k] = nums[i]</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 60.74% 使用 Go 的用户</p>
<p>内存消耗 : 4.26 MB, 击败 91.32% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_duplicates</span>(<span class="params">nums</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> nums.empty?</span><br><span class="line">  k = <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>...nums.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]</span><br><span class="line">      nums[k] = nums[i]</span><br><span class="line">      k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  k</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 68.75% 使用 Ruby 的用户</p>
<p>内存消耗 : 207.35 MB, 击败 50.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until nums.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != nums(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        nums(k) = nums(i)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 68.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.28 MB, 击败 84.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_duplicates</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">k</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>] &#123;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">                k += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.39 MB, 击败 6.05% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00027.移除元素</title>
    <url>/zh-CN/90fd1264eb97/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明:</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,3,0,4]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 100</li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 50</li>
<li>0 &lt;&#x3D; val &lt;&#x3D; 100</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 44.36% 使用 C++ 的用户</p>
<p>内存消耗 : 10.24 MB, 击败 5.12% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.04 MB, 击败 5.14% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums, val</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 94.27% 使用 Python 的用户</p>
<p>内存消耗 : 11.30 MB, 击败 99.31% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 23 ms, 击败 99.89% 使用 Python3 的用户</p>
<p>内存消耗 : 16.32 MB, 击败 34.59% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numsSize; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 5.58% 使用 C 的用户</p>
<p>内存消耗 : 5.76 MB, 击败 95.20% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveElement</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums.Length; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 107 ms, 击败 75.62% 使用 C# 的用户</p>
<p>内存消耗 : 45.52 MB, 击败 5.23% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] !== val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 58 ms, 击败 70.84% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.11 MB, 击败 6.76% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums: <span class="built_in">number</span>[], val: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] !== val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 24.71% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.71 MB, 击败 5.21% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">&amp;<span class="variable">$nums</span>, <span class="variable">$val</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$nums</span> <span class="keyword">as</span> <span class="variable">$j</span> =&gt; <span class="variable">$num</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> !== <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$nums</span>[<span class="variable">$i</span>] = <span class="variable">$num</span>;</span><br><span class="line">                ++<span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 70.04% 使用 PHP 的用户</p>
<p>内存消耗 : 20.02 MB, 击败 5.29% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeElement</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] <span class="operator">!=</span> val &#123;</span><br><span class="line">                nums[i] <span class="operator">=</span> nums[j]</span><br><span class="line">                i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 48.38% 使用 Swift 的用户</p>
<p>内存消耗 : 15.58 MB, 击败 5.19% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeElement</span><span class="params">(nums: <span class="type">IntArray</span>, `<span class="keyword">val</span>`: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != `<span class="keyword">val</span>`) &#123;</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 164 ms, 击败 79.06% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.39 MB, 击败 11.96% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> removeElement(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> val) &#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 25.00% 使用 Dart 的用户</p>
<p>内存消耗 : 146.96 MB, 击败 50.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.01 MB, 击败 68.18% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; val</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_element</span>(<span class="params">nums, val</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    nums.each_with_index <span class="keyword">do</span> |<span class="params">num, j</span>|</span><br><span class="line">        <span class="keyword">if</span> num != val</span><br><span class="line">            nums[i] = num</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 62 ms, 击败 62.50% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.46 MB, 击败 25.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], `<span class="keyword">val</span>`: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (j &lt;- nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums(j) != `<span class="keyword">val</span>`) &#123;</span><br><span class="line">                nums(i) = nums(j)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 483 ms, 击败 30.77% 使用 Scala 的用户</p>
<p>内存消耗 : 54.35 MB, 击败 30.77% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove_element</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, val: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.03 MB, 击败 62.39% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>小寒</title>
    <url>/zh-CN/e814760cb269/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e814760cb269/202001060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小寒</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00028.找出字符串中第一个匹配项的下标</title>
    <url>/zh-CN/dd322a2800fd/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; haystack.length, needle.length &lt;&#x3D; 10^4$</li>
<li>haystack 和 needle 仅由小写英文字符组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(std::string haystack, std::string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> pos = haystack.<span class="built_in">find</span>(needle);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 32.03% 使用 C++ 的用户</p>
<p>内存消耗 : 7.45 MB, 击败 5.03% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> haystack.indexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 40.36 MB, 击败 20.59% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack, needle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index = haystack.find(needle)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 76.06% 使用 Python 的用户</p>
<p>内存消耗 : 11.54 MB, 击败 92.21% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        index = haystack.find(needle)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 38 ms, 击败 73.98% 使用 Python3 的用户</p>
<p>内存消耗 : 16.38 MB, 击败 33.01% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strStr</span><span class="params">(<span class="type">char</span>* haystack, <span class="type">char</span>* needle)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* result = <span class="built_in">strstr</span>(haystack, needle);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result - haystack;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 5.25 MB, 击败 99.47% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">StrStr</span>(<span class="params"><span class="built_in">string</span> haystack, <span class="built_in">string</span> needle</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> index = haystack.IndexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 50 ms, 击败 77.71% 使用 C# 的用户</p>
<p>内存消耗 : 39.58 MB, 击败 5.22% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = haystack.<span class="title function_">indexOf</span>(needle);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 58 ms, 击败 69.67% 使用 JavaScript 的用户</p>
<p>内存消耗 : 48.68 MB, 击败 10.90% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">index</span>: <span class="built_in">number</span> = haystack.<span class="title function_">indexOf</span>(needle);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 43.15% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.23 MB, 击败 13.29% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $haystack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $needle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">strStr</span>(<span class="params"><span class="variable">$haystack</span>, <span class="variable">$needle</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$index</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$haystack</span>, <span class="variable">$needle</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$index</span> !== <span class="literal">false</span> ? <span class="variable">$index</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 92.96% 使用 PHP 的用户</p>
<p>内存消耗 : 19.80 MB, 击败 5.63% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">strStr</span>(<span class="keyword">_</span> <span class="params">haystack</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">needle</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> range <span class="operator">=</span> haystack.range(of: needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> haystack.distance(from: haystack.startIndex, to: range.lowerBound)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 75.25% 使用 Swift 的用户</p>
<p>内存消耗 : 16.25 MB, 击败 5.94% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">strStr</span><span class="params">(haystack: <span class="type">String</span>, needle: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> index = haystack.indexOf(needle)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (index != -<span class="number">1</span>) index <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 157 ms, 击败 24.11% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.41 MB, 击败 16.96% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int</span> strStr(<span class="built_in">String</span> haystack, <span class="built_in">String</span> needle) &#123;</span><br><span class="line">        <span class="built_in">int</span> index = haystack.indexOf(needle);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 292 ms, 击败 23.08% 使用 Dart 的用户</p>
<p>内存消耗 : 143.05 MB, 击败 92.31% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    index := strings.Index(haystack, needle)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 1.87 MB, 击败 47.87% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; haystack</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; needle</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_str</span>(<span class="params">haystack, needle</span>)</span><br><span class="line">    index = haystack.index(needle)</span><br><span class="line">    <span class="keyword">return</span> index.<span class="literal">nil</span>? ? -<span class="number">1</span> : index</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 85.71% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.23 MB, 击败 71.43% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strStr</span></span>(haystack: <span class="type">String</span>, needle: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> index = haystack.indexOf(needle)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 453 ms, 击败 53.85% 使用 Scala 的用户</p>
<p>内存消耗 : 52.46 MB, 击败 46.15% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">str_str</span>(haystack: <span class="type">String</span>, needle: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(index) = haystack.<span class="title function_ invoke__">find</span>(&amp;needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> index <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 1.95 MB, 击败 92.17% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00029.两数相除</title>
    <url>/zh-CN/d31dfec58332/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。</p>
<p>整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。</p>
<p>返回被除数 dividend 除以除数 divisor 得到的 商 。</p>
<p><strong>注意：</strong>假设我们的环境只能存储 32 位 有符号整数，其数值范围是 $[−2^{31},  2^{31} − 1]$ 。本题中，如果商 严格大于 $2^{31} − 1$ ，则返回 $2^{31} − 1$ ；如果商 严格小于 $−2^{31}$ ，则返回 $−2^{31}$ 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: dividend &#x3D; 10, divisor &#x3D; 3<br>输出: 3<br>解释: 10&#x2F;3 &#x3D; 3.33333.. ，向零截断后得到 3 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: dividend &#x3D; 7, divisor &#x3D; -3<br>输出: -2<br>解释: 7&#x2F;-3 &#x3D; -2.33333.. ，向零截断后得到 -2 。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$−2^{31} &lt;&#x3D; dividend, divisor &lt;&#x3D; 2^{31} − 1$</li>
<li>divisor !&#x3D; 0</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(dividend));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">llabs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(divisor));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(std::<span class="built_in">min</span>(std::<span class="built_in">max</span>(result, <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MIN)), <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(INT_MAX)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 7.50 MB, 击败 5.02% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDividend</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)dividend);</span><br><span class="line">        <span class="type">long</span> <span class="variable">absDivisor</span> <span class="operator">=</span> Math.abs((<span class="type">long</span>)divisor);</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            result += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        result *= sign;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.min(Math.max(result, (<span class="type">long</span>)Integer.MIN_VALUE), (<span class="type">long</span>)Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 72.66% 使用 Java 的用户</p>
<p>内存消耗 : 39.83 MB, 击败 20.23% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend, divisor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 89.54% 使用 Python 的用户</p>
<p>内存消耗 : 11.37 MB, 击败 92.81% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, dividend: <span class="built_in">int</span>, divisor: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        INT_MIN = -<span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        sign = -<span class="number">1</span> <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        abs_dividend = <span class="built_in">abs</span>(dividend)</span><br><span class="line">        abs_divisor = <span class="built_in">abs</span>(divisor)</span><br><span class="line">        quotient = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> abs_dividend &gt;= abs_divisor:</span><br><span class="line">            temp, multiple = abs_divisor, <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> abs_dividend &gt;= (temp &lt;&lt; <span class="number">1</span>):</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span></span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">            abs_dividend -= temp</span><br><span class="line">            quotient += multiple</span><br><span class="line">        result = sign * quotient</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">max</span>(result, INT_MIN), INT_MAX)</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 98.48% 使用 Python3 的用户</p>
<p>内存消耗 : 16.41 MB, 击败 32.61% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> MAX_INT = INT_MAX;</span><br><span class="line">    <span class="type">int</span> MIN_INT = INT_MIN;</span><br><span class="line">    <span class="type">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDividend = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)dividend);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> absDivisor = <span class="built_in">labs</span>((<span class="type">long</span> <span class="type">long</span>)divisor);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        absDividend -= temp;</span><br><span class="line">        quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = sign * quotient;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)fmin(fmax(result, (<span class="type">long</span> <span class="type">long</span>)MIN_INT), (<span class="type">long</span> <span class="type">long</span>)MAX_INT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 5.20 MB, 击败 98.80% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Divide</span>(<span class="params"><span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> MAX_INT = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">        <span class="built_in">int</span> MIN_INT = <span class="built_in">int</span>.MinValue;</span><br><span class="line">        <span class="built_in">int</span> sign = (dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">long</span> absDividend = Math.Abs((<span class="built_in">long</span>)dividend);</span><br><span class="line">        <span class="built_in">long</span> absDivisor = Math.Abs((<span class="built_in">long</span>)divisor);</span><br><span class="line">        <span class="built_in">long</span> quotient = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (absDividend &gt;= absDivisor) &#123;</span><br><span class="line">            <span class="built_in">long</span> temp = absDivisor, multiple = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (absDividend &gt;= (temp &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            absDividend -= temp;</span><br><span class="line">            quotient += multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">long</span> result = sign * quotient;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)Math.Min(Math.Max(result, (<span class="built_in">long</span>)MIN_INT), (<span class="built_in">long</span>)MAX_INT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 70.97% 使用 C# 的用户</p>
<p>内存消耗 : 26.63 MB, 击败 12.90% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">dividend</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">divisor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> divide = <span class="keyword">function</span>(<span class="params">dividend, divisor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    dividend &gt; <span class="number">0</span> ? (dividend = -dividend) : (sign = <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    divisor &gt; <span class="number">0</span> ? (divisor = -divisor) : (sign = sign ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dividend) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">            i &lt;= <span class="number">31</span> &amp;&amp;</span><br><span class="line">            divisor &gt;= (-<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i)) &amp;&amp;</span><br><span class="line">            divisor &lt;&lt; i &gt;= dividend &amp;&amp;</span><br><span class="line">            ++i</span><br><span class="line">        ) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dividend = dividend - (divisor &lt;&lt; --i);</span><br><span class="line">        quotient += <span class="number">2</span> ** i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(sign + (!sign &amp;&amp; quotient &gt;= <span class="number">2147483648</span> ? <span class="number">2147483647</span> : quotient));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 64.44% 使用 JavaScript 的用户</p>
<p>内存消耗 : 53.24 MB, 击败 5.34% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">sign</span>: <span class="built_in">number</span> = (<span class="title class_">Number</span>(a &gt; <span class="number">0</span>) ^ <span class="title class_">Number</span>(b &gt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === -(<span class="number">2</span> ** <span class="number">31</span>) &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span> &amp;&amp; b === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -(<span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="title class_">Math</span>.<span class="title function_">abs</span>(a);</span><br><span class="line">    b = <span class="title class_">Math</span>.<span class="title function_">abs</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">31</span>; x &gt;= <span class="number">0</span>; x--) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a &gt;&gt;&gt; x) &gt;= b) &#123;</span><br><span class="line">            a -= (b &lt;&lt; x);</span><br><span class="line">            result += (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign === <span class="number">1</span> ? result : -result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 98 ms, 击败 7.81% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.46 MB, 击败 6.25% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $dividend</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $divisor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params"><span class="variable">$dividend</span>, <span class="variable">$divisor</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$INT_MAX</span> = <span class="title function_ invoke__">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$INT_MIN</span> = <span class="title function_ invoke__">pow</span>(-<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$dividend</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sign</span> = (<span class="variable">$dividend</span> &gt; <span class="number">0</span>) ^ (<span class="variable">$divisor</span> &gt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$dividend</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$dividend</span>);</span><br><span class="line">        <span class="variable">$divisor</span> = <span class="title function_ invoke__">abs</span>(<span class="variable">$divisor</span>);</span><br><span class="line">        <span class="variable">$quotient</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$divisor</span>) &#123;</span><br><span class="line">            <span class="variable">$tempDivisor</span> = <span class="variable">$divisor</span>;</span><br><span class="line">            <span class="variable">$multiple</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$dividend</span> &gt;= <span class="variable">$tempDivisor</span> &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$tempDivisor</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$multiple</span> &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$dividend</span> -= <span class="variable">$tempDivisor</span>;</span><br><span class="line">            <span class="variable">$quotient</span> += <span class="variable">$multiple</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$sign</span> * <span class="variable">$quotient</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> &gt; <span class="variable">$INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MAX</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$result</span> &lt; <span class="variable">$INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$INT_MIN</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 40.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.82 MB, 击败 -% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">dividend</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">divisor</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MAX</span> <span class="operator">=</span> <span class="type">Int32</span>.max</span><br><span class="line">        <span class="keyword">let</span> <span class="type">INT_MIN</span> <span class="operator">=</span> <span class="type">Int32</span>.min</span><br><span class="line">        <span class="keyword">if</span> dividend <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sign <span class="operator">=</span> (dividend <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">!=</span> (divisor <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">?</span> <span class="operator">-</span><span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> dividend <span class="operator">=</span> <span class="built_in">abs</span>(dividend)</span><br><span class="line">        <span class="keyword">let</span> divisor <span class="operator">=</span> <span class="built_in">abs</span>(divisor)</span><br><span class="line">        <span class="keyword">var</span> quotient <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> divisor &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor <span class="operator">=</span> divisor</span><br><span class="line">            <span class="keyword">var</span> multiple <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> dividend <span class="operator">&gt;=</span> tempDivisor <span class="operator">&lt;&lt;</span> <span class="number">1</span> &#123;</span><br><span class="line">                tempDivisor <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">                multiple <span class="operator">&lt;&lt;=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend <span class="operator">-=</span> tempDivisor</span><br><span class="line">            quotient <span class="operator">+=</span> multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> sign <span class="operator">*</span> quotient</span><br><span class="line">        <span class="keyword">if</span> result <span class="operator">&gt;</span> <span class="type">Int32</span>(<span class="type">INT_MAX</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MAX</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> result <span class="operator">&lt;</span> <span class="type">Int32</span>(<span class="type">INT_MIN</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">INT_MIN</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 90.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.00 MB, 击败 10.00% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">divide</span><span class="params">(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> sign = (dividend &gt; <span class="number">0</span>) xor (divisor &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> dividend = Math.abs(dividend.toLong())</span><br><span class="line">        <span class="keyword">val</span> divisor = Math.abs(divisor.toLong())</span><br><span class="line">        <span class="keyword">var</span> quotient = <span class="number">0L</span></span><br><span class="line">        <span class="keyword">while</span> (dividend &gt;= divisor) &#123;</span><br><span class="line">            <span class="keyword">var</span> tempDivisor = divisor</span><br><span class="line">            <span class="keyword">var</span> multiple = <span class="number">1L</span></span><br><span class="line">            <span class="keyword">while</span> (dividend &gt;= tempDivisor shl <span class="number">1</span>) &#123;</span><br><span class="line">                tempDivisor = tempDivisor shl <span class="number">1</span></span><br><span class="line">                multiple = multiple shl <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            dividend -= tempDivisor</span><br><span class="line">            quotient += multiple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="keyword">if</span> (sign) -quotient <span class="keyword">else</span> quotient</span><br><span class="line">        <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 155 ms, 击败 40.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 33.58 MB, 击败 8.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> divide(<span class="built_in">int</span> dividend, <span class="built_in">int</span> divisor) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MAX = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> INT_MIN = <span class="number">-2147483648</span>;</span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> isNegative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">int</span> longDividend = dividend.abs();</span><br><span class="line">    <span class="built_in">int</span> longDivisor = divisor.abs();</span><br><span class="line">    <span class="built_in">int</span> quotient = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (longDividend &gt;= longDivisor) &#123;</span><br><span class="line">      <span class="built_in">int</span> tempDivisor = longDivisor;</span><br><span class="line">      <span class="built_in">int</span> multiple = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (longDividend &gt;= tempDivisor &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">        tempDivisor &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        multiple &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      longDividend -= tempDivisor;</span><br><span class="line">      quotient += multiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> result = isNegative ? -quotient : quotient;</span><br><span class="line">    <span class="keyword">if</span> (result &gt; INT_MAX) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MAX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; INT_MIN) &#123;</span><br><span class="line">      <span class="keyword">return</span> INT_MIN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 327 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.92 MB, 击败 50.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(dividend <span class="type">int</span>, divisor <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> INT_MAX = <span class="type">int</span>(^<span class="type">uint32</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">const</span> INT_MIN = ^INT_MAX</span><br><span class="line">	<span class="keyword">if</span> dividend == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	isNegative := (dividend &gt; <span class="number">0</span>) != (divisor &gt; <span class="number">0</span>)</span><br><span class="line">	longDividend := abs(dividend)</span><br><span class="line">	longDivisor := abs(divisor)</span><br><span class="line">	quotient := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> longDividend &gt;= longDivisor &#123;</span><br><span class="line">		tempDivisor := longDivisor</span><br><span class="line">		multiple := <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> longDividend &gt;= tempDivisor&lt;&lt;<span class="number">1</span> &#123;</span><br><span class="line">			tempDivisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">			multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		longDividend -= tempDivisor</span><br><span class="line">		quotient += multiple</span><br><span class="line">	&#125;</span><br><span class="line">	result := quotient</span><br><span class="line">	<span class="keyword">if</span> isNegative &#123;</span><br><span class="line">		result = -quotient</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> result &gt; INT_MAX &#123;</span><br><span class="line">		<span class="keyword">return</span> INT_MAX</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> result &lt; INT_MIN &#123;</span><br><span class="line">		<span class="keyword">return</span> INT_MIN</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -n</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.20 MB, 击败 69.90% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; dividend</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; divisor</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">dividend, divisor</span>)</span><br><span class="line">  int_max = (<span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>)</span><br><span class="line">  int_min = -(<span class="number">2</span>**<span class="number">31</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> dividend == <span class="number">0</span></span><br><span class="line">  is_negative = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)</span><br><span class="line">  long_dividend = dividend.abs</span><br><span class="line">  long_divisor = divisor.abs</span><br><span class="line">  quotient = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> long_dividend &gt;= long_divisor</span><br><span class="line">    temp_divisor = long_divisor</span><br><span class="line">    multiple = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> long_dividend &gt;= temp_divisor &lt;&lt; <span class="number">1</span></span><br><span class="line">      temp_divisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">      multiple &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    long_dividend -= temp_divisor</span><br><span class="line">    quotient += multiple</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result = is_negative ? -quotient : quotient</span><br><span class="line">  <span class="keyword">if</span> result &gt; int_max</span><br><span class="line">    <span class="keyword">return</span> int_max</span><br><span class="line">  <span class="keyword">elsif</span> result &lt; int_min</span><br><span class="line">    <span class="keyword">return</span> int_min</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 75.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.44 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divide</span></span>(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MAX</span> = <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">INT_MIN</span> = <span class="type">Int</span>.<span class="type">MinValue</span></span><br><span class="line">    <span class="keyword">if</span> (dividend == <span class="type">INT_MIN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (divisor == <span class="number">1</span>) <span class="keyword">return</span> <span class="type">INT_MIN</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (divisor == <span class="number">-1</span>) <span class="keyword">return</span> <span class="type">INT_MAX</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rev = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> dividendVar = dividend</span><br><span class="line">    <span class="keyword">var</span> divisorVar = divisor</span><br><span class="line">    <span class="keyword">if</span> (dividend &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      dividendVar = -dividend</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      divisorVar = -divisor</span><br><span class="line">      rev = !rev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> right = <span class="type">INT_MAX</span></span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> check = quickAdd(divisorVar, mid, dividendVar)</span><br><span class="line">      <span class="keyword">if</span> (check) &#123;</span><br><span class="line">        ans = mid</span><br><span class="line">        <span class="keyword">if</span> (mid == <span class="type">INT_MAX</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">        &#125;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rev) -ans <span class="keyword">else</span> ans</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quickAdd</span></span>(y: <span class="type">Int</span>, z: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> add = y</span><br><span class="line">    <span class="keyword">var</span> zVar = z</span><br><span class="line">    <span class="keyword">while</span> (zVar != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((zVar &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        result += add</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (zVar != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (add &lt; x - add) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        add += add</span><br><span class="line">      &#125;</span><br><span class="line">      zVar &gt;&gt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 440 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 51.39 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">divide</span>(dividend: <span class="type">i32</span>, divisor: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> INT_MAX: <span class="type">i32</span> = <span class="type">i32</span>::MAX;</span><br><span class="line">        <span class="keyword">const</span> INT_MIN: <span class="type">i32</span> = <span class="type">i32</span>::MIN;</span><br><span class="line">        <span class="keyword">if</span> dividend == INT_MIN &#123;</span><br><span class="line">            <span class="keyword">if</span> divisor == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> divisor == -<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rev</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dividend_var</span> = dividend;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">divisor_var</span> = divisor;</span><br><span class="line">        <span class="keyword">if</span> dividend &gt; <span class="number">0</span> &#123;</span><br><span class="line">            dividend_var = -dividend;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> divisor &gt; <span class="number">0</span> &#123;</span><br><span class="line">            divisor_var = -divisor;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = INT_MAX;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">check</span> = Solution::<span class="title function_ invoke__">quick_add</span>(divisor_var, mid, dividend_var);</span><br><span class="line">            <span class="keyword">if</span> check &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                <span class="keyword">if</span> mid == INT_MAX &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">if</span> rev &#123; -ans &#125; <span class="keyword">else</span> &#123; ans &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> rev &#123;</span><br><span class="line">            -ans</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">quick_add</span>(y: <span class="type">i32</span>, z: <span class="type">i32</span>, x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">add</span> = y;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z_var</span> = z;</span><br><span class="line">        <span class="keyword">while</span> z_var != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> z_var &amp; <span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> result &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> z_var != <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> add &lt; x - add &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add += add;</span><br><span class="line">            &#125;</span><br><span class="line">            z_var &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 18.92% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00030.串联所有单词的子串</title>
    <url>/zh-CN/0ee3b09121e9/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。</p>
<p> s 中的 串联子串 是指一个包含  words 中所有字符串以任意顺序排列连接起来的子串。</p>
<ul>
<li>例如，如果 words &#x3D; [“ab”,”cd”,”ef”]， 那么 “abcdef”， “abefcd”，”cdabef”， “cdefab”，”efabcd”， 和 “efcdab” 都是串联子串。 “acdbef” 不是串联子串，因为他不是任何 words 排列的连接。</li>
</ul>
<p>返回所有串联子串在 s 中的开始索引。你可以以 任意顺序 返回答案。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “barfoothefoobarman”, words &#x3D; [“foo”,”bar”]<br>输出：[0,9]<br>解释：因为 words.length &#x3D;&#x3D; 2 同时 words[i].length &#x3D;&#x3D; 3，连接的子字符串的长度必须为 6。<br>子串 “barfoo” 开始位置是 0。它是 words 中以 [“bar”,”foo”] 顺序排列的连接。<br>子串 “foobar” 开始位置是 9。它是 words 中以 [“foo”,”bar”] 顺序排列的连接。<br>输出顺序无关紧要。返回 [9,0] 也是可以的。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “wordgoodgoodgoodbestword”, words &#x3D; [“word”,”good”,”best”,”word”]<br>输出：[]<br>解释：因为 words.length &#x3D;&#x3D; 4 并且 words[i].length &#x3D;&#x3D; 4，所以串联子串的长度必须为 16。<br>s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。<br>所以我们返回一个空数组。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “barfoofoobarthefoobarman”, words &#x3D; [“bar”,”foo”,”the”]<br>输出：[6,9,12]<br>解释：因为 words.length &#x3D;&#x3D; 3 并且 words[i].length &#x3D;&#x3D; 3，所以串联子串的长度必须为 9。<br>子串 “foobarthe” 开始位置是 6。它是 words 中以 [“foo”,”bar”,”the”] 顺序排列的连接。<br>子串 “barthefoo” 开始位置是 9。它是 words 中以 [“bar”,”the”,”foo”] 顺序排列的连接。<br>子串 “thefoobar” 开始位置是 12。它是 words 中以 [“the”,”foo”,”bar”] 顺序排列的连接。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; s.length &lt;&#x3D; 10^4$</li>
<li>1 &lt;&#x3D; words.length &lt;&#x3D; 5000</li>
<li>1 &lt;&#x3D; words[i].length &lt;&#x3D; 30</li>
<li>words[i] 和 s 由小写英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || words.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> wordLen = words[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> totalLen = words.<span class="built_in">size</span>() * wordLen;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; wordCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; word : words) &#123;</span><br><span class="line">            wordCount[word]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; wordLen; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = i, right = i;</span><br><span class="line">            unordered_map&lt;string, <span class="type">int</span>&gt; currentCount;</span><br><span class="line">            <span class="keyword">while</span> (right + wordLen &lt;= s.<span class="built_in">length</span>()) &#123;</span><br><span class="line">                string currentWord = s.<span class="built_in">substr</span>(right, wordLen);</span><br><span class="line">                right += wordLen;</span><br><span class="line">                currentCount[currentWord]++;</span><br><span class="line">                <span class="keyword">while</span> (currentCount[currentWord] &gt; wordCount[currentWord]) &#123;</span><br><span class="line">                    string leftWord = s.<span class="built_in">substr</span>(left, wordLen);</span><br><span class="line">                    left += wordLen;</span><br><span class="line">                    currentCount[leftWord]--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 105 ms, 击败 21.11% 使用 C++ 的用户</p>
<p>内存消耗 : 48.18 MB, 击败 9.14% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findSubstring</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty() || words == <span class="literal">null</span> || words.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLen</span> <span class="operator">=</span> words[<span class="number">0</span>].length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLen</span> <span class="operator">=</span> words.length * wordLen;</span><br><span class="line">        Map&lt;String, Integer&gt; wordCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            wordCount.put(word, wordCount.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wordLen; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i, right = i;</span><br><span class="line">            Map&lt;String, Integer&gt; currentCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (right + wordLen &lt;= s.length()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">currentWord</span> <span class="operator">=</span> s.substring(right, right + wordLen);</span><br><span class="line">                right += wordLen;</span><br><span class="line">                currentCount.put(currentWord, currentCount.getOrDefault(currentWord, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (currentCount.get(currentWord) &gt; wordCount.getOrDefault(currentWord, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">leftWord</span> <span class="operator">=</span> s.substring(left, left + wordLen);</span><br><span class="line">                    left += wordLen;</span><br><span class="line">                    currentCount.put(leftWord, currentCount.get(leftWord) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">                    result.add(left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 22 ms, 击败 54.43% 使用 Java 的用户</p>
<p>内存消耗 : 44.55 MB, 击败 24.02% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s, words</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        word_len = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        total_len = <span class="built_in">len</span>(words) * word_len</span><br><span class="line">        word_count = Counter(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(word_len):</span><br><span class="line">            left, right = i, i</span><br><span class="line">            current_count = Counter()</span><br><span class="line">            <span class="keyword">while</span> right + word_len &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                current_word = s[right:right + word_len]</span><br><span class="line">                right += word_len</span><br><span class="line">                current_count[current_word] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> current_count[current_word] &gt; word_count[current_word]:</span><br><span class="line">                    left_word = s[left:left + word_len]</span><br><span class="line">                    left += word_len</span><br><span class="line">                    current_count[left_word] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right - left == total_len:</span><br><span class="line">                    result.append(left)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 117 ms, 击败 65.90% 使用 Python 的用户</p>
<p>内存消耗 : 11.96 MB, 击败 97.05% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s: <span class="built_in">str</span>, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        word_len = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        total_len = <span class="built_in">len</span>(words) * word_len</span><br><span class="line">        word_count = Counter(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(word_len):</span><br><span class="line">            left, right = i, i</span><br><span class="line">            current_count = Counter()</span><br><span class="line">            <span class="keyword">while</span> right + word_len &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                current_word = s[right:right + word_len]</span><br><span class="line">                right += word_len</span><br><span class="line">                current_count[current_word] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> current_count[current_word] &gt; word_count[current_word]:</span><br><span class="line">                    left_word = s[left:left + word_len]</span><br><span class="line">                    left += word_len</span><br><span class="line">                    current_count[left_word] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right - left == total_len:</span><br><span class="line">                    result.append(left)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 104 ms, 击败 76.85% 使用 Python3 的用户</p>
<p>内存消耗 : 17.09 MB, 击败 38.99% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> key[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    UT_hash_handle hh;</span><br><span class="line">&#125; HashItem;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">findSubstring</span><span class="params">(<span class="type">char</span> * s, <span class="type">char</span> ** words, <span class="type">int</span> wordsSize, <span class="type">int</span>* returnSize)</span>&#123;    </span><br><span class="line">    <span class="type">int</span> m = wordsSize, n = <span class="built_in">strlen</span>(words[<span class="number">0</span>]), ls = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> *res = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * ls);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + m * n &gt; ls) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HashItem *diff = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">char</span> word[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + i + j * n);</span><br><span class="line">            HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">            HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">            &#125; </span><br><span class="line">            pEntry-&gt;val++;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">            HASH_FIND_STR(diff, words[j], pEntry);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                <span class="built_in">strcpy</span>(pEntry-&gt;key, words[j]);</span><br><span class="line">                pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">            &#125; </span><br><span class="line">            pEntry-&gt;val--;</span><br><span class="line">            <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                HASH_DEL(diff, pEntry);</span><br><span class="line">                <span class="built_in">free</span>(pEntry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> start = i; start &lt; ls - m * n + <span class="number">1</span>; start += n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start != i) &#123;</span><br><span class="line">                <span class="type">char</span> word[<span class="number">32</span>];</span><br><span class="line">                <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + start + (m - <span class="number">1</span>) * n);</span><br><span class="line">                HashItem * pEntry = <span class="literal">NULL</span>;</span><br><span class="line">                HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                    pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                    <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                    pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                    HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">                &#125; </span><br><span class="line">                pEntry-&gt;val++;</span><br><span class="line">                <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                    HASH_DEL(diff, pEntry);</span><br><span class="line">                    <span class="built_in">free</span>(pEntry);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">snprintf</span>(word, n + <span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, s + start - n);</span><br><span class="line">                pEntry = <span class="literal">NULL</span>;</span><br><span class="line">                HASH_FIND_STR(diff, word, pEntry);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == pEntry) &#123;</span><br><span class="line">                    pEntry = (HashItem *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashItem));</span><br><span class="line">                    <span class="built_in">strcpy</span>(pEntry-&gt;key, word);</span><br><span class="line">                    pEntry-&gt;val = <span class="number">0</span>;</span><br><span class="line">                    HASH_ADD_STR(diff, key, pEntry);</span><br><span class="line">                &#125; </span><br><span class="line">                pEntry-&gt;val--;</span><br><span class="line">                <span class="keyword">if</span> (pEntry-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                    HASH_DEL(diff, pEntry);</span><br><span class="line">                    <span class="built_in">free</span>(pEntry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (HASH_COUNT(diff) == <span class="number">0</span>) &#123;</span><br><span class="line">                res[pos++] = start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashItem *curr, *tmp;</span><br><span class="line">        HASH_ITER(hh, diff, curr, tmp) &#123;</span><br><span class="line">            HASH_DEL(diff, curr);  </span><br><span class="line">            <span class="built_in">free</span>(curr);      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = pos;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 998 ms, 击败 50.36% 使用 C 的用户</p>
<p>内存消耗 : 28.31 MB, 击败 41.85% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">int</span>&gt; <span class="title">FindSubstring</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span>[] words</span>)</span> &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s) || words == <span class="literal">null</span> || words.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> wordLen = words[<span class="number">0</span>].Length;</span><br><span class="line">        <span class="built_in">int</span> totalLen = wordLen * words.Length;</span><br><span class="line">        <span class="built_in">int</span> wordCount = words.Length;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; wordCounts = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordCounts.ContainsKey(word)) &#123;</span><br><span class="line">                wordCounts[word]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wordCounts[word] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= s.Length - totalLen; i++) &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; currentWordCounts = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(wordCounts);</span><br><span class="line">            <span class="built_in">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">                <span class="built_in">string</span> currentWord = s.Substring(i + j, wordLen);</span><br><span class="line">                <span class="keyword">if</span> (currentWordCounts.ContainsKey(currentWord) &amp;&amp; currentWordCounts[currentWord] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    currentWordCounts[currentWord]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == totalLen) &#123;</span><br><span class="line">                result.Add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1752 ms, 击败 31.63% 使用 C# 的用户</p>
<p>内存消耗 : 68.71 MB, 击败 15.31% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">words</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findSubstring = <span class="keyword">function</span>(<span class="params">s, words</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (!s || !words || words.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> wordLen = words[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> totalLen = wordLen * words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> wordCount = words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> wordCounts = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wordCounts.<span class="title function_">has</span>(word)) &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, wordCounts.<span class="title function_">get</span>(word) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= s.<span class="property">length</span> - totalLen; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentWordCounts = <span class="keyword">new</span> <span class="title class_">Map</span>(wordCounts);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">            <span class="keyword">let</span> currentWord = s.<span class="title function_">substring</span>(i + j, i + j + wordLen);</span><br><span class="line">            <span class="keyword">if</span> (currentWordCounts.<span class="title function_">has</span>(currentWord) &amp;&amp; currentWordCounts.<span class="title function_">get</span>(currentWord) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentWordCounts.<span class="title function_">set</span>(currentWord, currentWordCounts.<span class="title function_">get</span>(currentWord) - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">from</span>(currentWordCounts.<span class="title function_">values</span>()).<span class="title function_">every</span>(<span class="function"><span class="params">count</span> =&gt;</span> count === <span class="number">0</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 907 ms, 击败 54.95% 使用 JavaScript 的用户</p>
<p>内存消耗 : 56.55 MB, 击败 16.64% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findSubstring</span>(<span class="params">s: <span class="built_in">string</span>, words: <span class="built_in">string</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">if</span> (!s || !words || words.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordLen</span>: <span class="built_in">number</span> = words[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">totalLen</span>: <span class="built_in">number</span> = wordLen * words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordCount</span>: <span class="built_in">number</span> = words.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">wordCounts</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wordCounts.<span class="title function_">has</span>(word)) &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, wordCounts.<span class="title function_">get</span>(word)! + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wordCounts.<span class="title function_">set</span>(word, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= s.<span class="property">length</span> - totalLen; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">currentWordCounts</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>(wordCounts);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; totalLen; j += wordLen) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">currentWord</span>: <span class="built_in">string</span> = s.<span class="title function_">substring</span>(i + j, i + j + wordLen);</span><br><span class="line">            <span class="keyword">if</span> (currentWordCounts.<span class="title function_">has</span>(currentWord) &amp;&amp; currentWordCounts.<span class="title function_">get</span>(currentWord)! &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentWordCounts.<span class="title function_">set</span>(currentWord, currentWordCounts.<span class="title function_">get</span>(currentWord)! - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">from</span>(currentWordCounts.<span class="title function_">values</span>()).<span class="title function_">every</span>(<span class="function"><span class="params">count</span> =&gt;</span> count === <span class="number">0</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 874 ms, 击败 73.21% 使用 TypeScript 的用户</p>
<p>内存消耗 : 57.38 MB, 击败 6.25% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[] $words</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findSubstring</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$words</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$s</span>) || <span class="keyword">empty</span>(<span class="variable">$words</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$wordLen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$words</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$totalLen</span> = <span class="variable">$wordLen</span> * <span class="title function_ invoke__">count</span>(<span class="variable">$words</span>);</span><br><span class="line">        <span class="variable">$wordCount</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$words</span>);</span><br><span class="line">        <span class="variable">$wordCounts</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$words</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$wordCounts</span>[<span class="variable">$word</span>])) &#123;</span><br><span class="line">                <span class="variable">$wordCounts</span>[<span class="variable">$word</span>]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$wordCounts</span>[<span class="variable">$word</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) - <span class="variable">$totalLen</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$currentWordCounts</span> = <span class="variable">$wordCounts</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$totalLen</span>; <span class="variable">$j</span> += <span class="variable">$wordLen</span>) &#123;</span><br><span class="line">                <span class="variable">$currentWord</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="variable">$i</span> + <span class="variable">$j</span>, <span class="variable">$wordLen</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>]) &amp;&amp; <span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable">$currentWordCounts</span>[<span class="variable">$currentWord</span>]--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">array_sum</span>(<span class="variable">$currentWordCounts</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span>[] = <span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1420 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.54 MB, 击败 -% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">findSubstring</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">words</span>: [<span class="type">String</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="operator">!</span>s.isEmpty, <span class="operator">!</span>words.isEmpty, <span class="operator">!</span>words[<span class="number">0</span>].isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> wordLength <span class="operator">=</span> words[<span class="number">0</span>].count</span><br><span class="line">        <span class="keyword">let</span> wordCount <span class="operator">=</span> words.count</span><br><span class="line">        <span class="keyword">let</span> totalLength <span class="operator">=</span> wordLength <span class="operator">*</span> wordCount</span><br><span class="line">        <span class="keyword">let</span> sArray <span class="operator">=</span> <span class="type">Array</span>(s)</span><br><span class="line">        <span class="keyword">var</span> results: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> wordsDict: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> [:]</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words &#123;</span><br><span class="line">            wordsDict[word, <span class="keyword">default</span>: <span class="number">0</span>] <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>wordLength &#123;</span><br><span class="line">            <span class="keyword">var</span> left <span class="operator">=</span> i</span><br><span class="line">            <span class="keyword">var</span> right <span class="operator">=</span> i</span><br><span class="line">            <span class="keyword">var</span> currentDict: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> [:]</span><br><span class="line">            <span class="keyword">var</span> valid <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> right <span class="operator">+</span> wordLength <span class="operator">&lt;=</span> s.count &#123;</span><br><span class="line">                <span class="keyword">let</span> currentWord <span class="operator">=</span> <span class="type">String</span>(sArray[right<span class="operator">..&lt;</span>right <span class="operator">+</span> wordLength])</span><br><span class="line">                right <span class="operator">+=</span> wordLength</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> count <span class="operator">=</span> currentDict[currentWord] &#123;</span><br><span class="line">                    currentDict[currentWord] <span class="operator">=</span> count <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> count <span class="operator">+</span> <span class="number">1</span> <span class="operator">==</span> wordsDict[currentWord] &#123;</span><br><span class="line">                        valid <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> right <span class="operator">-</span> left <span class="operator">&gt;=</span> totalLength &#123;</span><br><span class="line">                    <span class="keyword">if</span> valid <span class="operator">==</span> wordsDict.count &#123;</span><br><span class="line">                        results.append(left)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> leftWord <span class="operator">=</span> <span class="type">String</span>(sArray[left<span class="operator">..&lt;</span>left <span class="operator">+</span> wordLength])</span><br><span class="line">                    left <span class="operator">+=</span> wordLength</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> count <span class="operator">=</span> currentDict[leftWord] &#123;</span><br><span class="line">                        <span class="keyword">if</span> count <span class="operator">==</span> wordsDict[leftWord] &#123;</span><br><span class="line">                            valid <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        currentDict[leftWord] <span class="operator">=</span> count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 272 ms, 击败 25.00% 使用 Swift 的用户</p>
<p>内存消耗 : 16.11 MB, 击败 8.33% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findSubstring</span><span class="params">(s: <span class="type">String</span>, words: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty() || words.isEmpty() || s.length &lt; words[<span class="number">0</span>].length || s.length &lt; words[<span class="number">0</span>].length * words.size) &#123;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> wn = words[<span class="number">0</span>].length</span><br><span class="line">        <span class="keyword">val</span> count = words.groupBy &#123; it &#125;.mapValues &#123; it.value.size &#125;</span><br><span class="line">        <span class="keyword">val</span> wordFreq = IntArray(count.size)</span><br><span class="line">        <span class="keyword">val</span> uniqWords = count.keys.toList()</span><br><span class="line">        uniqWords.forEachIndexed &#123; index, w -&gt; wordFreq[index] = count[w]!! &#125;</span><br><span class="line">        <span class="keyword">val</span> matchIndex = IntArray(s.length) &#123; -<span class="number">1</span> &#125;</span><br><span class="line">        ACTree(uniqWords).match(s) &#123; pos, strIndex, _ -&gt; matchIndex[pos] = strIndex &#125;</span><br><span class="line">        <span class="keyword">val</span> freq = wordFreq.clone()</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until wn) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i</span><br><span class="line">            <span class="keyword">while</span> (j &lt; matchIndex.size &amp;&amp; matchIndex[j] == -<span class="number">1</span>) j += wn</span><br><span class="line">            <span class="keyword">var</span> dist = words.size</span><br><span class="line">            <span class="keyword">var</span> left = j</span><br><span class="line">            <span class="keyword">var</span> right = j</span><br><span class="line">            wordFreq.copyInto(freq)</span><br><span class="line">            <span class="keyword">while</span> (right &lt; matchIndex.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matchIndex[right] == -<span class="number">1</span>) &#123;</span><br><span class="line">                    right += wn</span><br><span class="line">                    left = right</span><br><span class="line">                    dist = words.size</span><br><span class="line">                    wordFreq.copyInto(freq)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--freq[matchIndex[right]] &gt;= <span class="number">0</span>) dist--</span><br><span class="line">                right += wn</span><br><span class="line">                <span class="keyword">while</span> (dist == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (right - left == words.size * wn) &#123;</span><br><span class="line">                        result.add(left)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (++freq[matchIndex[left]] &gt; <span class="number">0</span>) dist++</span><br><span class="line">                    left += wn</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ACTree</span>(<span class="keyword">val</span> strs: List&lt;String&gt;) &#123;</span><br><span class="line">        <span class="keyword">val</span> root = AcNode(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            strs.forEachIndexed &#123; i, it -&gt; putString(i, it) &#125;</span><br><span class="line">            buildFailurePointer()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AcNode</span>(<span class="keyword">var</span> <span class="keyword">data</span>: <span class="built_in">Char</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> children = arrayOfNulls&lt;AcNode&gt;(<span class="number">26</span>)</span><br><span class="line">            <span class="keyword">var</span> isEndingChar = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> fail: AcNode? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> strIndex = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">putString</span><span class="params">(index: <span class="type">Int</span>, str: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = root</span><br><span class="line">            str.forEach &#123;</span><br><span class="line">                <span class="keyword">val</span> next = p.children[it - <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">                    p = next</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">val</span> new = AcNode(it)</span><br><span class="line">                    new.length = p.length + <span class="number">1</span></span><br><span class="line">                    p.children[it - <span class="string">&#x27;a&#x27;</span>] = new</span><br><span class="line">                    p = new</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p.isEndingChar = <span class="literal">true</span></span><br><span class="line">            p.strIndex = index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">buildFailurePointer</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> queue: Queue&lt;AcNode&gt; = LinkedList()</span><br><span class="line">            root.fail = <span class="literal">null</span></span><br><span class="line">            queue.add(root)</span><br><span class="line">            <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">                <span class="keyword">val</span> p: AcNode = queue.remove()</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.25</span>) &#123;</span><br><span class="line">                    <span class="keyword">val</span> pc = p.children[i] ?: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> (p == root) &#123;</span><br><span class="line">                        pc.fail = root</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> q = p.fail</span><br><span class="line">                        <span class="keyword">while</span> (q != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">val</span> qc = q.children[pc.<span class="keyword">data</span> - <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">                            <span class="keyword">if</span> (qc != <span class="literal">null</span>) &#123;</span><br><span class="line">                                pc.fail = qc</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            q = q.fail</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">                            pc.fail = root</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.add(pc)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">match</span><span class="params">(text: <span class="type">String</span>, action: (<span class="type">pos</span>: <span class="type">Int</span>, <span class="type">strIndex</span>: <span class="type">Int</span>, <span class="type">str</span>: <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> n = text.length</span><br><span class="line">            <span class="keyword">var</span> p: AcNode? = root</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">                <span class="keyword">val</span> idx = text[i] - <span class="string">&#x27;a&#x27;</span></span><br><span class="line">                <span class="keyword">while</span> (p!!.children[idx] == <span class="literal">null</span> &amp;&amp; p != root) &#123;</span><br><span class="line">                    p = p.fail</span><br><span class="line">                &#125;</span><br><span class="line">                p = p.children[idx]</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span>) p = root</span><br><span class="line">                <span class="keyword">var</span> tmp = p</span><br><span class="line">                <span class="keyword">while</span> (tmp != root) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tmp!!.isEndingChar) &#123;</span><br><span class="line">                        <span class="keyword">val</span> pos = i - tmp.length + <span class="number">1</span></span><br><span class="line">                        action(pos, tmp.strIndex, strs[tmp.strIndex])</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmp = tmp.fail</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 242 ms, 击败 80.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.90 MB, 击败 60.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; findSubstring(<span class="built_in">String</span> s, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; words) &#123;</span><br><span class="line">    <span class="keyword">var</span> wordMap = &lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt;&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">      wordMap.putIfAbsent(word, () =&gt; wordMap.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> wordCounts = <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.filled(wordMap.length, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> word <span class="keyword">in</span> words) &#123;</span><br><span class="line">      wordCounts[wordMap[word]!]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = &lt;<span class="built_in">int</span>&gt;[];</span><br><span class="line">    <span class="built_in">int</span> sLen = s.length;</span><br><span class="line">    <span class="built_in">int</span> wordNum = words.length;</span><br><span class="line">    <span class="built_in">int</span> wordLen = words[<span class="number">0</span>].length;</span><br><span class="line">    <span class="built_in">int</span> len = wordLen * wordNum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; wordLen; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt;= sLen - len; j += wordLen) &#123;</span><br><span class="line">        <span class="keyword">var</span> windowCounts = <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.filled(wordMap.length, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = wordNum - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">          <span class="built_in">int</span> begin = j + k * wordLen;</span><br><span class="line">          <span class="built_in">String</span> word = s.substring(begin, begin + wordLen);</span><br><span class="line">          <span class="built_in">int</span> index = wordMap[word] ?? <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">if</span> (index == <span class="number">-1</span> || windowCounts[index]++ == wordCounts[index]) &#123;</span><br><span class="line">            j = begin;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(j);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 821 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 145.20 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSubstring</span><span class="params">(s <span class="type">string</span>, words []<span class="type">string</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result []<span class="type">int</span></span><br><span class="line">    wordMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(words) == <span class="number">0</span> || <span class="built_in">len</span>(words[<span class="number">0</span>]) == <span class="number">0</span> || <span class="built_in">len</span>(s) &lt; <span class="built_in">len</span>(words)*<span class="built_in">len</span>(words[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    wordLen, wordNum := <span class="built_in">len</span>(words[<span class="number">0</span>]), <span class="built_in">len</span>(words)</span><br><span class="line">    totalLen := wordLen * wordNum</span><br><span class="line">    <span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">        wordMap[word]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; wordLen; i++ &#123;</span><br><span class="line">        left, right := i, i</span><br><span class="line">        window := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">        <span class="keyword">for</span> right+wordLen &lt;= <span class="built_in">len</span>(s) &#123;</span><br><span class="line">            currentWord := s[right : right+wordLen]</span><br><span class="line">            right += wordLen</span><br><span class="line">            window[currentWord]++</span><br><span class="line">            <span class="keyword">for</span> window[currentWord] &gt; wordMap[currentWord] &#123;</span><br><span class="line">                leftWord := s[left : left+wordLen]</span><br><span class="line">                left += wordLen</span><br><span class="line">                window[leftWord]--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> right-left == totalLen &#123;</span><br><span class="line">                result = <span class="built_in">append</span>(result, left)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 91.82% 使用 Go 的用户</p>
<p>内存消耗 : 6.72 MB, 击败 33.56% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; words</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_substring</span>(<span class="params">s, words</span>)</span><br><span class="line">  result = []</span><br><span class="line">  word_map = <span class="title class_">Hash</span>.new(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> words.empty? |<span class="params"></span>| words[<span class="number">0</span>].empty? |<span class="params"></span>| s.length &lt; words.length * words[<span class="number">0</span>].length</span><br><span class="line">  word_len, word_num = words[<span class="number">0</span>].length, words.length</span><br><span class="line">  total_len = word_len * word_num</span><br><span class="line">  words.each &#123; |<span class="params">word</span>| word_map[word] += <span class="number">1</span> &#125;</span><br><span class="line">  (<span class="number">0</span>...word_len).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    left = i</span><br><span class="line">    right = i</span><br><span class="line">    window = <span class="title class_">Hash</span>.new(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> right + word_len &lt;= s.length</span><br><span class="line">      current_word = s[right, word_len]</span><br><span class="line">      right += word_len</span><br><span class="line">      window[current_word] += <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> window[current_word] &gt; word_map[current_word]</span><br><span class="line">        left_word = s[left, word_len]</span><br><span class="line">        left += word_len</span><br><span class="line">        window[left_word] -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      result &lt;&lt; left <span class="keyword">if</span> right - left == total_len</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 136 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 208.04 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span></span>(s: <span class="type">String</span>, words: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ListBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty || words.isEmpty || s.length &lt; words(<span class="number">0</span>).length * words.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> result.toList</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> wordLen = words(<span class="number">0</span>).length</span><br><span class="line">    <span class="keyword">val</span> wordNum = words.length</span><br><span class="line">    <span class="keyword">val</span> totalLen = wordLen * wordNum</span><br><span class="line">    <span class="keyword">val</span> wordMap = words.groupBy(identity).mapValues(_.length)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until wordLen) &#123;</span><br><span class="line">      <span class="keyword">var</span> left = i</span><br><span class="line">      <span class="keyword">var</span> right = i</span><br><span class="line">      <span class="keyword">var</span> window = scala.collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]().withDefaultValue(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">while</span> (right + wordLen &lt;= s.length) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentWord = s.substring(right, right + wordLen)</span><br><span class="line">        right += wordLen</span><br><span class="line">        window(currentWord) += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (window(currentWord) &gt; wordMap.getOrElse(currentWord, <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="keyword">val</span> leftWord = s.substring(left, left + wordLen)</span><br><span class="line">          left += wordLen</span><br><span class="line">          window(leftWord) -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right - left == totalLen) &#123;</span><br><span class="line">          result += left</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 663 ms, 击败 88.89% 使用 Scala 的用户</p>
<p>内存消耗 : 55.71 MB, 击败 88.89% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">find_substring</span>(s: <span class="type">String</span>, words: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line">        <span class="built_in">macro_rules!</span> update_diff &#123;</span><br><span class="line">            ($diff:expr, $s:expr, $cnt:expr) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">t</span> = $s <span class="keyword">as</span> &amp;<span class="type">str</span>;</span><br><span class="line">                *$diff.<span class="title function_ invoke__">entry</span>(t).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>) += $cnt;</span><br><span class="line">                <span class="keyword">if</span> *$diff.<span class="title function_ invoke__">get</span>(t).<span class="title function_ invoke__">unwrap</span>() == <span class="number">0</span> &#123;</span><br><span class="line">                    $diff.<span class="title function_ invoke__">remove</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">diff</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> (m, n) = (words.<span class="title function_ invoke__">len</span>(), words[<span class="number">0</span>].<span class="title function_ invoke__">len</span>());</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">idx</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">if</span> idx + m * n &gt; s.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (idx..idx + m * n).<span class="title function_ invoke__">step_by</span>(n) &#123;</span><br><span class="line">                update_diff!(diff, &amp;s[i..i + n], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">w</span> <span class="keyword">in</span> words.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">                update_diff!(diff, w, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> diff.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                ans.<span class="title function_ invoke__">push</span>(idx <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (idx + n..s.<span class="title function_ invoke__">len</span>() - m * n + <span class="number">1</span>).<span class="title function_ invoke__">step_by</span>(n) &#123;</span><br><span class="line">                update_diff!(diff, &amp;s[i - n..i], -<span class="number">1</span>);</span><br><span class="line">                update_diff!(diff, &amp;s[i + (m - <span class="number">1</span>) * n..i + m * n], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> diff.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    ans.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            diff.<span class="title function_ invoke__">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 93.94% 使用 Rust 的用户</p>
<p>内存消耗 : 2.39 MB, 击败 84.85% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<p>暂时未解决</p>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00031.下一个排列</title>
    <url>/zh-CN/fba29e87c235/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p>
<ul>
<li>例如，arr &#x3D; [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。</li>
</ul>
<p>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p>
<ul>
<li>例如，arr &#x3D; [1,2,3] 的下一个排列是 [1,3,2] 。</li>
<li>类似地，arr &#x3D; [2,3,1] 的下一个排列是 [3,1,2] 。</li>
<li>而 arr &#x3D; [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。</li>
</ul>
<p>给你一个整数数组 nums ，找出 nums 的下一个排列。</p>
<p>必须 <strong>原地</strong> 修改，只允许使用额外常数空间。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：[1,3,2]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [3,2,1]<br>输出：[1,2,3]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [1,1,5]<br>输出：[1,5,1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 100</li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 100</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + i + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 14.27 MB, 击败 5.56% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) &#123;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">        reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            swap(nums, start, end);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 42.07 MB, 击败 22.67% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] &lt;= nums[i]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        nums[i + <span class="number">1</span>:] = <span class="built_in">reversed</span>(nums[i + <span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.57% 使用 Python 的用户</p>
<p>内存消耗 : 11.38 MB, 击败 96.34% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] &lt;= nums[i]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        nums[i + <span class="number">1</span>:] = <span class="built_in">reversed</span>(nums[i + <span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 96.03% 使用 Python3 的用户</p>
<p>内存消耗 : 16.47 MB, 击败 30.51% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        swap(&amp;nums[start], &amp;nums[end]);</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = numsSize - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, numsSize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;nums[i], &amp;nums[j]);</span><br><span class="line"></span><br><span class="line">    reverse(nums, i + <span class="number">1</span>, numsSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.42% 使用 C 的用户</p>
<p>内存消耗 : 6.12 MB, 击败 92.04% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NextPermutation</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> i = nums.Length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">            Array.Reverse(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> j = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(nums, i, j);</span><br><span class="line">        Array.Reverse(nums, i + <span class="number">1</span>, nums.Length - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 100 ms, 击败 83.33% 使用 C# 的用户</p>
<p>内存消耗 : 46.14 MB, 击败 5.88% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> nextPermutation = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === -<span class="number">1</span>) &#123;</span><br><span class="line">        nums.<span class="title function_">reverse</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> j = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    [nums[i], nums[j]] = [nums[j], nums[i]];</span><br><span class="line">    <span class="title function_">reverse</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">nums, start</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> end = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        [nums[start], nums[end]] = [nums[end], nums[start]];</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 42.58% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.04 MB, 击败 5.08% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextPermutation</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === -<span class="number">1</span>) &#123;</span><br><span class="line">        nums.<span class="title function_">reverse</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> j = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    [nums[i], nums[j]] = [nums[j], nums[i]];</span><br><span class="line">    <span class="title function_">reverse</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">nums: <span class="built_in">number</span>[], start: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> end = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        [nums[start], nums[end]] = [nums[end], nums[start]];</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 62.28% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.34 MB, 击败 11.40% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nextPermutation</span>(<span class="params">&amp;<span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] &gt;= <span class="variable">$nums</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="variable">$i</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverse</span>(<span class="variable">$nums</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$j</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$nums</span>[<span class="variable">$j</span>] &lt;= <span class="variable">$nums</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">            <span class="variable">$j</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$j</span>]] = [<span class="variable">$nums</span>[<span class="variable">$j</span>], <span class="variable">$nums</span>[<span class="variable">$i</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reverse</span>(<span class="variable">$nums</span>, <span class="variable">$i</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">&amp;<span class="variable">$nums</span>, <span class="variable">$start</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$end</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$start</span> &lt; <span class="variable">$end</span>) &#123;</span><br><span class="line">            [<span class="variable">$nums</span>[<span class="variable">$start</span>], <span class="variable">$nums</span>[<span class="variable">$end</span>]] = [<span class="variable">$nums</span>[<span class="variable">$end</span>], <span class="variable">$nums</span>[<span class="variable">$start</span>]];</span><br><span class="line">            <span class="variable">$start</span>++;</span><br><span class="line">            <span class="variable">$end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 30.77% 使用 PHP 的用户</p>
<p>内存消耗 : 20.43 MB, 击败 7.69% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">nextPermutation</span>(<span class="keyword">_</span> <span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> nums[i] <span class="operator">&gt;=</span> nums[i <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">            i <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> j <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[j] <span class="operator">&lt;=</span> nums[i] &#123;</span><br><span class="line">            j <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        nums.swapAt(i, j)</span><br><span class="line">        <span class="keyword">var</span> start <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> end <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> start <span class="operator">&lt;</span> end &#123;</span><br><span class="line">            nums.swapAt(start, end)</span><br><span class="line">            start <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            end <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 59.57% 使用 Swift 的用户</p>
<p>内存消耗 : 15.65 MB, 击败 6.38% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nextPermutation</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = nums.size - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) &#123;</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> j = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (nums[j] &lt;= nums[i]) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        nums.swap(i, j)</span><br><span class="line">        reverse(nums, i + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">reverse</span><span class="params">(nums: <span class="type">IntArray</span>, start: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> end = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> s = start</span><br><span class="line">        <span class="keyword">var</span> e = end</span><br><span class="line">        <span class="keyword">while</span> (s &lt; e) &#123;</span><br><span class="line">            nums[s] = nums[e].also &#123; nums[e] = nums[s] &#125;</span><br><span class="line">            s++</span><br><span class="line">            e--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> IntArray.<span class="title">swap</span><span class="params">(i: <span class="type">Int</span>, j: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> temp = <span class="keyword">this</span>[i]</span><br><span class="line">        <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j]</span><br><span class="line">        <span class="keyword">this</span>[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 224 ms, 击败 21.74% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.23 MB, 击败 8.70% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> nextPermutation(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> i = nums.length - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) &#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      _swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    _reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _swap(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;</span><br><span class="line">    <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _reverse(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> left, <span class="built_in">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="built_in">int</span> temp = nums[left];</span><br><span class="line">      nums[left] = nums[right];</span><br><span class="line">      nums[right] = temp;</span><br><span class="line">      left++;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 50.00% 使用 Dart 的用户</p>
<p>内存消耗 : 148.27 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    i := <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        i--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j] &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(nums[i+<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.27 MB, 击败 81.13% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_permutation</span>(<span class="params">nums</span>)</span><br><span class="line">  i = nums.length - <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> i &gt;= <span class="number">0</span></span><br><span class="line">    j = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j]</span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  reverse(nums, i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">nums, start</span>)</span><br><span class="line">  i, j = start, nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; j</span><br><span class="line">    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 -% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.68 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> i = nums.length - <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums(i) &gt;= nums(i + <span class="number">1</span>)) &#123;</span><br><span class="line">      i -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> j = nums.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums(i) &gt;= nums(j)) &#123;</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      swap(nums, i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(nums, i + <span class="number">1</span>, nums.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], i: <span class="type">Int</span>, j: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> temp = nums(i)</span><br><span class="line">    nums(i) = nums(j)</span><br><span class="line">    nums(j) = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">reverse</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> i = start</span><br><span class="line">    <span class="keyword">var</span> j = end</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      swap(nums, i, j)</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 523 ms, 击败 33.33% 使用 Scala 的用户</p>
<p>内存消耗 : 55.04 MB, 击败 33.33% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">next_permutation</span>(nums: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; nums[i <span class="keyword">as</span> <span class="type">usize</span>] &gt;= nums[(i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>] &#123;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">j</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> &amp;&amp; nums[i <span class="keyword">as</span> <span class="type">usize</span>] &gt;= nums[j <span class="keyword">as</span> <span class="type">usize</span>] &#123;</span><br><span class="line">                j -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums.<span class="title function_ invoke__">swap</span>(i <span class="keyword">as</span> <span class="type">usize</span>, j <span class="keyword">as</span> <span class="type">usize</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nums[(i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>..].<span class="title function_ invoke__">reverse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.09 MB, 击败 36.84% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00032.最长有效括号</title>
    <url>/zh-CN/7ec618965874/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “(()”<br>输出：2<br>解释：最长有效括号子串是 “()”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “)()())”<br>输出：4<br>解释：最长有效括号子串是 “()()”</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “”<br>输出：0</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$0 &lt;&#x3D; s.length &lt;&#x3D; 3 * 10^4$</li>
<li>s[i] 为 ‘(‘ 或 ‘)’</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = <span class="built_in">max</span>(maxLen, i - st.<span class="built_in">top</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 8.35 MB, 击败 14.42% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = Math.max(maxLen, i - stack.peek());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 26.39% 使用 Java 的用户</p>
<p>内存消耗 : 41.96 MB, 击败 36.08% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestValidParentheses</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_len = <span class="built_in">max</span>(max_len, i - stack[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 27 ms, 击败 76.27% 使用 Python 的用户</p>
<p>内存消耗 : 11.87 MB, 击败 93.51% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestValidParentheses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_len = <span class="built_in">max</span>(max_len, i - stack[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 37 ms, 击败 95.99% 使用 Python3 的用户</p>
<p>内存消耗 : 17.03 MB, 击败 36.91% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxans = <span class="number">0</span>, n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] +</span><br><span class="line">                        ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxans = fmax(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 58.87% 使用 C 的用户</p>
<p>内存消耗 : 6.07 MB, 击败 92.90% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">LongestValidParentheses</span>(<span class="params"><span class="built_in">string</span> s</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> maxans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> n = s.Length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span>[] dp = <span class="keyword">new</span> <span class="built_in">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = dp[i - <span class="number">1</span>] + ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxans = Math.Max(maxans, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 42 ms, 击败 91.38% 使用 C# 的用户</p>
<p>内存消耗 : 39.19 MB, 击败 10.35% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestValidParentheses = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> stack = [-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLen = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLen, i - stack[stack.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 56 ms, 击败 95.40% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.18 MB, 击败 13.28% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestValidParentheses</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxLen</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">stack</span>: <span class="built_in">number</span>[] = [-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLen = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLen, i - stack[stack.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 97.96% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.29 MB, 击败 21.43% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longestValidParentheses</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$maxLen</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$stack</span> = [-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$s</span>[<span class="variable">$i</span>] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$i</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_pop</span>(<span class="variable">$stack</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$stack</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">array_push</span>(<span class="variable">$stack</span>, <span class="variable">$i</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$maxLen</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxLen</span>, <span class="variable">$i</span> - <span class="title function_ invoke__">end</span>(<span class="variable">$stack</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxLen</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 80.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.43 MB, 击败 6.67% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">longestValidParentheses</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxLen <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> stack <span class="operator">=</span> [<span class="operator">-</span><span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> (i, char) <span class="keyword">in</span> s.enumerated() &#123;</span><br><span class="line">            <span class="keyword">if</span> char <span class="operator">==</span> <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">                stack.append(i)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.popLast()</span><br><span class="line">                <span class="keyword">if</span> stack.isEmpty &#123;</span><br><span class="line">                    stack.append(i)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen <span class="operator">=</span> <span class="built_in">max</span>(maxLen, i <span class="operator">-</span> stack.last<span class="operator">!</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 87.80% 使用 Swift 的用户</p>
<p>内存消耗 : 16.35 MB, 击败 7.32% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">longestValidParentheses</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxLen = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> stack = Stack&lt;<span class="built_in">Int</span>&gt;().apply &#123; push(-<span class="number">1</span>) &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> s.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> char = s[i]</span><br><span class="line">            <span class="keyword">if</span> (char == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(i)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    stack.push(i)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLen = maxOf(maxLen, i - stack.peek())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 175 ms, 击败 66.67% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.00 MB, 击败 25.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> longestValidParentheses(<span class="built_in">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; stack = [<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        stack.add(i);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.removeLast();</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty) &#123;</span><br><span class="line">          stack.add(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          maxLen = max(maxLen, i - stack.last);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 147.31 MB, 击败 -% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestValidParentheses</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	maxLen := <span class="number">0</span></span><br><span class="line">	stack := []<span class="type">int</span>&#123;<span class="number">-1</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i, char := <span class="keyword">range</span> s &#123;</span><br><span class="line">		<span class="keyword">if</span> char == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">				stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				maxLen = max(maxLen, i-stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>])</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 3.28 MB, 击败 27.17% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_valid_parentheses</span>(<span class="params">s</span>)</span><br><span class="line">  max_len = <span class="number">0</span></span><br><span class="line">  stack = [-<span class="number">1</span>]</span><br><span class="line">  s.each_char.with_index <span class="keyword">do</span> |<span class="params">char, i</span>|</span><br><span class="line">    <span class="keyword">if</span> char == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">      stack.push(i)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      stack.pop</span><br><span class="line">      <span class="keyword">if</span> stack.empty?</span><br><span class="line">        stack.push(i)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        max_len = [max_len, i - stack.last].max</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  max_len</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.87 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> stack = <span class="type">List</span>(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> ((char, i) &lt;- s.zipWithIndex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (char == &#x27;(&#x27;) &#123;</span><br><span class="line">        stack = i :: stack</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack = stack.tail</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty) &#123;</span><br><span class="line">          stack = i :: stack</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          maxLen = math.max(maxLen, i - stack.head)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxLen</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 504 ms, 击败 80.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.55 MB, 击败 80.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">longest_valid_parentheses</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_len</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="built_in">vec!</span>[-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i, c) <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line">                stack.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> stack.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    stack.<span class="title function_ invoke__">push</span>(i <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    max_len = max_len.<span class="title function_ invoke__">max</span>(i <span class="keyword">as</span> <span class="type">i32</span> - stack.<span class="title function_ invoke__">last</span>().<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_len <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.00 MB, 击败 98.53% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">longest-valid-parentheses</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> max-len <span class="number">0</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> stack (<span class="name"><span class="built_in">list</span></span> <span class="number">-1</span>))</span><br><span class="line">  (<span class="name">for</span> ([<span class="name">i</span> (<span class="name">in-range</span> (<span class="name"><span class="built_in">string-length</span></span> s))])</span><br><span class="line">    (<span class="name"><span class="built_in">define</span></span> char (<span class="name"><span class="built_in">string-ref</span></span> s i))</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      [(<span class="name"><span class="built_in">char=?</span></span> char <span class="literal">#\(</span>) (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">cons</span></span> i stack))]</span><br><span class="line">      [(<span class="name"><span class="built_in">char=?</span></span> char <span class="literal">#\)</span>)</span><br><span class="line">       (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">cdr</span></span> stack))</span><br><span class="line">       (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> stack)</span><br><span class="line">           (<span class="name"><span class="built_in">set!</span></span> stack (<span class="name"><span class="built_in">list</span></span> i))</span><br><span class="line">           (<span class="name"><span class="built_in">set!</span></span> max-len (<span class="name"><span class="built_in">max</span></span> max-len (<span class="name"><span class="built_in">-</span></span> i (<span class="name"><span class="built_in">car</span></span> stack)))))]))</span><br><span class="line">  max-len)</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 187 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 97.80 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00033.搜索旋转排序数组</title>
    <url>/zh-CN/d52aa1cc3fae/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>整数数组 nums 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>
<p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p>
<p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p>
<p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0<br>输出：4</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3<br>输出：-1</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [1], target &#x3D; 0<br>输出：-1</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5000</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 中的每个值都 独一无二</li>
<li>题目数据保证 nums 在预先未知的某个下标上进行了旋转</li>
<li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 66.87% 使用 C++ 的用户</p>
<p>内存消耗 : 13.30 MB, 击败 5.05% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.00 MB, 击败 19.74% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 52.22% 使用 Python 的用户</p>
<p>内存消耗 : 11.41 MB, 击败 100.00% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &lt;= nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &lt;= nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 71.66% 使用 Python3 的用户</p>
<p>内存消耗 : 16.74 MB, 击败 36.28% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 5.86 MB, 击败 88.43% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Search</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 83.77% 使用 C# 的用户</p>
<p>内存消耗 : 41.57 MB, 击败 5.19% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 95.29% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.34 MB, 击败 5.11% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 87.77% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.68 MB, 击败 7.42% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = (<span class="keyword">int</span>)((<span class="variable">$left</span> + <span class="variable">$right</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] == <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$left</span>] &lt;= <span class="variable">$nums</span>[<span class="variable">$mid</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$left</span>] &lt;= <span class="variable">$target</span> &amp;&amp; <span class="variable">$target</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$mid</span>]) &#123;</span><br><span class="line">                    <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt;= <span class="variable">$target</span> &amp;&amp; <span class="variable">$target</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                    <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 46.15% 使用 PHP 的用户</p>
<p>内存消耗 : 20.42 MB, 击败 7.69% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">search</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> (left <span class="operator">+</span> right) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[left] <span class="operator">&lt;=</span> nums[mid] &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[left] <span class="operator">&lt;=</span> target <span class="operator">&amp;&amp;</span> target <span class="operator">&lt;=</span> nums[mid] &#123;</span><br><span class="line">                    right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[mid] <span class="operator">&lt;=</span> target <span class="operator">&amp;&amp;</span> target <span class="operator">&lt;=</span> nums[right] &#123;</span><br><span class="line">                    left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.07% 使用 Swift 的用户</p>
<p>内存消耗 : 15.50 MB, 击败 18.69% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">search</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = (left + right) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 154 ms, 击败 95.12% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.81 MB, 击败 53.66% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> search(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = (left + right) ~/ <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">          right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">          left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 289 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.27 MB, 击败 66.67% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left := <span class="number">0</span></span><br><span class="line">    right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid] &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 35.44% 使用 Go 的用户</p>
<p>内存消耗 : 2.39 MB, 击败 30.05% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = (left + right) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> nums[left] &lt;= nums[mid]</span><br><span class="line">      <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid]</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 40.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.52 MB, 击败 40.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = (left + right) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums(left) &lt;= nums(mid)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums(left) &lt;= target &amp;&amp; target &lt;= nums(mid)) &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums(mid) &lt;= target &amp;&amp; target &lt;= nums(right)) &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 499 ms, 击败 28.57% 使用 Scala 的用户</p>
<p>内存消耗 : 54.61 MB, 击败 14.29% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid] &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 8.57% 使用 Rust 的用户</p>
<p>内存消耗 : 2.01 MB, 击败 77.14% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00034.在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/zh-CN/577d1b888179/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>
<p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8<br>输出：[3,4]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6<br>输出：[-1,-1]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [], target &#x3D; 0<br>输出：[-1,-1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 10^5$</li>
<li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li>
<li>nums 是一个非递减数组</li>
<li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="built_in">find_first_occurrence</span>(nums, target), <span class="built_in">find_last_occurrence</span>(nums, target)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_first_occurrence</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_last_occurrence</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 20.11% 使用 C++ 的用户</p>
<p>内存消耗 : 15.74 MB, 击败 6.25% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;findFirstOccurrence(nums, target), findLastOccurrence(nums, target)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findFirstOccurrence</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findLastOccurrence</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 44.92 MB, 击败 12.98% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        first_occurrence = find_first_occurrence(nums, target)</span><br><span class="line">        last_occurrence = find_last_occurrence(nums, target)</span><br><span class="line">        <span class="keyword">return</span> [first_occurrence, last_occurrence]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 82.57% 使用 Python 的用户</p>
<p>内存消耗 : 11.77 MB, 击败 91.52% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>):</span><br><span class="line">            left, right, result = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    result = mid</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        first_occurrence = find_first_occurrence(nums, target)</span><br><span class="line">        last_occurrence = find_last_occurrence(nums, target)</span><br><span class="line">        <span class="keyword">return</span> [first_occurrence, last_occurrence]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 95.63% 使用 Python3 的用户</p>
<p>内存消耗 : 17.87 MB, 击败 30.78% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">searchRange</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    result[<span class="number">0</span>] = find_first_occurrence(nums, numsSize, target);</span><br><span class="line">    result[<span class="number">1</span>] = find_last_occurrence(nums, numsSize, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find_first_occurrence</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            result = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">find_last_occurrence</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            result = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 69.47% 使用 C 的用户</p>
<p>内存消耗 : 6.95 MB, 击败 99.07% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SearchRange</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">        result[<span class="number">0</span>] = FindFirstOccurrence(nums, target);</span><br><span class="line">        result[<span class="number">1</span>] = FindLastOccurrence(nums, target);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">FindFirstOccurrence</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">FindLastOccurrence</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 123 ms, 击败 70.95% 使用 C# 的用户</p>
<p>内存消耗 : 48.65 MB, 击败 5.24% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> findFirstOccurrence = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> findLastOccurrence = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> firstOccurrence = <span class="title function_">findFirstOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">const</span> lastOccurrence = <span class="title function_">findLastOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">return</span> [firstOccurrence, lastOccurrence];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 48 ms, 击败 98.12% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.98 MB, 击败 8.48% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchRange</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">const</span> findFirstOccurrence = <span class="keyword">function</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> findLastOccurrence = <span class="keyword">function</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> firstOccurrence = <span class="title function_">findFirstOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">const</span> lastOccurrence = <span class="title function_">findLastOccurrence</span>(nums, target);</span><br><span class="line">    <span class="keyword">return</span> [firstOccurrence, lastOccurrence];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 45.11% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.08 MB, 击败 14.82% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">searchRange</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFirstOccurrence</span>(<span class="variable">$nums</span>, <span class="variable">$target</span>), <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findLastOccurrence</span>(<span class="variable">$nums</span>, <span class="variable">$target</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findFirstOccurrence</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$mid</span>;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findLastOccurrence</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$mid</span>;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 87.10% 使用 PHP 的用户</p>
<p>内存消耗 : 21.48 MB, 击败 64.52% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">searchRange</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [findFirstOccurrence(nums, target), findLastOccurrence(nums, target)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findFirstOccurrence</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                result <span class="operator">=</span> mid</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findLastOccurrence</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                result <span class="operator">=</span> mid</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 16.85 MB, 击败 5.10% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">searchRange</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">return</span> intArrayOf(findFirstOccurrence(nums, target), findLastOccurrence(nums, target))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findFirstOccurrence</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findLastOccurrence</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                result = mid</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 218 ms, 击败 48.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.01 MB, 击败 56.00% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; searchRange(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">return</span> [findFirstOccurrence(nums, target), findLastOccurrence(nums, target)];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> findFirstOccurrence(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        result = mid;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> findLastOccurrence(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>, result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        result = mid;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 302 ms, 击败 33.33% 使用 Dart 的用户</p>
<p>内存消耗 : 147.61 MB, 击败 66.67% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> []<span class="type">int</span>&#123;findFirstOccurrence(nums, target), findLastOccurrence(nums, target)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findFirstOccurrence</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	left, right, result := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">		mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">			result = mid</span><br><span class="line">			right = mid - <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			right = mid - <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLastOccurrence</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	left, right, result := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">		mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">			result = mid</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			right = mid - <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 89.67% 使用 Go 的用户</p>
<p>内存消耗 : 4.32 MB, 击败 78.50% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_range</span>(<span class="params">nums, target</span>)</span><br><span class="line">  [find_first_occurrence(nums, target), find_last_occurrence(nums, target)]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_first_occurrence</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left, right, result = <span class="number">0</span>, nums.length - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      result = mid</span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_last_occurrence</span>(<span class="params">nums, target</span>)</span><br><span class="line">  left, right, result = <span class="number">0</span>, nums.length - <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt;= right</span><br><span class="line">    mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">      result = mid</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.79 MB, 击败 66.67% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Array</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="type">Array</span>(findFirstOccurrence(nums, target), findLastOccurrence(nums, target))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findFirstOccurrence</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        result = mid</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findLastOccurrence</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        result = mid</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 549 ms, 击败 10.00% 使用 Scala 的用户</p>
<p>内存消耗 : 59.05 MB, 击败 10.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_range</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="keyword">Self</span>::<span class="title function_ invoke__">find_first_occurrence</span>(&amp;nums, target), <span class="keyword">Self</span>::<span class="title function_ invoke__">find_last_occurrence</span>(&amp;nums, target)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">find_first_occurrence</span>(nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">find_last_occurrence</span>(nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.28 MB, 击败 75.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">search-range</span> nums target)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> exact-integer?) exact-integer? (<span class="name">listof</span> exact-integer?))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">find-first-occurrence</span> nums target left right)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">&gt;</span></span> left right) <span class="number">-1</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)))</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">first-left</span> (<span class="name">find-first-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))</span><br><span class="line">              (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> first-left <span class="number">-1</span>) mid first-left)))</span><br><span class="line">           ((<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name">find-first-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right))</span><br><span class="line">           (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">            (<span class="name">find-first-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">find-last-occurrence</span> nums target left right)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">&gt;</span></span> left right) <span class="number">-1</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ((<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)))</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">last-right</span> (<span class="name">find-last-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right)))</span><br><span class="line">              (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> last-right <span class="number">-1</span>) mid last-right)))</span><br><span class="line">           ((<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target)</span><br><span class="line">            (<span class="name">find-last-occurrence</span> nums target (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right))</span><br><span class="line">           (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">            (<span class="name">find-last-occurrence</span> nums target left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))))))))</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> (<span class="name">find-first-occurrence</span> nums target <span class="number">0</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>))</span><br><span class="line">        (<span class="name">find-last-occurrence</span> nums target <span class="number">0</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 214 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 98.83 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00035.搜索插入位置</title>
    <url>/zh-CN/3f4fd59df447/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 5<br>输出: 2</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 2<br>输出: 1</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 7<br>输出: 4</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 为 无重复元素 的 升序 排列数组</li>
<li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 26.16% 使用 C++ 的用户</p>
<p>内存消耗 : 11.93 MB, 击败 5.16% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 42.02 MB, 击败 56.65% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 75.84% 使用 Python 的用户</p>
<p>内存消耗 : 11.91 MB, 击败 93.16% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 31 ms, 击败 95.92% 使用 Python3 的用户</p>
<p>内存消耗 : 17.02 MB, 击败 34.81% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 5.89 MB, 击败 88.56% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SearchInsert</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 72 ms, 击败 77.15% 使用 C# 的用户</p>
<p>内存消耗 : 41.67 MB, 击败 9.28% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 63.71% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.24 MB, 击败 7.29% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchInsert</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">mid</span>: <span class="built_in">number</span> = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 54 ms, 击败 93.77% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.66 MB, 击败 5.12% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">searchInsert</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt;= <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="variable">$mid</span> = <span class="variable">$left</span> + <span class="title function_ invoke__">intdiv</span>((<span class="variable">$right</span> - <span class="variable">$left</span>), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] === <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$nums</span>[<span class="variable">$mid</span>] &lt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="variable">$left</span> = <span class="variable">$mid</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$right</span> = <span class="variable">$mid</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 45.63% 使用 PHP 的用户</p>
<p>内存消耗 : 20.31 MB, 击败 14.56% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">searchInsert</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> nums.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid <span class="operator">=</span> left <span class="operator">+</span> (right <span class="operator">-</span> left) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] <span class="operator">==</span> target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] <span class="operator">&lt;</span> target &#123;</span><br><span class="line">                left <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right <span class="operator">=</span> mid <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 99.43% 使用 Swift 的用户</p>
<p>内存消耗 : 15.36 MB, 击败 36.93% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">searchInsert</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                nums[mid] == target -&gt; <span class="keyword">return</span> mid</span><br><span class="line">                nums[mid] &lt; target -&gt; left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> -&gt; right = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 190 ms, 击败 25.30% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.00 MB, 击败 22.89% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> searchInsert(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="built_in">int</span> mid = left + ((right - left) ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 334 ms, 击败 17.65% 使用 Dart 的用户</p>
<p>内存消耗 : 147.11 MB, 击败 70.59% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.84 MB, 击败 5.00% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_insert</span>(<span class="params">nums, target</span>)</span><br><span class="line">    left, right = <span class="number">0</span>, nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elsif</span> nums[mid] &lt; target</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 37.50% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.66 MB, 击败 25.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> (nums(mid) == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums(mid) &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    left</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 481 ms, 击败 90.91% 使用 Scala 的用户</p>
<p>内存消耗 : 54.70 MB, 击败 9.09% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search_insert</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = nums.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">i32</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">mid</span> = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid <span class="keyword">as</span> <span class="type">usize</span>] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.11 MB, 击败 56.38% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">search-insert</span> nums target)</span><br><span class="line">  (<span class="name">-&gt;</span> (<span class="name">listof</span> exact-integer?) exact-integer? exact-integer?)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> loop ([<span class="name">left</span> <span class="number">0</span>]</span><br><span class="line">             [<span class="name">right</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">length</span></span> nums) <span class="number">1</span>)])</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      [(<span class="name"><span class="built_in">&lt;=</span></span> left right)</span><br><span class="line">       (<span class="name"><span class="built_in">let</span></span> ([<span class="name">mid</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">+</span></span> left right) <span class="number">2</span>)])</span><br><span class="line">         (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">           [(<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target) mid]</span><br><span class="line">           [(<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">list-ref</span></span> nums mid) target) (<span class="name">loop</span> (<span class="name"><span class="built_in">+</span></span> mid <span class="number">1</span>) right)]</span><br><span class="line">           [<span class="name"><span class="built_in">else</span></span> (<span class="name">loop</span> left (<span class="name"><span class="built_in">-</span></span> mid <span class="number">1</span>))]))</span><br><span class="line">       ]</span><br><span class="line">      [<span class="name"><span class="built_in">else</span></span> left])))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 204 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 97.80 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00036.有效的数独</title>
    <url>/zh-CN/c56d6400e4cf/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 1-9 在每一行只能出现一次。</li>
<li>数字 1-9 在每一列只能出现一次。</li>
<li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>空白格用 ‘.’ 表示。</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/c56d6400e4cf/202001170001.webp" class="" title="示例1">

<blockquote>
<p>输入：board &#x3D;<br>[[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：board &#x3D;<br>[[“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：false<br>解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>board.length &#x3D;&#x3D; 9</li>
<li>board[i].length &#x3D;&#x3D; 9</li>
<li>board[i][j] 是一位数字（1-9）或者 ‘.’</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; rowSet;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.<span class="built_in">find</span>(board[i][j]) != rowSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; colSet;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.<span class="built_in">find</span>(board[i][j]) != colSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                unordered_set&lt;<span class="type">char</span>&gt; blockSet;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="type">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.<span class="built_in">find</span>(currentNum) != blockSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.<span class="built_in">insert</span>(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 17 ms, 击败 54.62% 使用 C++ 的用户</p>
<p>内存消耗 : 23.61 MB, 击败 5.03% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            HashSet&lt;Character&gt; rowSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            HashSet&lt;Character&gt; colSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">blockRow</span> <span class="operator">=</span> <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">blockCol</span> <span class="operator">=</span> <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                HashSet&lt;Character&gt; blockSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="type">char</span> <span class="variable">currentNum</span> <span class="operator">=</span> board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.add(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 41.51% 使用 Java 的用户</p>
<p>内存消耗 : 43.24 MB, 击败 26.12% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            row_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> row_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            col_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> col_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    col_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> block_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> block_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                block_set = <span class="built_in">set</span>()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                            <span class="keyword">if</span> current_num <span class="keyword">in</span> block_set:</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                            block_set.add(current_num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 73.11% 使用 Python 的用户</p>
<p>内存消耗 : 11.45 MB, 击败 93.85% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            row_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> row_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            col_set = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> col_set:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    col_set.add(board[i][j])</span><br><span class="line">        <span class="keyword">for</span> block_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> block_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                block_set = <span class="built_in">set</span>()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                            <span class="keyword">if</span> current_num <span class="keyword">in</span> block_set:</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                            block_set.add(current_num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 44 ms, 击败 85.12% 使用 Python3 的用户</p>
<p>内存消耗 : 16.44 MB, 击败 32.84% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="type">bool</span> rowSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">            <span class="type">char</span> currentNum = board[i][j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rowSet[digit]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet[digit] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">        <span class="type">bool</span> colSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> currentNum = board[i][j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (colSet[digit]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet[digit] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="type">bool</span> blockSet[<span class="number">10</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="type">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> digit = currentNum - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet[digit]) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet[digit] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 88.64% 使用 C 的用户</p>
<p>内存消耗 : 5.83 MB, 击败 77.45% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValidSudoku</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            HashSet&lt;<span class="built_in">char</span>&gt; rowSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.Contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.Add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            HashSet&lt;<span class="built_in">char</span>&gt; colSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.Contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.Add(board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">                HashSet&lt;<span class="built_in">char</span>&gt; blockSet = <span class="keyword">new</span> HashSet&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                        <span class="built_in">char</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.Contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.Add(currentNum);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 91 ms, 击败 75.74% 使用 C# 的用户</p>
<p>内存消耗 : 47.38 MB, 击败 6.39% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">board</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="keyword">function</span>(<span class="params">board</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> rowSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rowSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">const</span> colSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (colSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="keyword">const</span> blockSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="keyword">const</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet.<span class="title function_">has</span>(currentNum)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet.<span class="title function_">add</span>(currentNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 87.97% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.89 MB, 击败 29.43% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isValidSudoku</span>(<span class="params">board: <span class="built_in">string</span>[][]</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> rowSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rowSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rowSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">const</span> colSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (colSet.<span class="title function_">has</span>(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                colSet.<span class="title function_">add</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">            <span class="keyword">const</span> blockSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                    <span class="keyword">const</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">                    <span class="keyword">if</span> (currentNum !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (blockSet.<span class="title function_">has</span>(currentNum)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet.<span class="title function_">add</span>(currentNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 60 ms, 击败 99.15% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.70 MB, 击败 15.38% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[][] $board</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidSudoku</span>(<span class="params"><span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$rowSet</span> = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">9</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rowSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$rowSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">9</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="variable">$colSet</span> = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$colSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$colSet</span>[<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$blockRow</span> = <span class="number">0</span>; <span class="variable">$blockRow</span> &lt; <span class="number">3</span>; ++<span class="variable">$blockRow</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$blockCol</span> = <span class="number">0</span>; <span class="variable">$blockCol</span> &lt; <span class="number">3</span>; ++<span class="variable">$blockCol</span>) &#123;</span><br><span class="line">                <span class="variable">$blockSet</span> = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">3</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                        <span class="variable">$currentNum</span> = <span class="variable">$board</span>[<span class="variable">$blockRow</span> * <span class="number">3</span> + <span class="variable">$i</span>][<span class="variable">$blockCol</span> * <span class="number">3</span> + <span class="variable">$j</span>];</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$currentNum</span> !== <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$blockSet</span>[<span class="variable">$currentNum</span>])) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$blockSet</span>[<span class="variable">$currentNum</span>] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 29 ms, 击败 72.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.94 MB, 击败 8.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isValidSudoku</span>(<span class="keyword">_</span> <span class="params">board</span>: [[<span class="type">Character</span>]]) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> rowSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> rowSet.contains(board[i][j]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.insert(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> colSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> colSet.contains(board[i][j]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.insert(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> blockRow <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> blockCol <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> blockSet <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> currentNum <span class="operator">=</span> board[blockRow <span class="operator">*</span> <span class="number">3</span> <span class="operator">+</span> i][blockCol <span class="operator">*</span> <span class="number">3</span> <span class="operator">+</span> j]</span><br><span class="line">                        <span class="keyword">if</span> currentNum <span class="operator">!=</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> blockSet.contains(currentNum) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.insert(currentNum)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 16.05 MB, 击败 6.98% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isValidSudoku</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> rowSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    rowSet.add(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> colSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    colSet.add(board[i][j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (blockRow <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (blockCol <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> blockSet = HashSet&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="keyword">val</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j]</span><br><span class="line">                        <span class="keyword">if</span> (currentNum != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            blockSet.add(currentNum)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 192 ms, 击败 57.89% 使用 Kotlin 的用户</p>
<p>内存消耗 : 41.67 MB, 击败 36.84% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isValidSudoku(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; rowSet = <span class="built_in">Set</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (rowSet.contains(board[i][j])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          rowSet.add(board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">      <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; colSet = <span class="built_in">Set</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (colSet.contains(board[i][j])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          colSet.add(board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> blockRow = <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; ++blockRow) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> blockCol = <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; ++blockCol) &#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; blockSet = <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">String</span> currentNum = board[blockRow * <span class="number">3</span> + i][blockCol * <span class="number">3</span> + j];</span><br><span class="line">            <span class="keyword">if</span> (currentNum != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              blockSet.add(currentNum);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 349 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 147.78 MB, 击败 75.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidSudoku</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">        rowSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> rowSet[board[i][j]] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                rowSet[board[i][j]] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">        colSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> colSet[board[i][j]] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                colSet[board[i][j]] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> blockRow := <span class="number">0</span>; blockRow &lt; <span class="number">3</span>; blockRow++ &#123;</span><br><span class="line">        <span class="keyword">for</span> blockCol := <span class="number">0</span>; blockCol &lt; <span class="number">3</span>; blockCol++ &#123;</span><br><span class="line">            blockSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">bool</span>)</span><br><span class="line">            <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">                <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">                    currentNum := board[blockRow*<span class="number">3</span>+i][blockCol*<span class="number">3</span>+j]</span><br><span class="line">                    <span class="keyword">if</span> currentNum != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> blockSet[currentNum] &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        blockSet[currentNum] = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 44.49% 使用 Go 的用户</p>
<p>内存消耗 : 2.49 MB, 击败 65.52% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_sudoku</span>(<span class="params">board</span>)</span><br><span class="line">  <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    row_set = <span class="title class_">Set</span>.new</span><br><span class="line">    <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">      current_num = board[i][j]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> row_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">      row_set.add(current_num)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">    col_set = <span class="title class_">Set</span>.new</span><br><span class="line">    <span class="number">9</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">      current_num = board[i][j]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> col_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">      col_set.add(current_num)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">block_row</span>|</span><br><span class="line">    (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">block_col</span>|</span><br><span class="line">      block_set = <span class="title class_">Set</span>.new</span><br><span class="line">      (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (<span class="number">0</span>..<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">          current_num = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j]</span><br><span class="line">          <span class="keyword">next</span> <span class="keyword">if</span> current_num == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> block_set.<span class="keyword">include</span>?(current_num)</span><br><span class="line">          block_set.add(current_num)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 71 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.64 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> rowSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(i)(j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (rowSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          rowSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> colSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(i)(j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (colSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          colSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (blockRow &lt;- <span class="number">0</span> until <span class="number">3</span>; blockCol &lt;- <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> blockSet = scala.collection.mutable.<span class="type">Set</span>[<span class="type">Char</span>]()</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">3</span>; j &lt;- <span class="number">0</span> until <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> currentNum = board(blockRow * <span class="number">3</span> + i)(blockCol * <span class="number">3</span> + j)</span><br><span class="line">        <span class="keyword">if</span> (currentNum != &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (blockSet.contains(currentNum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">          blockSet.add(currentNum)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 553 ms, 击败 92.86% 使用 Scala 的用户</p>
<p>内存消耗 : 56.34 MB, 击败 35.71% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_valid_sudoku</span>(board: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">row_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_num</span> = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> !row_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">col_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">current_num</span> = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> !col_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">block_row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">block_col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">block_set</span> = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">current_num</span> = board[block_row * <span class="number">3</span> + i][block_col * <span class="number">3</span> + j];</span><br><span class="line">                        <span class="keyword">if</span> current_num != <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> !block_set.<span class="title function_ invoke__">insert</span>(current_num) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 5 ms, 击败 18.57% 使用 Rust 的用户</p>
<p>内存消耗 : 2.13 MB, 击败 44.29% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>大寒</title>
    <url>/zh-CN/25559fc796b9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25559fc796b9/202001200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大寒</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00037.解数独</title>
    <url>/zh-CN/9e4d092657ff/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>编写一个程序，通过填充空格来解决数独问题。</p>
<p>数独的解法需 遵循如下规则：</p>
<ol>
<li>数字 1-9 在每一行只能出现一次。</li>
<li>数字 1-9 在每一列只能出现一次。</li>
<li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</li>
</ol>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/9e4d092657ff/202001210001.webp" class="" title="示例1">

<blockquote>
<p>输入：board &#x3D; [<br>  [“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>  [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>  [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>  [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>  [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>  [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>  [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>  [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>  [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：[<br>  [“5”,”3”,”4”,”6”,”7”,”8”,”9”,”1”,”2”],<br>  [“6”,”7”,”2”,”1”,”9”,”5”,”3”,”4”,”8”],<br>  [“1”,”9”,”8”,”3”,”4”,”2”,”5”,”6”,”7”],<br>  [“8”,”5”,”9”,”7”,”6”,”1”,”4”,”2”,”3”],<br>  [“4”,”2”,”6”,”8”,”5”,”3”,”7”,”9”,”1”],<br>  [“7”,”1”,”3”,”9”,”2”,”4”,”8”,”5”,”6”],<br>  [“9”,”6”,”1”,”5”,”3”,”7”,”2”,”8”,”4”],<br>  [“2”,”8”,”7”,”4”,”1”,”9”,”6”,”3”,”5”],<br>  [“3”,”4”,”5”,”2”,”8”,”6”,”1”,”7”,”9”]]<br>解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</p>
</blockquote>
<img src="/zh-CN/9e4d092657ff/202001210002.png" class="" title="示例1解释">

<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>board.length &#x3D;&#x3D; 9</li>
<li>board[i].length &#x3D;&#x3D; 9</li>
<li>board[i][j] 是一位数字或者 ‘.’</li>
<li>题目数据 保证 输入数独仅有一个解</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">solve</span>(board);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">solve</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">isValid</span>(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">solve</span>(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">const</span> std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 67.22% 使用 C++ 的用户</p>
<p>内存消耗 : 7.55 MB, 击败 20.50% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 14.01% 使用 Java 的用户</p>
<p>内存消耗 : 40.18 MB, 击败 12.93% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.solve(board)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)):</span><br><span class="line">                        <span class="keyword">if</span> self.is_valid(board, i, j, num):</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> self.solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self, board, row, col, num</span>):</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[row]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> [board[i][col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[start_row + i][start_col + j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 388 ms, 击败 59.52% 使用 Python 的用户</p>
<p>内存消耗 : 11.52 MB, 击败 95.24% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.solve(board)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)):</span><br><span class="line">                        <span class="keyword">if</span> self.is_valid(board, i, j, num):</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> self.solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self, board, row, col, num</span>):</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[row]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> [board[i][col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[start_row + i][start_col + j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 325 ms, 击败 42.81% 使用 Python3 的用户</p>
<p>内存消耗 : 16.38 MB, 击败 40.06% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    solve(board, boardSize, boardColSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> num, <span class="type">int</span> boardSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> boardSize, <span class="type">int</span>* boardColSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; boardSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isValid(board, i, j, num, boardSize)) &#123;</span><br><span class="line">                        board[i][j] = num;</span><br><span class="line">                        <span class="keyword">if</span> (solve(board, boardSize, boardColSize)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 19 ms, 击败 6.45% 使用 C 的用户</p>
<p>内存消耗 : 5.71 MB, 击败 86.69% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SolveSudoku</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        Solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Solve</span>(<span class="params"><span class="built_in">char</span>[][] board</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">char</span> num = <span class="string">&#x27;1&#x27;</span>; num &lt;= <span class="string">&#x27;9&#x27;</span>; ++num) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (IsValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> (Solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">char</span>[][] board, <span class="built_in">int</span> row, <span class="built_in">int</span> col, <span class="built_in">char</span> num</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 88.89% 使用 C# 的用户</p>
<p>内存消耗 : 46.63 MB, 击败 15.87% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">board</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">solveSudoku</span> = (<span class="params">board</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">hasConflit</span> = (<span class="params">r, c, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][c] == val || board[r][i] == val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> subRowStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(r / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">const</span> subColStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(c / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val == board[subRowStart + i][subColStart + j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fill</span> = (<span class="params">i, j</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">9</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="title function_">fill</span>(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">hasConflit</span>(i, j, <span class="title class_">String</span>(num))) <span class="keyword">continue</span>;</span><br><span class="line">            board[i][j] = <span class="title class_">String</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">fill</span>(i, j + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            board[i][j] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 78 ms, 击败 84.59% 使用 JavaScript 的用户</p>
<p>内存消耗 : 50.79 MB, 击败 15.41% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSudoku</span>(<span class="params">board: <span class="built_in">string</span>[][]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hasConflit = (<span class="attr">r</span>: <span class="built_in">number</span>, <span class="attr">c</span>: <span class="built_in">number</span>, <span class="attr">val</span>: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][c] === val || board[r][i] === val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> subRowStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(r / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">const</span> subColStart = <span class="title class_">Math</span>.<span class="title function_">floor</span>(c / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val === board[subRowStart + i][subColStart + j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> fill = (<span class="attr">i</span>: <span class="built_in">number</span>, <span class="attr">j</span>: <span class="built_in">number</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (j === <span class="number">9</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] !== <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="title function_">fill</span>(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">const</span> strNum = <span class="title class_">String</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">hasConflit</span>(i, j, strNum)) &#123;</span><br><span class="line">                board[i][j] = strNum;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">fill</span>(i, j + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                board[i][j] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 82 ms, 击败 67.31% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.56 MB, 击败 13.46% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[][] $board</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solveSudoku</span>(<span class="params">&amp;<span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">solve</span>(<span class="variable">$board</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hasConflit</span>(<span class="params"><span class="variable">$board</span>, <span class="variable">$r</span>, <span class="variable">$c</span>, <span class="variable">$val</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$c</span>] === <span class="variable">$val</span> || <span class="variable">$board</span>[<span class="variable">$r</span>][<span class="variable">$i</span>] === <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$subRowStart</span> = <span class="title function_ invoke__">floor</span>(<span class="variable">$r</span> / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="variable">$subColStart</span> = <span class="title function_ invoke__">floor</span>(<span class="variable">$c</span> / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">3</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$val</span> === <span class="variable">$board</span>[<span class="variable">$subRowStart</span> + <span class="variable">$i</span>][<span class="variable">$subColStart</span> + <span class="variable">$j</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params">&amp;<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$j</span> === <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] !== <span class="string">&quot;.&quot;</span>) <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$num</span> = <span class="number">1</span>; <span class="variable">$num</span> &lt;= <span class="number">9</span>; <span class="variable">$num</span>++) &#123;</span><br><span class="line">            <span class="variable">$strNum</span> = <span class="title function_ invoke__">strval</span>(<span class="variable">$num</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasConflit</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span>, <span class="variable">$strNum</span>)) &#123;</span><br><span class="line">                <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$strNum</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="variable">$i</span>, <span class="variable">$j</span> + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solve</span>(<span class="params">&amp;<span class="variable">$board</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="variable">$board</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 113 ms, 击败 50.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.03 MB, 击败 -% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> line <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">9</span>)</span><br><span class="line">    <span class="keyword">var</span> column <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">9</span>)</span><br><span class="line">    <span class="keyword">var</span> block <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), count: <span class="number">3</span>), count: <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> valid <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> spaces <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">solveSudoku</span>(<span class="keyword">_</span> <span class="params">board</span>: <span class="keyword">inout</span> [[<span class="type">Character</span>]]) &#123;</span><br><span class="line">        initializeSets(with: board)</span><br><span class="line">        <span class="type">DFS</span>(<span class="operator">&amp;</span>board, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">initializeSets</span>(<span class="params">with</span> <span class="params">board</span>: [[<span class="type">Character</span>]]) &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="operator">==</span> <span class="string">&quot;.&quot;</span> &#123;</span><br><span class="line">                    spaces.append([i, j])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> digit <span class="operator">=</span> <span class="type">Int</span>(<span class="type">String</span>(board[i][j]))<span class="operator">!</span> <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                    line[i].insert(digit)</span><br><span class="line">                    column[j].insert(digit)</span><br><span class="line">                    block[i<span class="regexp">/3][j/3].insert(digit)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    func DFS(_ board: inout [[Character]], _ pos: Int) &#123;</span></span><br><span class="line"><span class="regexp">        if pos == spaces.count &#123;</span></span><br><span class="line"><span class="regexp">            valid = true</span></span><br><span class="line"><span class="regexp">            return</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        let space = spaces[pos]</span></span><br><span class="line"><span class="regexp">        let i = space[0]</span></span><br><span class="line"><span class="regexp">        let j = space[1]</span></span><br><span class="line"><span class="regexp">        var digit = 0</span></span><br><span class="line"><span class="regexp">        while digit &lt; 9 &amp;&amp; !valid &#123;</span></span><br><span class="line"><span class="regexp">            if !line[i].contains(digit) &amp;&amp; !column[j].contains(digit) &amp;&amp; !block[i/3][j/3].contains(digit) &#123;</span></span><br><span class="line"><span class="regexp">                line[i].insert(digit)</span></span><br><span class="line"><span class="regexp">                column[j].insert(digit)</span></span><br><span class="line"><span class="regexp">                block[i/3][j/3].insert(digit)</span></span><br><span class="line"><span class="regexp">                board[i][j] = Character(String(digit + 1))</span></span><br><span class="line"><span class="regexp">                DFS(&amp;board, pos + 1)</span></span><br><span class="line"><span class="regexp">                line[i].remove(digit)</span></span><br><span class="line"><span class="regexp">                column[j].remove(digit)</span></span><br><span class="line"><span class="regexp">                block[i/3][j/3].remove(digit)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            digit += 1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 13.33% 使用 Swift 的用户</p>
<p>内存消耗 : 16.30 MB, 击败 6.67% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solveSudoku</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        solve(board)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">solve</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (num <span class="keyword">in</span> <span class="string">&#x27;1&#x27;</span>..<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">                            board[i][j] = num</span><br><span class="line">                            <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isValid</span><span class="params">(board: <span class="type">Array</span>&lt;<span class="type">CharArray</span>&gt;, row: <span class="type">Int</span>, col: <span class="type">Int</span>, num: <span class="type">Char</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num || board[i][col] == num || board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 149 ms, 击败 92.86% 使用 Kotlin 的用户</p>
<p>内存消耗 : 34.05 MB, 击败 92.86% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> solveSudoku(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    solve(board);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> solve(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">1</span>; <span class="built_in">num</span> &lt;= <span class="number">9</span>; ++<span class="built_in">num</span>) &#123;</span><br><span class="line">            <span class="built_in">String</span> strNum = <span class="built_in">num</span>.toString();</span><br><span class="line">            <span class="keyword">if</span> (isValid(board, i, j, strNum)) &#123;</span><br><span class="line">              board[i][j] = strNum;</span><br><span class="line">              <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> isValid(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board, <span class="built_in">int</span> row, <span class="built_in">int</span> col, <span class="built_in">String</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board[row][i] == <span class="built_in">num</span> || board[i][col] == <span class="built_in">num</span> ||</span><br><span class="line">          board[<span class="number">3</span> * (row ~/ <span class="number">3</span>) + i ~/ <span class="number">3</span>][<span class="number">3</span> * (col ~/ <span class="number">3</span>) + i % <span class="number">3</span>] == <span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 289 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 145.09 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solveSudoku</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	solve(board)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solve</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> num := <span class="type">byte</span>(<span class="string">&#x27;1&#x27;</span>); num &lt;= <span class="string">&#x27;9&#x27;</span>; num++ &#123;</span><br><span class="line">					<span class="keyword">if</span> isValid(board, i, j, num) &#123;</span><br><span class="line">						board[i][j] = num</span><br><span class="line">						<span class="keyword">if</span> solve(board) &#123;</span><br><span class="line">							<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">						&#125;</span><br><span class="line">						board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(board [][]<span class="type">byte</span>, row, col <span class="type">int</span>, num <span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[row][i] == num || board[i][col] == num ||</span><br><span class="line">			board[<span class="number">3</span>*(row/<span class="number">3</span>)+i/<span class="number">3</span>][<span class="number">3</span>*(col/<span class="number">3</span>)+i%<span class="number">3</span>] == num &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 70.00% 使用 Go 的用户</p>
<p>内存消耗 : 1.88 MB, 击败 86.32% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sudoku</span>(<span class="params">board</span>)</span><br><span class="line">  solve(board)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">board</span>)</span><br><span class="line">  (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">      <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span></span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>..<span class="string">&#x27;9&#x27;</span>).each <span class="keyword">do</span> |<span class="params">num</span>|</span><br><span class="line">          <span class="keyword">if</span> is_valid(board, i, j, num)</span><br><span class="line">            board[i][j] = num</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> solve(board)</span><br><span class="line">            board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>)</span><br><span class="line">  num = num.to_s</span><br><span class="line">  (<span class="number">0</span>..<span class="number">8</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> board[row][i] == num |<span class="params"></span>| board[i][col] == num |<span class="params"></span>|</span><br><span class="line">                   board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.85 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    solve(board)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solve</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board(i)(j) == &#x27;.&#x27;) &#123;</span><br><span class="line">          <span class="keyword">for</span> (num &lt;- &#x27;<span class="number">1</span>&#x27; to &#x27;<span class="number">9</span>&#x27;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(board, i, j, num)) &#123;</span><br><span class="line">              board(i)(j) = num</span><br><span class="line">              <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">              board(i)(j) = &#x27;.&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(board: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]], row: <span class="type">Int</span>, col: <span class="type">Int</span>, num: <span class="type">Char</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board(row)(i) == num || board(i)(col) == num ||</span><br><span class="line">        board(<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>)(<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>) == num) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 637 ms, 击败 80.00% 使用 Scala 的用户</p>
<p>内存消耗 : 56.14 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">solve_sudoku</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">solve</span>(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">solve</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> <span class="variable">num</span> <span class="keyword">in</span> <span class="string">&#x27;1&#x27;</span>..=<span class="string">&#x27;9&#x27;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">Self</span>::<span class="title function_ invoke__">is_valid</span>(board, i, j, num) &#123;</span><br><span class="line">                            board[i][j] = num;</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">Self</span>::<span class="title function_ invoke__">solve</span>(board) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">is_valid</span>(board: &amp;<span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;, row: <span class="type">usize</span>, col: <span class="type">usize</span>, num: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">num</span> = num <span class="keyword">as</span> <span class="type">u8</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> board[row][i] <span class="keyword">as</span> <span class="type">u8</span> == num || board[i][col] <span class="keyword">as</span> <span class="type">u8</span> == num ||</span><br><span class="line">               board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] <span class="keyword">as</span> <span class="type">u8</span> == num &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 13.89% 使用 Rust 的用户</p>
<p>内存消耗 : 2.06 MB, 击败 75.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00038.外观数列</title>
    <url>/zh-CN/7adb8cf4cae0/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个正整数 n ，输出外观数列的第 n 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<ul>
<li>countAndSay(1) &#x3D; “1”</li>
<li>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。</li>
</ul>
<p>前五项如下：</p>
<ol>
<li>1</li>
<li>11</li>
<li>21</li>
<li>1211</li>
<li>111221<blockquote>
<p>第一项是数字 1<br>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”<br>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”<br>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”<br>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”<br>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p>
</blockquote>
</li>
</ol>
<p>例如，数字字符串 “3322251” 的描述如下图：</p>
<img src="/zh-CN/7adb8cf4cae0/202001220001.jpg" class="" title="题目">

<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：n &#x3D; 1<br>输出：”1”<br>解释：这是一个基本样例。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 4<br>输出：”1211”<br>解释：<br>countAndSay(1) &#x3D; “1”<br>countAndSay(2) &#x3D; 读 “1” &#x3D; 一 个 1 &#x3D; “11”<br>countAndSay(3) &#x3D; 读 “11” &#x3D; 二 个 1 &#x3D; “21”<br>countAndSay(4) &#x3D; 读 “21” &#x3D; 一 个 2 + 一 个 1 &#x3D; “12” + “11” &#x3D; “1211”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 30</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            string prev = <span class="built_in">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">            string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; prev.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="built_in">length</span>() &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += <span class="built_in">to_string</span>(count) + prev[i];</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 78.05% 使用 C++ 的用户</p>
<p>内存消耗 : 9.09 MB, 击败 12.48% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prev</span> <span class="operator">=</span> countAndSay(n - <span class="number">1</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prev.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length() &amp;&amp; prev.charAt(i) == prev.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(count).append(prev.charAt(i));</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 97.05% 使用 Java 的用户</p>
<p>内存消耗 : 40.21 MB, 击败 59.65% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAndSay</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            result = <span class="string">&quot;&quot;</span></span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prev)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(prev) <span class="keyword">and</span> prev[i] == prev[i + <span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">str</span>(count) + prev[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 87.04% 使用 Python 的用户</p>
<p>内存消耗 : 11.59 MB, 击败 91.09% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countAndSay</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            result = <span class="string">&quot;&quot;</span></span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prev)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(prev) <span class="keyword">and</span> prev[i] == prev[i + <span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">str</span>(count) + prev[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 45 ms, 击败 81.55% 使用 Python3 的用户</p>
<p>内存消耗 : 16.52 MB, 击败 29.61% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* result = <span class="built_in">malloc</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(result, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span>* prev = countAndSay(n - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(prev);</span><br><span class="line">        <span class="type">char</span>* result = <span class="built_in">malloc</span>(<span class="number">2</span> * len + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; len &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index += <span class="built_in">sprintf</span>(result + index, <span class="string">&quot;%d%c&quot;</span>, count, prev[i]);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(prev);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 12 ms, 击败 7.90% 使用 C 的用户</p>
<p>内存消耗 : 6.36 MB, 击败 90.88% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CountAndSay</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">string</span> prev = CountAndSay(n - <span class="number">1</span>);</span><br><span class="line">            System.Text.StringBuilder result = <span class="keyword">new</span> System.Text.StringBuilder();</span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; prev.Length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.Length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.Append(count).Append(prev[i]);</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 86.11% 使用 C# 的用户</p>
<p>内存消耗 : 40.65 MB, 击败 51.39% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev = <span class="title function_">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prev.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="property">length</span> &amp;&amp; prev[i] === prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += count + prev[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 66.33% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.34 MB, 击败 5.01% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countAndSay</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">prev</span>: <span class="built_in">string</span> = <span class="title function_">countAndSay</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> <span class="attr">i</span>: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; prev.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.<span class="property">length</span> &amp;&amp; prev[i] === prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += count + prev[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 64 ms, 击败 84.00% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.96 MB, 击败 6.00% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">countAndSay</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$prev</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">countAndSay</span>(<span class="variable">$n</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="variable">$count</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$prev</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$i</span> + <span class="number">1</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$prev</span>) &amp;&amp; <span class="variable">$prev</span>[<span class="variable">$i</span>] === <span class="variable">$prev</span>[<span class="variable">$i</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="variable">$count</span>++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> .= <span class="variable">$count</span> . <span class="variable">$prev</span>[<span class="variable">$i</span>];</span><br><span class="line">                    <span class="variable">$count</span> = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 87.50% 使用 PHP 的用户</p>
<p>内存消耗 : 20.10 MB, 击败 12.50% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">countAndSay</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev <span class="operator">=</span> countAndSay(n <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> result <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>prev.count &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">+</span> <span class="number">1</span> <span class="operator">&lt;</span> prev.count <span class="operator">&amp;&amp;</span> prev[prev.index(prev.startIndex, offsetBy: i)] <span class="operator">==</span> prev[prev.index(prev.startIndex, offsetBy: i <span class="operator">+</span> <span class="number">1</span>)] &#123;</span><br><span class="line">                    count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> <span class="string">&quot;<span class="subst">\(count)</span><span class="subst">\(prev[prev.index(prev.startIndex, offsetBy: i)])</span>&quot;</span></span><br><span class="line">                    count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1663 ms, 击败 10.53% 使用 Swift 的用户</p>
<p>内存消耗 : 14.85 MB, 击败 68.42% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">countAndSay</span><span class="params">(n: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> prev = countAndSay(n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until prev.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += <span class="string">&quot;<span class="variable">$count</span><span class="subst">$&#123;prev[i]&#125;</span>&quot;</span></span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 168 ms, 击败 82.35% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.61 MB, 击败 64.71% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> countAndSay(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">String</span> prev = countAndSay(n - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">StringBuffer</span> result = <span class="built_in">StringBuffer</span>();</span><br><span class="line">      <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; prev.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev[i] == prev[i + <span class="number">1</span>]) &#123;</span><br><span class="line">          count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.write(<span class="string">&quot;<span class="subst">$count</span><span class="subst">$&#123;prev[i]&#125;</span>&quot;</span>);</span><br><span class="line">          count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 291 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 147.80 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countAndSay</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	prev := <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		<span class="keyword">var</span> cur strings.Builder</span><br><span class="line">		<span class="keyword">for</span> j, start := <span class="number">0</span>, <span class="number">0</span>; j &lt; <span class="built_in">len</span>(prev); start = j &#123;</span><br><span class="line">			<span class="keyword">for</span> j &lt; <span class="built_in">len</span>(prev) &amp;&amp; prev[j] == prev[start] &#123;</span><br><span class="line">				j++</span><br><span class="line">			&#125;</span><br><span class="line">			cur.WriteString(strconv.Itoa(j - start))</span><br><span class="line">			cur.WriteByte(prev[start])</span><br><span class="line">		&#125;</span><br><span class="line">		prev = cur.String()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.30 MB, 击败 90.00% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_and_say</span>(<span class="params">n</span>)</span><br><span class="line">  prev = <span class="string">&quot;1&quot;</span></span><br><span class="line">  (<span class="number">2</span>..n).each <span class="keyword">do</span></span><br><span class="line">    cur = <span class="string">&quot;&quot;</span></span><br><span class="line">    i, start = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; prev.length</span><br><span class="line">      <span class="keyword">while</span> i &lt; prev.length &amp;&amp; prev[i] == prev[start]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      cur += <span class="string">&quot;<span class="subst">#&#123;i - start&#125;</span><span class="subst">#&#123;prev[start]&#125;</span>&quot;</span></span><br><span class="line">      start = i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    prev = cur</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 91 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 210.46 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span></span>(n: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> prev = countAndSay(n - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> result = <span class="keyword">new</span> <span class="type">StringBuilder</span></span><br><span class="line">      <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until prev.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; prev.length &amp;&amp; prev(i) == prev(i + <span class="number">1</span>)) &#123;</span><br><span class="line">          count += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.append(count).append(prev(i))</span><br><span class="line">          count = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result.toString</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 428 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 52.55 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">count_and_say</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">prev</span> = Solution::<span class="title function_ invoke__">count_and_say</span>(n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..prev.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; prev.<span class="title function_ invoke__">len</span>() &amp;&amp; prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i).<span class="title function_ invoke__">unwrap</span>() == prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i + <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="title function_ invoke__">push_str</span>(&amp;count.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">                    result.<span class="title function_ invoke__">push</span>(prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 17.65% 使用 Rust 的用户</p>
<p>内存消耗 : 2.07 MB, 击败 58.82% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00039.组合总和</title>
    <url>/zh-CN/4e0128a79bbd/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p>
<p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>
<p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7<br>输出：[[2,2,3],[7]]<br>解释：<br>2 和 3 可以形成一组候选，2 + 2 + 3 &#x3D; 7 。注意 2 可以使用多次。<br>7 也是一个候选， 7 &#x3D; 7 。<br>仅有这两种组合。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: candidates &#x3D; [2,3,5], target &#x3D; 8<br>输出: [[2,2,2,2],[2,3,3],[3,5]]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: candidates &#x3D; [2], target &#x3D; 1<br>输出: []</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; candidates.length &lt;&#x3D; 30</li>
<li>2 &lt;&#x3D; candidates[i] &lt;&#x3D; 40</li>
<li>candidates 的所有元素 互不相同</li>
<li>1 &lt;&#x3D; target &lt;&#x3D; 40</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span></span><br><span class="line"><span class="params"><span class="function">                   vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 87.96% 使用 C++ 的用户</p>
<p>内存消耗 : 12.11 MB, 击败 40.40% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                           List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtrack(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 82.50% 使用 Java 的用户</p>
<p>内存消耗 : 43.55 MB, 击败 28.62% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i, target - candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, path)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 76.75% 使用 Python 的用户</p>
<p>内存消耗 : 11.51 MB, 击败 93.61% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        candidates.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i, target - candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, path)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 46 ms, 击败 82.10% 使用 Python3 的用户</p>
<p>内存消耗 : 16.65 MB, 击败 30.56% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> candidatesSize_tmp;</span><br><span class="line"><span class="type">int</span> ansSize;</span><br><span class="line"><span class="type">int</span> combineSize;</span><br><span class="line"><span class="type">int</span>* ansColumnSize;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> target, <span class="type">int</span>** ans, <span class="type">int</span>* combine, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span>* tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * combineSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; combineSize; ++i) &#123;</span><br><span class="line">            tmp[i] = combine[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ansSize] = tmp;</span><br><span class="line">        ansColumnSize[ansSize++] = combineSize;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidatesSize_tmp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target - candidates[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        combine[combineSize++] = candidates[i];</span><br><span class="line">        backtrack(candidates, target - candidates[i], ans, combine, i);</span><br><span class="line">        combineSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    candidatesSize_tmp = candidatesSize;</span><br><span class="line">    ansSize = combineSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>** ans = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * <span class="number">1001</span>);</span><br><span class="line">    ansColumnSize = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">1001</span>);</span><br><span class="line">    <span class="type">int</span> combine[<span class="number">2001</span>];</span><br><span class="line">    backtrack(candidates, target, ans, combine, <span class="number">0</span>);</span><br><span class="line">    *returnSize = ansSize;</span><br><span class="line">    *returnColumnSizes = ansColumnSize;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 94.16% 使用 C 的用户</p>
<p>内存消耗 : 9.00 MB, 击败 51.89% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        Array.Sort(candidates);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        IList&lt;<span class="built_in">int</span>&gt; path = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        Backtrack(candidates, target, <span class="number">0</span>, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target, <span class="built_in">int</span> start, IList&lt;<span class="built_in">int</span>&gt; path, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.Add(candidates[i]);</span><br><span class="line">            Backtrack(candidates, target - candidates[i], i, path, result);</span><br><span class="line">            path.RemoveAt(path.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 103 ms, 击败 91.01% 使用 C# 的用户</p>
<p>内存消耗 : 46.77 MB, 击败 19.10% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="keyword">function</span>(<span class="params">candidates, target</span>) &#123;</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> path = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start, target</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i, target - candidates[i]);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 94.88% 使用 JavaScript 的用户</p>
<p>内存消耗 : 53.99 MB, 击败 13.71% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinationSum</span>(<span class="params">candidates: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">path</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start: <span class="built_in">number</span>, target: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i, target - candidates[i]);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 81 ms, 击败 55.52% 使用 TypeScript 的用户</p>
<p>内存消耗 : 54.88 MB, 击败 12.61% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $candidates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">combinationSum</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$candidates</span>);</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$path</span> = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="variable">$start</span>, &amp;<span class="variable">$path</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$candidates</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable">$start</span> &amp;&amp; <span class="variable">$candidates</span>[<span class="variable">$i</span>] === <span class="variable">$candidates</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$candidates</span>[<span class="variable">$i</span>] &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$path</span>[] = <span class="variable">$candidates</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span> - <span class="variable">$candidates</span>[<span class="variable">$i</span>], <span class="variable">$i</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 56.10% 使用 PHP 的用户</p>
<p>内存消耗 : 20.44 MB, 击败 7.32% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">combinationSum</span>(<span class="keyword">_</span> <span class="params">candidates</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> candidates <span class="operator">=</span> candidates.sorted()</span><br><span class="line">        <span class="keyword">var</span> result: [[<span class="type">Int</span>]] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> path: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        backtrack(<span class="operator">&amp;</span>candidates, target, <span class="number">0</span>, <span class="operator">&amp;</span>path, <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">candidates</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">start</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">path</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">result</span>: <span class="keyword">inout</span> [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> target <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            result.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> start<span class="operator">..&lt;</span>candidates.count &#123;</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">&gt;</span> start <span class="operator">&amp;&amp;</span> candidates[i] <span class="operator">==</span> candidates[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> candidates[i] <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path.append(candidates[i])</span><br><span class="line">            backtrack(<span class="operator">&amp;</span>candidates, target <span class="operator">-</span> candidates[i], i, <span class="operator">&amp;</span>path, <span class="operator">&amp;</span>result)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 99.16% 使用 Swift 的用户</p>
<p>内存消耗 : 15.84 MB, 击败 5.88% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">combinationSum</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> candidatesSorted = candidates.sorted().toIntArray()</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> path = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        backtrack(candidatesSorted, target, <span class="number">0</span>, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>, start: <span class="type">Int</span>, path: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, result: <span class="type">MutableList</span>&lt;<span class="type">List</span>&lt;<span class="type">Int</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(ArrayList(path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> start until candidates.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i])</span><br><span class="line">            backtrack(candidates, target - candidates[i], i, path, result)</span><br><span class="line">            path.removeAt(path.size - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 232 ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.69 MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; combinationSum(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; path = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidatesSorted = <span class="built_in">List</span>.from(candidates)..sort();</span><br><span class="line">    <span class="keyword">void</span> backtrack(<span class="built_in">int</span> start, <span class="built_in">int</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>.from(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidatesSorted.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidatesSorted[i] == candidatesSorted[i - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidatesSorted[i] &gt; target) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.add(candidatesSorted[i]);</span><br><span class="line">        backtrack(i, target - candidatesSorted[i]);</span><br><span class="line">        path.removeLast();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 319 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 146.83 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">	sort.Ints(candidates)</span><br><span class="line">	<span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span></span><br><span class="line">	backtrack = <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">			result = <span class="built_in">append</span>(result, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i<span class="number">-1</span>] &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			path = <span class="built_in">append</span>(path, candidates[i])</span><br><span class="line">			backtrack(i, target-candidates[i])</span><br><span class="line">			path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	backtrack(<span class="number">0</span>, target)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.61 MB, 击败 84.99% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum</span>(<span class="params">candidates, target</span>)</span><br><span class="line">  result = []</span><br><span class="line">  path = []</span><br><span class="line">  candidates.sort!</span><br><span class="line">  backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">start, target</span>|</span><br><span class="line">    <span class="keyword">if</span> target == <span class="number">0</span></span><br><span class="line">      result &lt;&lt; path.dup</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (start...candidates.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> candidates[i] &gt; target</span><br><span class="line">      path &lt;&lt; candidates[i]</span><br><span class="line">      backtrack.call(i, target - candidates[i])</span><br><span class="line">      path.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  backtrack.call(<span class="number">0</span>, target)</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 90.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.49 MB, 击败 20.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span></span>(candidates: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(start: <span class="type">Int</span>, target: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result = path.reverse :: result</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- start until candidates.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates(i) == candidates(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (candidates(i) &lt;= target) &#123;</span><br><span class="line">          path = candidates(i) :: path</span><br><span class="line">          backtrack(i, target - candidates(i))</span><br><span class="line">          path = path.tail</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    candidates.sorted</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 522 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.73 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">combination_sum</span>(candidates: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">path</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">candidates_sorted</span> = candidates.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        candidates_sorted.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(</span><br><span class="line">            candidates: &amp;[<span class="type">i32</span>],</span><br><span class="line">            target: <span class="type">i32</span>,</span><br><span class="line">            start: <span class="type">usize</span>,</span><br><span class="line">            path: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;,</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(path.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> start..candidates.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                path.<span class="title function_ invoke__">push</span>(candidates[i]);</span><br><span class="line">                <span class="title function_ invoke__">backtrack</span>(candidates, target - candidates[i], i, path, result);</span><br><span class="line">                path.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(&amp;candidates_sorted, target, <span class="number">0</span>, &amp;<span class="keyword">mut</span> path, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.03 MB, 击败 91.36% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>除夕</title>
    <url>/zh-CN/9f3be51aaf4c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>除夕快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9f3be51aaf4c/202001240001.png" class="" title="鼠年大吉">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>除夕</tag>
      </tags>
  </entry>
  <entry>
    <title>立春</title>
    <url>/zh-CN/f830c4da0719/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立春</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f830c4da0719/202002040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立春</tag>
      </tags>
  </entry>
  <entry>
    <title>元宵节</title>
    <url>/zh-CN/8373f60c0ba6/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元宵节快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/8373f60c0ba6/202002080001.jpg" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元宵节</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00041.缺失的第一个正数</title>
    <url>/zh-CN/5b29713af56d/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。</p>
<p>请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,2,0]<br>输出：3</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [3,4,-1,1]<br>输出：2</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [7,8,9,11,12]<br>输出：1</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10^5$</li>
<li>$-2^{31} &lt;&#x3D; nums[i] &lt;&#x3D; 2^{31} - 1$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[nums[i] - <span class="number">1</span>], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 94.56% 使用 C++ 的用户</p>
<p>内存消耗 : 42.63 MB, 击败 25.68% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 98.51% 使用 Java 的用户</p>
<p>内存消耗 : 53.84 MB, 击败 68.75% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstMissingPositive</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &lt;= n <span class="keyword">and</span> nums[nums[i] - <span class="number">1</span>] != nums[i]:</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != i + <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 72.86% 使用 Python 的用户</p>
<p>内存消耗 : 19.07 MB, 击败 90.86% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstMissingPositive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &lt;= n <span class="keyword">and</span> nums[nums[i] - <span class="number">1</span>] != nums[i]:</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != i + <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 : 27.45 MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= numsSize &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            swap(&amp;nums[nums[i] - <span class="number">1</span>], &amp;nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numsSize + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 95.26% 使用 C 的用户</p>
<p>内存消耗 : 10.66 MB, 击败 92.39% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FirstMissingPositive</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                Swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 142 ms, 击败 66.90% 使用 C# 的用户</p>
<p>内存消耗 : 57.28 MB, 击败 27.47% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstMissingPositive = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] !== nums[i]) &#123;</span><br><span class="line">            [nums[nums[i] - <span class="number">1</span>], nums[i]] = [nums[i], nums[nums[i] - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 70.49% 使用 JavaScript 的用户</p>
<p>内存消耗 : 55.44 MB, 击败 36.87% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">firstMissingPositive</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] !== nums[i]) &#123;</span><br><span class="line">            [nums[nums[i] - <span class="number">1</span>], nums[i]] = [nums[i], nums[nums[i] - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 83.62% 使用 TypeScript 的用户</p>
<p>内存消耗 : 57.48 MB, 击败 29.94% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">firstMissingPositive</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= <span class="variable">$nums</span>[<span class="variable">$i</span>] &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] &lt;= <span class="variable">$n</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>] != <span class="variable">$nums</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                [<span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>], <span class="variable">$nums</span>[<span class="variable">$i</span>]] = [<span class="variable">$nums</span>[<span class="variable">$i</span>], <span class="variable">$nums</span>[<span class="variable">$nums</span>[<span class="variable">$i</span>] - <span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nums</span>[<span class="variable">$i</span>] !== <span class="variable">$i</span> + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$n</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 118 ms, 击败 76.19% 使用 PHP 的用户</p>
<p>内存消耗 : 26.82 MB, 击败 100.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">firstMissingPositive</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nums <span class="operator">=</span> nums</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> <span class="operator">&lt;=</span> nums[i] <span class="operator">&amp;&amp;</span> nums[i] <span class="operator">&lt;=</span> n <span class="operator">&amp;&amp;</span> nums[nums[i] <span class="operator">-</span> <span class="number">1</span>] <span class="operator">!=</span> nums[i] &#123;</span><br><span class="line">                nums.swapAt(nums[i] <span class="operator">-</span> <span class="number">1</span>, i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="operator">!=</span> i <span class="operator">+</span> <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 151 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 19.63 MB, 击败 14.14% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">firstMissingPositive</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = nums.size</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>] = nums[i].also &#123; nums[i] = nums[nums[i] - <span class="number">1</span>] &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 93.88% 使用 Kotlin 的用户</p>
<p>内存消耗 : 49.80 MB, 击败 89.80% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> firstMissingPositive(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="keyword">final</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">        <span class="keyword">final</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[temp - <span class="number">1</span>];</span><br><span class="line">        nums[temp - <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 312 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 160.04 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i]<span class="number">-1</span>] != nums[i] &#123;</span><br><span class="line">			nums[nums[i]<span class="number">-1</span>], nums[i] = nums[i], nums[nums[i]<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> nums[i] != i+<span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 38 ms, 击败 92.71% 使用 Go 的用户</p>
<p>内存消耗 : 7.73 MB, 击败 97.26% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_missing_positive</span>(<span class="params">nums</span>)</span><br><span class="line">  n = nums.length</span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]</span><br><span class="line">      nums[nums[i] - <span class="number">1</span>], nums[i] = nums[i], nums[nums[i] - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span> <span class="keyword">if</span> nums[i] != i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  n + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 122 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 210.50 MB, 击败 33.33% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.length</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(i: <span class="type">Int</span>, j: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> temp = nums(i)</span><br><span class="line">      nums(i) = nums(j)</span><br><span class="line">      nums(j) = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span> &lt;= nums(i) &amp;&amp; nums(i) &lt;= n &amp;&amp; nums(nums(i) - <span class="number">1</span>) != nums(i)) &#123;</span><br><span class="line">        swap(i, nums(i) - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 696 ms, 击败 92.31% 使用 Scala 的用户</p>
<p>内存消耗 : 77.17 MB, 击败 84.62% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">first_missing_positive</span>(<span class="keyword">mut</span> nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = nums.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span> &lt;= nums[i] &amp;&amp; nums[i] &lt;= n <span class="keyword">as</span> <span class="type">i32</span> &amp;&amp; nums[(nums[i] - <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>] != nums[i] &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">index</span> = (nums[i] - <span class="number">1</span>) <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">                nums.<span class="title function_ invoke__">swap</span>(i, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != (i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">return</span> (i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        (n + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 89.19% 使用 Rust 的用户</p>
<p>内存消耗 : 2.98 MB, 击败 49.38% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00040.组合总和 II</title>
    <url>/zh-CN/ce16c36a21a7/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用 一次 。</p>
<p><strong>注意：</strong>解集不能包含重复的组合。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,<br>输出:<br>[<br>[1,1,6],<br>[1,2,5],<br>[1,7],<br>[2,6]<br>]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,<br>输出:<br>[<br>[1,2,2],<br>[5]<br>]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; candidates.length &lt;&#x3D; 100</li>
<li>1 &lt;&#x3D; candidates[i] &lt;&#x3D; 50</li>
<li>1 &lt;&#x3D; target &lt;&#x3D; 30</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; current;</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span></span><br><span class="line"><span class="params"><span class="function">                   vector&lt;<span class="type">int</span>&gt;&amp; current, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 86.36% 使用 C++ 的用户</p>
<p>内存消耗 : 12.34 MB, 击败 35.00% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;Integer&gt; current = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                           List&lt;Integer&gt; current, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(current));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.add(candidates[i]);</span><br><span class="line">            backtrack(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.remove(current.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 66.48% 使用 Java 的用户</p>
<p>内存消耗 : 42.18 MB, 击败 53.22% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, target-candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        result = []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 59.84% 使用 Python 的用户</p>
<p>内存消耗 : 11.57 MB, 击败 85.09% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, target, path</span>):</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> candidates[i] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, target-candidates[i], path)</span><br><span class="line">                path.pop()</span><br><span class="line">        result = []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtrack(<span class="number">0</span>, target, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 34 ms, 击败 98.78% 使用 Python3 的用户</p>
<p>内存消耗 : 16.48 MB, 击败 40.06% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span> start, <span class="type">int</span>* path, <span class="type">int</span> pathSize, <span class="type">int</span>** result, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result[*returnSize] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(pathSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pathSize; ++i) &#123;</span><br><span class="line">            result[*returnSize][i] = path[i];</span><br><span class="line">        &#125;</span><br><span class="line">        (*returnColumnSizes)[*returnSize] = pathSize;</span><br><span class="line">        (*returnSize)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidatesSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path[pathSize++] = candidates[i];</span><br><span class="line">        backtrack(candidates, candidatesSize, target - candidates[i], i + <span class="number">1</span>, path, pathSize, result, returnSize, returnColumnSizes);</span><br><span class="line">        pathSize--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>* candidates, <span class="type">int</span> candidatesSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span>** result = (<span class="type">int</span>**)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>* path = (<span class="type">int</span>*)<span class="built_in">malloc</span>(candidatesSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> pathSize = <span class="number">0</span>;</span><br><span class="line">    qsort(candidates, candidatesSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare);</span><br><span class="line">    backtrack(candidates, candidatesSize, target, <span class="number">0</span>, path, pathSize, result, returnSize, returnColumnSizes);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 95.94% 使用 C 的用户</p>
<p>内存消耗 : 8.56 MB, 击败 63.44% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; CombinationSum2(<span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; current = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        Array.Sort(candidates);</span><br><span class="line">        Backtrack(candidates, target, <span class="number">0</span>, current, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] candidates, <span class="built_in">int</span> target, <span class="built_in">int</span> start, List&lt;<span class="built_in">int</span>&gt; current, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(current));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.Add(candidates[i]);</span><br><span class="line">            Backtrack(candidates, target - candidates[i], i + <span class="number">1</span>, current, result);</span><br><span class="line">            current.RemoveAt(current.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 109 ms, 击败 71.58% 使用 C# 的用户</p>
<p>内存消耗 : 46.38 MB, 击败 13.69% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="keyword">function</span>(<span class="params">candidates, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> current = [];</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start, target</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...current]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">            current.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 47.12% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.57 MB, 击败 15.22% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinationSum2</span>(<span class="params">candidates: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">current</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start: <span class="built_in">number</span>, target: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="number">0</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...current]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="title function_">push</span>(candidates[i]);</span><br><span class="line">            <span class="title function_">backtrack</span>(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">            current.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 56.86% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.46 MB, 击败 11.11% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $candidates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">combinationSum2</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$current</span> = [];</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$candidates</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$current</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$candidates</span>, <span class="variable">$target</span>, <span class="variable">$start</span>, &amp;<span class="variable">$current</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$target</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$current</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$candidates</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable">$start</span> &amp;&amp; <span class="variable">$candidates</span>[<span class="variable">$i</span>] == <span class="variable">$candidates</span>[<span class="variable">$i</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$candidates</span>[<span class="variable">$i</span>] &gt; <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$current</span>[] = <span class="variable">$candidates</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$candidates</span>, <span class="variable">$target</span> - <span class="variable">$candidates</span>[<span class="variable">$i</span>], <span class="variable">$i</span> + <span class="number">1</span>, <span class="variable">$current</span>, <span class="variable">$result</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$current</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 61.54% 使用 PHP 的用户</p>
<p>内存消耗 : 20.05 MB, 击败 23.08% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">combinationSum2</span>(<span class="keyword">_</span> <span class="params">candidates</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [[<span class="type">Int</span>]] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> current: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">let</span> sortedCandidates <span class="operator">=</span> candidates.sorted()</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">start</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">target</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> target <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                result.append(current)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> start<span class="operator">..&lt;</span>sortedCandidates.count &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">&gt;</span> start <span class="operator">&amp;&amp;</span> sortedCandidates[i] <span class="operator">==</span> sortedCandidates[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> sortedCandidates[i] <span class="operator">&gt;</span> target &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                current.append(sortedCandidates[i])</span><br><span class="line">                backtrack(i <span class="operator">+</span> <span class="number">1</span>, target <span class="operator">-</span> sortedCandidates[i])</span><br><span class="line">                current.removeLast()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 92.86% 使用 Swift 的用户</p>
<p>内存消耗 : 15.69 MB, 击败 9.52% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">combinationSum2</span><span class="params">(candidates: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> current = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> sortedCandidates = candidates.sorted()</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(start: <span class="type">Int</span>, target: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">                result.add(current.toList())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> start until sortedCandidates.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; start &amp;&amp; sortedCandidates[i] == sortedCandidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sortedCandidates[i] &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                current.add(sortedCandidates[i])</span><br><span class="line">                backtrack(i + <span class="number">1</span>, target - sortedCandidates[i])</span><br><span class="line">                current.removeAt(current.size - <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 240 ms, 击败 53.85% 使用 Kotlin 的用户</p>
<p>内存消耗 : 40.25 MB, 击败 7.69% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; combinationSum2(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; candidates, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; current = [];</span><br><span class="line">    candidates.sort();</span><br><span class="line">    <span class="keyword">void</span> backtrack(<span class="built_in">int</span> start, <span class="built_in">int</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.from(current));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current.add(candidates[i]);</span><br><span class="line">        backtrack(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">        current.removeLast();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 338 ms, 击败 0.00% 使用 Dart 的用户</p>
<p>内存消耗 : 148.07 MB, 击败 66.67% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> current []<span class="type">int</span></span><br><span class="line">    sort.Ints(candidates)</span><br><span class="line">    <span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span></span><br><span class="line">    backtrack = <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, current...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> candidates[i] &gt; target &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            current = <span class="built_in">append</span>(current, candidates[i])</span><br><span class="line">            backtrack(i+<span class="number">1</span>, target-candidates[i])</span><br><span class="line">            current = current[:<span class="built_in">len</span>(current)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.33 MB, 击败 92.31% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combination_sum2</span>(<span class="params">candidates, target</span>)</span><br><span class="line">    result = []</span><br><span class="line">    current = []</span><br><span class="line">    candidates.sort!</span><br><span class="line">    backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">start, target</span>|</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span></span><br><span class="line">            result &lt;&lt; current.dup</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        (start...candidates.length).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">next</span> <span class="keyword">if</span> candidates[i] &gt; target</span><br><span class="line">            current &lt;&lt; candidates[i]</span><br><span class="line">            backtrack.call(i + <span class="number">1</span>, target - candidates[i])</span><br><span class="line">            current.pop</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    backtrack.call(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 74 ms, 击败 50.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.58 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span></span>(candidates: <span class="type">Array</span>[<span class="type">Int</span>], target: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> current: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">val</span> sortedCandidates = candidates.sorted</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(start: <span class="type">Int</span>, target: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        result = result :+ current</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- start until sortedCandidates.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; sortedCandidates(i) == sortedCandidates(i - <span class="number">1</span>)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortedCandidates(i) &lt;= target) &#123;</span><br><span class="line">          current = current :+ sortedCandidates(i)</span><br><span class="line">          backtrack(i + <span class="number">1</span>, target - sortedCandidates(i))</span><br><span class="line">          current = current.dropRight(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="number">0</span>, target)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 530 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 60.58 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">combination_sum2</span>(candidates: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sorted_candidates</span> = candidates;</span><br><span class="line">        sorted_candidates.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(</span><br><span class="line">            start: <span class="type">usize</span>,</span><br><span class="line">            target: <span class="type">i32</span>,</span><br><span class="line">            current: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;,</span><br><span class="line">            sorted_candidates: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(current.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> start..sorted_candidates.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> i &gt; start &amp;&amp; sorted_candidates[i] == sorted_candidates[i - <span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sorted_candidates[i] &gt; target &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                current.<span class="title function_ invoke__">push</span>(sorted_candidates[i]);</span><br><span class="line">                <span class="title function_ invoke__">backtrack</span>(i + <span class="number">1</span>, target - sorted_candidates[i], current, result, sorted_candidates);</span><br><span class="line">                current.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(<span class="number">0</span>, target, &amp;<span class="keyword">mut</span> current, &amp;<span class="keyword">mut</span> result, &amp;sorted_candidates);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.00 MB, 击败 95.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00042.接雨水</title>
    <url>/zh-CN/ba41afd51b99/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/ba41afd51b99/202002120001.png" class="" title="示例1">

<blockquote>
<p>输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：height &#x3D; [4,2,0,3,2,5]<br>输出：9</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>n &#x3D;&#x3D; height.length</li>
<li>$1 &lt;&#x3D; n &lt;&#x3D; 2 * 10^4$</li>
<li>$0 &lt;&#x3D; height[i] &lt;&#x3D; 10^5$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height.<span class="built_in">size</span>() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 50.80% 使用 C++ 的用户</p>
<p>内存消耗 : 21.66 MB, 击败 17.09% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left_max</span> <span class="operator">=</span> <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 45.56 MB, 击败 5.11% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max:</span><br><span class="line">                    left_max = height[left]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max:</span><br><span class="line">                    right_max = height[right]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 99.40% 使用 Python 的用户</p>
<p>内存消耗 : 12.68 MB, 击败 91.49% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max:</span><br><span class="line">                    left_max = height[left]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max:</span><br><span class="line">                    right_max = height[right]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 94.36% 使用 Python3 的用户</p>
<p>内存消耗 : 17.77 MB, 击败 74.44% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heightSize &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = heightSize - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 69.17% 使用 C 的用户</p>
<p>内存消耗 : 6.44 MB, 击败 99.08% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Trap</span>(<span class="params"><span class="built_in">int</span>[] height</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.Length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>, right = height.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 95.76% 使用 C# 的用户</p>
<p>内存消耗 : 44.57 MB, 击败 26.25% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trap = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left_max = <span class="number">0</span>, right_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 99.07% 使用 JavaScript 的用户</p>
<p>内存消耗 : 50.02 MB, 击败 25.70% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trap</span>(<span class="params">height: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right</span>: <span class="built_in">number</span> = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">left_max</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right_max</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &gt;= left_max) &#123;</span><br><span class="line">                left_max = height[left];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += left_max - height[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[right] &gt;= right_max) &#123;</span><br><span class="line">                right_max = height[right];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += right_max - height[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 72.92% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.29 MB, 击败 29.22% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trap</span>(<span class="params"><span class="variable">$height</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$height</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right</span> = <span class="variable">$length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$left_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$right_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$left</span> &lt; <span class="variable">$right</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &lt; <span class="variable">$height</span>[<span class="variable">$right</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$left</span>] &gt;= <span class="variable">$left_max</span>) &#123;</span><br><span class="line">                    <span class="variable">$left_max</span> = <span class="variable">$height</span>[<span class="variable">$left</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> += <span class="variable">$left_max</span> - <span class="variable">$height</span>[<span class="variable">$left</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$left</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$height</span>[<span class="variable">$right</span>] &gt;= <span class="variable">$right_max</span>) &#123;</span><br><span class="line">                    <span class="variable">$right_max</span> = <span class="variable">$height</span>[<span class="variable">$right</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> += <span class="variable">$right_max</span> - <span class="variable">$height</span>[<span class="variable">$right</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$right</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 30 ms, 击败 65.31% 使用 PHP 的用户</p>
<p>内存消耗 : 21.50 MB, 击败 79.59% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">trap</span>(<span class="keyword">_</span> <span class="params">height</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> length <span class="operator">=</span> height.count</span><br><span class="line">        <span class="keyword">guard</span> length <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right <span class="operator">=</span> length <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> leftMax <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rightMax <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&lt;</span> right &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] <span class="operator">&lt;</span> height[right] &#123;</span><br><span class="line">                <span class="keyword">if</span> height[left] <span class="operator">&gt;=</span> leftMax &#123;</span><br><span class="line">                    leftMax <span class="operator">=</span> height[left]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> leftMax <span class="operator">-</span> height[left]</span><br><span class="line">                &#125;</span><br><span class="line">                left <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> height[right] <span class="operator">&gt;=</span> rightMax &#123;</span><br><span class="line">                    rightMax <span class="operator">=</span> height[right]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result <span class="operator">+=</span> rightMax <span class="operator">-</span> height[right]</span><br><span class="line">                &#125;</span><br><span class="line">                right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 26 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.84 MB, 击败 7.33% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">trap</span><span class="params">(height: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> length = height.size</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = length - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> leftMax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rightMax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &gt;= leftMax) &#123;</span><br><span class="line">                    leftMax = height[left]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += leftMax - height[left]</span><br><span class="line">                &#125;</span><br><span class="line">                left++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &gt;= rightMax) &#123;</span><br><span class="line">                    rightMax = height[right]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += rightMax - height[right]</span><br><span class="line">                &#125;</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 189 ms, 击败 98.29% 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.59 MB, 击败 43.59% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> trap(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; height) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> leftMax = <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[left] &gt;= leftMax) &#123;</span><br><span class="line">          leftMax = height[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result += leftMax - height[left];</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[right] &gt;= rightMax) &#123;</span><br><span class="line">          rightMax = height[right];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result += rightMax - height[right];</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 284 ms, 击败 88.89% 使用 Dart 的用户</p>
<p>内存消耗 : 148.19 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(height) &lt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">    leftMax, rightMax := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] &gt;= leftMax &#123;</span><br><span class="line">                leftMax = height[left]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += leftMax - height[left]</span><br><span class="line">            &#125;</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> height[right] &gt;= rightMax &#123;</span><br><span class="line">                rightMax = height[right]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += rightMax - height[right]</span><br><span class="line">            &#125;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 10 ms, 击败 41.46% 使用 Go 的用户</p>
<p>内存消耗 : 5.18 MB, 击败 99.69% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; height</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">height</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> height.length &lt; <span class="number">3</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = height.length - <span class="number">1</span></span><br><span class="line">  left_max = <span class="number">0</span></span><br><span class="line">  right_max = <span class="number">0</span></span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right</span><br><span class="line">    <span class="keyword">if</span> height[left] &lt; height[right]</span><br><span class="line">      <span class="keyword">if</span> height[left] &gt;= left_max</span><br><span class="line">        left_max = height[left]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result += left_max - height[left]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> height[right] &gt;= right_max</span><br><span class="line">        right_max = height[right]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result += right_max - height[right]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 61 ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 : 207.34 MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">trap</span></span>(height: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> right = height.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> leftMax = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> rightMax = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height(left) &lt; height(right)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (height(left) &gt;= leftMax) &#123;</span><br><span class="line">            leftMax = height(left)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += leftMax - height(left)</span><br><span class="line">          &#125;</span><br><span class="line">          left += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (height(right) &gt;= rightMax) &#123;</span><br><span class="line">            rightMax = height(right)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += rightMax - height(right)</span><br><span class="line">          &#125;</span><br><span class="line">          right -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 548 ms, 击败 81.82% 使用 Scala 的用户</p>
<p>内存消耗 : 56.33 MB, 击败 90.91% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">trap</span>(height: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> height.<span class="title function_ invoke__">len</span>() &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = height.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right_max</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max &#123;</span><br><span class="line">                    left_max = height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += left_max - height[left];</span><br><span class="line">                &#125;</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max &#123;</span><br><span class="line">                    right_max = height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result += right_max - height[right];</span><br><span class="line">                &#125;</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.10 MB, 击败 92.50% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00043.字符串相乘</title>
    <url>/zh-CN/f75775a279c9/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>
<p><strong>注意：</strong>不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: num1 &#x3D; “2”, num2 &#x3D; “3”<br>输出: “6”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: num1 &#x3D; “123”, num2 &#x3D; “456”<br>输出: “56088”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; num1.length, num2.length &lt;&#x3D; 200</li>
<li>num1 和 num2 只能由数字组成。</li>
<li>num1 和 num2 都不包含任何前导零，除了数字0本身。</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = num1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2 = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">string <span class="title">result</span><span class="params">(len1 + len2, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="type">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="type">int</span> sum = mul + (result[i + j + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                </span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">size_t</span> start_pos = result.<span class="built_in">find_first_not_of</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (start_pos != string::npos) ? result.<span class="built_in">substr</span>(start_pos) : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 91.44% 使用 C++ 的用户</p>
<p>内存消耗 : 7.98 MB, 击败 51.38% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">multiply</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> num1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> num2.length();</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + len2];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> (num1.charAt(i) - <span class="string">&#x27;0&#x27;</span>) * (num2.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : result) &#123;</span><br><span class="line">            sb.append(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; sb.length() - <span class="number">1</span> &amp;&amp; sb.charAt(start) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 : 41.18 MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type num1: str</span></span><br><span class="line"><span class="string">        :type num2: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        len1, len2 = <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">        result = [<span class="number">0</span>] * (len1 + len2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len2 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                mul = <span class="built_in">int</span>(num1[i]) * <span class="built_in">int</span>(num2[j])</span><br><span class="line">                total_sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = total_sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += total_sum // <span class="number">10</span></span><br><span class="line">        result_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, result))</span><br><span class="line">        result_str = result_str.lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result_str <span class="keyword">if</span> result_str <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 170 ms, 击败 38.93% 使用 Python 的用户</p>
<p>内存消耗 : 11.59 MB, 击败 86.26% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, num1: <span class="built_in">str</span>, num2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        len1, len2 = <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">        result = [<span class="number">0</span>] * (len1 + len2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len2 - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                mul = <span class="built_in">int</span>(num1[i]) * <span class="built_in">int</span>(num2[j])</span><br><span class="line">                total_sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = total_sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += total_sum // <span class="number">10</span></span><br><span class="line">        result_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, result))</span><br><span class="line">        result_str = result_str.lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result_str <span class="keyword">if</span> result_str <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 95 ms, 击败 49.18% 使用 Python3 的用户</p>
<p>内存消耗 : 16.41 MB, 击败 41.37% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">multiply</span><span class="params">(<span class="type">char</span>* num1, <span class="type">char</span>* num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(num1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(num2);</span><br><span class="line">    <span class="type">int</span> len_result = len1 + len2;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len_result);</span><br><span class="line">    <span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * len_result);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="type">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="type">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* result_str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(len_result + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; len_result &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx == len_result) &#123;</span><br><span class="line">        result_str[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        result_str[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = idx; i &lt; len_result; i++) &#123;</span><br><span class="line">            result_str[i - idx] = result[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result_str[len_result - idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">    <span class="keyword">return</span> result_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 29.39% 使用 C 的用户</p>
<p>内存消耗 : 6.01 MB, 击败 84.81% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Multiply</span>(<span class="params"><span class="built_in">string</span> num1, <span class="built_in">string</span> num2</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> len1 = num1.Length;</span><br><span class="line">        <span class="built_in">int</span> len2 = num2.Length;</span><br><span class="line">        <span class="built_in">int</span> lenResult = len1 + len2;</span><br><span class="line">        <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[lenResult];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="built_in">int</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="built_in">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder resultStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">            resultStr.Append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">                resultStr.Append(result[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 79.35% 使用 C# 的用户</p>
<p>内存消耗 : 42.13 MB, 击败 48.91% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len1 = num1.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> len2 = num2.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Array</span>(lenResult).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resultStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] === <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx === lenResult) &#123;</span><br><span class="line">        resultStr = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">            resultStr += result[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 69.68% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.53 MB, 击败 21.49% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">num1: <span class="built_in">string</span>, num2: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> len1 = num1.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> len2 = num2.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = <span class="title class_">Array</span>(lenResult).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> mul = (num1[i].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)) * (num2[j].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">const</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">            result[i + j] += <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resultStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] === <span class="number">0</span>) &#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx === lenResult) &#123;</span><br><span class="line">        resultStr = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">            resultStr += result[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 90.00% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.91 MB, 击败 15.71% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $num1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $num2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params"><span class="variable">$num1</span>, <span class="variable">$num2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$len1</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$num1</span>);</span><br><span class="line">        <span class="variable">$len2</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$num2</span>);</span><br><span class="line">        <span class="variable">$lenResult</span> = <span class="variable">$len1</span> + <span class="variable">$len2</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$lenResult</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$len1</span> - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$len2</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="variable">$mul</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$num1</span>[<span class="variable">$i</span>]) * <span class="title function_ invoke__">intval</span>(<span class="variable">$num2</span>[<span class="variable">$j</span>]);</span><br><span class="line">                <span class="variable">$sum</span> = <span class="variable">$mul</span> + <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span> + <span class="number">1</span>];</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span> + <span class="number">1</span>] = <span class="variable">$sum</span> % <span class="number">10</span>;</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span> + <span class="variable">$j</span>] += <span class="title function_ invoke__">intdiv</span>(<span class="variable">$sum</span>, <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$resultStr</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$idx</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$idx</span> &lt; <span class="variable">$lenResult</span> &amp;&amp; <span class="variable">$result</span>[<span class="variable">$idx</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$idx</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$idx</span> === <span class="variable">$lenResult</span>) &#123;</span><br><span class="line">            <span class="variable">$resultStr</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$idx</span>; <span class="variable">$i</span> &lt; <span class="variable">$lenResult</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">                <span class="variable">$resultStr</span> .= <span class="variable">$result</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$resultStr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 0.00% 使用 PHP 的用户</p>
<p>内存消耗 : 19.91 MB, 击败 0.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">multiply</span>(<span class="keyword">_</span> <span class="params">num1</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">num2</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> len1 <span class="operator">=</span> num1.count</span><br><span class="line">        <span class="keyword">let</span> len2 <span class="operator">=</span> num2.count</span><br><span class="line">        <span class="keyword">let</span> lenResult <span class="operator">=</span> len1 <span class="operator">+</span> len2</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: lenResult)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: len1 <span class="operator">-</span> <span class="number">1</span>, through: <span class="number">0</span>, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: len2 <span class="operator">-</span> <span class="number">1</span>, through: <span class="number">0</span>, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> mul <span class="operator">=</span> <span class="type">Int</span>(<span class="type">String</span>(num1[num1.index(num1.startIndex, offsetBy: i)]))<span class="operator">!</span> <span class="operator">*</span> <span class="type">Int</span>(<span class="type">String</span>(num2[num2.index(num2.startIndex, offsetBy: j)]))<span class="operator">!</span></span><br><span class="line">                <span class="keyword">let</span> sum <span class="operator">=</span> mul <span class="operator">+</span> result[i <span class="operator">+</span> j <span class="operator">+</span> <span class="number">1</span>]</span><br><span class="line">                result[i <span class="operator">+</span> j <span class="operator">+</span> <span class="number">1</span>] <span class="operator">=</span> sum <span class="operator">%</span> <span class="number">10</span></span><br><span class="line">                result[i <span class="operator">+</span> j] <span class="operator">+=</span> sum <span class="operator">/</span> <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> resultStr <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> idx <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx <span class="operator">&lt;</span> lenResult <span class="operator">&amp;&amp;</span> result[idx] <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            idx <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> idx <span class="operator">==</span> lenResult &#123;</span><br><span class="line">            resultStr <span class="operator">=</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx<span class="operator">..&lt;</span>lenResult &#123;</span><br><span class="line">                resultStr <span class="operator">+=</span> <span class="type">String</span>(result[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 195 ms, 击败 7.32% 使用 Swift 的用户</p>
<p>内存消耗 : 16.23 MB, 击败 7.32% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">multiply</span><span class="params">(num1: <span class="type">String</span>, num2: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> len1 = num1.length</span><br><span class="line">        <span class="keyword">val</span> len2 = num2.length</span><br><span class="line">        <span class="keyword">val</span> lenResult = len1 + len2</span><br><span class="line">        <span class="keyword">val</span> result = IntArray(lenResult)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> len1 - <span class="number">1</span> downTo <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> len2 - <span class="number">1</span> downTo <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> mul = (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="keyword">val</span> sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">                result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">                result[i + j] += sum / <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> resultStr = StringBuilder()</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">            idx++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">            resultStr.append(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> idx until lenResult) &#123;</span><br><span class="line">                resultStr.append(result[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 176 ms, 击败 100.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 35.16 MB, 击败 81.82% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> multiply(<span class="built_in">String</span> num1, <span class="built_in">String</span> num2) &#123;</span><br><span class="line">    <span class="built_in">int</span> len1 = num1.length;</span><br><span class="line">    <span class="built_in">int</span> len2 = num2.length;</span><br><span class="line">    <span class="built_in">int</span> lenResult = len1 + len2;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; result = <span class="built_in">List</span>.filled(lenResult, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="built_in">int</span> mul = <span class="built_in">int</span>.parse(num1[i]) * <span class="built_in">int</span>.parse(num2[j]);</span><br><span class="line">        <span class="built_in">int</span> sum = mul + result[i + j + <span class="number">1</span>];</span><br><span class="line">        result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">        result[i + j] += sum ~/ <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">StringBuffer</span> resultStr = <span class="built_in">StringBuffer</span>();</span><br><span class="line">    <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">      idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx == lenResult) &#123;</span><br><span class="line">      resultStr.write(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = idx; i &lt; lenResult; i++) &#123;</span><br><span class="line">        resultStr.write(result[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 317 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 143.64 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(num1 <span class="type">string</span>, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    len1, len2 := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">    lenResult := len1 + len2</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="type">int</span>, lenResult)</span><br><span class="line">    <span class="keyword">for</span> i := len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">for</span> j := len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line">            mul := <span class="type">int</span>(num1[i]-<span class="string">&#x27;0&#x27;</span>) * <span class="type">int</span>(num2[j]-<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            sum := mul + result[i+j+<span class="number">1</span>]</span><br><span class="line">            result[i+j+<span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">            result[i+j] += sum / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> resultStr <span class="type">string</span></span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx &lt; lenResult &amp;&amp; result[idx] == <span class="number">0</span> &#123;</span><br><span class="line">        idx++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> idx == lenResult &#123;</span><br><span class="line">        resultStr = <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := idx; i &lt; lenResult; i++ &#123;</span><br><span class="line">            resultStr += strconv.Itoa(result[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 60.96% 使用 Go 的用户</p>
<p>内存消耗 : 2.93 MB, 击败 64.82% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">num1, num2</span>)</span><br><span class="line">    len1, len2 = num1.length, num2.length</span><br><span class="line">    len_result = len1 + len2</span><br><span class="line">    result = <span class="title class_">Array</span>.new(len_result, <span class="number">0</span>)</span><br><span class="line">    (len1 - <span class="number">1</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (len2 - <span class="number">1</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            mul = num1[i].to_i * num2[j].to_i</span><br><span class="line">            sum = mul + result[i + j + <span class="number">1</span>]</span><br><span class="line">            result[i + j + <span class="number">1</span>] = sum % <span class="number">10</span></span><br><span class="line">            result[i + j] += sum / <span class="number">10</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; len_result &amp;&amp; result[idx] == <span class="number">0</span></span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> idx == len_result</span><br><span class="line">        result_str = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result_str = result[idx..-<span class="number">1</span>].join</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result_str</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 145 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.50 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">multiply</span></span>(num1: <span class="type">String</span>, num2: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> len1 = num1.length</span><br><span class="line">    <span class="keyword">val</span> len2 = num2.length</span><br><span class="line">    <span class="keyword">val</span> lenResult = len1 + len2</span><br><span class="line">    <span class="keyword">val</span> result = <span class="type">Array</span>.fill(lenResult)(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- len1 - <span class="number">1</span> to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- len2 - <span class="number">1</span> to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> mul = (num1(i) - &#x27;<span class="number">0</span>&#x27;) * (num2(j) - &#x27;<span class="number">0</span>&#x27;)</span><br><span class="line">        <span class="keyword">val</span> sum = mul + result(i + j + <span class="number">1</span>)</span><br><span class="line">        result(i + j + <span class="number">1</span>) = sum % <span class="number">10</span></span><br><span class="line">        result(i + j) += sum / <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> idx = result.indexWhere(_ != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> resultStr =</span><br><span class="line">      <span class="keyword">if</span> (idx == <span class="number">-1</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="keyword">else</span> result.slice(idx, lenResult).mkString</span><br><span class="line">    resultStr</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 504 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 54.61 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">multiply</span>(num1: <span class="type">String</span>, num2: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len1</span> = num1.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len2</span> = num2.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">len_result</span> = len1 + len2;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="built_in">vec!</span>[<span class="number">0</span>; len_result];</span><br><span class="line">        <span class="keyword">for</span> (i, c1) <span class="keyword">in</span> num1.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> (j, c2) <span class="keyword">in</span> num2.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">mul</span> = (c1.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>()) * (c2.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">sum</span> = mul + result[i + j];</span><br><span class="line">                result[i + j] = sum % <span class="number">10</span>;</span><br><span class="line">                result[i + j + <span class="number">1</span>] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result_str</span>: <span class="type">String</span> = result</span><br><span class="line">            .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">            .<span class="title function_ invoke__">rev</span>()</span><br><span class="line">            .<span class="title function_ invoke__">skip_while</span>(|&amp;&amp;x| x == <span class="number">0</span>)</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|&amp;x| <span class="type">char</span>::<span class="title function_ invoke__">from_digit</span>(x, <span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">            .<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">if</span> result_str.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            result_str.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result_str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 33.33% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 55.56% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00044.通配符匹配</title>
    <url>/zh-CN/79f1751f0ddd/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个输入字符串 (s) 和一个字符模式 (p) ，请你实现一个支持 ‘?’ 和 ‘*’ 匹配规则的通配符匹配：</p>
<ul>
<li>‘?’ 可以匹配任何单个字符。</li>
<li>‘*’ 可以匹配任意字符序列（包括空字符序列）。<br>判定匹配成功的充要条件是：字符模式必须能够 完全匹配 输入字符串（而不是部分匹配）。</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “aa”, p &#x3D; “a”<br>输出：false<br>解释：”a” 无法匹配 “aa” 整个字符串。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “aa”, p &#x3D; “<em>“<br>输出：true<br>解释：’</em>‘ 可以匹配任意字符串。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “cb”, p &#x3D; “?a”<br>输出：false<br>解释：’?’ 可以匹配 ‘c’, 但第二个 ‘a’ 无法匹配 ‘b’。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>0 &lt;&#x3D; s.length, p.length &lt;&#x3D; 2000</li>
<li>s 仅由小写英文字母组成</li>
<li>p 仅由小写英文字母、’?’ 或 ‘*’ 组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n = p.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 58.85% 使用 C++ 的用户</p>
<p>内存消耗 : 15.31 MB, 击败 39.38% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 24 ms, 击败 59.21% 使用 Java 的用户</p>
<p>内存消耗 : 43.70 MB, 击败 56.23% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] <span class="keyword">or</span> dp[i][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 544 ms, 击败 74.67% 使用 Python 的用户</p>
<p>内存消耗 : 19.36 MB, 击败 78.67% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] <span class="keyword">or</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] <span class="keyword">or</span> dp[i][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 399 ms, 击败 79.64% 使用 Python3 的用户</p>
<p>内存消耗 : 24.43 MB, 击败 45.51% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isMatch</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="type">bool</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="literal">false</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 21 ms, 击败 62.82% 使用 C 的用户</p>
<p>内存消耗 : 6.82 MB, 击败 81.41% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> p</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = s.Length;</span><br><span class="line">        <span class="built_in">int</span> n = p.Length;</span><br><span class="line">        <span class="built_in">bool</span>[,] dp = <span class="keyword">new</span> <span class="built_in">bool</span>[m + <span class="number">1</span>, n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>, <span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>, j] = dp[<span class="number">0</span>, j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i, j] = dp[i - <span class="number">1</span>, j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i, j] = dp[i - <span class="number">1</span>, j] || dp[i, j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m, n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 65 ms, 击败 93.07% 使用 C# 的用户</p>
<p>内存消耗 : 51.68 MB, 击败 19.80% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">p</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="keyword">function</span>(<span class="params">s, p</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: m + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 128 ms, 击败 85.29% 使用 JavaScript 的用户</p>
<p>内存消耗 : 66.23 MB, 击败 16.67% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">s: <span class="built_in">string</span>, p: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> m = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dp</span>: <span class="built_in">boolean</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: m + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] === s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 133 ms, 击败 68.03% 使用 TypeScript 的用户</p>
<p>内存消耗 : 64.14 MB, 击败 12.29% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$m</span> + <span class="number">1</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span> + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="variable">$dp</span>[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">1</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">1</span>; <span class="variable">$j</span> &lt;= <span class="variable">$n</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="variable">$s</span>[<span class="variable">$i</span> - <span class="number">1</span>] || <span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">elseif</span> (<span class="variable">$p</span>[<span class="variable">$j</span> - <span class="number">1</span>] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>][<span class="variable">$j</span>] || <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span> - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$m</span>][<span class="variable">$n</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 202 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 40.62 MB, 击败 100.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isMatch</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">p</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> target <span class="operator">=</span> <span class="type">Array</span>(s), regex <span class="operator">=</span> [<span class="type">Character</span>](), flag <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> p &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>(c <span class="operator">==</span> <span class="string">&quot;*&quot;</span> <span class="operator">&amp;&amp;</span> flag) &#123;</span><br><span class="line">                regex.append(c)</span><br><span class="line">            &#125;</span><br><span class="line">            flag <span class="operator">=</span> c <span class="operator">==</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> visit <span class="operator">=</span> [[<span class="type">Bool</span>]](repeating: [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, count: target.count), count: regex.count)</span><br><span class="line">        <span class="keyword">var</span> table <span class="operator">=</span> [[<span class="type">Bool</span>]](repeating: [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, count: target.count), count: regex.count)</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">memory</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">y</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> x <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> <span class="operator">&amp;&amp;</span> y <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> x <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> y <span class="operator">==</span> <span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x <span class="operator">==</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> regex[<span class="number">0</span>] <span class="operator">==</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>visit[x][y] &#123;</span><br><span class="line">                    table[x][y] <span class="operator">=</span> search(x, y)</span><br><span class="line">                    visit[x][y] <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> table[x][y]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">search</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">y</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> regex[x] <span class="operator">==</span> <span class="string">&quot;?&quot;</span> <span class="operator">||</span> regex[x] <span class="operator">==</span> target[y] &#123;</span><br><span class="line">                <span class="keyword">return</span> memory(x <span class="operator">-</span> <span class="number">1</span>, y <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> regex[x] <span class="operator">==</span> <span class="string">&quot;*&quot;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> memory(x <span class="operator">-</span> <span class="number">1</span>, y) <span class="operator">||</span> memory(x, y <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memory(regex.count <span class="operator">-</span> <span class="number">1</span>, target.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 66 ms, 击败 38.46% 使用 Swift 的用户</p>
<p>内存消耗 : 17.84 MB, 击败 7.69% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isMatch</span><span class="params">(s: <span class="type">String</span>, p: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> m = s.length</span><br><span class="line">        <span class="keyword">val</span> n = p.length</span><br><span class="line">        <span class="keyword">val</span> dp = Array(m + <span class="number">1</span>) &#123; BooleanArray(n + <span class="number">1</span>) &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 212 ms, 击败 85.71% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.84 MB, 击败 78.57% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isMatch(<span class="built_in">String</span> s, <span class="built_in">String</span> p) &#123;</span><br><span class="line">    <span class="built_in">int</span> m = s.length;</span><br><span class="line">    <span class="built_in">int</span> n = p.length;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt;&gt; dp =</span><br><span class="line">        <span class="built_in">List</span>.generate(m + <span class="number">1</span>, (_) =&gt; <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt;.filled(n + <span class="number">1</span>, <span class="keyword">false</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">          dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">          dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 356 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 154.70 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="type">string</span>, p <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">bool</span>, m+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] == s[i<span class="number">-1</span>] || p[j<span class="number">-1</span>] == <span class="string">&#x27;?&#x27;</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] || dp[i][j<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 97.78% 使用 Go 的用户</p>
<p>内存消耗 : 6.34 MB, 击败 43.33% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; p</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_match</span>(<span class="params">s, p</span>)</span><br><span class="line">    m, n = s.length, p.length</span><br><span class="line">    dp = <span class="title class_">Array</span>.new(m + <span class="number">1</span>) &#123; <span class="title class_">Array</span>.new(n + <span class="number">1</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    (<span class="number">1</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (<span class="number">1</span>..m).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        (<span class="number">1</span>..n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] |<span class="params"></span>| p[j - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elsif</span> p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] |<span class="params"></span>| dp[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    dp[m][n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1296 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 231.35 MB, 击败 100.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>, p: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = s.length</span><br><span class="line">    <span class="keyword">val</span> n = p.length</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>)(<span class="number">0</span>) = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">        dp(<span class="number">0</span>)(j) = dp(<span class="number">0</span>)(j - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p(j - <span class="number">1</span>) == s(i - <span class="number">1</span>) || p(j - <span class="number">1</span>) == &#x27;?&#x27;) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p(j - <span class="number">1</span>) == &#x27;*&#x27;) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j) || dp(i)(j - <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(m)(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 554 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.13 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_match</span>(s: <span class="type">String</span>, p: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">m</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = p.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dp</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>; n + <span class="number">1</span>]; m + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">            <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=m &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">                <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(i - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                    || p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;?&#x27;</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> p.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">nth</span>(j - <span class="number">1</span>).<span class="title function_ invoke__">unwrap</span>() == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 998 ms, 击败 6.67% 使用 Rust 的用户</p>
<p>内存消耗 : 2.82 MB, 击败 20.00% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00045.跳跃游戏 II</title>
    <url>/zh-CN/3f2816f26199/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。</p>
<p>每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:</p>
<ul>
<li>0 &lt;&#x3D; j &lt;&#x3D; nums[i] </li>
<li>i + j &lt; n</li>
</ul>
<p>返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: nums &#x3D; [2,3,1,1,4]<br>输出: 2<br>解释: 跳到最后一个位置的最小跳跃数是 2。<br>    从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: nums &#x3D; [2,3,0,1,4]<br>输出: 2</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 1000</li>
<li>题目保证可以到达 nums[n-1]</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_reach = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            max_reach = std::<span class="built_in">max</span>(max_reach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = max_reach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 74.69% 使用 C++ 的用户</p>
<p>内存消耗 : 18.50 MB, 击败 14.62% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">steps</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxReach</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            maxReach = Math.max(maxReach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 99.09% 使用 Java 的用户</p>
<p>内存消耗 : 44.09 MB, 击败 17.59% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        max_reach = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            max_reach = <span class="built_in">max</span>(max_reach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                end = max_reach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> steps</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 97.05% 使用 Python 的用户</p>
<p>内存消耗 : 12.15 MB, 击败 94.93% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        max_reach = <span class="number">0</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            max_reach = <span class="built_in">max</span>(max_reach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                end = max_reach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> steps</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 49 ms, 击败 73.77% 使用 Python3 的用户</p>
<p>内存消耗 : 17.19 MB, 击败 43.74% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max_reach = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        max_reach = max_reach &gt; i + nums[i] ? max_reach : i + nums[i];</span><br><span class="line">        <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">            end = max_reach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 43.78% 使用 C 的用户</p>
<p>内存消耗 : 6.32 MB, 击败 95.87% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Jump</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> maxReach = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            maxReach = Math.Max(maxReach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach;</span><br><span class="line">                ++steps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 85 ms, 击败 74.49% 使用 C# 的用户</p>
<p>内存消耗 : 44.60 MB, 击败 14.29% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxReach = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        maxReach = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxReach, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (i === end) &#123;</span><br><span class="line">            end = maxReach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 63 ms, 击败 72.09% 使用 JavaScript 的用户</p>
<p>内存消耗 : 51.27 MB, 击败 5.23% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jump</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">steps</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxReach</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">end</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        maxReach = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxReach, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (i === end) &#123;</span><br><span class="line">            end = maxReach;</span><br><span class="line">            ++steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 55 ms, 击败 98.51% 使用 TypeScript 的用户</p>
<p>内存消耗 : 52.32 MB, 击败 6.69% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$steps</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$maxReach</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$end</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span> - <span class="number">1</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$maxReach</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$maxReach</span>, <span class="variable">$i</span> + <span class="variable">$nums</span>[<span class="variable">$i</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="variable">$end</span>) &#123;</span><br><span class="line">                <span class="variable">$end</span> = <span class="variable">$maxReach</span>;</span><br><span class="line">                ++<span class="variable">$steps</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$steps</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.84 MB, 击败 24.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">jump</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> steps <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> maxReach <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> end <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n<span class="operator">-</span><span class="number">1</span> &#123;</span><br><span class="line">            maxReach <span class="operator">=</span> <span class="built_in">max</span>(maxReach, i <span class="operator">+</span> nums[i])</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">==</span> end &#123;</span><br><span class="line">                end <span class="operator">=</span> maxReach</span><br><span class="line">                steps <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 27 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 15.43 MB, 击败 29.41% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">jump</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = nums.size</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> steps = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> maxReach = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">            maxReach = maxOf(maxReach, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                end = maxReach</span><br><span class="line">                steps += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 192 ms, 击败 97.10% 使用 Kotlin 的用户</p>
<p>内存消耗 : 38.05 MB, 击败 52.17% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> jump(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> maxReach = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      maxReach = nums[i] + i &gt; maxReach ? nums[i] + i : maxReach;</span><br><span class="line">      <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">        end = maxReach;</span><br><span class="line">        ++steps;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 288 ms, 击败 62.50% 使用 Dart 的用户</p>
<p>内存消耗 : 148.39 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    steps := <span class="number">0</span></span><br><span class="line">    maxReach := <span class="number">0</span></span><br><span class="line">    end := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        maxReach = max(maxReach, i+nums[i])</span><br><span class="line">        <span class="keyword">if</span> i == end &#123;</span><br><span class="line">            end = maxReach</span><br><span class="line">            steps++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 8 ms, 击败 92.06% 使用 Go 的用户</p>
<p>内存消耗 : 5.89 MB, 击败 98.04% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">nums</span>)</span><br><span class="line">  n = nums.length</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  max_reach = <span class="number">0</span></span><br><span class="line">  end_pos = <span class="number">0</span></span><br><span class="line">  (<span class="number">0</span>..n-<span class="number">2</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    max_reach = [max_reach, i + nums[i]].max</span><br><span class="line">    <span class="keyword">if</span> i == end_pos</span><br><span class="line">      end_pos = max_reach</span><br><span class="line">      steps += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  steps</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 57 ms, 击败 85.71% 使用 Ruby 的用户</p>
<p>内存消耗 : 207.21 MB, 击败 71.43% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">jump</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.length</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> steps = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> maxReach = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> endPos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">      maxReach = math.max(maxReach, i + nums(i))</span><br><span class="line">      <span class="keyword">if</span> (i == endPos) &#123;</span><br><span class="line">        endPos = maxReach</span><br><span class="line">        steps += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    steps</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 536 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 55.57 MB, 击败 30.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">jump</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = nums.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">steps</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_reach</span> = <span class="number">0usize</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">end</span> = <span class="number">0usize</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n - <span class="number">1</span> &#123;</span><br><span class="line">            max_reach = max_reach.<span class="title function_ invoke__">max</span>(i + nums[i] <span class="keyword">as</span> <span class="type">usize</span>);</span><br><span class="line">            <span class="keyword">if</span> i == end &#123;</span><br><span class="line">                end = max_reach;</span><br><span class="line">                steps += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        steps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.22 MB, 击败 33.64% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00046.全排列</title>
    <url>/zh-CN/5f34126db307/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,1]<br>输出：[[0,1],[1,0]]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [1]<br>输出：[[1]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 6</li>
<li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li>
<li>nums 中的所有整数 互不相同</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[start], nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, start + <span class="number">1</span>, result);</span><br><span class="line">            <span class="built_in">swap</span>(nums[start], nums[i]);  <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 8.74 MB, 击败 20.97% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; currentPermutation = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backtrack(nums, used, currentPermutation, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">boolean</span>[] used, List&lt;Integer&gt; currentPermutation, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPermutation.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(currentPermutation));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                currentPermutation.add(nums[i]);</span><br><span class="line">                backtrack(nums, used, currentPermutation, result);</span><br><span class="line">                currentPermutation.remove(currentPermutation.size() - <span class="number">1</span>);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 83.32% 使用 Java 的用户</p>
<p>内存消耗 : 43.70 MB, 击败 5.05% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start</span>):</span><br><span class="line">            <span class="keyword">if</span> start == <span class="built_in">len</span>(nums):</span><br><span class="line">                result.append(nums[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(nums)):</span><br><span class="line">                nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">                backtrack(start + <span class="number">1</span>)</span><br><span class="line">                nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">        result = []</span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 67.64% 使用 Python 的用户</p>
<p>内存消耗 : 11.63 MB, 击败 95.42% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start</span>):</span><br><span class="line">            <span class="keyword">if</span> start == <span class="built_in">len</span>(nums):</span><br><span class="line">                result.append(nums[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(nums)):</span><br><span class="line">                nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">                backtrack(start + <span class="number">1</span>)</span><br><span class="line">                nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">        result = []</span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 43 ms, 击败 57.96% 使用 Python3 的用户</p>
<p>内存消耗 : 16.61 MB, 击败 38.86% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize, <span class="type">int</span> start, <span class="type">int</span> ***result, <span class="type">int</span> *resultSize, <span class="type">int</span> **resultColumnSizes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start == numsSize) &#123;</span><br><span class="line">        (*resultSize)++;</span><br><span class="line">        *result = <span class="built_in">realloc</span>(*result, <span class="keyword">sizeof</span>(<span class="type">int</span> *) * (*resultSize));</span><br><span class="line">        (*result)[(*resultSize) - <span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">            (*result)[(*resultSize) - <span class="number">1</span>][i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        (*resultColumnSizes) = <span class="built_in">realloc</span>(*resultColumnSizes, <span class="keyword">sizeof</span>(<span class="type">int</span>) * (*resultSize));</span><br><span class="line">        (*resultColumnSizes)[(*resultSize) - <span class="number">1</span>] = numsSize;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; numsSize; i++) &#123;</span><br><span class="line">        swap(&amp;nums[start], &amp;nums[i]);</span><br><span class="line">        backtrack(nums, numsSize, start + <span class="number">1</span>, result, resultSize, resultColumnSizes);</span><br><span class="line">        swap(&amp;nums[start], &amp;nums[i]);  <span class="comment">// 回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">permute</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="type">int</span> **result = <span class="literal">NULL</span>;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    *returnColumnSizes = <span class="literal">NULL</span>;</span><br><span class="line">    backtrack(nums, numsSize, <span class="number">0</span>, &amp;result, returnSize, returnColumnSizes);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 99.53% 使用 C 的用户</p>
<p>内存消耗 : 15.20 MB, 击败 5.08% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; Permute(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; currentPermutation = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="built_in">bool</span>[] used = <span class="keyword">new</span> <span class="built_in">bool</span>[nums.Length];</span><br><span class="line">        Backtrack(nums, used, currentPermutation, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">bool</span>[] used, List&lt;<span class="built_in">int</span>&gt; currentPermutation, List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPermutation.Count == nums.Length) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(currentPermutation));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                currentPermutation.Add(nums[i]);</span><br><span class="line">                Backtrack(nums, used, currentPermutation, result);</span><br><span class="line">                currentPermutation.RemoveAt(currentPermutation.Count - <span class="number">1</span>);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 111 ms, 击败 55.73% 使用 C# 的用户</p>
<p>内存消耗 : 46.11 MB, 击败 17.71% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> currentPermutation = [];</span><br><span class="line">    <span class="keyword">let</span> used = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">start</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (start === nums.<span class="property">length</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...currentPermutation]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                currentPermutation.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">                <span class="title function_">backtrack</span>(start + <span class="number">1</span>);</span><br><span class="line">                currentPermutation.<span class="title function_">pop</span>();</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 67 ms, 击败 88.42% 使用 JavaScript 的用户</p>
<p>内存消耗 : 53.24 MB, 击败 6.32% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">currentPermutation</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">used</span>: <span class="built_in">boolean</span>[] = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> backtrack = (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start === nums.<span class="property">length</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>([...currentPermutation]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                currentPermutation.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">                <span class="title function_">backtrack</span>(start + <span class="number">1</span>);</span><br><span class="line">                currentPermutation.<span class="title function_">pop</span>();</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backtrack</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 76 ms, 击败 74.55% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.70 MB, 击败 20.45% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">permute</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$currentPermutation</span> = [];</span><br><span class="line">        <span class="variable">$used</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>), <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$nums</span>, <span class="variable">$used</span>, <span class="variable">$currentPermutation</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$nums</span>, &amp;<span class="variable">$used</span>, &amp;<span class="variable">$currentPermutation</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$currentPermutation</span>) === <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>)) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$currentPermutation</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$used</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="variable">$used</span>[<span class="variable">$i</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$currentPermutation</span>[] = <span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$nums</span>, <span class="variable">$used</span>, <span class="variable">$currentPermutation</span>, <span class="variable">$result</span>);</span><br><span class="line">                <span class="title function_ invoke__">array_pop</span>(<span class="variable">$currentPermutation</span>);</span><br><span class="line">                <span class="variable">$used</span>[<span class="variable">$i</span>] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 14.29% 使用 PHP 的用户</p>
<p>内存消耗 : 20.39 MB, 击败 19.05% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">permute</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [[<span class="type">Int</span>]] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> currentPermutation: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">var</span> used: [<span class="type">Bool</span>] <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="literal">false</span>, count: nums.count)</span><br><span class="line">        backtrack(nums, <span class="operator">&amp;</span>used, <span class="operator">&amp;</span>currentPermutation, <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">used</span>: <span class="keyword">inout</span> [<span class="type">Bool</span>], <span class="keyword">_</span> <span class="params">currentPermutation</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">result</span>: <span class="keyword">inout</span> [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> currentPermutation.count <span class="operator">==</span> nums.count &#123;</span><br><span class="line">            result.append(currentPermutation)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>used[i] &#123;</span><br><span class="line">                used[i] <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                currentPermutation.append(nums[i])</span><br><span class="line">                backtrack(nums, <span class="operator">&amp;</span>used, <span class="operator">&amp;</span>currentPermutation, <span class="operator">&amp;</span>result)</span><br><span class="line">                currentPermutation.removeLast()</span><br><span class="line">                used[i] <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 8.55% 使用 Swift 的用户</p>
<p>内存消耗 : 15.90 MB, 击败 5.13% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">permute</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result: MutableList&lt;MutableList&lt;<span class="built_in">Int</span>&gt;&gt; = mutableListOf()</span><br><span class="line">        <span class="keyword">val</span> currentPermutation: MutableList&lt;<span class="built_in">Int</span>&gt; = mutableListOf()</span><br><span class="line">        <span class="keyword">val</span> used: BooleanArray = BooleanArray(nums.size)</span><br><span class="line">        backtrack(nums, used, currentPermutation, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(nums: <span class="type">IntArray</span>, used: <span class="type">BooleanArray</span>, currentPermutation: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, result: <span class="type">MutableList</span>&lt;<span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPermutation.size == nums.size) &#123;</span><br><span class="line">            result.add(ArrayList(currentPermutation))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span></span><br><span class="line">                currentPermutation.add(nums[i])</span><br><span class="line">                backtrack(nums, used, currentPermutation, result)</span><br><span class="line">                currentPermutation.removeAt(currentPermutation.size - <span class="number">1</span>)</span><br><span class="line">                used[i] = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 172 ms, 击败 98.86% 使用 Kotlin 的用户</p>
<p>内存消耗 : 36.45 MB, 击败 96.59% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; permute(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; currentPermutation = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt; used = <span class="built_in">List</span>.filled(nums.length, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">void</span> backtrack() &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentPermutation.length == nums.length) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>.from(currentPermutation));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">          used[i] = <span class="keyword">true</span>;</span><br><span class="line">          currentPermutation.add(nums[i]);</span><br><span class="line">          backtrack();</span><br><span class="line">          currentPermutation.removeLast();</span><br><span class="line">          used[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 281 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 143.52 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	result := [][]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	currentPermutation := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">	used := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">	<span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	backtrack = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(currentPermutation) == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">			temp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">			<span class="built_in">copy</span>(temp, currentPermutation)</span><br><span class="line">			result = <span class="built_in">append</span>(result, temp)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> !used[i] &#123;</span><br><span class="line">				used[i] = <span class="literal">true</span></span><br><span class="line">				currentPermutation = <span class="built_in">append</span>(currentPermutation, nums[i])</span><br><span class="line">				backtrack()</span><br><span class="line">				currentPermutation = currentPermutation[:<span class="built_in">len</span>(currentPermutation)<span class="number">-1</span>]</span><br><span class="line">				used[i] = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	backtrack()</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.48 MB, 击败 88.20% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums</span>)</span><br><span class="line">  result = []</span><br><span class="line">  current_permutation = []</span><br><span class="line">  used = <span class="title class_">Array</span>.new(nums.length, <span class="literal">false</span>)</span><br><span class="line">  backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> current_permutation.length == nums.length</span><br><span class="line">      result &lt;&lt; current_permutation.dup</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    nums.each_with_index <span class="keyword">do</span> |<span class="params">num, i</span>|</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> used[i]</span><br><span class="line">      used[i] = <span class="literal">true</span></span><br><span class="line">      current_permutation &lt;&lt; num</span><br><span class="line">      backtrack.call</span><br><span class="line">      current_permutation.pop</span><br><span class="line">      used[i] = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  backtrack.call</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 83 ms, 击败 22.22% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.71 MB, 击败 11.11% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">permute</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> currentPermutation: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">var</span> used: <span class="type">Array</span>[<span class="type">Boolean</span>] = <span class="type">Array</span>.fill[<span class="type">Boolean</span>](nums.length)(<span class="literal">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentPermutation.length == nums.length) &#123;</span><br><span class="line">        result = result :+ currentPermutation</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- nums.indices) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used(i)) &#123;</span><br><span class="line">          used(i) = <span class="literal">true</span></span><br><span class="line">          currentPermutation = currentPermutation :+ nums(i)</span><br><span class="line">          backtrack()</span><br><span class="line">          currentPermutation = currentPermutation.init</span><br><span class="line">          used(i) = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack()</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 516 ms, 击败 66.67% 使用 Scala 的用户</p>
<p>内存消耗 : 57.46 MB, 击败 16.67% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">permute</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current_permutation</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">used</span> = <span class="built_in">vec!</span>[<span class="literal">false</span>; nums.<span class="title function_ invoke__">len</span>()];</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(</span><br><span class="line">            nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            used: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;,</span><br><span class="line">            current_permutation: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">            result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;,</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">if</span> current_permutation.<span class="title function_ invoke__">len</span>() == nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(current_permutation.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> !used[i] &#123;</span><br><span class="line">                    used[i] = <span class="literal">true</span>;</span><br><span class="line">                    current_permutation.<span class="title function_ invoke__">push</span>(nums[i]);</span><br><span class="line">                    <span class="title function_ invoke__">backtrack</span>(nums, used, current_permutation, result);</span><br><span class="line">                    current_permutation.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                    used[i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(&amp;nums, &amp;<span class="keyword">mut</span> used, &amp;<span class="keyword">mut</span> current_permutation, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.11 MB, 击败 61.80% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-spec</span> permute<span class="params">([integer()])</span> -&gt; [[integer<span class="params">()</span>]].</span><br><span class="line"><span class="function"><span class="title">permute</span><span class="params">(Nums)</span> -&gt;</span></span><br><span class="line">    backtrack(Nums, []).</span><br><span class="line"><span class="function"><span class="title">backtrack</span><span class="params">([], Perms)</span> -&gt;</span></span><br><span class="line">    [Perms];</span><br><span class="line"><span class="function"><span class="title">backtrack</span><span class="params">(Nums, Perms)</span> -&gt;</span></span><br><span class="line">    lists:flatmap(<span class="keyword">fun</span>(Elem) -&gt;</span><br><span class="line">        NewPerms = Perms ++ [Elem],</span><br><span class="line">        NewNums = lists:delete(Elem, Nums),</span><br><span class="line">        backtrack(NewNums, NewPerms)</span><br><span class="line">    <span class="keyword">end</span>, Nums).</span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 203 ms, 击败 100.00% 使用 Erlang 的用户</p>
<p>内存消耗 : 55.70 MB, 击败 100.00% 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> permute(nums :: [integer]) :: [[integer]]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">permute</span></span>(nums) <span class="keyword">do</span></span><br><span class="line">    backtrack(nums, [])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">backtrack</span></span>([], perms) <span class="keyword">do</span></span><br><span class="line">    [perms]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">backtrack</span></span>(nums, perms) <span class="keyword">do</span></span><br><span class="line">    <span class="title class_">Enum</span>.flat_map(nums, <span class="keyword">fn</span> elem -&gt;</span><br><span class="line">      new_perms = perms ++ [elem]</span><br><span class="line">      new_nums = <span class="title class_">Enum</span>.filter(nums, &amp;(&amp;<span class="number">1</span> != elem))</span><br><span class="line">      backtrack(new_nums, new_perms)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 281 ms, 击败 -% 使用 Elixir 的用户</p>
<p>内存消耗 : 68.01 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>雨水</title>
    <url>/zh-CN/089c21ef9821/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>雨水</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/089c21ef9821/202002190001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>雨水</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00047.全排列 II</title>
    <url>/zh-CN/adda12a0e2b4/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个可包含重复数字的序列 nums ，<em>按任意顺序</em> 返回所有不重复的全排列。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,1,2]<br>输出：<br>[[1,1,2],<br>[1,2,1],<br>[2,1,1]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 8</li>
<li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, used, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">bool</span>&gt;&amp; used, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, used, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 90.72% 使用 C++ 的用户</p>
<p>内存消耗 : 10.72 MB, 击败 29.84% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backtrack(nums, used, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">boolean</span>[] used, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtrack(nums, used, path, result);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 99.84% 使用 Java 的用户</p>
<p>内存消耗 : 43.82 MB, 击败 25.69% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        self.backtrack(nums, used, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">self, nums, used, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> used[i] <span class="keyword">or</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i - <span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            self.backtrack(nums, used, path, result)</span><br><span class="line">            path.pop()</span><br><span class="line">            used[i] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 28 ms, 击败 70.21% 使用 Python 的用户</p>
<p>内存消耗 : 11.70 MB, 击败 98.38% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        self.backtrack(nums, used, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">self, nums, used, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> used[i] <span class="keyword">or</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i - <span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            self.backtrack(nums, used, path, result)</span><br><span class="line">            path.pop()</span><br><span class="line">            used[i] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 39 ms, 击败 93.93% 使用 Python3 的用户</p>
<p>内存消耗 : 16.72 MB, 击败 37.36% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numSize, <span class="type">int</span>** ans, <span class="type">int</span>* ansSize, <span class="type">int</span> idx, <span class="type">int</span>* perm, <span class="type">int</span>* used)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (idx == numSize) &#123;</span><br><span class="line">        <span class="type">int</span>* tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numSize);</span><br><span class="line">        <span class="built_in">memcpy</span>(tmp, perm, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numSize);</span><br><span class="line">        ans[(*ansSize)++] = tmp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        perm[idx] = nums[i];</span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">        backtrack(nums, numSize, ans, ansSize, idx + <span class="number">1</span>, perm, used);</span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="type">int</span>** ans = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * <span class="number">2001</span>);</span><br><span class="line">    <span class="type">int</span>* perm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2001</span>);</span><br><span class="line">    <span class="type">int</span>* used = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    backtrack(nums, numsSize, ans, returnSize, <span class="number">0</span>, perm, used);</span><br><span class="line">    *returnColumnSizes = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (*returnSize));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *returnSize; i++) &#123;</span><br><span class="line">        (*returnColumnSizes)[i] = numsSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(used);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 20 ms, 击败 95.75% 使用 C 的用户</p>
<p>内存消耗 : 9.37 MB, 击败 93.46% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; PermuteUnique(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">        Array.Sort(nums);</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">        IList&lt;<span class="built_in">int</span>&gt; path = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="built_in">bool</span>[] used = <span class="keyword">new</span> <span class="built_in">bool</span>[nums.Length];</span><br><span class="line">        Backtrack(nums, used, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Backtrack</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">bool</span>[] used, IList&lt;<span class="built_in">int</span>&gt; path, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.Count == nums.Length) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            path.Add(nums[i]);</span><br><span class="line">            Backtrack(nums, used, path, result);</span><br><span class="line">            path.RemoveAt(path.Count - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 101 ms, 击败 89.89% 使用 C# 的用户</p>
<p>内存消耗 : 48.13 MB, 击败 40.45% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permuteUnique = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> path = [];</span><br><span class="line">    <span class="keyword">const</span> used = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">backtrack</span>(nums, used, path, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">nums, used, path, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">length</span> === nums.<span class="property">length</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>([...path]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        path.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">        <span class="title function_">backtrack</span>(nums, used, path, result);</span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 67.66% 使用 JavaScript 的用户</p>
<p>内存消耗 : 52.87 MB, 击败 19.25% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permuteUnique</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">path</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">used</span>: <span class="built_in">boolean</span>[] = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">backtrack</span>(nums, used, path, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">nums: <span class="built_in">number</span>[], used: <span class="built_in">boolean</span>[], path: <span class="built_in">number</span>[], result: <span class="built_in">number</span>[][]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">length</span> === nums.<span class="property">length</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>([...path]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        path.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">        <span class="title function_">backtrack</span>(nums, used, path, result);</span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 70 ms, 击败 93.66% 使用 TypeScript 的用户</p>
<p>内存消耗 : 54.05 MB, 击败 28.87% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">permuteUnique</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$path</span> = [];</span><br><span class="line">        <span class="variable">$used</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>), <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$nums</span>, <span class="variable">$used</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params"><span class="variable">$nums</span>, &amp;<span class="variable">$used</span>, &amp;<span class="variable">$path</span>, &amp;<span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$path</span>) === <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>)) &#123;</span><br><span class="line">            <span class="variable">$result</span>[] = <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$used</span>[<span class="variable">$i</span>] || (<span class="variable">$i</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$i</span>] === <span class="variable">$nums</span>[<span class="variable">$i</span> - <span class="number">1</span>] &amp;&amp; !<span class="variable">$used</span>[<span class="variable">$i</span> - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$used</span>[<span class="variable">$i</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$path</span>[] = <span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backtrack</span>(<span class="variable">$nums</span>, <span class="variable">$used</span>, <span class="variable">$path</span>, <span class="variable">$result</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$path</span>);</span><br><span class="line">            <span class="variable">$used</span>[<span class="variable">$i</span>] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 94.44% 使用 PHP 的用户</p>
<p>内存消耗 : 20.77 MB, 击败 5.55% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">permuteUnique</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> nums <span class="operator">=</span> nums.sorted()</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">var</span> used <span class="operator">=</span> [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, count: nums.count)</span><br><span class="line">        backtrack(nums: <span class="operator">&amp;</span>nums, used: <span class="operator">&amp;</span>used, path: <span class="operator">&amp;</span>path, result: <span class="operator">&amp;</span>result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">backtrack</span>(<span class="params">nums</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="params">used</span>: <span class="keyword">inout</span> [<span class="type">Bool</span>], <span class="params">path</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="params">result</span>: <span class="keyword">inout</span> [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> path.count <span class="operator">==</span> nums.count &#123;</span><br><span class="line">            result.append(<span class="type">Array</span>(path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>nums.count &#123;</span><br><span class="line">            <span class="keyword">if</span> used[i] <span class="operator">||</span> (i <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> nums[i] <span class="operator">==</span> nums[i <span class="operator">-</span> <span class="number">1</span>] <span class="operator">&amp;&amp;</span> <span class="operator">!</span>used[i <span class="operator">-</span> <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            used[i] <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            backtrack(nums: <span class="operator">&amp;</span>nums, used: <span class="operator">&amp;</span>used, path: <span class="operator">&amp;</span>path, result: <span class="operator">&amp;</span>result)</span><br><span class="line">            path.removeLast()</span><br><span class="line">            used[i] <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 16 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 16.30 MB, 击败 5.00% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">permuteUnique</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> path = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> used = BooleanArray(nums.size)</span><br><span class="line">        nums.sort()</span><br><span class="line">        backtrack(nums, used, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backtrack</span><span class="params">(nums: <span class="type">IntArray</span>, used: <span class="type">BooleanArray</span>, path: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, result: <span class="type">MutableList</span>&lt;<span class="type">List</span>&lt;<span class="type">Int</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.size == nums.size) &#123;</span><br><span class="line">            result.add(path.toList())</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span></span><br><span class="line">            path.add(nums[i])</span><br><span class="line">            backtrack(nums, used, path, result)</span><br><span class="line">            path.removeAt(path.size - <span class="number">1</span>)</span><br><span class="line">            used[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 248 ms, 击败 66.67% 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.59 MB, 击败 66.67% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; permuteUnique(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; path = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt; used = <span class="built_in">List</span>.filled(nums.length, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">void</span> backtrack() &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.length == nums.length) &#123;</span><br><span class="line">        result.add([...path]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        used[i] = <span class="keyword">true</span>;</span><br><span class="line">        path.add(nums[i]);</span><br><span class="line">        backtrack();</span><br><span class="line">        path.removeLast();</span><br><span class="line">        used[i] = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 318 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.68 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permuteUnique</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	<span class="keyword">var</span> result [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">	used := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">	<span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	backtrack = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">			result = <span class="built_in">append</span>(result, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; !used[i<span class="number">-1</span>]) &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			used[i] = <span class="literal">true</span></span><br><span class="line">			path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">			backtrack()</span><br><span class="line">			path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">			used[i] = <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	backtrack()</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 62.79% 使用 Go 的用户</p>
<p>内存消耗 : 3.52 MB, 击败 96.43% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute_unique</span>(<span class="params">nums</span>)</span><br><span class="line">  nums.sort!</span><br><span class="line">  result = []</span><br><span class="line">  path = []</span><br><span class="line">  used = <span class="title class_">Array</span>.new(nums.length, <span class="literal">false</span>)</span><br><span class="line">  backtrack = <span class="built_in">lambda</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> path.length == nums.length</span><br><span class="line">      result.push(path.dup)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    nums.each_with_index <span class="keyword">do</span> |<span class="params">num, i</span>|</span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> used[i] |<span class="params"></span>| (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])</span><br><span class="line">      used[i] = <span class="literal">true</span></span><br><span class="line">      path.push(num)</span><br><span class="line">      backtrack.call</span><br><span class="line">      path.pop</span><br><span class="line">      used[i] = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  backtrack.call</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 84 ms, 击败 80.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.89 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dfs</span></span>(curres: <span class="type">Stack</span>[<span class="type">Int</span>], nums: <span class="type">Array</span>[<span class="type">Int</span>], states: <span class="type">Array</span>[<span class="type">Boolean</span>], res: <span class="type">ArrayBuffer</span>[<span class="type">List</span>[<span class="type">Int</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (curres.length == nums.length) &#123;</span><br><span class="line">      res.append(curres.toList)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> used = <span class="type">Set</span>[<span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until nums.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (states(i) &amp;&amp; !used(nums(i))) &#123;</span><br><span class="line">        curres.push(nums(i))</span><br><span class="line">        states(i) = <span class="literal">false</span></span><br><span class="line">        dfs(curres, nums, states, res)</span><br><span class="line">        curres.pop()</span><br><span class="line">        states(i) = <span class="literal">true</span></span><br><span class="line">        used += nums(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> states = <span class="type">Array</span>.fill(nums.length)(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">val</span> res = <span class="type">ArrayBuffer</span>[<span class="type">List</span>[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">val</span> curres = <span class="type">Stack</span>[<span class="type">Int</span>]()</span><br><span class="line">    dfs(curres, nums.sorted, states, res)</span><br><span class="line">    res.toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 544 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 57.75 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">permute_unique</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">path</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">used</span> = <span class="built_in">vec!</span>[<span class="literal">false</span>; nums.<span class="title function_ invoke__">len</span>()];</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">backtrack</span>(nums: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, used: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;, path: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;) &#123;</span><br><span class="line">            <span class="keyword">if</span> path.<span class="title function_ invoke__">len</span>() == nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(path.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">prev_used</span> = <span class="literal">None</span>;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..nums.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> used[i] || <span class="title function_ invoke__">Some</span>(nums[i]) == prev_used &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev_used = <span class="title function_ invoke__">Some</span>(nums[i]);</span><br><span class="line">                path.<span class="title function_ invoke__">push</span>(nums[i]);</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="title function_ invoke__">backtrack</span>(nums, used, path, result);</span><br><span class="line">                path.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">nums_sorted</span> = nums.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        nums_sorted.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">        <span class="title function_ invoke__">backtrack</span>(&amp;nums_sorted, &amp;<span class="keyword">mut</span> used, &amp;<span class="keyword">mut</span> path, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 47.37% 使用 Rust 的用户</p>
<p>内存消耗 : 2.14 MB, 击败 55.26% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00048.旋转图像</title>
    <url>/zh-CN/68ba603aaff7/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>
<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2>

<blockquote>
<p>输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[[7,4,1],[8,5,2],[9,6,3]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2>

<blockquote>
<p>输入：matrix &#x3D; [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]<br>输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>n &#x3D;&#x3D; matrix.length &#x3D;&#x3D; matrix[i].length</li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 20</li>
<li>-1000 &lt;&#x3D; matrix[i][j] &lt;&#x3D; 1000</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][j], matrix[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(matrix[i].<span class="built_in">begin</span>(), matrix[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 8.52 MB, 击败 12.36% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">                matrix[i][n - <span class="number">1</span> - j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.23 MB, 击败 14.96% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, matrix</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            matrix[i].reverse()</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 39.91% 使用 Python 的用户</p>
<p>内存消耗 : 11.35 MB, 击败 98.01% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            matrix[i].reverse()</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 35 ms, 击败 85.58% 使用 Python3 的用户</p>
<p>内存消耗 : 16.36 MB, 击败 46.87% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>** matrix, <span class="type">int</span> matrixSize, <span class="type">int</span>* matrixColSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = matrixSize;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[j][i];</span><br><span class="line">            matrix[j][i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">            matrix[i][n - <span class="number">1</span> - j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C 的用户</p>
<p>内存消耗 : 6.14 MB, 击败 84.61% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rotate</span>(<span class="params"><span class="built_in">int</span>[][] matrix</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = matrix.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="built_in">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            Array.Reverse(matrix[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 104 ms, 击败 73.95% 使用 C# 的用户</p>
<p>内存消耗 : 45.74 MB, 击败 6.72% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">matrix</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rotate = <span class="keyword">function</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = matrix.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        matrix[i].<span class="title function_">reverse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 50 ms, 击败 94.94% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.44 MB, 击败 13.07% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = matrix.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        matrix[i].<span class="title function_">reverse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 100.00% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.76 MB, 击败 7.02% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[][] $matrix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rotate</span>(<span class="params">&amp;<span class="variable">$matrix</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrix</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span> + <span class="number">1</span>; <span class="variable">$j</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">                [<span class="variable">$matrix</span>[<span class="variable">$i</span>][<span class="variable">$j</span>], <span class="variable">$matrix</span>[<span class="variable">$j</span>][<span class="variable">$i</span>]] = [<span class="variable">$matrix</span>[<span class="variable">$j</span>][<span class="variable">$i</span>], <span class="variable">$matrix</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$matrix</span>[<span class="variable">$i</span>] = <span class="title function_ invoke__">array_reverse</span>(<span class="variable">$matrix</span>[<span class="variable">$i</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 25.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.14 MB, 击败 5.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">rotate</span>(<span class="keyword">_</span> <span class="params">matrix</span>: <span class="keyword">inout</span> [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> matrix.count</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i<span class="operator">+</span><span class="number">1</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">                (matrix[i][j], matrix[j][i]) <span class="operator">=</span> (matrix[j][i], matrix[i][j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            matrix[i].reverse()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 78.82% 使用 Swift 的用户</p>
<p>内存消耗 : 15.69 MB, 击败 5.88% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">rotate</span><span class="params">(matrix: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = matrix.size</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until n) &#123;</span><br><span class="line">                matrix[i][j] = matrix[j][i].also &#123; matrix[j][i] = matrix[i][j] &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            matrix[i].reverse()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 206 ms, 击败 8.33% 使用 Kotlin 的用户</p>
<p>内存消耗 : 37.55 MB, 击败 6.25% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> rotate(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; matrix) &#123;</span><br><span class="line">    <span class="keyword">final</span> n = matrix.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">final</span> temp = matrix[i][j];</span><br><span class="line">        matrix[i][j] = matrix[j][i];</span><br><span class="line">        matrix[j][i] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      matrix[i] = <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;.from(matrix[i].reversed);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 299 ms, 击败 -% 使用 Dart 的用户</p>
<p>内存消耗 : 144.31 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(matrix)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; n; j++ &#123;</span><br><span class="line">            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j, k := <span class="number">0</span>, n<span class="number">-1</span>; j &lt; k; j, k = j+<span class="number">1</span>, k<span class="number">-1</span> &#123;</span><br><span class="line">            matrix[i][j], matrix[i][k] = matrix[i][k], matrix[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 2.11 MB, 击败 16.92% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[][]&#125; matrix</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">matrix</span>)</span><br><span class="line">  n = matrix.length</span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">    (i + <span class="number">1</span>...n).each <span class="keyword">do</span> |<span class="params">j</span>|</span><br><span class="line">      matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  matrix.each &#123; |<span class="params">row</span>| row.reverse! &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 41 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.51 MB, 击败 50.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rotate</span></span>(matrix: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = matrix.length</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- i + <span class="number">1</span> until n) &#123;</span><br><span class="line">        <span class="keyword">val</span> temp = matrix(i)(j)</span><br><span class="line">        matrix(i)(j) = matrix(j)(i)</span><br><span class="line">        matrix(j)(i) = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      matrix(i) = matrix(i).reverse</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> matrix = <span class="type">Array</span>(</span><br><span class="line">      <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">      <span class="type">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">      <span class="type">Array</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">    )</span><br><span class="line">    rotate(matrix)</span><br><span class="line">    <span class="keyword">for</span> (row &lt;- matrix) &#123;</span><br><span class="line">      println(row.mkString(<span class="string">&quot;, &quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 464 ms, 击败 88.89% 使用 Scala 的用户</p>
<p>内存消耗 : 54.36 MB, 击败 22.22% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">rotate</span>(matrix: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = matrix.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> i + <span class="number">1</span>..n &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">temp</span> = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> matrix.<span class="title function_ invoke__">iter_mut</span>() &#123;</span><br><span class="line">            row.<span class="title function_ invoke__">reverse</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.23 MB, 击败 16.67% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00049.字母异位词分组</title>
    <url>/zh-CN/9453a0ee5ccb/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p>
<p>字母异位词 是由重新排列源单词的所有字母得到的一个新单词。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br>输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入: strs &#x3D; [“”]<br>输出: [[“”]]</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: strs &#x3D; [“a”]<br>输出: [[“a”]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; strs.length &lt;&#x3D; 10^4$</li>
<li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 100</li>
<li>strs[i] 仅包含小写字母</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; anagrams_dict;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; word : strs) &#123;</span><br><span class="line">            string sorted_word = word;</span><br><span class="line">            <span class="built_in">sort</span>(sorted_word.<span class="built_in">begin</span>(), sorted_word.<span class="built_in">end</span>());</span><br><span class="line">            anagrams_dict[sorted_word].<span class="built_in">push_back</span>(word);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; entry : anagrams_dict) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(entry.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 18 ms, 击败 98.21% 使用 C++ 的用户</p>
<p>内存消耗 : 22.84 MB, 击败 18.42% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; anagramsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] charArray = word.toCharArray();</span><br><span class="line">            Arrays.sort(charArray);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sortedWord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line">            anagramsMap.computeIfAbsent(sortedWord, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(anagramsMap.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 89.04% 使用 Java 的用户</p>
<p>内存消耗 : 46.59 MB, 击败 24.25% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupAnagrams</span>(<span class="params">self, strs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        anagrams_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> strs:</span><br><span class="line">            sorted_word = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(word))</span><br><span class="line">            anagrams_dict[sorted_word].append(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(anagrams_dict.values())</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 47 ms, 击败 46.09% 使用 Python 的用户</p>
<p>内存消耗 : 15.33 MB, 击败 94.22% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupAnagrams</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        anagrams_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> strs:</span><br><span class="line">            sorted_word = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(word))</span><br><span class="line">            anagrams_dict[sorted_word].append(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(anagrams_dict.values())</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 : 19.39 MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STRING_LENGTH 102</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> key[MAX_STRING_LENGTH];</span><br><span class="line">    <span class="type">int</span> index[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> resultIndex;</span><br><span class="line">    UT_hash_handle hh;</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareChars</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">char</span>*)a - *(<span class="type">char</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>*** <span class="title function_">groupAnagrams</span><span class="params">(<span class="type">char</span>** strs, <span class="type">int</span> strsSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        *returnSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* hashTable = <span class="literal">NULL</span>;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strsSize; i++) &#123;</span><br><span class="line">        <span class="type">char</span>* sortedStr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (<span class="built_in">strlen</span>(strs[i]) + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(sortedStr, strs[i]);</span><br><span class="line">        qsort(sortedStr, <span class="built_in">strlen</span>(sortedStr), <span class="keyword">sizeof</span>(<span class="type">char</span>), compareChars);</span><br><span class="line">        Node* currentNode = <span class="literal">NULL</span>;</span><br><span class="line">        HASH_FIND_STR(hashTable, sortedStr, currentNode);</span><br><span class="line">        <span class="keyword">if</span> (currentNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            currentNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">            <span class="built_in">strcpy</span>(currentNode-&gt;key, sortedStr);</span><br><span class="line">            currentNode-&gt;count = <span class="number">0</span>;</span><br><span class="line">            currentNode-&gt;resultIndex = (*returnSize)++;</span><br><span class="line">            currentNode-&gt;index[(currentNode-&gt;count)++] = i;</span><br><span class="line">            HASH_ADD_STR(hashTable, key, currentNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentNode-&gt;index[(currentNode-&gt;count)++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(sortedStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>*** result = (<span class="type">char</span>***)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>**) * (*returnSize));</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (*returnSize));</span><br><span class="line">    Node *currentNode, *tempNode;</span><br><span class="line">    HASH_ITER(hh, hashTable, currentNode, tempNode) &#123;</span><br><span class="line">        result[currentNode-&gt;resultIndex] = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * (currentNode-&gt;count));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; currentNode-&gt;count; j++) &#123;</span><br><span class="line">            result[currentNode-&gt;resultIndex][j] = strdup(strs[currentNode-&gt;index[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">        (*returnColumnSizes)[currentNode-&gt;resultIndex] = currentNode-&gt;count;</span><br><span class="line">        HASH_DEL(hashTable, currentNode);</span><br><span class="line">        <span class="built_in">free</span>(currentNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 59 ms, 击败 64.66% 使用 C 的用户</p>
<p>内存消耗 : 26.71 MB, 击败 69.77% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; GroupAnagrams(<span class="built_in">string</span>[] strs) &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt; anagramGroups = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> str <span class="keyword">in</span> strs) &#123;</span><br><span class="line">            <span class="built_in">char</span>[] charArray = str.ToCharArray();</span><br><span class="line">            Array.Sort(charArray);</span><br><span class="line">            <span class="built_in">string</span> sortedStr = <span class="keyword">new</span> <span class="built_in">string</span>(charArray);</span><br><span class="line">            <span class="keyword">if</span> (!anagramGroups.ContainsKey(sortedStr)) &#123;</span><br><span class="line">                anagramGroups[sortedStr] = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            anagramGroups[sortedStr].Add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt;(anagramGroups.Values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 154 ms, 击败 82.85% 使用 C# 的用户</p>
<p>内存消耗 : 72.99 MB, 击败 16.95% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> anagramGroups = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">const</span> sortedStr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!anagramGroups[sortedStr]) &#123;</span><br><span class="line">            anagramGroups[sortedStr] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        anagramGroups[sortedStr].<span class="title function_">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(anagramGroups);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 112 ms, 击败 58.19% 使用 JavaScript 的用户</p>
<p>内存消耗 : 63.09 MB, 击败 5.02% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">groupAnagrams</span>(<span class="params">strs: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span>[][] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">anagramGroups</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>[] &#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">const</span> sortedStr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!anagramGroups[sortedStr]) &#123;</span><br><span class="line">            anagramGroups[sortedStr] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        anagramGroups[sortedStr].<span class="title function_">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(anagramGroups);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 108 ms, 击败 79.49% 使用 TypeScript 的用户</p>
<p>内存消耗 : 63.50 MB, 击败 5.08% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String[] $strs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">groupAnagrams</span>(<span class="params"><span class="variable">$strs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$anagramGroups</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$strs</span> <span class="keyword">as</span> <span class="variable">$str</span>) &#123;</span><br><span class="line">            <span class="variable">$sortedStr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sortString</span>(<span class="variable">$str</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$anagramGroups</span>[<span class="variable">$sortedStr</span>])) &#123;</span><br><span class="line">                <span class="variable">$anagramGroups</span>[<span class="variable">$sortedStr</span>] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$anagramGroups</span>[<span class="variable">$sortedStr</span>][] = <span class="variable">$str</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">array_values</span>(<span class="variable">$anagramGroups</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sortString</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$charArray</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>);</span><br><span class="line">        <span class="title function_ invoke__">sort</span>(<span class="variable">$charArray</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$charArray</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 25 ms, 击败 84.62% 使用 PHP 的用户</p>
<p>内存消耗 : 24.56 MB, 击败 68.27% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">groupAnagrams</span>(<span class="keyword">_</span> <span class="params">strs</span>: [<span class="type">String</span>]) -&gt; [[<span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> anagramGroups: [<span class="type">String</span>: [<span class="type">String</span>]] <span class="operator">=</span> [:]</span><br><span class="line">        <span class="keyword">for</span> str <span class="keyword">in</span> strs &#123;</span><br><span class="line">            <span class="keyword">let</span> sortedStr <span class="operator">=</span> <span class="type">String</span>(str.sorted())</span><br><span class="line">            <span class="keyword">if</span> anagramGroups[sortedStr] <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                anagramGroups[sortedStr] <span class="operator">=</span> []</span><br><span class="line">            &#125;</span><br><span class="line">            anagramGroups[sortedStr]<span class="operator">?</span>.append(str)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(anagramGroups.values)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 96.37% 使用 Swift 的用户</p>
<p>内存消耗 : 18.21 MB, 击败 11.92% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">groupAnagrams</span><span class="params">(strs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: List&lt;List&lt;String&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> strs.groupBy &#123; it.toCharArray().sorted().joinToString(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">            .values</span><br><span class="line">            .toList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 342 ms, 击败 50.00% 使用 Kotlin 的用户</p>
<p>内存消耗 : 46.57 MB, 击败 15.45% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; groupAnagrams(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strs) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; anagramGroups = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> str <span class="keyword">in</span> strs) &#123;</span><br><span class="line">      <span class="built_in">String</span> sortedStr = <span class="built_in">String</span>.fromCharCodes(str.runes.toList()..sort());</span><br><span class="line">      <span class="keyword">if</span> (anagramGroups.containsKey(sortedStr)) &#123;</span><br><span class="line">        anagramGroups[sortedStr]!.add(str);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        anagramGroups[sortedStr] = [str];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anagramGroups.values.toList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 335 ms, 击败 82.61% 使用 Dart 的用户</p>
<p>内存消耗 : 149.44 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="type">string</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line">    anagramGroups := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, str := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        sortedStr := sortString(str)</span><br><span class="line">        <span class="keyword">if</span> _, ok := anagramGroups[sortedStr]; ok &#123;</span><br><span class="line">            anagramGroups[sortedStr] = <span class="built_in">append</span>(anagramGroups[sortedStr], str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            anagramGroups[sortedStr] = []<span class="type">string</span>&#123;str&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result := <span class="built_in">make</span>([][]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(anagramGroups))</span><br><span class="line">    <span class="keyword">for</span> _, group := <span class="keyword">range</span> anagramGroups &#123;</span><br><span class="line">        result = <span class="built_in">append</span>(result, group)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortString</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    charArray := []<span class="type">rune</span>(s)</span><br><span class="line">    sort.Slice(charArray, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> charArray[i] &lt; charArray[j]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(charArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 15 ms, 击败 90.09% 使用 Go 的用户</p>
<p>内存消耗 : 7.60 MB, 击败 65.09% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[][]&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">group_anagrams</span>(<span class="params">strs</span>)</span><br><span class="line">  anagram_groups = &#123;&#125;</span><br><span class="line">  strs.each <span class="keyword">do</span> |<span class="params">str</span>|</span><br><span class="line">    sorted_str = str.chars.sort.join</span><br><span class="line">    <span class="keyword">if</span> anagram_groups.key?(sorted_str)</span><br><span class="line">      anagram_groups[sorted_str] &lt;&lt; str</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      anagram_groups[sorted_str] = [str]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  anagram_groups.values</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 148 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 211.83 MB, 击败 62.50% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span></span>(strs: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">List</span>[<span class="type">List</span>[<span class="type">String</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> anagramGroups = strs.groupBy(str =&gt; str.sorted)</span><br><span class="line">    anagramGroups.values.map(_.toList).toList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 691 ms, 击败 47.06% 使用 Scala 的用户</p>
<p>内存消耗 : 61.43 MB, 击败 17.65% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">group_anagrams</span>(strs: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">anagram_groups</span>: HashMap&lt;<span class="type">String</span>, <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">str</span> <span class="keyword">in</span> strs &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">sorted_str</span> = <span class="title function_ invoke__">sort_string</span>(&amp;<span class="type">str</span>);</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(group) = anagram_groups.<span class="title function_ invoke__">get_mut</span>(&amp;sorted_str) &#123;</span><br><span class="line">                group.<span class="title function_ invoke__">push</span>(<span class="type">str</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                anagram_groups.<span class="title function_ invoke__">insert</span>(sorted_str, <span class="built_in">vec!</span>[<span class="type">str</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        anagram_groups.<span class="title function_ invoke__">values</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">sort_string</span>(s: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">char_array</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">    char_array.<span class="title function_ invoke__">sort</span>();</span><br><span class="line">    char_array.<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">collect</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 91.25% 使用 Rust 的用户</p>
<p>内存消耗 : 4.77 MB, 击败 60.42% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00050.Pow(x, n)</title>
    <url>/zh-CN/a8d09a25dc5a/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，$x^n$ ）。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：x &#x3D; 2.00000, n &#x3D; 10<br>输出：1024.00000</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：x &#x3D; 2.10000, n &#x3D; 3<br>输出：9.26100</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：x &#x3D; 2.00000, n &#x3D; -2<br>输出：0.25000<br>解释：$2^{-2} &#x3D; 1&#x2F;2^2 &#x3D; 1&#x2F;4 &#x3D; 0.25$</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>-100.0 &lt; x &lt; 100.0</li>
<li>$-2^{31} &lt;&#x3D; n &lt;&#x3D; 2^{31}-1$</li>
<li>n 是一个整数</li>
<li>要么 x 不为零，要么 n &gt; 0 。</li>
<li>$-10^4 &lt;&#x3D; xn &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            N = -N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fastPow</span>(x, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">fastPow</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> half_pow = <span class="built_in">fastPow</span>(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> half_pow * half_pow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * half_pow * half_pow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 C++ 的用户</p>
<p>内存消耗 : 7.98 MB, 击败 5.16% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">N</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            N = -N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fastPow(x, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">fastPow</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">halfPow</span> <span class="operator">=</span> fastPow(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> halfPow * halfPow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * halfPow * halfPow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Java 的用户</p>
<p>内存消耗 : 41.63 MB, 击败 14.98% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPow</span>(<span class="params">self, x, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fastPow</span>(<span class="params">x, n</span>):</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            half_pow = fastPow(x, n // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> half_pow * half_pow</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> x * half_pow * half_pow</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            x = <span class="number">1</span> / x</span><br><span class="line">            n = -n</span><br><span class="line">        <span class="keyword">return</span> fastPow(x, n)</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 11 ms, 击败 95.15% 使用 Python 的用户</p>
<p>内存消耗 : 11.53 MB, 击败 83.10% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPow</span>(<span class="params">self, x: <span class="built_in">float</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fastPow</span>(<span class="params">x, n</span>):</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            half_pow = fastPow(x, n // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> half_pow * half_pow</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> x * half_pow * half_pow</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            x = <span class="number">1</span> / x</span><br><span class="line">            n = -n</span><br><span class="line">        <span class="keyword">return</span> fastPow(x, n)</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 37 ms, 击败 73.10% 使用 Python3 的用户</p>
<p>内存消耗 : 16.41 MB, 击败 44.13% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">fastPow</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> <span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> half_pow = fastPow(x, n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> half_pow * half_pow;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * half_pow * half_pow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> N = n;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span> / x;</span><br><span class="line">        N = -N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fastPow(x, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 43.98% 使用 C 的用户</p>
<p>内存消耗 : 5.24 MB, 击败 97.88% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">MyPow</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            N = -N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FastPow(x, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">double</span> <span class="title">FastPow</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">long</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">double</span> halfPow = FastPow(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> halfPow * halfPow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * halfPow * halfPow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 31.82% 使用 C# 的用户</p>
<p>内存消耗 : 27.09 MB, 击败 10.60% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="keyword">function</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fastPow</span> = (<span class="params">x, n</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> halfPow = <span class="title function_">fastPow</span>(x, <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> halfPow * halfPow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * halfPow * halfPow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span> / x;</span><br><span class="line">        n = -n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fastPow</span>(x, n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 88.04% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.24 MB, 击败 5.17% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPow</span>(<span class="params">x: <span class="built_in">number</span>, n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fastPow = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">n</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> halfPow = <span class="title function_">fastPow</span>(x, <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> halfPow * halfPow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * halfPow * halfPow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span> / x;</span><br><span class="line">        n = -n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fastPow</span>(x, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 71 ms, 击败 34.78% 使用 TypeScript 的用户</p>
<p>内存消耗 : 51.68 MB, 击败 6.52% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>暂时未解决</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">myPow</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> x <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> x <span class="operator">=</span> x</span><br><span class="line">        <span class="keyword">var</span> n <span class="operator">=</span> n</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            x <span class="operator">=</span> <span class="number">1</span> <span class="operator">/</span> x</span><br><span class="line">            n <span class="operator">=</span> <span class="operator">-</span>n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> fastPow(x, n)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">fastPow</span>(<span class="keyword">_</span> <span class="params">x</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> halfPow <span class="operator">=</span> fastPow(x, n <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> n <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> <span class="operator">?</span> halfPow <span class="operator">*</span> halfPow : halfPow <span class="operator">*</span> halfPow <span class="operator">*</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 69.23% 使用 Swift 的用户</p>
<p>内存消耗 : 15.92 MB, 击败 5.77% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">myPow</span><span class="params">(x: <span class="type">Double</span>, n: <span class="type">Int</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0.0</span> || x == <span class="number">1.0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="number">1</span> / fastPow(x, -n)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fastPow(x, n)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">fastPow</span><span class="params">(x: <span class="type">Double</span>, n: <span class="type">Int</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> halfPow = fastPow(x, n / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            halfPow * halfPow</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            halfPow * halfPow * x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 171 ms, 击败 36.84% 使用 Kotlin 的用户</p>
<p>内存消耗 : 35.70 MB, 击败 5.26% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> myPow(<span class="built_in">double</span> x, <span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0.0</span> || x == <span class="number">1.0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      x = <span class="number">1</span> / x;</span><br><span class="line">      n = -n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fastPow(x, n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">double</span> fastPow(<span class="built_in">double</span> x, <span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">double</span> halfPow = fastPow(x, n ~/ <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? halfPow * halfPow : halfPow * halfPow * x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 283 ms, 击败 40.00% 使用 Dart 的用户</p>
<p>内存消耗 : 147.48 MB, 击败 60.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="type">float64</span>, n <span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x == <span class="number">0.0</span> || x == <span class="number">1.0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">		x = <span class="number">1</span> / x</span><br><span class="line">		n = -n</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fastPow(x, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fastPow</span><span class="params">(x <span class="type">float64</span>, n <span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">	&#125;</span><br><span class="line">	halfPow := fastPow(x, n/<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> halfPow * halfPow</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> halfPow * halfPow * x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Go 的用户</p>
<p>内存消耗 : 1.92 MB, 击败 80.42% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Float&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Float&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_pow</span>(<span class="params">x, n</span>)</span><br><span class="line">  <span class="keyword">return</span> x <span class="keyword">if</span> x == <span class="number">0.0</span> |<span class="params"></span>| x == <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">0</span></span><br><span class="line">    x = <span class="number">1</span> / x</span><br><span class="line">    n = -n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  fast_pow(x, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">x, n</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1.0</span> <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  half_pow = fast_pow(x, n / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">    half_pow * half_pow</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    half_pow * half_pow * x</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 50.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.46 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myPow</span></span>(x: <span class="type">Double</span>, n: <span class="type">Int</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0.0</span> || x == <span class="number">1.0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="number">1</span> / fastPow(x, -n)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fastPow(x, n)</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">fastPow</span></span>(x: <span class="type">Double</span>, n: <span class="type">Int</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> halfPow = fastPow(x, n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      halfPow * halfPow</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      halfPow * halfPow * x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 472 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 52.38 MB, 击败 -% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">my_pow</span>(x: <span class="type">f64</span>, n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0.0</span> || x == <span class="number">1.0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="number">1.0</span> / Solution::<span class="title function_ invoke__">fast_pow</span>(x, -n)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Solution::<span class="title function_ invoke__">fast_pow</span>(x, n)</span><br><span class="line">        &#125;;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fast_pow</span>(x: <span class="type">f64</span>, n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">half_pow</span> = Solution::<span class="title function_ invoke__">fast_pow</span>(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            half_pow * half_pow</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            half_pow * half_pow * x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 0 ms, 击败 100.00% 使用 Rust 的用户</p>
<p>内存消耗 : 2.00 MB, 击败 78.18% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">my-pow</span> x n)</span><br><span class="line">  (<span class="name">-&gt;</span> flonum? exact-integer? flonum?)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> x <span class="number">0.0</span>) (<span class="name"><span class="built_in">=</span></span> x <span class="number">1.0</span>))</span><br><span class="line">      x</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> n <span class="number">0</span>)</span><br><span class="line">          (<span class="name"><span class="built_in">/</span></span> <span class="number">1.0</span> (<span class="name">fast-pow-iter</span> x (<span class="name"><span class="built_in">-</span></span> n) <span class="number">1.0</span>))</span><br><span class="line">          (<span class="name">fast-pow-iter</span> x n <span class="number">1.0</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fast-pow-iter</span> x n result)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      result</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">even?</span></span> n)</span><br><span class="line">          (<span class="name">fast-pow-iter</span> (<span class="name"><span class="built_in">*</span></span> x x) (<span class="name"><span class="built_in">/</span></span> n <span class="number">2</span>) result)</span><br><span class="line">          (<span class="name">fast-pow-iter</span> x (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="built_in">*</span></span> result x)))))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 169 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 97.57 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00051.N 皇后</title>
    <url>/zh-CN/55654bc13130/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p>
<p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p>
<p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/55654bc13130/202002260001.jpg" class="" title="示例1">

<blockquote>
<p>输入：n &#x3D; 4<br>输出：[[“.Q..”,”…Q”,”Q…”,”..Q.”],[“..Q.”,”Q…”,”…Q”,”.Q..”]]<br>解释：如上图所示，4 皇后问题存在两个不同的解法。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 1<br>输出：[[“Q”]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 9</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">current_board</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">solveNQueensRecursive</span>(result, current_board, <span class="number">0</span>, n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveNQueensRecursive</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; result, </span></span></span><br><span class="line"><span class="params"><span class="function">                               vector&lt;string&gt;&amp; current_board, </span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="type">int</span> row, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(current_board);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNotUnderAttack</span>(current_board, row, col, n)) &#123;</span><br><span class="line">                current_board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="built_in">solveNQueensRecursive</span>(result, current_board, row + <span class="number">1</span>, n);</span><br><span class="line">                current_board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isNotUnderAttack</span><span class="params">(<span class="type">const</span> vector&lt;string&gt;&amp; current_board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current_board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; current_board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col + (row - i) &lt; n &amp;&amp; current_board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 55.24% 使用 C++ 的用户</p>
<p>内存消耗 : 9.03 MB, 击败 49.91% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        solveNQueensRecursive(result, board, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">solveNQueensRecursive</span><span class="params">(List&lt;List&lt;String&gt;&gt; result, <span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            result.add(generateBoard(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotUnderAttack(board, row, col, n)) &#123;</span><br><span class="line">                board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                solveNQueensRecursive(result, board, row + <span class="number">1</span>, n);</span><br><span class="line">                board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNotUnderAttack</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">generateBoard</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">String</span>(board[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 89.58% 使用 Java 的用户</p>
<p>内存消耗 : 43.92 MB, 击败 16.22% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_not_under_attack</span>(<span class="params">row, col, queens</span>):</span><br><span class="line">            <span class="keyword">for</span> prev_row, prev_col <span class="keyword">in</span> queens:</span><br><span class="line">                <span class="keyword">if</span> prev_col == col <span class="keyword">or</span> \</span><br><span class="line">                   prev_row - prev_col == row - col <span class="keyword">or</span> \</span><br><span class="line">                   prev_row + prev_col == row + col:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">place_queen</span>(<span class="params">row, queens, result</span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                result.append(queens[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> is_not_under_attack(row, col, queens):</span><br><span class="line">                    queens.append((row, col))</span><br><span class="line">                    place_queen(row + <span class="number">1</span>, queens, result)</span><br><span class="line">                    queens.pop()</span><br><span class="line">        result = []</span><br><span class="line">        place_queen(<span class="number">0</span>, [], result)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">format_solution</span>(<span class="params">queens</span>):</span><br><span class="line">            solution = []</span><br><span class="line">            <span class="keyword">for</span> row, col <span class="keyword">in</span> queens:</span><br><span class="line">                row_str = <span class="string">&#x27;.&#x27;</span> * col + <span class="string">&#x27;Q&#x27;</span> + <span class="string">&#x27;.&#x27;</span> * (n - col - <span class="number">1</span>)</span><br><span class="line">                solution.append(row_str)</span><br><span class="line">            <span class="keyword">return</span> solution</span><br><span class="line">        <span class="keyword">return</span> [format_solution(queens) <span class="keyword">for</span> queens <span class="keyword">in</span> result]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 65.08% 使用 Python 的用户</p>
<p>内存消耗 : 11.82 MB, 击败 78.96% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_not_under_attack</span>(<span class="params">row, col, queens</span>):</span><br><span class="line">            <span class="keyword">for</span> prev_row, prev_col <span class="keyword">in</span> queens:</span><br><span class="line">                <span class="keyword">if</span> prev_col == col <span class="keyword">or</span> \</span><br><span class="line">                   prev_row - prev_col == row - col <span class="keyword">or</span> \</span><br><span class="line">                   prev_row + prev_col == row + col:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">place_queen</span>(<span class="params">row, queens, result</span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                result.append(queens[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> is_not_under_attack(row, col, queens):</span><br><span class="line">                    queens.append((row, col))</span><br><span class="line">                    place_queen(row + <span class="number">1</span>, queens, result)</span><br><span class="line">                    queens.pop()</span><br><span class="line">        result = []</span><br><span class="line">        place_queen(<span class="number">0</span>, [], result)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">format_solution</span>(<span class="params">queens</span>):</span><br><span class="line">            solution = []</span><br><span class="line">            <span class="keyword">for</span> row, col <span class="keyword">in</span> queens:</span><br><span class="line">                row_str = <span class="string">&#x27;.&#x27;</span> * col + <span class="string">&#x27;Q&#x27;</span> + <span class="string">&#x27;.&#x27;</span> * (n - col - <span class="number">1</span>)</span><br><span class="line">                solution.append(row_str)</span><br><span class="line">            <span class="keyword">return</span> solution</span><br><span class="line">        <span class="keyword">return</span> [format_solution(queens) <span class="keyword">for</span> queens <span class="keyword">in</span> result]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 53 ms, 击败 73.96% 使用 Python3 的用户</p>
<p>内存消耗 : 16.84 MB, 击败 46.26% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of arrays of size *returnSize.</span></span><br><span class="line"><span class="comment"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class="line"><span class="comment"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span>*** <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="type">char</span>*** result = (<span class="type">char</span>***)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>**) * <span class="number">1000</span>);</span><br><span class="line">    *returnColumnSizes = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">1000</span>);</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** board = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        board[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    solveNQueensRecursive(result, board, <span class="number">0</span>, n, returnSize, returnColumnSizes);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">solveNQueensRecursive</span><span class="params">(<span class="type">char</span>*** result, <span class="type">char</span>** board, <span class="type">int</span> row, <span class="type">int</span> n, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        result[*returnSize] = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            result[*returnSize][i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>));</span><br><span class="line">            <span class="built_in">strcpy</span>(result[*returnSize][i], board[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        (*returnColumnSizes)[*returnSize] = n;</span><br><span class="line">        (*returnSize)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotUnderAttack(board, row, col, n)) &#123;</span><br><span class="line">            board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            solveNQueensRecursive(result, board, row + <span class="number">1</span>, n, returnSize, returnColumnSizes);</span><br><span class="line">            board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isNotUnderAttack</span><span class="params">(<span class="type">char</span>** board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 21.48% 使用 C 的用户</p>
<p>内存消耗 : 6.90 MB, 击败 89.77% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; SolveNQueens(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">        <span class="built_in">char</span>[,] board = <span class="keyword">new</span> <span class="built_in">char</span>[n, n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                board[i, j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SolveNQueensRecursive(result, board, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SolveNQueensRecursive</span>(<span class="params">IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; result, <span class="built_in">char</span>[,] board, <span class="built_in">int</span> row, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            result.Add(GenerateBoard(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsNotUnderAttack(board, row, col, n)) &#123;</span><br><span class="line">                board[row, col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                SolveNQueensRecursive(result, board, row + <span class="number">1</span>, n);</span><br><span class="line">                board[row, col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsNotUnderAttack</span>(<span class="params"><span class="built_in">char</span>[,] board, <span class="built_in">int</span> row, <span class="built_in">int</span> col, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i, col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i, col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col + (row - i) &lt; n &amp;&amp; board[i, col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">GenerateBoard</span>(<span class="params"><span class="built_in">char</span>[,] board</span>)</span> &#123;</span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; solution = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; board.GetLength(<span class="number">0</span>); i++) &#123;</span><br><span class="line">            StringBuilder rowStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; board.GetLength(<span class="number">1</span>); j++) &#123;</span><br><span class="line">                rowStr.Append(board[i, j]);</span><br><span class="line">            &#125;</span><br><span class="line">            solution.Add(rowStr.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> solution;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 115 ms, 击败 54.84% 使用 C# 的用户</p>
<p>内存消耗 : 52.49 MB, 击败 25.80% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solveNQueens = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> board = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">solveNQueensRecursive</span> = (<span class="params">row</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(board.<span class="title function_">map</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isNotUnderAttack</span>(row, col)) &#123;</span><br><span class="line">                board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="title function_">solveNQueensRecursive</span>(row + <span class="number">1</span>);</span><br><span class="line">                board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isNotUnderAttack</span> = (<span class="params">row, col</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] === <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">                (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] === <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">                (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] === <span class="string">&#x27;Q&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">solveNQueensRecursive</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 68 ms, 击败 89.66% 使用 JavaScript 的用户</p>
<p>内存消耗 : 53.46 MB, 击败 13.59% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solveNQueens</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span>[][] &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">string</span>[][] = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">board</span>: <span class="built_in">string</span>[][] = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> solveNQueensRecursive = (<span class="attr">row</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(board.<span class="title function_">map</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isNotUnderAttack</span>(row, col)) &#123;</span><br><span class="line">                board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="title function_">solveNQueensRecursive</span>(row + <span class="number">1</span>);</span><br><span class="line">                board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> isNotUnderAttack = (<span class="attr">row</span>: <span class="built_in">number</span>, <span class="attr">col</span>: <span class="built_in">number</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] === <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">                (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] === <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">                (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] === <span class="string">&#x27;Q&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">solveNQueensRecursive</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 82 ms, 击败 46.56% 使用 TypeScript 的用户</p>
<p>内存消耗 : 53.47 MB, 击败 35.87% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String[][]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solveNQueens</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="variable">$board</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="variable">$solveNQueensRecursive</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$row</span></span>) <span class="keyword">use</span> (<span class="params">&amp;<span class="variable">$result</span>, &amp;<span class="variable">$board</span>, <span class="variable">$n</span>, &amp;<span class="variable">$solveNQueensRecursive</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$row</span> == <span class="variable">$n</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span>[] = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;implode&#x27;</span>, <span class="variable">$board</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$col</span> = <span class="number">0</span>; <span class="variable">$col</span> &lt; <span class="variable">$n</span>; <span class="variable">$col</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isNotUnderAttack</span>(<span class="variable">$row</span>, <span class="variable">$col</span>, <span class="variable">$board</span>, <span class="variable">$n</span>)) &#123;</span><br><span class="line">                    <span class="variable">$board</span>[<span class="variable">$row</span>][<span class="variable">$col</span>] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                    <span class="variable">$solveNQueensRecursive</span>(<span class="variable">$row</span> + <span class="number">1</span>);</span><br><span class="line">                    <span class="variable">$board</span>[<span class="variable">$row</span>][<span class="variable">$col</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable">$solveNQueensRecursive</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isNotUnderAttack</span>(<span class="params"><span class="variable">$row</span>, <span class="variable">$col</span>, <span class="variable">$board</span>, <span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$row</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$col</span>] === <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">                (<span class="variable">$col</span> - (<span class="variable">$row</span> - <span class="variable">$i</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$col</span> - (<span class="variable">$row</span> - <span class="variable">$i</span>)] === <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">                (<span class="variable">$col</span> + (<span class="variable">$row</span> - <span class="variable">$i</span>) &lt; <span class="variable">$n</span> &amp;&amp; <span class="variable">$board</span>[<span class="variable">$i</span>][<span class="variable">$col</span> + (<span class="variable">$row</span> - <span class="variable">$i</span>)] === <span class="string">&#x27;Q&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 32 ms, 击败 40.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.85 MB, 击败 -% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">solveNQueens</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; [[<span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> [[<span class="type">String</span>]]()</span><br><span class="line">        <span class="keyword">var</span> board <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="string">&quot;.&quot;</span>, count: n), count: n)</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">solveNQueensRecursive</span>(<span class="keyword">_</span> <span class="params">row</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> row <span class="operator">==</span> n &#123;</span><br><span class="line">                result.append(board.map &#123; <span class="variable">$0</span>.joined() &#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">                <span class="keyword">if</span> isNotUnderAttack(row, col) &#123;</span><br><span class="line">                    board[row][col] <span class="operator">=</span> <span class="string">&quot;Q&quot;</span></span><br><span class="line">                    solveNQueensRecursive(row <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">                    board[row][col] <span class="operator">=</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">isNotUnderAttack</span>(<span class="keyword">_</span> <span class="params">row</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">col</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>row &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][col] <span class="operator">==</span> <span class="string">&quot;Q&quot;</span> <span class="operator">||</span></span><br><span class="line">                   (col <span class="operator">-</span> (row <span class="operator">-</span> i) <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> board[i][col <span class="operator">-</span> (row <span class="operator">-</span> i)] <span class="operator">==</span> <span class="string">&quot;Q&quot;</span>) <span class="operator">||</span></span><br><span class="line">                   (col <span class="operator">+</span> (row <span class="operator">-</span> i) <span class="operator">&lt;</span> n <span class="operator">&amp;&amp;</span> board[i][col <span class="operator">+</span> (row <span class="operator">-</span> i)] <span class="operator">==</span> <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        solveNQueensRecursive(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 7 ms, 击败 100.00% 使用 Swift 的用户</p>
<p>内存消耗 : 16.07 MB, 击败 6.98% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solveNQueens</span><span class="params">(n: <span class="type">Int</span>)</span></span>: List&lt;List&lt;String&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;List&lt;String&gt;&gt;()</span><br><span class="line">        <span class="keyword">val</span> board = Array(n) &#123; CharArray(n) &#123; <span class="string">&#x27;.&#x27;</span> &#125; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">isNotUnderAttack</span><span class="params">(row: <span class="type">Int</span>, col: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">                    (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">                    (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">solveNQueensRecursive</span><span class="params">(row: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">                result.add(board.map &#123; it.joinToString(<span class="string">&quot;&quot;</span>) &#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (col <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isNotUnderAttack(row, col)) &#123;</span><br><span class="line">                    board[row][col] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    solveNQueensRecursive(row + <span class="number">1</span>)</span><br><span class="line">                    board[row][col] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        solveNQueensRecursive(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 211 ms, 击败 46.15% 使用 Kotlin 的用户</p>
<p>内存消耗 : 39.71 MB, 击败 30.77% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; solveNQueens(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; result = [];</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; board = <span class="built_in">List</span>.generate(</span><br><span class="line">      n,</span><br><span class="line">      (row) =&gt; <span class="built_in">List</span>.generate(n, (col) =&gt; <span class="string">&#x27;.&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">bool</span> isNotUnderAttack(<span class="built_in">int</span> row, <span class="built_in">int</span> col) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">            (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">            (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> solveNQueensRecursive(<span class="built_in">int</span> row) &#123;</span><br><span class="line">      <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        result.add(<span class="built_in">List</span>.generate(n, (i) =&gt; board[i].join()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotUnderAttack(row, col)) &#123;</span><br><span class="line">          board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">          solveNQueensRecursive(row + <span class="number">1</span>);</span><br><span class="line">          board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solveNQueensRecursive(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 276 ms, 击败 100.00% 使用 Dart 的用户</p>
<p>内存消耗 : 143.24 MB, 击败 100.00% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solveNQueens</span><span class="params">(n <span class="type">int</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> result [][]<span class="type">string</span></span><br><span class="line">	board := <span class="built_in">make</span>([][]<span class="type">rune</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		board[i] = <span class="built_in">make</span>([]<span class="type">rune</span>, n)</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">			board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> solveNQueensRecursive <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span></span><br><span class="line">	solveNQueensRecursive = <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> row == n &#123;</span><br><span class="line">			copyBoard := <span class="built_in">make</span>([][]<span class="type">rune</span>, n)</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">				copyBoard[i] = <span class="built_in">make</span>([]<span class="type">rune</span>, n)</span><br><span class="line">				<span class="built_in">copy</span>(copyBoard[i], board[i])</span><br><span class="line">			&#125;</span><br><span class="line">			result = <span class="built_in">append</span>(result, generateBoard(copyBoard))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> col := <span class="number">0</span>; col &lt; n; col++ &#123;</span><br><span class="line">			<span class="keyword">if</span> isNotUnderAttack(row, col, board, n) &#123;</span><br><span class="line">				board[row][col] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">				solveNQueensRecursive(row + <span class="number">1</span>)</span><br><span class="line">				board[row][col] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	solveNQueensRecursive(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isNotUnderAttack</span><span class="params">(row, col <span class="type">int</span>, board [][]<span class="type">rune</span>, n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[i][col] == <span class="string">&#x27;Q&#x27;</span> ||</span><br><span class="line">			(col-(row-i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col-(row-i)] == <span class="string">&#x27;Q&#x27;</span>) ||</span><br><span class="line">			(col+(row-i) &lt; n &amp;&amp; board[i][col+(row-i)] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateBoard</span><span class="params">(board [][]<span class="type">rune</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> solution []<span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(board); i++ &#123;</span><br><span class="line">		solution = <span class="built_in">append</span>(solution, <span class="type">string</span>(board[i]))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> solution</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 4 ms, 击败 74.53% 使用 Go 的用户</p>
<p>内存消耗 : 3.46 MB, 击败 13.50% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve_n_queens</span>(<span class="params">n</span>)</span><br><span class="line">  result = []</span><br><span class="line">  board = <span class="title class_">Array</span>.new(n) &#123; <span class="title class_">Array</span>.new(n, <span class="string">&#x27;.&#x27;</span>) &#125;</span><br><span class="line">  solve_n_queens_recursive = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">row</span>|</span><br><span class="line">    <span class="keyword">if</span> row == n</span><br><span class="line">      result &lt;&lt; board.map &#123; |<span class="params">row</span>| row.join(<span class="string">&#x27;&#x27;</span>) &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    is_not_under_attack = <span class="built_in">lambda</span> <span class="keyword">do</span> |<span class="params">row, col, board, n</span>|</span><br><span class="line">      (<span class="number">0</span>...row).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> board[i][col] == <span class="string">&#x27;Q&#x27;</span> |<span class="params"></span>|</span><br><span class="line">                        (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span>) |<span class="params"></span>|</span><br><span class="line">                        (col + (row - i) &lt; n &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">col</span>|</span><br><span class="line">      <span class="keyword">if</span> is_not_under_attack.call(row, col, board, n)</span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">        solve_n_queens_recursive.call(row + <span class="number">1</span>)</span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  solve_n_queens_recursive.call(<span class="number">0</span>)</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 160 ms, 击败 -% 使用 Ruby 的用户</p>
<p>内存消耗 : 207.64 MB, 击败 50.00% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span></span>(n: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">String</span>]] = &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">List</span>[<span class="type">List</span>[<span class="type">String</span>]]()</span><br><span class="line">    <span class="keyword">var</span> board = <span class="type">Array</span>.fill(n, n)(&#x27;.&#x27;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueensRecursive</span></span>(row: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        result = result :+ board.map(_.mkString(<span class="string">&quot;&quot;</span>)).toList</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">isNotUnderAttack</span></span>(row: <span class="type">Int</span>, col: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until row) &#123;</span><br><span class="line">          <span class="keyword">if</span> (board(i)(col) == &#x27;<span class="type">Q</span>&#x27; ||</span><br><span class="line">              (col - (row - i) &gt;= <span class="number">0</span> &amp;&amp; board(i)(col - (row - i)) == &#x27;<span class="type">Q</span>&#x27;) ||</span><br><span class="line">              (col + (row - i) &lt; n &amp;&amp; board(i)(col + (row - i)) == &#x27;<span class="type">Q</span>&#x27;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (col &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotUnderAttack(row, col)) &#123;</span><br><span class="line">          board(row)(col) = &#x27;<span class="type">Q</span>&#x27;</span><br><span class="line">          solveNQueensRecursive(row + <span class="number">1</span>)</span><br><span class="line">          board(row)(col) = &#x27;.&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solveNQueensRecursive(<span class="number">0</span>)</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 557 ms, 击败 88.89% 使用 Scala 的用户</p>
<p>内存消耗 : 62.87 MB, 击败 11.11% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">solve_n_queens</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">board</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="string">&#x27;.&#x27;</span>; n <span class="keyword">as</span> <span class="type">usize</span>]; n <span class="keyword">as</span> <span class="type">usize</span>];</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">solve_n_queens_recursive</span>(row: <span class="type">usize</span>, n: <span class="type">usize</span>, board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;, result: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;) &#123;</span><br><span class="line">            <span class="keyword">if</span> row == n &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(board.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|row| row.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">collect</span>()).<span class="title function_ invoke__">collect</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">is_not_under_attack</span>(row: <span class="type">usize</span>, col: <span class="type">usize</span>, board: &amp;<span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;, n: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..row &#123;</span><br><span class="line">                    <span class="keyword">if</span> board[i][col] == <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                        || (col <span class="keyword">as</span> <span class="type">isize</span> - (row <span class="keyword">as</span> <span class="type">isize</span> - i <span class="keyword">as</span> <span class="type">isize</span>)) &gt;= <span class="number">0</span></span><br><span class="line">                            &amp;&amp; board[i][col - (row - i)] == <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                        || (col + (row - i)) &lt; n</span><br><span class="line">                            &amp;&amp; board[i][col + (row - i)] == <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="title function_ invoke__">is_not_under_attack</span>(row, col, &amp;board, n) &#123;</span><br><span class="line">                    board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                    <span class="title function_ invoke__">solve_n_queens_recursive</span>(row + <span class="number">1</span>, n, board, result);</span><br><span class="line">                    board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">solve_n_queens_recursive</span>(<span class="number">0</span>, n <span class="keyword">as</span> <span class="type">usize</span>, &amp;<span class="keyword">mut</span> board, &amp;<span class="keyword">mut</span> result);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 47.62% 使用 Rust 的用户</p>
<p>内存消耗 : 2.19 MB, 击败 92.86% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define/contract</span> (<span class="name">solve-n-queens</span> n)</span><br><span class="line">  (<span class="name">-&gt;</span> exact-integer? (<span class="name">listof</span> (<span class="name">listof</span> string?)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">is-safe?</span> row col queens)</span><br><span class="line">    (<span class="name"><span class="built_in">define</span></span> (<span class="name">under-attack?</span> r1 c1 r2 c2)</span><br><span class="line">      (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> r1 r2)</span><br><span class="line">          (<span class="name"><span class="built_in">=</span></span> c1 c2)</span><br><span class="line">          (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> r1 r2)) (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> c1 c2)))))</span><br><span class="line">    (<span class="name"><span class="built_in">define</span></span> (<span class="name">safe-in-current-row?</span> r c)</span><br><span class="line">      (<span class="name"><span class="built_in">not</span></span> (<span class="name">ormap</span> (<span class="name"><span class="built_in">lambda</span></span> (queen) (<span class="name">under-attack?</span> r c (<span class="name"><span class="built_in">car</span></span> queen) (<span class="name"><span class="built_in">cdr</span></span> queen))) queens)))</span><br><span class="line">    (<span class="name">safe-in-current-row?</span> row col))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">generate-result</span> queens)</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (queen)</span><br><span class="line">           (<span class="name"><span class="built_in">list-&gt;string</span></span></span><br><span class="line">            (<span class="name">for/list</span> ([<span class="name">i</span> (<span class="name">in-range</span> n)])</span><br><span class="line">              (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i (<span class="name"><span class="built_in">cdr</span></span> queen)) <span class="literal">#\Q</span> <span class="literal">#\.</span>))))</span><br><span class="line">         queens))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">solve-n-queens-recursive</span> row queens)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="built_in">=</span></span> row n) (<span class="name"><span class="built_in">list</span></span> (<span class="name">generate-result</span> queens)))</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">       (<span class="name">append-map</span> (<span class="name"><span class="built_in">lambda</span></span> (col)</span><br><span class="line">                     (<span class="name"><span class="built_in">if</span></span> (<span class="name">is-safe?</span> row col queens)</span><br><span class="line">                         (<span class="name">solve-n-queens-recursive</span> (<span class="name">add1</span> row) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> row col) queens))</span><br><span class="line">                         &#x27;()))</span><br><span class="line">                   (<span class="name">range</span> n)))))</span><br><span class="line">  (<span class="name">solve-n-queens-recursive</span> <span class="number">0</span> &#x27;()))</span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 192 ms, 击败 100.00% 使用 Racket 的用户</p>
<p>内存消耗 : 92.87 MB, 击败 100.00% 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Solution</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@spec</span> solve_n_queens(n :: integer) :: [[<span class="title class_">String</span>.t]]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">solve_n_queens</span></span>(n) <span class="keyword">do</span></span><br><span class="line">    solve_n_queens_recursive(n, <span class="number">0</span>, [])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">solve_n_queens_recursive</span></span>(_n, n, queens) <span class="keyword">when</span> n == _n <span class="keyword">do</span></span><br><span class="line">    [generate_result(queens)]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">solve_n_queens_recursive</span></span>(n, row, queens) <span class="keyword">do</span></span><br><span class="line">    <span class="title class_">Enum</span>.flat_map(<span class="number">0</span>..(n<span class="number">-1</span>), <span class="keyword">fn</span> col -&gt;</span><br><span class="line">      <span class="keyword">if</span> is_safe?(row, col, queens) <span class="keyword">do</span></span><br><span class="line">        solve_n_queens_recursive(n, row + <span class="number">1</span>, [&#123;row, col&#125; | queens])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        []</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">generate_result</span></span>(queens) <span class="keyword">do</span></span><br><span class="line">    <span class="title class_">Enum</span>.map(queens, <span class="keyword">fn</span> &#123;r, c&#125; -&gt;</span><br><span class="line">      <span class="title class_">String</span>.duplicate(<span class="string">&quot;.&quot;</span>, c) &lt;&gt; <span class="string">&quot;Q&quot;</span> &lt;&gt; <span class="title class_">String</span>.duplicate(<span class="string">&quot;.&quot;</span>, length(queens) - c - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">is_safe?</span></span>(row, col, queens) <span class="keyword">do</span></span><br><span class="line">    <span class="title class_">Enum</span>.all?(queens, <span class="keyword">fn</span> &#123;r, c&#125; -&gt;</span><br><span class="line">      row != r <span class="keyword">and</span> col != c <span class="keyword">and</span> abs(row - r) != abs(col - c)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 273 ms, 击败 100.00% 使用 Elixir 的用户</p>
<p>内存消耗 : 68.00 MB, 击败 100.00% 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00052.N 皇后 II</title>
    <url>/zh-CN/946ae2f8fa1e/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n × n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p>给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/946ae2f8fa1e/202002270001.jpg" class="" title="示例1">

<blockquote>
<p>输入：n &#x3D; 4<br>输出：2<br>解释：如上图所示，4 皇后问题存在两个不同的解法。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 1<br>输出：1</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 9</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">board</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="built_in">placeQueen</span>(board, <span class="number">0</span>, count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isNotUnderAttack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; board, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prevRow = <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] == col || </span><br><span class="line">                <span class="built_in">abs</span>(board[prevRow] - col) == row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">placeQueen</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; board, <span class="type">int</span> row, <span class="type">int</span>&amp; count)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNotUnderAttack</span>(board, row, col)) &#123;</span><br><span class="line">                board[row] = col;</span><br><span class="line">                <span class="built_in">placeQueen</span>(board, row + <span class="number">1</span>, count);</span><br><span class="line">                board[row] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 74.56% 使用 C++ 的用户</p>
<p>内存消耗 : 6.99 MB, 击败 47.09% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] board = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">return</span> placeQueens(board, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNotUnderAttack</span><span class="params">(<span class="type">int</span>[] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">prevRow</span> <span class="operator">=</span> <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] == col || Math.abs(board[prevRow] - col) == row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">placeQueens</span><span class="params">(<span class="type">int</span>[] board, <span class="type">int</span> row)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotUnderAttack(board, row, col)) &#123;</span><br><span class="line">                board[row] = col;</span><br><span class="line">                count += placeQueens(board, row + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 80.81% 使用 Java 的用户</p>
<p>内存消耗 : 39.18 MB, 击败 65.14% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">totalNQueens</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_not_under_attack</span>(<span class="params">row, col</span>):</span><br><span class="line">            <span class="keyword">for</span> prev_row <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                <span class="keyword">if</span> board[prev_row] == col <span class="keyword">or</span> \</span><br><span class="line">                   board[prev_row] - prev_row == col - row <span class="keyword">or</span> \</span><br><span class="line">                   board[prev_row] + prev_row == col + row:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">place_queen</span>(<span class="params">row</span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                self.count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> is_not_under_attack(row, col):</span><br><span class="line">                    board[row] = col</span><br><span class="line">                    place_queen(row + <span class="number">1</span>)</span><br><span class="line">        self.count = [<span class="number">0</span>]</span><br><span class="line">        board = [-<span class="number">1</span>] * n</span><br><span class="line">        place_queen(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.count[<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 52.31% 使用 Python 的用户</p>
<p>内存消耗 : 11.39 MB, 击败 90.77% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">totalNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_not_under_attack</span>(<span class="params">row, col</span>):</span><br><span class="line">            <span class="keyword">for</span> prev_row <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                <span class="keyword">if</span> board[prev_row] == col <span class="keyword">or</span> \</span><br><span class="line">                   board[prev_row] - prev_row == col - row <span class="keyword">or</span> \</span><br><span class="line">                   board[prev_row] + prev_row == col + row:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">place_queen</span>(<span class="params">row</span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> is_not_under_attack(row, col):</span><br><span class="line">                    board[row] = col</span><br><span class="line">                    place_queen(row + <span class="number">1</span>)</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        board = [-<span class="number">1</span>] * n</span><br><span class="line">        place_queen(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 62 ms, 击败 42.31% 使用 Python3 的用户</p>
<p>内存消耗 : 16.43 MB, 击败 51.02% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printSolution</span><span class="params">(<span class="type">int</span>* board, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i] == j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Q &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isNotUnderAttack</span><span class="params">(<span class="type">int</span>* board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> prevRow = <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[prevRow] == col || <span class="built_in">abs</span>(board[prevRow] - col) == row - prevRow) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">placeQueen</span><span class="params">(<span class="type">int</span>* board, <span class="type">int</span> row, <span class="type">int</span> n, <span class="type">int</span>* count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        (*count)++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotUnderAttack(board, row, col)) &#123;</span><br><span class="line">            board[row] = col;</span><br><span class="line">            placeQueen(board, row + <span class="number">1</span>, n, count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* board = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    placeQueen(board, <span class="number">0</span>, n, &amp;count);</span><br><span class="line">    <span class="built_in">free</span>(board);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 3 ms, 击败 72.43% 使用 C 的用户</p>
<p>内存消耗 : 5.50 MB, 击败 90.12% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">TotalNQueens</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] board = <span class="keyword">new</span> <span class="built_in">int</span>[n];</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        PlaceQueen(board, <span class="number">0</span>, <span class="keyword">ref</span> count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsNotUnderAttack</span>(<span class="params"><span class="built_in">int</span>[] board, <span class="built_in">int</span> row, <span class="built_in">int</span> col</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> prevRow = <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] == col || Math.Abs(board[prevRow] - col) == row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PlaceQueen</span>(<span class="params"><span class="built_in">int</span>[] board, <span class="built_in">int</span> row, <span class="keyword">ref</span> <span class="built_in">int</span> count</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = board.Length;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsNotUnderAttack(board, row, col)) &#123;</span><br><span class="line">                board[row] = col;</span><br><span class="line">                PlaceQueen(board, row + <span class="number">1</span>, <span class="keyword">ref</span> count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 33 ms, 击败 16.00% 使用 C# 的用户</p>
<p>内存消耗 : 26.79 MB, 击败 36.00% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> totalNQueens = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> board = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isNotUnderAttack</span> = (<span class="params">row, col</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> prevRow = <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] === col || </span><br><span class="line">                <span class="title class_">Math</span>.<span class="title function_">abs</span>(board[prevRow] - col) === row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">placeQueen</span> = (<span class="params">row</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isNotUnderAttack</span>(row, col)) &#123;</span><br><span class="line">                board[row] = col;</span><br><span class="line">                <span class="title function_">placeQueen</span>(row + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">placeQueen</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 52 ms, 击败 97.94% 使用 JavaScript 的用户</p>
<p>内存消耗 : 49.46 MB, 击败 41.16% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">totalNQueens</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">board</span>: <span class="built_in">number</span>[] = <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> isNotUnderAttack = (<span class="attr">row</span>: <span class="built_in">number</span>, <span class="attr">col</span>: <span class="built_in">number</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> prevRow = <span class="number">0</span>; prevRow &lt; row; ++prevRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] === col || </span><br><span class="line">                <span class="title class_">Math</span>.<span class="title function_">abs</span>(board[prevRow] - col) === row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> placeQueen = (<span class="attr">row</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isNotUnderAttack</span>(row, col)) &#123;</span><br><span class="line">                board[row] = col;</span><br><span class="line">                <span class="title function_">placeQueen</span>(row + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">placeQueen</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 69 ms, 击败 50.00% 使用 TypeScript 的用户</p>
<p>内存消耗 : 50.49 MB, 击败 51.79% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">totalNQueens</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;result = [];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">solveQueens</span>(<span class="variable">$n</span>, <span class="number">0</span>, []);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">solveQueens</span>(<span class="params"><span class="variable">$n</span>, <span class="variable">$row</span>, <span class="variable">$current</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$row</span> == <span class="variable">$n</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;result[] = <span class="variable">$current</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$col</span> = <span class="number">0</span>; <span class="variable">$col</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$col</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isValid</span>(<span class="variable">$current</span>, <span class="variable">$row</span>, <span class="variable">$col</span>, <span class="variable">$n</span>)) &#123;</span><br><span class="line">                <span class="variable">$current</span>[] = <span class="variable">$col</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">solveQueens</span>(<span class="variable">$n</span>, <span class="variable">$row</span> + <span class="number">1</span>, <span class="variable">$current</span>);</span><br><span class="line">                <span class="title function_ invoke__">array_pop</span>(<span class="variable">$current</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"><span class="variable">$current</span>, <span class="variable">$row</span>, <span class="variable">$col</span>, <span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$current</span> <span class="keyword">as</span> <span class="variable">$prevRow</span> =&gt; <span class="variable">$prevCol</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$col</span> == <span class="variable">$prevCol</span> || <span class="title function_ invoke__">abs</span>(<span class="variable">$row</span> - <span class="variable">$prevRow</span>) == <span class="title function_ invoke__">abs</span>(<span class="variable">$col</span> - <span class="variable">$prevCol</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 14 ms, 击败 100.00% 使用 PHP 的用户</p>
<p>内存消耗 : 20.34 MB, 击败 0.00% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> resultCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">totalNQueens</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> board <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="operator">-</span><span class="number">1</span>, count: n)</span><br><span class="line">        placeQueens(<span class="operator">&amp;</span>board, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> resultCount</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">isNotUnderAttack</span>(<span class="keyword">_</span> <span class="params">board</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">row</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">col</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> prevRow <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>row &#123;</span><br><span class="line">            <span class="keyword">if</span> board[prevRow] <span class="operator">==</span> col <span class="operator">||</span> <span class="built_in">abs</span>(board[prevRow] <span class="operator">-</span> col) <span class="operator">==</span> row <span class="operator">-</span> prevRow &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">placeQueens</span>(<span class="keyword">_</span> <span class="params">board</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">row</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> board.count</span><br><span class="line">        <span class="keyword">if</span> row <span class="operator">==</span> n &#123;</span><br><span class="line">            resultCount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            <span class="keyword">if</span> isNotUnderAttack(board, row, col) &#123;</span><br><span class="line">                board[row] <span class="operator">=</span> col</span><br><span class="line">                placeQueens(<span class="operator">&amp;</span>board, row <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 6 ms, 击败 71.43% 使用 Swift 的用户</p>
<p>内存消耗 : 15.15 MB, 击败 50.00% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> resultCount = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">totalNQueens</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> board = IntArray(n) &#123; -<span class="number">1</span> &#125;</span><br><span class="line">        placeQueens(board, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> resultCount</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isNotUnderAttack</span><span class="params">(board: <span class="type">IntArray</span>, row: <span class="type">Int</span>, col: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (prevRow <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[prevRow] == col || Math.abs(board[prevRow] - col) == row - prevRow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">placeQueens</span><span class="params">(board: <span class="type">IntArray</span>, row: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = board.size</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            resultCount++</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (col <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotUnderAttack(board, row, col)) &#123;</span><br><span class="line">                board[row] = col</span><br><span class="line">                placeQueens(board, row + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 135 ms, 击败 85.71% 使用 Kotlin 的用户</p>
<p>内存消耗 : 32.34 MB, 击败 78.57% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><p>暂时未解决</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">totalNQueens</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	board := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	placeQueens(board, <span class="number">0</span>, &amp;count)</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isNotUnderAttack</span><span class="params">(board []<span class="type">int</span>, row, col <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> prevRow := <span class="number">0</span>; prevRow &lt; row; prevRow++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[prevRow] == col || abs(board[prevRow]-col) == row-prevRow &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">placeQueens</span><span class="params">(board []<span class="type">int</span>, row <span class="type">int</span>, count *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(board)</span><br><span class="line">	<span class="keyword">if</span> row == n &#123;</span><br><span class="line">		*count++</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> col := <span class="number">0</span>; col &lt; n; col++ &#123;</span><br><span class="line">		<span class="keyword">if</span> isNotUnderAttack(board, row, col) &#123;</span><br><span class="line">			newBoard := <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), board...)</span><br><span class="line">			newBoard[row] = col</span><br><span class="line">			placeQueens(newBoard, row+<span class="number">1</span>, count)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 35.62% 使用 Go 的用户</p>
<p>内存消耗 : 2.66 MB, 击败 5.48% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">total_n_queens</span>(<span class="params">n</span>)</span><br><span class="line">  count = [<span class="number">0</span>]</span><br><span class="line">  board = <span class="title class_">Array</span>.new(n, -<span class="number">1</span>)</span><br><span class="line">  place_queens(board, <span class="number">0</span>, count)</span><br><span class="line">  count[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_not_under_attack</span>(<span class="params">board, row, col</span>)</span><br><span class="line">  (<span class="number">0</span>...row).each <span class="keyword">do</span> |<span class="params">prev_row</span>|</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> board[prev_row] == col |<span class="params"></span>| (board[prev_row] - col).abs == row - prev_row</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">place_queens</span>(<span class="params">board, row, count</span>)</span><br><span class="line">  n = board.length</span><br><span class="line">  <span class="keyword">if</span> row == n</span><br><span class="line">    count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  (<span class="number">0</span>...n).each <span class="keyword">do</span> |<span class="params">col</span>|</span><br><span class="line">    <span class="keyword">if</span> is_not_under_attack(board, row, col)</span><br><span class="line">      new_board = board.dup</span><br><span class="line">      new_board[row] = col</span><br><span class="line">      place_queens(new_board, row + <span class="number">1</span>, count)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 110 ms, 击败 -% 使用 Ruby 的用户</p>
<p>内存消耗 : 206.57 MB, 击败 -% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">totalNQueens</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeQueens</span></span>(board: <span class="type">Array</span>[<span class="type">Int</span>], row: <span class="type">Int</span>, count: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (row == n) count + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        (<span class="number">0</span> until n).foldLeft(count)((currentCount, col) =&gt;</span><br><span class="line">          <span class="keyword">if</span> (isNotUnderAttack(board, row, col))</span><br><span class="line">            placeQueens(board.updated(row, col), row + <span class="number">1</span>, currentCount)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            currentCount</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    placeQueens(<span class="type">Array</span>.fill(n)(<span class="number">-1</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">isNotUnderAttack</span></span>(board: <span class="type">Array</span>[<span class="type">Int</span>], row: <span class="type">Int</span>, col: <span class="type">Int</span>): <span class="type">Boolean</span> =</span><br><span class="line">    (<span class="number">0</span> until row).forall(prevRow =&gt;</span><br><span class="line">      board(prevRow) != col &amp;&amp; math.abs(board(prevRow) - col) != row - prevRow</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 449 ms, 击败 100.00% 使用 Scala 的用户</p>
<p>内存消耗 : 52.83 MB, 击败 100.00% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">total_n_queens</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">board</span> = <span class="built_in">vec!</span>[-<span class="number">1</span>; n <span class="keyword">as</span> <span class="type">usize</span>];</span><br><span class="line">        Solution::<span class="title function_ invoke__">place_queens</span>(&amp;<span class="keyword">mut</span> board, <span class="number">0</span>, &amp;<span class="keyword">mut</span> count);</span><br><span class="line">        count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">is_not_under_attack</span>(board: &amp;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, row: <span class="type">usize</span>, col: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        (<span class="number">0</span>..row).<span class="title function_ invoke__">all</span>(|prev_row| &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">prev_col</span> = board[prev_row];</span><br><span class="line">            prev_col != col &amp;&amp; (prev_col - col).<span class="title function_ invoke__">abs</span>() <span class="keyword">as</span> <span class="type">usize</span> != (row - prev_row)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">place_queens</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, row: <span class="type">usize</span>, count: &amp;<span class="keyword">mut</span> <span class="type">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = board.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">if</span> row == n &#123;</span><br><span class="line">            *count += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..n <span class="keyword">as</span> <span class="type">i32</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> Solution::<span class="title function_ invoke__">is_not_under_attack</span>(board, row, col) &#123;</span><br><span class="line">                    board[row] = col;</span><br><span class="line">                    Solution::<span class="title function_ invoke__">place_queens</span>(board, row + <span class="number">1</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 1 ms, 击败 37.50% 使用 Rust 的用户</p>
<p>内存消耗 : 2.16 MB, 击败 37.50% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00053.最大子数组和</title>
    <url>/zh-CN/98c5fd388cba/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>子数组 是数组中的一个连续部分。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [1]<br>输出：1</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^5$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
</ul>
<p><strong>进阶：</strong>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>] + nums[i], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxSum = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            maxSum = <span class="built_in">max</span>(maxSum, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 80 ms, 击败 83.49% 使用 C++ 的用户</p>
<p>内存消耗 : 71.21 MB, 击败 6.83% 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            maxSum = Math.max(maxSum, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 2 ms, 击败 41.66% 使用 Java 的用户</p>
<p>内存消耗 : 56.18 MB, 击败 54.49% 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>] * n</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>] + nums[i], nums[i])</span><br><span class="line">        maxSum = <span class="built_in">max</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 113 ms, 击败 45.81% 使用 Python 的用户</p>
<p>内存消耗 : 23.09 MB, 击败 35.87% 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>] * n</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>] + nums[i], nums[i])</span><br><span class="line">        maxSum = <span class="built_in">max</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 125 ms, 击败 71.45% 使用 Python3 的用户</p>
<p>内存消耗 : 30.97 MB, 击败 57.69% 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> currentSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        currentSum = (currentSum &gt; <span class="number">0</span>) ? currentSum + nums[i] : nums[i];</span><br><span class="line">        maxSum = (currentSum &gt; maxSum) ? currentSum : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 75 ms, 击败 98.24% 使用 C 的用户</p>
<p>内存消耗 : 11.72 MB, 击败 98.27% 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxSubArray</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> currentSum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            currentSum = (currentSum &gt; <span class="number">0</span>) ? currentSum + nums[i] : nums[i];</span><br><span class="line">            maxSum = (currentSum &gt; maxSum) ? currentSum : maxSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 247 ms, 击败 16.12% 使用 C# 的用户</p>
<p>内存消耗 : 60.21 MB, 击败 5.16% 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> currentSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        currentSum = (currentSum &gt; <span class="number">0</span>) ? currentSum + nums[i] : nums[i];</span><br><span class="line">        maxSum = (currentSum &gt; maxSum) ? currentSum : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 85 ms, 击败 36.15% 使用 JavaScript 的用户</p>
<p>内存消耗 : 57.37 MB, 击败 22.97% 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxSubArray</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">maxSum</span>: <span class="built_in">number</span> = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">currentSum</span>: <span class="built_in">number</span> = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        currentSum = (currentSum &gt; <span class="number">0</span>) ? currentSum + nums[i] : nums[i];</span><br><span class="line">        maxSum = (currentSum &gt; maxSum) ? currentSum : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 83 ms, 击败 66.83% 使用 TypeScript 的用户</p>
<p>内存消耗 : 59.46 MB, 击败 23.34% 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer[] $nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxSubArray</span>(<span class="params"><span class="variable">$nums</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$maxSum</span> = <span class="variable">$nums</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$currentSum</span> = <span class="variable">$nums</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$currentSum</span> = (<span class="variable">$currentSum</span> &gt; <span class="number">0</span>) ? <span class="variable">$currentSum</span> + <span class="variable">$nums</span>[<span class="variable">$i</span>] : <span class="variable">$nums</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable">$maxSum</span> = (<span class="variable">$currentSum</span> &gt; <span class="variable">$maxSum</span>) ? <span class="variable">$currentSum</span> : <span class="variable">$maxSum</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$maxSum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 186 ms, 击败 92.16% 使用 PHP 的用户</p>
<p>内存消耗 : 27.15 MB, 击败 80.39% 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">maxSubArray</span>(<span class="keyword">_</span> <span class="params">nums</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n <span class="operator">=</span> nums.count</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> maxSum <span class="operator">=</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">var</span> currentSum <span class="operator">=</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">            currentSum <span class="operator">=</span> (currentSum <span class="operator">&gt;</span> <span class="number">0</span>) <span class="operator">?</span> currentSum <span class="operator">+</span> nums[i] : nums[i]</span><br><span class="line">            maxSum <span class="operator">=</span> <span class="built_in">max</span>(currentSum, maxSum)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 304 ms, 击败 89.96% 使用 Swift 的用户</p>
<p>内存消耗 : 19.52 MB, 击败 40.17% 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">maxSubArray</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = nums.size</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> maxSum = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">var</span> currentSum = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until n) &#123;</span><br><span class="line">            currentSum = <span class="keyword">if</span> (currentSum &gt; <span class="number">0</span>) currentSum + nums[i] <span class="keyword">else</span> nums[i]</span><br><span class="line">            maxSum = maxOf(currentSum, maxSum)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 478 ms, 击败 27.67% 使用 Kotlin 的用户</p>
<p>内存消耗 : 58.28 MB, 击败 18.87% 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> maxSubArray(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">int</span> currentSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      currentSum = (currentSum &gt; <span class="number">0</span>) ? currentSum + nums[i] : nums[i];</span><br><span class="line">      maxSum = (currentSum &gt; maxSum) ? currentSum : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 368 ms, 击败 42.86% 使用 Dart 的用户</p>
<p>内存消耗 : 175.44 MB, 击败 92.86% 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxSum := nums[<span class="number">0</span>]</span><br><span class="line">    currentSum := nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> currentSum &gt; <span class="number">0</span> &#123;</span><br><span class="line">            currentSum += nums[i]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentSum = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">        maxSum = max(maxSum, currentSum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 79 ms, 击败 83.53% 使用 Go 的用户</p>
<p>内存消耗 : 7.84 MB, 击败 82.57% 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_sub_array</span>(<span class="params">nums</span>)</span><br><span class="line">    n = nums.length</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">    max_sum = nums[<span class="number">0</span>]</span><br><span class="line">    current_sum = nums[<span class="number">0</span>]</span><br><span class="line">    (<span class="number">1</span>...n).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">        current_sum = current_sum &gt; <span class="number">0</span> ? current_sum + nums[i] : nums[i]</span><br><span class="line">        max_sum = [max_sum, current_sum].max</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    max_sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 120 ms, 击败 100.00% 使用 Ruby 的用户</p>
<p>内存消耗 : 214.20 MB, 击败 13.33% 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.length</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> maxSum = nums(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> currentSum = nums(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until n) &#123;</span><br><span class="line">      currentSum = <span class="keyword">if</span> (currentSum &gt; <span class="number">0</span>) currentSum + nums(i) <span class="keyword">else</span> nums(i)</span><br><span class="line">      maxSum = math.max(maxSum, currentSum)</span><br><span class="line">    &#125;</span><br><span class="line">    maxSum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 828 ms, 击败 30.77% 使用 Scala 的用户</p>
<p>内存消耗 : 74.23 MB, 击败 46.15% 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">max_sub_array</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">n</span> = nums.<span class="title function_ invoke__">len</span>();</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">max_sum</span> = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current_sum</span> = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..n &#123;</span><br><span class="line">            current_sum = <span class="keyword">if</span> current_sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">                current_sum + nums[i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i]</span><br><span class="line">            &#125;;</span><br><span class="line">            max_sum = max_sum.<span class="title function_ invoke__">max</span>(current_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        max_sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 : 9 ms, 击败 64.43% 使用 Rust 的用户</p>
<p>内存消耗 : 3.03 MB, 击败 98.04% 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><p>暂时未解决</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><p>暂时未解决</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><p>暂时未解决</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00054.螺旋矩阵</title>
    <url>/zh-CN/ca17823e0ac7/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/ca17823e0ac7/202003020001.jpg" class="" title="示例1">

<blockquote>
<p>输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/ca17823e0ac7/202003020002.jpg" class="" title="示例2">

<blockquote>
<p>输入：matrix &#x3D; [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; matrix.length</li>
<li>n &#x3D;&#x3D; matrix[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 10</li>
<li>-100 &lt;&#x3D; matrix[i][j] &lt;&#x3D; 100</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00055.跳跃游戏</title>
    <url>/zh-CN/86baf309a96b/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [2,3,1,1,4]<br>输出：true<br>解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [3,2,1,0,4]<br>输出：false<br>解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4$</li>
<li>$0 &lt;&#x3D; nums[i] &lt;&#x3D; 10^5$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00056.合并区间</title>
    <url>/zh-CN/d64fad88ff12/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] &#x3D; $[start_i, end_i]$ 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,3],[2,6],[8,10],[15,18]]<br>输出：[[1,6],[8,10],[15,18]]<br>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6]。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,4],[4,5]]<br>输出：[[1,5]]<br>解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; intervals.length &lt;&#x3D; 10^4$</li>
<li>intervals[i].length &#x3D;&#x3D; 2</li>
<li>$0 &lt;&#x3D; start_i &lt;&#x3D; end_i &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>惊蛰</title>
    <url>/zh-CN/43849f67794f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>惊蛰</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/43849f67794f/202003050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>惊蛰</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00057.插入区间</title>
    <url>/zh-CN/8f4205b77ba0/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个 无重叠的 ，按照区间起始端点排序的区间列表。</p>
<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,3],[6,9]], newInterval &#x3D; [2,5]<br>输出：[[1,5],[6,9]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval &#x3D; [4,8]<br>输出：[[1,2],[3,10],[12,16]]<br>解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：intervals &#x3D; [], newInterval &#x3D; [5,7]<br>输出：[[5,7]]</p>
</blockquote>
<h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,5]], newInterval &#x3D; [2,3]<br>输出：[[1,5]]</p>
</blockquote>
<h2 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h2><blockquote>
<p>输入：intervals &#x3D; [[1,5]], newInterval &#x3D; [2,7]<br>输出：[[1,7]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$0 &lt;&#x3D; intervals.length &lt;&#x3D; 10^4$</li>
<li>intervals[i].length &#x3D;&#x3D; 2</li>
<li>$0 &lt;&#x3D; intervals[i][0] &lt;&#x3D; intervals[i][1] &lt;&#x3D; 10^5$</li>
<li>intervals 根据 intervals[i][0] 按 升序 排列</li>
<li>newInterval.length &#x3D;&#x3D; 2</li>
<li>$0 &lt;&#x3D; newInterval[0] &lt;&#x3D; newInterval[1] &lt;&#x3D; 10^5$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00058.最后一个单词的长度</title>
    <url>/zh-CN/f19586c0444b/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p>
<p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为5。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为4。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为6的“joyboy”。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; s.length &lt;&#x3D; 10^4$</li>
<li>s 仅有英文字母和空格 ‘ ‘ 组成</li>
<li>s 中至少存在一个单词</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00059.螺旋矩阵 II</title>
    <url>/zh-CN/8fe8227b4a88/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个正整数 n ，生成一个包含 1 到 $n^2$ 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/8fe8227b4a88/202003100001.jpg" class="" title="示例1">

<blockquote>
<p>输入：n &#x3D; 3<br>输出：[[1,2,3],[8,9,4],[7,6,5]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 1<br>输出：[[1]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 20</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00060.排列序列</title>
    <url>/zh-CN/47af4952a91a/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p>
<p>按大小顺序列出所有排列情况，并一一标记，当 n &#x3D; 3 时, 所有排列如下：</p>
<ol>
<li>“123”</li>
<li>“132”</li>
<li>“213”</li>
<li>“231”</li>
<li>“312”</li>
<li>“321”</li>
</ol>
<p>给定 n 和 k，返回第 k 个排列。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：n &#x3D; 3, k &#x3D; 3<br>输出：”213”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 4, k &#x3D; 9<br>输出：”2314”</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：n &#x3D; 3, k &#x3D; 1<br>输出：”123”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 9</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n!</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00061.旋转链表</title>
    <url>/zh-CN/fbf6dc3802a5/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/fbf6dc3802a5/202003120001.jpg" class="" title="示例1">

<blockquote>
<p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[4,5,1,2,3]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/fbf6dc3802a5/202003120002.jpg" class="" title="示例2">

<blockquote>
<p>输入：head &#x3D; [0,1,2], k &#x3D; 4<br>输出：[2,0,1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>链表中节点的数目在范围 [0, 500] 内</li>
<li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li>
<li>$0 &lt;&#x3D; k &lt;&#x3D; 2 * 10^9$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00062.不同路径</title>
    <url>/zh-CN/2df7c1a929f8/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>
<p>问总共有多少条不同的路径？</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/2df7c1a929f8/202003130001.png" class="" title="示例1">

<blockquote>
<p>输入：m &#x3D; 3, n &#x3D; 7<br>输出：28</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：m &#x3D; 3, n &#x3D; 2<br>输出：3<br>解释：<br>从左上角开始，总共有 3 条路径可以到达右下角。</p>
<ol>
<li>向右 -&gt; 向下 -&gt; 向下</li>
<li>向下 -&gt; 向下 -&gt; 向右</li>
<li>向下 -&gt; 向右 -&gt; 向下</li>
</ol>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：m &#x3D; 7, n &#x3D; 3<br>输出：28</p>
</blockquote>
<h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote>
<p>输入：m &#x3D; 3, n &#x3D; 3<br>输出：6</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 100</li>
<li>$题目数据保证答案小于等于 2 * 10^9$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>超级马力欧 奥德赛</title>
    <url>/zh-CN/2f703a683557/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>马力欧卡丁车8 豪华版</title>
    <url>/zh-CN/3e3c772fb5a6/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00063.不同路径 II</title>
    <url>/zh-CN/0ee8edb4fd04/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p>
<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>
<p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/0ee8edb4fd04/202003170001.jpg" class="" title="示例1">

<blockquote>
<p>输入：obstacleGrid &#x3D; [[0,0,0],[0,1,0],[0,0,0]]<br>输出：2<br>解释：3x3 网格的正中间有一个障碍物。<br>从左上角到右下角一共有 2 条不同的路径：</p>
<ol>
<li>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</li>
<li>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</li>
</ol>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/0ee8edb4fd04/202003170002.jpg" class="" title="示例2">

<blockquote>
<p>输入：obstacleGrid &#x3D; [[0,1],[0,0]]<br>输出：1</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; obstacleGrid.length</li>
<li>n &#x3D;&#x3D; obstacleGrid[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 100</li>
<li>obstacleGrid[i][j] 为 0 或 1</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00065.有效数字</title>
    <url>/zh-CN/09a6b11a86b2/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有效数字（按顺序）可以分成以下几个部分：</p>
<ol>
<li>一个 小数 或者 整数</li>
<li>（可选）一个 ‘e’ 或 ‘E’ ，后面跟着一个 整数</li>
</ol>
<p>小数（按顺序）可以分成以下几个部分：</p>
<ol>
<li>（可选）一个符号字符（’+’ 或 ‘-‘）</li>
<li>下述格式之一：<ol>
<li>至少一位数字，后面跟着一个点 ‘.’</li>
<li>至少一位数字，后面跟着一个点 ‘.’ ，后面再跟着至少一位数字</li>
<li>一个点 ‘.’ ，后面跟着至少一位数字</li>
</ol>
</li>
</ol>
<p>整数（按顺序）可以分成以下几个部分：</p>
<ol>
<li>（可选）一个符号字符（’+’ 或 ‘-‘）</li>
<li>至少一位数字</li>
</ol>
<p>部分有效数字列举如下：[“2”, “0089”, “-0.1”, “+3.14”, “4.”, “-.9”, “2e10”, “-90E3”, “3e+7”, “+6e-1”, “53.5e93”, “-123.456e789”]</p>
<p>部分无效数字列举如下：[“abc”, “1a”, “1e”, “e3”, “99e2.5”, “–6”, “-+3”, “95a54e53”]</p>
<p>给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “0”<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “e”<br>输出：false</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：s &#x3D; “.”<br>输出：false</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 20</li>
<li>s 仅含英文字母（大写和小写），数字（0-9），加号 ‘+’ ，减号 ‘-‘ ，或者点 ‘.’ 。</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00064.最小路径和</title>
    <url>/zh-CN/e5898f53c6e6/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/e5898f53c6e6/202003180001.jpg" class="" title="示例1">

<blockquote>
<p>输入：grid &#x3D; [[1,3,1],[1,5,1],[4,2,1]]<br>输出：7<br>解释：因为路径 1→3→1→1→1 的总和最小。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：grid &#x3D; [[1,2,3],[4,5,6]]<br>输出：12</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; grid.length</li>
<li>n &#x3D;&#x3D; grid[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 200</li>
<li>0 &lt;&#x3D; grid[i][j] &lt;&#x3D; 200</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>春分</title>
    <url>/zh-CN/0ae065f54d8a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>春分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0ae065f54d8a/202003200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>春分</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Air 13 英寸（Intel，2020年）</title>
    <url>/zh-CN/6308c29551a0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Air</p>
  <p>够轻，够轻快。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6308c29551a0/202003210001.png" class="" title="MacBook Air 13 英寸（Intel，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00066.加一</title>
    <url>/zh-CN/b4a1a4c15eb4/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：digits &#x3D; [1,2,3]<br>输出：[1,2,4]<br>解释：输入数组表示数字 123。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：digits &#x3D; [4,3,2,1]<br>输出：[4,3,2,2]<br>解释：输入数组表示数字 4321。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：digits &#x3D; [0]<br>输出：[1]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; digits.length &lt;&#x3D; 100</li>
<li>0 &lt;&#x3D; digits[i] &lt;&#x3D; 9</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00067.二进制求和</title>
    <url>/zh-CN/921c8827c6e8/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个二进制字符串 a 和 b ，以二进制字符串的形式返回它们的和。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入:a &#x3D; “11”, b &#x3D; “1”<br>输出：”100”</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：a &#x3D; “1010”, b &#x3D; “1011”<br>输出：”10101”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; a.length, b.length &lt;&#x3D; 10^4$</li>
<li>a 和 b 仅由字符 ‘0’ 或 ‘1’ 组成</li>
<li>字符串如果不是 “0” ，就不含前导零</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00068.文本左右对齐</title>
    <url>/zh-CN/ad3edc4de2db/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个单词数组 words 和一个长度 maxWidth ，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。</p>
<p>你应该使用 “贪心算法” 来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 ‘ ‘ 填充，使得每行恰好有 maxWidth 个字符。</p>
<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p>
<p>文本的最后一行应为左对齐，且单词之间不插入额外的空格。</p>
<p><strong>注意:</strong></p>
<ul>
<li>单词是指由非空格字符组成的字符序列。</li>
<li>每个单词的长度大于 0，小于等于 maxWidth。</li>
<li>输入单词数组 words 至少包含一个单词。</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入: words &#x3D; [“This”, “is”, “an”, “example”, “of”, “text”, “justification.”], maxWidth &#x3D; 16<br>输出:<br>[<br>  “This    is    an”,<br>  “example  of text”,<br>  “justification.  “<br>]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入:words &#x3D; [“What”,”must”,”be”,”acknowledgment”,”shall”,”be”], maxWidth &#x3D; 16<br>输出:<br>[<br> “What   must   be”,<br> “acknowledgment  “,<br> “shall be        “<br>]<br>解释: 注意最后一行的格式应为 “shall be    “ 而不是 “shall     be”,<br>    因为最后一行应为左对齐，而不是左右两端对齐。<br>    第二行同样为左对齐，这是因为这行只包含一个单词。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入:words &#x3D; [“Science”,”is”,”what”,”we”,”understand”,”well”,”enough”,”to”,”explain”,”to”,”a”,”computer.”,”Art”,”is”,”everything”,”else”,”we”,”do”]，maxWidth &#x3D; 20<br>输出:<br>[<br> “Science  is  what we”,<br> “understand      well”,<br> “enough to explain to”,<br> “a  computer.  Art is”,<br> “everything  else  we”,<br> “do                  “<br>]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; words.length &lt;&#x3D; 300</li>
<li>1 &lt;&#x3D; words[i].length &lt;&#x3D; 20</li>
<li>words[i] 由小写英文字母和符号组成</li>
<li>1 &lt;&#x3D; maxWidth &lt;&#x3D; 100</li>
<li>words[i].length &lt;&#x3D; maxWidth</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>iPad Pro（A12Z，2020年）</title>
    <url>/zh-CN/58f37e646f96/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad Pro</p>
  <p>你的下一台电脑，何必是电脑。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/58f37e646f96/202003260001.png" class="" title="iPad Pro（A12Z，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00069.x 的平方根</title>
    <url>/zh-CN/f90af5f455d0/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p>
<p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p>
<p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：x &#x3D; 4<br>输出：2</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：x &#x3D; 8<br>输出：2<br>解释：8 的算术平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$0 &lt;&#x3D; x &lt;&#x3D; 2^{31} - 1$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00070.爬楼梯</title>
    <url>/zh-CN/36acf6f73101/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 45</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00071.简化路径</title>
    <url>/zh-CN/4d1a4f424afb/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘&#x2F;‘ 开头），请你将其转化为更加简洁的规范路径。</p>
<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’&#x2F;&#x2F;‘）都被视为单个斜杠 ‘&#x2F;‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件&#x2F;目录名称。</p>
<p>请注意，返回的 规范路径 必须遵循下述格式：</p>
<ul>
<li>始终以斜杠 ‘&#x2F;‘ 开头。</li>
<li>两个目录名之间必须只有一个斜杠 ‘&#x2F;‘ 。</li>
<li>最后一个目录名（如果存在）不能 以 ‘&#x2F;‘ 结尾。</li>
<li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。</li>
</ul>
<p>返回简化后得到的 规范路径 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：path &#x3D; “&#x2F;home&#x2F;“<br>输出：”&#x2F;home”<br>解释：注意，最后一个目录名后面没有斜杠。 </p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：path &#x3D; “&#x2F;..&#x2F;“<br>输出：”&#x2F;“<br>解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入：path &#x3D; “&#x2F;home&#x2F;&#x2F;foo&#x2F;“<br>输出：”&#x2F;home&#x2F;foo”<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p>
</blockquote>
<h2 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h2><blockquote>
<p>输入：path &#x3D; “&#x2F;a&#x2F;.&#x2F;b&#x2F;..&#x2F;..&#x2F;c&#x2F;“<br>输出：”&#x2F;c”</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; path.length &lt;&#x3D; 3000</li>
<li>path 由英文字母，数字，’.’，’&#x2F;‘ 或 ‘_’ 组成。</li>
<li>path 是一个有效的 Unix 风格绝对路径。</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00072.编辑距离</title>
    <url>/zh-CN/5e09154e62bd/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：word1 &#x3D; “horse”, word2 &#x3D; “ros”<br>输出：3<br>解释：<br>horse -&gt; rorse (将 ‘h’ 替换为 ‘r’)<br>rorse -&gt; rose (删除 ‘r’)<br>rose -&gt; ros (删除 ‘e’)</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：word1 &#x3D; “intention”, word2 &#x3D; “execution”<br>输出：5<br>解释：<br>intention -&gt; inention (删除 ‘t’)<br>inention -&gt; enention (将 ‘i’ 替换为 ‘e’)<br>enention -&gt; exention (将 ‘n’ 替换为 ‘x’)<br>exention -&gt; exection (将 ‘n’ 替换为 ‘c’)<br>exection -&gt; execution (插入 ‘u’)</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>0 &lt;&#x3D; word1.length, word2.length &lt;&#x3D; 500</li>
<li>word1 和 word2 由小写英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00073.矩阵置零</title>
    <url>/zh-CN/b2a49fa22108/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/b2a49fa22108/202004020001.jpg" class="" title="示例1">

<blockquote>
<p>输入：matrix &#x3D; [[1,1,1],[1,0,1],[1,1,1]]<br>输出：[[1,0,1],[0,0,0],[1,0,1]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/b2a49fa22108/202004020002.jpg" class="" title="示例2">

<blockquote>
<p>输入：matrix &#x3D; [[0,1,2,0],[3,4,5,2],[1,3,1,5]]<br>输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; matrix.length</li>
<li>n &#x3D;&#x3D; matrix[0].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 200</li>
<li>$-2^{31} &lt;&#x3D; matrix[i][j] &lt;&#x3D; 2^{31} - 1$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00074.搜索二维矩阵</title>
    <url>/zh-CN/c4a0be43fd2b/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个满足下述两条属性的 m x n 整数矩阵：</p>
<ul>
<li>每行中的整数从左到右按非严格递增顺序排列。</li>
<li>每行的第一个整数大于前一行的最后一个整数。</li>
</ul>
<p>给你一个整数 target ，如果 target 在矩阵中，返回 true ；否则，返回 false 。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/c4a0be43fd2b/202004030001.jpg" class="" title="示例1">

<blockquote>
<p>输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 3<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/c4a0be43fd2b/202004030002.jpg" class="" title="示例2">

<blockquote>
<p>输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 13<br>输出：false</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; matrix.length</li>
<li>n &#x3D;&#x3D; matrix[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 100</li>
<li>$-10^4 &lt;&#x3D; matrix[i][j], target &lt;&#x3D; 10^4$</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>清明</title>
    <url>/zh-CN/bbf714965230/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>清明</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/bbf714965230/202004040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>清明</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00075.颜色分类</title>
    <url>/zh-CN/cf0e5c843015/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>
<p>必须在不使用库内置的 sort 函数的情况下解决这个问题。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [2,0,2,1,1,0]<br>输出：[0,0,1,1,2,2]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [2,0,1]<br>输出：[0,1,2]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>n &#x3D;&#x3D; nums.length</li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 300</li>
<li>nums[i] 为 0、1 或 2</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00076.最小覆盖子串</title>
    <url>/zh-CN/34391e2ffab7/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>
<p><strong>注意：</strong></p>
<ul>
<li>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</li>
<li>如果 s 中存在这样的子串，我们保证它是唯一的答案。</li>
</ul>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：s &#x3D; “ADOBECODEBANC”, t &#x3D; “ABC”<br>输出：”BANC”<br>解释：最小覆盖子串 “BANC” 包含来自字符串 t 的 ‘A’、’B’ 和 ‘C’。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：s &#x3D; “a”, t &#x3D; “a”<br>输出：”a”<br>解释：整个字符串 s 是最小覆盖子串。</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><blockquote>
<p>输入: s &#x3D; “a”, t &#x3D; “aa”<br>输出: “”<br>解释: t 中两个字符 ‘a’ 均应包含在 s 的子串中，<br>因此没有符合条件的子字符串，返回空字符串。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; s.length</li>
<li>n &#x3D;&#x3D; t.length</li>
<li>$1 &lt;&#x3D; m, n &lt;&#x3D; 10^5$</li>
<li>s 和 t 由英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00077.组合</title>
    <url>/zh-CN/38bc9b1534e9/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p>
<p>你可以按 任何顺序 返回答案。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：n &#x3D; 4, k &#x3D; 2<br>输出：<br>[<br> [2,4],<br> [3,4],<br> [2,3],<br> [1,2],<br> [1,3],<br> [1,4],<br>]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：n &#x3D; 1, k &#x3D; 1<br>输出：[[1]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 20</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00078.子集</title>
    <url>/zh-CN/d47a41be6fcc/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p>
<p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0]<br>输出：[[],[0]]</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10</li>
<li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li>
<li>nums 中的所有元素 互不相同</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00080.删除有序数组中的重复项 II</title>
    <url>/zh-CN/4b4d7abb670d/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>说明：</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢？</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<blockquote>
<p>&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len &#x3D; removeDuplicates(nums);</p>
<p>&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。<br>&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。<br>for (int i &#x3D; 0; i &lt; len; i++) {<br>   print(nums[i]);<br>}</p>
</blockquote>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><blockquote>
<p>输入：nums &#x3D; [1,1,1,2,2,3]<br>输出：5, nums &#x3D; [1,1,2,2,3]<br>解释：函数应返回新长度 length &#x3D; 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><blockquote>
<p>输入：nums &#x3D; [0,0,1,1,1,1,2,3,3]<br>输出：7, nums &#x3D; [0,0,1,1,2,3,3]<br>解释：函数应返回新长度 length &#x3D; 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>$1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 已按升序排列</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
      </tags>
  </entry>
  <entry>
    <title>谷雨</title>
    <url>/zh-CN/1505aeca79d6/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>谷雨</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1505aeca79d6/202004190001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>谷雨</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone SE（A13，2020年）</title>
    <url>/zh-CN/2e753a1d6c75/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPhone SE</p>
  <p>称心称手，超值入手。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2e753a1d6c75/202004240001.png" class="" title="iPhone SE（A13，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣00079.单词搜索</title>
    <url>/zh-CN/18eae047ba75/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
<h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><img src="/zh-CN/18eae047ba75/202004130001.jpg" class="" title="示例1">

<blockquote>
<p>输入：board &#x3D; [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word &#x3D; “ABCCED”<br>输出：true</p>
</blockquote>
<h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><img src="/zh-CN/18eae047ba75/202004130002.jpg" class="" title="示例2">

<blockquote>
<p>输入：board &#x3D; [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word &#x3D; “SEE”<br>输出：true</p>
</blockquote>
<h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><img src="/zh-CN/18eae047ba75/202004130003.jpg" class="" title="示例3">

<blockquote>
<p>输入：board &#x3D; [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word &#x3D; “ABCB”<br>输出：false</p>
</blockquote>
<h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><ul>
<li>m &#x3D;&#x3D; board.length</li>
<li>n &#x3D; board[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 6</li>
<li>1 &lt;&#x3D; word.length &lt;&#x3D; 15</li>
<li>board 和 word 仅由大小写英文字母组成</li>
</ul>
<hr>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C++ 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C++ 的用户</p>
<hr>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Java 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Java 的用户</p>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python 的用户</p>
<hr>
<h2 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Python3 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Python3 的用户</p>
<hr>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C 的用户</p>
<hr>
<h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 C# 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 C# 的用户</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 JavaScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 JavaScript 的用户</p>
<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 TypeScript 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 TypeScript 的用户</p>
<hr>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 PHP 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 PHP 的用户</p>
<hr>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Swift 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Swift 的用户</p>
<hr>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Kotlin 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Kotlin 的用户</p>
<hr>
<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Dart 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Dart 的用户</p>
<hr>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Go 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Go 的用户</p>
<hr>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Ruby 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Ruby 的用户</p>
<hr>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Scala 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Scala 的用户</p>
<hr>
<h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Rust 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Rust 的用户</p>
<hr>
<h2 id="Racket"><a href="#Racket" class="headerlink" title="Racket"></a>Racket</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Racket 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Racket 的用户</p>
<hr>
<h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Erlang 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Erlang 的用户</p>
<hr>
<h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><p>执行用时 :  ms, 击败 % 使用 Elixir 的用户</p>
<p>内存消耗 :  MB, 击败 % 使用 Elixir 的用户</p>
<hr>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>C</tag>
        <tag>C#</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>PHP</tag>
        <tag>Swift</tag>
        <tag>Kotlin</tag>
        <tag>Dart</tag>
        <tag>Go</tag>
        <tag>Ruby</tag>
        <tag>Scala</tag>
        <tag>Rust</tag>
        <tag>Racket</tag>
        <tag>Erlang</tag>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>立夏</title>
    <url>/zh-CN/0413915a6189/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立夏</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0413915a6189/202005050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立夏</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 13 英寸（Intel，2020年）</title>
    <url>/zh-CN/3579ca123c8f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>动力，行动力。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/3579ca123c8f/202005070001.png" class="" title="MacBook Pro 13 英寸（Intel，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>适用于 iPad Pro 的妙控键盘（2020年）</title>
    <url>/zh-CN/57b901dd0afc/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad Pro 的</p>
  <p>全新妙控键盘，</p>
  <p>可以入手了。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/57b901dd0afc/202005220001.png" class="" title="Magic Keyboard（2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Magic Keyboard</tag>
      </tags>
  </entry>
  <entry>
    <title>芒种</title>
    <url>/zh-CN/0bfe5b60239d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>芒种</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0bfe5b60239d/202006050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>芒种</tag>
      </tags>
  </entry>
  <entry>
    <title>夏至</title>
    <url>/zh-CN/f909991e16b2/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>夏至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f909991e16b2/202006210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>夏至</tag>
      </tags>
  </entry>
  <entry>
    <title>小满</title>
    <url>/zh-CN/9c190b8ffab1/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小满</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9c190b8ffab1/202005200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小满</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 2020 全球开发者大会</title>
    <url>/zh-CN/43063c366637/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>全码力，走起。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/43063c366637/202006230001.png" class="" title="Apple 2020 全球开发者大会">
</div>

<div id="biaoti">
  <p>干货来了。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/43063c366637/202006230002.png" class="" title="Apple 2020 全球开发者大会">
</div>

<div id="biaoti">
  <p>前方高能，超在线。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/43063c366637/202006230003.png" class="" title="Apple 2020 全球开发者大会">
</div>

<hr>
]]></content>
      <categories>
        <category>开发者大会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>小暑</title>
    <url>/zh-CN/f8faa76c9012/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f8faa76c9012/202007060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小暑</tag>
      </tags>
  </entry>
  <entry>
    <title>大暑</title>
    <url>/zh-CN/52f023b239d8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/52f023b239d8/202007220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大暑</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift folklore（deluxe version）</title>
    <url>/zh-CN/c2aa7b630d83/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>据上张专辑《Lover》推出仅 11 个月后，我们惊喜地迎来 Taylor Swift 未经宣发便上线的又一全长录音室专辑《folklore》。这 11 个月看似短暂，期间发生的种种，尤其是全球疫情的蔓延，却让人感慨良多，回想起来恍若隔世。Taylor 在居家隔离期间，主动提出要与自己的几位乐坛偶像在线联手创作：美国艺术摇滚领军乐队 The National 的吉他手 Aaron Dessner，隐身于独立民谣乐队 Bon Iver 背后的 Justin Vernon，以及 Taylor 的长期合作对象 Jack Antonoff。他们共同打造了一场如羊毛衫般舒适熨帖，却值得深思回味的沉浸式听觉体验。</p>
<p>这张专辑与前作大相径庭。《the 1》以一句“我最近过的还好 &#x2F; 正在着手新鲜事（I’m doing good &#x2F; I’m on some new shit）”开场，你若以为这是她在汇报居家隔离的动态，或是交代最近满溢的敏感思绪，那也无可厚非。但事实上，Swift 近期将能量全盘倾注在歌曲写作上，它们化作一篇篇短篇小说和人物速写。其中既有普鲁斯特式的意识流闪回（《cardigan》有 Lana Del Rey 的影子），也描摹为社会所背弃的寡妇形象（《the last great american dynasty》），与 Bon Iver 合作的深沉二重唱《exile》则描绘了一段注定走向毁灭的爱情。这张专辑肌理丰富，充满想象。她在《seven》中唱道：“你长长的辫子像一枚神秘的图案 &#x2F; 对你的爱直至月球和土星亦不分离（Your braids like a pattern&#x2F;Love you to the moon and to Saturn）。”这是在讲述一则两位朋友策划一场逃亡的童话：“爱会像民谣被传唱下去一般 &#x2F; 生生不息（Passed down like folk songs &#x2F; the love lasts so long）。”这位优秀的唱作人，即便时刻生活在公众视线下，亦能挖掘出如此丰富的生活素材，这只能说明，Taylor Swift 的确在隔离期间获得了灵感和热望。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>多力特的奇幻冒险</title>
    <url>/zh-CN/28e6913473a2/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　故事发生在英国维多利亚女王（杰西·巴克利 Jessie Buckley 饰）统治时期，多力特（小罗伯特·唐尼 Robert Downey Jr. 饰）拥有着能够和动物交谈的特殊能力，和妻子一起在老家经营着一家动物医院。</p>
<p>　　一场意外夺走了多力特妻子的生命，这巨大的打击让多力特封闭起了心门，拒绝和任何人类接触。一天，一个名叫汤姆（哈里·科莱特 Harry Collett 饰）的男孩闯入了多力特的家，带来了一只受伤的松鼠，希望多力特能够救它。与此同时，维多利亚女王患上了一种怪病，于是派出了侍女萝丝（卡梅尔·拉尼亚多 Carmel Laniado 饰）去拜访多力特，请他出山。多力特所拥有的动物庄园归属于女王的名下，如果女王去世了，那么多力特将失去他和动物们这唯一的乐园。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>iMac 27 英寸（Intel，2020年）</title>
    <url>/zh-CN/91d7fcaf4665/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>实力满满在一身。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/91d7fcaf4665/202008060001.png" class="" title="iMac 27 英寸（Intel，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>立秋</title>
    <url>/zh-CN/b355090de589/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立秋</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b355090de589/202008070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立秋</tag>
      </tags>
  </entry>
  <entry>
    <title>处暑</title>
    <url>/zh-CN/5e31e0bf157e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>处暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5e31e0bf157e/202008220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>处暑</tag>
      </tags>
  </entry>
  <entry>
    <title>健身环大冒险</title>
    <url>/zh-CN/cd6788297380/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>信条</title>
    <url>/zh-CN/6c81a30cebec/</url>
    <content><![CDATA[<hr>
<h1 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h1><p>　　乌克兰基辅国家歌剧院，一伙蒙面歹徒突然闯入演出大厅，挟持在场数百名音乐家和观众。未过多久，乌克兰特警部队迅速赶到，并按照既定战术突入进去。与此同时，几名神秘之人换上特警部队肩章，趁乱潜入歌剧院，救出被困的美国大使。神秘人之一的男主“无名”（约翰·大卫·华盛顿 John David Washington 饰）虽然一度顺利完成任务，却身不由己置身死地。当他再度醒来，则被告知失去原有身份，此后将加入一个名为“信条”的秘密组织，去执行一项阻止世界毁灭的重大任务。早在歌剧院时，他便见识了一次逆转子弹的奇怪现象。而如今着手的任务，似乎正与逆转的子弹乃至逆转的时间息息相关。</p>
<p>　　注定发生的必然会发生，所种何因，便结何果……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>白露</title>
    <url>/zh-CN/293a2e02859c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>白露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/293a2e02859c/202009070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>白露</tag>
      </tags>
  </entry>
  <entry>
    <title>潘玮柏 节奏先生</title>
    <url>/zh-CN/bfff9e6cfe6a/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>演艺圈风风火火的多栖发展，未曾让潘玮柏偏移过音乐本心。在综艺主持、影视剧和潮牌生意多个领域均走得风生水起的同时，他依旧稳定保持着两三年为一个周期的节奏推出录音室专辑，和制作团队以高作品完成度回馈了粉丝坚定不移的支持。2017 年发行专辑《异类》时，正值潘玮柏首次以导师（制作人）身份登上综艺节目《中国有嘻哈》，在嘻哈文化随这档节目热播而呈现复兴之势的同时，他也顺势从流行外衣和多变“异类”的色彩中，逐渐强调“节奏先生”的嘻哈本色。</p>
<p>和《异类》呼应封面的“多彩”概念不同，这张专辑在整体听感上似乎没再延续欧美流行、更“电”的主气质，这也或许因为操刀制作专辑的幕后阵容中有 K-Pop 经验丰富的制作人 Hyuk Shin。专辑从名称开始便带着文字游戏的巧思，将“R&amp;B”的原意“Rhythm &amp; Blues”（节奏蓝调）重定义为“Rhythm &amp; Beats”，双重强调了它偏重节奏感的音乐底色，而传奇经典的 808 电子鼓机也被选为专辑编曲上的不二主角。同名主打歌《节奏先生》中大量运用了“燃烧”的意象（“把恶意全都烧成灰”、“不断燃烧黑暗小宇宙”），在重拍节奏的反复烘托之下，制造出一种烈焰升腾的感受，一如专辑封面设计，预示了想要达到“烫耳”的听感。随后无论是在融合 Future Bass 的《第二顺位》中呈现付出得不到回报的心酸狼狈，还是在复古舞曲《Kisses》中演绎因暧昧而爱得愈发疯狂，无不随着电子节拍的添薪加柴快速升温，袒露出生活之火和爱欲情热。</p>
<p>此外，潘玮柏也邀来流行好手与杰出新秀一同“燃烧”：在《中国新说唱》舞台上与黄旭、肖恩恩合作的《爱你 3000》、与袁娅维合唱的《Moonlight》都被收录进新专辑里，一动一静，铺开生活和追梦路上的心情画卷。潘玮柏重填中文词的《Moonlight》隐藏在专辑尾声，不单单只是文本的转译，也是对几年前创作这首歌时心境的重返。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Apple Music</tag>
        <tag>潘玮柏</tag>
      </tags>
  </entry>
  <entry>
    <title>花木兰</title>
    <url>/zh-CN/9db7696a528f/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　迪士尼影业荣誉出品《花木兰》由备受赞誉的电影导演妮基·卡罗执导，将中国传奇战士的史诗故事全新呈现。影片讲述了一位无所畏惧的年轻女子义无反顾为家国而战，成为中国史上最著名的伟大勇士之一。当皇帝下令境内每个家庭必须有一位男丁应召出征，抵御北方来犯者入侵，出身军戎之家的长女花木兰，挺身而出，替病痛缠身的父亲应征入伍。她女扮男装化名“花军”，一路历经磨练，驾驭自己内心的力量，激发真正的潜能。通过这段传奇历程，她将成为一名光荣的勇士，不仅赢得国家的认可，更博得父亲的骄傲。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/356f4b5adf57/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>时间这就到了。</p>
</div>

<div id="biaoti">
  <p>一点走起，轻一点。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/356f4b5adf57/202009160001.png" class="" title="特别活动">
</div>

<div id="biaoti">
  <p>回顾时间到。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/356f4b5adf57/202009160002.png" class="" title="Apple Watch Series 6（S6，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/356f4b5adf57/202009160003.png" class="" title="Apple Watch SE（S5，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/356f4b5adf57/202009160004.png" class="" title="iPad Air（A14，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/356f4b5adf57/202009160005.png" class="" title="iPad（A12，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Watch Series 6（S6，2020年）和 Apple Watch SE（S5，2020年）</title>
    <url>/zh-CN/15287cf621fb/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Apple Watch Series 6</p>
  <p>健康的未来，</p>
  <p>现在戴上。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/15287cf621fb/202009200001.png" class="" title="Apple Watch Series 6（S6，2020年）">
</div>

<div id="biaoti">
  <p>Apple Watch SE</p>
  <p>事事拿手，</p>
  <p>轻松入手。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/15287cf621fb/202009200002.png" class="" title="Apple Watch SE（S5，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Watch</tag>
      </tags>
  </entry>
  <entry>
    <title>iPad（A12，2020年）</title>
    <url>/zh-CN/b57b4ae6eaa7/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad</p>
  <p>特有本事，特超值。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b57b4ae6eaa7/202009210001.png" class="" title="iPad（A12，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title>秋分</title>
    <url>/zh-CN/78460c80d838/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>秋分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/78460c80d838/202009220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>秋分</tag>
      </tags>
  </entry>
  <entry>
    <title>寒露</title>
    <url>/zh-CN/6a439557bba8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>寒露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6a439557bba8/202010080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>寒露</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/0370ba4194b1/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140003.png" class="" title="iPhone 12 Pro（A14，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140004.png" class="" title="iPhone 12（A14，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140005.png" class="" title="MagSafe 磁吸配件">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0370ba4194b1/202010140006.png" class="" title="HomePod mini（2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>霜降</title>
    <url>/zh-CN/a53086a7da4e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>霜降</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a53086a7da4e/202010230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>霜降</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 12 Pro（A14，2020年）和 iPhone 12（A14，2020年）</title>
    <url>/zh-CN/1d01b5c1d56f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPhone 12 Pro</p>
  <p>自我再飞跃。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1d01b5c1d56f/202010230001.png" class="" title="iPhone 12 Pro（A14，2020年）">
</div>

<div id="biaoti">
  <p>iPhone 12</p>
  <p>升维大提速。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1d01b5c1d56f/202010230002.png" class="" title="iPhone 12（A14，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>周杰伦 黑胶唱片</title>
    <url>/zh-CN/357b0e6daabc/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><h2 id="JAY-2000-11-06"><a href="#JAY-2000-11-06" class="headerlink" title="JAY[2000.11.06]"></a>JAY[2000.11.06]</h2><p>千禧年世纪更迭之际，R&amp;B 在华语乐坛逐日兴起，众多歌手共同推动着中文流行乐风的悄然改变。此时此刻，一张名为《杰伦》的专辑也从台湾阿尔发唱片横空出世，那些在第一时间买下专辑的听众，有幸目睹了乐坛揭开“唱作新世代”的大幕。专辑中十首歌不落窠臼，诸多新鲜音乐元素和歌词主题，凸显出这位首发新人独特的个人印记。“周杰伦”这个名字也随着作品的新鲜感和冲击力，闯入了大众视线。</p>
<p>1997 年，18 岁的他被吴宗宪慧眼识英，从选秀舞台转身进入唱片公司做助理，开始三年幕后历练。童年时代的钢琴练习和高中时期的音乐学习，加上从国内外所爱艺人身上汲取的营养，让周杰伦创作起流行乐来得心应手。</p>
<p>在《杰伦》诞生期间，他在阿尔发录音棚内潜心闭关创作。在结识了同样怀揣才华，却还没有开始大展拳脚的方文山后，两人碰撞出了许多灵感火花。《杰伦》为未来两人亲密无间的合作打下第一块基石，而两位鬼才搭档也开始创作出大量“反常规”的华语流行歌：把打篮球写出内心戏、充满 battle 感的嘻哈单曲《斗牛》，主题颇有异趣、酸性爵士风的《印地安老斑鸠》，这些新鲜声音为乐坛划下不同寻常的光亮弧线。而周杰伦的古典乐素养，也从飘逸着巴洛克美学的弦乐和大键琴旋律中向外展现。</p>
<p>和他的许多经典曲目一样，古风文化、嘻哈功夫与创新，时空穿梭感，招牌情歌，这几大特色从首专《杰伦》中都已开始铺垫。其中的《娘子》完美体现了周杰伦对中文说唱的独到理解——不仅在那个年代就创作出了中文旋律说唱，更突破了中文声调对说唱表现的限制，影响力绵延至今。而《娘子》中满满的古风意境，也是他与方文山二人标志性“中国风”的开场，在周杰伦以传统文化为主线的创作分支上有着开宗立派的非凡意义。另外，从情歌这条创作脉络上看，这张专辑的成绩也让人感到非常惊艳。与徐若瑄合作的《可爱女人》《龙卷风》都成为传唱最广的中文单曲之一。</p>
<p>机缘加上多年历练，让《杰伦》一出手便成为了启发华语乐坛创意的重要作品，在当时乐坛还处于“后知后觉”的时候，专辑封面上这位腼腆的卷发男孩，已在酝酿更大的精彩，朝着未来一代新“天王”的模样疾速成长。</p>
<h2 id="范特西-2001-09-14"><a href="#范特西-2001-09-14" class="headerlink" title="范特西[2001.09.14]"></a>范特西[2001.09.14]</h2><p>回溯时代潮流，《范特西》出世前，新时代的 R&amp;B 和嘻哈音乐早已席卷全球，华语乐坛也有诸如陶喆、王力宏等歌手加入这波浪潮。周杰伦也乘着这股势头而起，却更胜一筹地以国语、台语、日语交织穿梭，嘻哈、R&amp;B、古典、摇滚，你方唱罢我登场，大胆而丰富的想象轮番上演，让《范特西》至今听来依然是一套集创造力之大成、难以望其项背的流行幻想组曲。</p>
<p>既以“幻想”之名，必有幻想之境。《范特西》中的每一首歌就是一颗镜头，以听觉塑造画面，带人走入古今中外的各色影像：《爱在西元前》融合 R&amp;B 与嘻哈，用老式唱机的效果处理前奏，开启时空漩涡，穿越到三千七百多年前的古巴比伦；以五声音阶谱写的《上海一九四三》，民国时老上海的气息扑面而来，斑驳的岁月浮现在眼前；只用一个和弦完成的《忍者》，透过周杰伦特有的含混念白和日式意象营造音乐的临场感；而诡谲迷离的《威廉古堡》以管风琴演奏和声小调音乐，让人仿佛置身中世纪欧洲，探访吸血鬼的生活。这一切，由方文山的词、周杰伦的曲，以及林迈可、洪敬尧、钟兴民领衔的编曲实现，三者缺一不可。</p>
<p>如果说首张专辑中的《娘子》是中国风加上说唱的先声，那么破天荒将重金属、古典钢琴、嘻哈、Funk 等多种元素融合而成的《双截棍》，则直接将“中国风说唱”化为独属于周杰伦的音乐流派，一句怪诞的“哼哼哈兮”至今仍是人们眼中时代经典的呐喊。而《双截棍》对中国功夫的致敬、《爸我回来了》对家庭暴力的控诉，在天真烂漫的《简单爱》和钢琴主打的《安静》为代表的传统华语抒情歌之外，大大丰富了专辑的表达层次，也让专辑的文化内涵更上一层楼。</p>
<p>2000 年后，沉睡的华语乐坛能说是被《杰伦》惊醒，再被《范特西》拉着狂奔至新的次元，大家逐渐认识到多元题材的可能，而这一切都源自于周杰伦喷薄而出的才情和天马行空的创作。对周杰伦本人而言，《范特西》开启了他创作的范式，一套成熟的方法论就此确立。如今看来，这张专辑绝对是周杰伦音乐生涯里的高峰，也成为无数音乐人相继模仿，却难以逾越的时代标杆之作。</p>
<h2 id="八度空间-2002-07-18"><a href="#八度空间-2002-07-18" class="headerlink" title="八度空间[2002.07.18]"></a>八度空间[2002.07.18]</h2><p>歌曲可以拥有与电影媲美的叙事性吗？在短短四分钟左右的歌曲里，43 分钟的专辑《八度空间》中，周杰伦用旺盛的创作力和狂想尝试构建出这样的“空间”。“八度空间”意指西方的八度音阶，在看似局限的音乐空间中，周杰伦用他平时从电影和 MV 得来的灵感，给每首歌曲赋予了情节，打造没有维度限制的音乐异想世界。</p>
<p>在发行第三张专辑《八度空间》之前，周杰伦已经在音乐市场红出了一片天地，他在《八度空间》中大量使用前两张专辑成功的公式，曲目选用的音乐手法与《范特西》十分类似，而这一时期的周杰伦对于旋律、题材以及各类曲风元素的驾驭也更加炉火纯青。虽是爆红后的又一张专辑，但他依旧以创作者的身份在专辑创作中占了大量篇幅，包揽每首歌曲的作曲和制作，并搭档方文山、许世昌等词人在主题上进行了又一轮自我探索。“爷爷泡的茶，有一种味道叫做家”，这句话反复出现在《爷爷泡的茶》中，将视角从“茶”切到“家”，穿插着中国历史典故，“爷爷说的话”似乎在耳边回响。闽南语的《火车叨位去》则搭载了他的寻根之旅，如此强的乡土意识在此之前从未出现过，对比周杰伦后期的专辑主题，这些乡土情怀十分难能可贵。</p>
<p>专辑开篇的《半兽人》来自《魔兽争霸III》的游戏内容，采样游戏里行军步伐与机枪的音效，管弦乐与说唱同频率燃起“兽族”之魂，刻下了那个年代特有的印记。主打曲《半岛铁盒》借物抒情，以原声吉他和铙钹为主的乐器勾勒出简单而浪漫的旋律，与清新深情的《暗号》《回到过去》共同成为走入人心的“周氏”抒情经典。结合说唱、摇滚的《龙拳》，是继《娘子》《双节棍》之后的又一首染指中国风的创意作品，以中国功夫为灵感，糅合中国文化的唱词配合强有力的“宫廷式鼓点”，来势汹汹。《米兰的小铁匠》则将叙事画面从中国转移至意大利，用异国情调的中快板音符勾勒出一段东欧的童话故事。</p>
<p>家庭、家乡、爱情、中国功夫、游戏故事，这些主题一一走过后，周杰伦最后落脚在了“友谊”，《最后的战役》就是为纪念他与刘畊宏之间的友谊而创作。周杰伦和方文山将兄弟情的阵地放在战场，MV 也还原出他脑中的战争场面，长达 14 分钟的微电影版 MV 预演了他未来的电影梦，而在当时，没有人这样拍 MV。为了还原他心中的故事画面，周杰伦一行专程赶到欧洲拍摄，分别在意大利、捷克和法国等国拍摄了专辑中四支单曲的 MV。</p>
<p>《八度空间》总体上延续了前两张专辑中奠定的编曲基调，个人作品风格也愈加成熟，令周杰伦再度势如破竹，拿下多项大奖，缔造华语乐坛新纪录的同时，也以销量给当年饱受盗版之苦的唱片行业带来希望。而先前的“杰”出成绩，更让《八度空间》得到了主流流行乐的宣发待遇，得以进一步跨出台湾，影响世界各地的听众。</p>
<h2 id="叶惠美-2003-07-31"><a href="#叶惠美-2003-07-31" class="headerlink" title="叶惠美[2003.07.31]"></a>叶惠美[2003.07.31]</h2><p>从“以父之名”判决罪恶的杀手，到等待“晴天”的短暂爱恋，再到奏响一曲“东风破”以纪念离人……周杰伦穿梭时空之间，将复古与现代巧妙融合，创造出时下流行乐不曾有的新元素。以最敬爱的母亲姓名命名专辑，主打歌《以父之名》又与之诙谐呼应，但实则其是以电影《教父》为灵感，探讨教父荣耀背后的孤独，复古的音乐钢琴辅以意大利念白，加之融入歌剧元素，塑造出的黑暗哥特曲风一度冲击着主流的流行乐，而新兴鬼才黄俊郎的词作更是锦上添花。禁毒主题的《懦夫》中，“周式”说唱搭配重金属摇滚风格，则再次突围流行乐的风格边界。方文山作词的《东风破》以唐诗宋词入歌，配上二胡与琵琶弹奏的古曲小调，缱绻的旋律扣人心弦，这一首创的中国风歌曲在流行乐领域开凿先河，至今仍是中国风歌曲难以逾越的标杆。</p>
<h2 id="七里香-2004-08-03"><a href="#七里香-2004-08-03" class="headerlink" title="七里香[2004.08.03]"></a>七里香[2004.08.03]</h2><p>“溪水急着要流向海洋，浪潮却渴望重回土地。”或许是受到席慕蓉的诗集《七里香》影响，周杰伦才决定在这张专辑中选择以“说书人”的身份讲述一个个故事。对无邪童年、纯情青春的回溯，对虚伪成人世界、战争之恶的叛逃，对老人日常生活的浪漫化描述与对亲情的呼唤，在这些故事中交替出现，让整张专辑的立意显得饱满而厚重。周杰伦肆意挥洒才情，在不同曲风的混搭中将故事性填充得更加完满。《困兽之斗》阴暗的重金属旋律、《外婆》悠扬的笛声、《止战之殇》萧瑟如秋风的钢琴、《七里香》满是柔情的弦乐，契合情境又别出心裁，给人以强烈的实感。周杰伦天马行空的想象力，以及方文山等作词人精妙的笔触，让这张专辑在多年后听来，带给人的触动仍久久无法弥散。</p>
<h2 id="11月的萧邦-2005-11-01"><a href="#11月的萧邦-2005-11-01" class="headerlink" title="11月的萧邦[2005.11.01]"></a>11月的萧邦[2005.11.01]</h2><p>2005 年，原本固定在夏天带来新作的周杰伦，罕见延至多愁善感的 11 月推出这张专辑。继承他崇敬的古典音乐家——波兰“钢琴诗人”萧邦的浪漫与感性，幻化为伫立于寒风中的音乐诗人“11 月的萧邦”，序幕《夜曲》飘散寒意与忧伤的前奏响起，专辑即布下浓浓的秋凉色调。</p>
<p>《夜曲》虽然并非以钢琴为主旋律，但与萧邦充满浪漫色彩的同名钢琴曲体裁不谋而合。方文山动用了“嗜血”“幽冥”等充满冷调画面的词汇，逝去的爱情在心中怅然回响，呼应了这张专辑发布的季节。不止这首主打歌，整张专辑的流行架构中埋入了许多古典音乐的动机：在《蓝色风暴》格里高利咏叹调和新金属的华丽转接中，周杰伦又一次乘坐上时空穿梭的机器；《逆鳞》的硬核气息底部铺陈的是钟兴民恢弘磅礴的弦乐，颇显人性的沉重和命运的荒诞。</p>
<p>专辑发行的同一年，周杰伦踏出了歌手、演员双栖发展的第一步。为首部主演的电影《头文字 D》创作的主题曲和插曲《飘移》和《一路向北》双双收录于《11月的萧邦》，无论是前者说唱嫁接凤阳花鼓副歌唱腔，还是后者在英式摇滚的首尾叠加赛车发动声采样的做法，都丰富了专辑的创意。对影像创作产生兴趣的周杰伦，在这张专辑的制作过程中亲自掌镜，拍摄了《发如雪》那支色调浓郁的 MV，与歌曲幽深古典的中国风氛围完美契合。《11月的萧邦》带给周杰伦的执导经验，以及对深厚古典音乐素养的再一次激活，某种程度上都为不久之后他首部自导自演的电影《不能说的·秘密》的诞生打下了基础。</p>
<p>连续五张引领乐坛的杰作，周杰伦至此已经确立天王地位。在风格强烈，映射与狗仔队摩擦的《四面楚歌》中，其中一句“我始终还是我，谁都改变不了我”，呼应了当年在《外婆》中唱道的“我没输，不需要改变”，已经登上华语乐坛高峰的周杰伦，以此证明保持本色便足够出色。</p>
<h2 id="依然范特西-2006-09-05"><a href="#依然范特西-2006-09-05" class="headerlink" title="依然范特西[2006.09.05]"></a>依然范特西[2006.09.05]</h2><p>急促的打字机声响拉开《夜的第七章》里侦探游戏的序幕，画面一转又来到了《千里之外》载满离别的舞榭歌台，再带着歌迷踏进《迷迭香》里的小酒馆，品尝爵士乐的悠闲与慵懒。“想像依然无限大，感觉依然说不完，音乐依然范特西。”正如第 7 张录音室专辑《依然范特西》的宣传语所说，周杰伦以专辑标题呼应着 2001 年的经典专辑《范特西》，继续用创作才华为人们带来一场流行佳宴。</p>
<p>出道一年后的第二张专辑《范特西》造出轰动式成功，往后每当推出新作依然反响强烈——但这也让他在创新与突破之路上更为艰难。经历古典与流行的交织实验、说唱推进，五年后推出的《依然范特西》，便是回头将这些时日成果实践到底，也是一次他对自己写歌招式的延续性探索。延续《范特西》极强的画面感与叙事感，由黄俊郎填词的开篇序曲《夜的第七章》，能从中听到自《威廉古堡》《以父之名》和《夜曲》一脉相承的暗风格，如出一辙的说唱风格与冷峻色调，但舞台搬到了英国伦敦，演绎一出福尔摩斯式的探案剧集，而带有戏剧色彩的男女对唱、古典融合嘻哈的音乐形式，更是新颖非常。音乐主题上，《听妈妈的话》歌颂母爱，与收录于《范特西》中控诉暴力的《爸我回来了》的家庭主题相对应，也让人联想到他以母亲名字为题的第四张专辑《叶惠美》，以及其中《三年二班》与青少年对话的主题。首度尝试 Bossa Nova 风的《迷迭香》大量使用爵士和声，展现出暧昧色彩，却是献给年轻时爱跳舞的外婆的温情之作。由钢琴主奏的《退后》与运用大量弦乐的《白色风车》，同时继承了《范特西》中《开不了口》以及《11 月的肖邦》中《枫》的纯情底色。</p>
<p>这张专辑则继续对中国风进行探索与突破。主打歌《千里之外》延续《东风破》式的 R&amp;B 曲风，并邀来费玉清合唱，带领这股风潮攀上新高峰，成为中国风发展一路以来绕不开的经典。嘻哈加电子乐打造《本草纲目》，继续展现解构传统文化的精妙。作为专辑结尾的《菊花台》，古风注入流行曲的流畅中，配合着管弦乐，演绎得字正腔圆。连续三首中国风作品，也印证了周杰伦在个人音乐概念上的日臻成熟。</p>
<p>在那个还不重视 beat 制作者的年代，与《本草纲目》一同将 beat 做得尤为出彩的，还有《红模仿》。周杰伦在其中总结自己的“中国风”心路历程，给模仿他的后辈们唱出忠告，“我常常在想 &#x2F; 宇宙只有一颗太阳 &#x2F; 为什么我的影子这么多这么像”，戏谑口吻讽刺乐坛走不出的“周杰伦现象”。周杰伦在影坛的探索也使得他对镜头产生了浓厚兴趣，专辑 10 首歌曲的音乐视频均由他本人导演，展现了他在影视方面的才华，也为他之后执导电影长片打下了坚实基础。作为周杰伦在阿尔发时代的最后一张专辑，这既是结束，也是开始，他仍在继续用源源不断的灵感继续带给人们惊喜。</p>
<h2 id="我很忙-2007-11-02"><a href="#我很忙-2007-11-02" class="headerlink" title="我很忙[2007.11.02]"></a>我很忙[2007.11.02]</h2><p>《我很忙》是周杰伦经亲自担纲作曲与监制，并由他组建的杰威尔唱片公司发行的首张专辑。以“西部复古”的影像灵感进行了专辑的概念创作，词作由周杰伦与老搭挡方文山、黄俊郎共同书写，掀起了那年的西部牛仔风。甜美流行、阳光励志、中国古风与美国乡村，周杰伦在众多风格间来回跳跃，上演十分写意的“我很忙”，并以此斩获第 19 届台湾金曲奖最佳国语专辑奖。《青花瓷》的古典意象和中国传统乐器编织出熟悉的中国风，成为当年的年度主打。《彩虹》的旋律来自电影《不能说的秘密》的插曲《First Kiss》，求而不得的苦涩心事蔓延至许多听者的数个年头。不过还好还好，俏皮快速的《牛仔很忙》，甜蜜温馨的《甜甜的》等歌曲，治愈地平衡了这张专辑的“甜咸差”，声音背后，还是那个能让你笑中带泪的杰伦。</p>
<h2 id="魔杰座-2008-10-15"><a href="#魔杰座-2008-10-15" class="headerlink" title="魔杰座[2008.10.15]"></a>魔杰座[2008.10.15]</h2><h2 id="跨时代-2010-05-18"><a href="#跨时代-2010-05-18" class="headerlink" title="跨时代[2010.05.18]"></a>跨时代[2010.05.18]</h2><p>从一个只会在录音室创作的男孩，到成长为引领华语流行乐坛的重要人物，杰伦希望自己的音乐可以永远流传，在每次迈出下一步时，可以跨越自己也跨越世代。首波主打《超人不会飞》写下周杰伦出道十年的心路历程：在大众的眼中，就该是专辑拿冠军，电影要大卖，面对这个过度八卦和批判、不易满足的时代里，就算是刀枪不入的超人，也会觉得疲惫。虽然是批判性的说唱，但诙谐口语式的歌词，在温暖的旋律下缓缓唱出，让人还是觉得杰伦拥有温和的亲近感。同名曲《跨时代》融合古典元素的重摇滚电子曲风，华美诡谲的 MV 以中世纪吸血鬼为背景，霸道说着自己的音乐，如吸血鬼般永远不老的宣言。杰伦坚持音乐与梦想的初心不曾随岁月改变，真情流露的他无论是否完美，相信都可以打动乐迷的心。</p>
<h2 id="惊叹号-2011-11-11"><a href="#惊叹号-2011-11-11" class="headerlink" title="惊叹号[2011.11.11]"></a>惊叹号[2011.11.11]</h2><p>随着专辑同名曲《惊叹号》中乘风破浪的强音开场，周杰伦化身船长，开足马力驾“惊叹号”航船朝 2011 年驶来。正当歌迷期待这次会听到怎样的“周氏”情歌或中国风歌曲，接下来《迷魂曲》开场的电子音效却出乎所有人的意料，也难怪让彼时乐坛不断发出“周杰伦变了”的惊呼。</p>
<p>电子乐成分的大幅提升可以说是《惊叹号》的最大特点，继上张专辑以同名曲《跨时代》对电子音乐及 Auto-Tune 技术小试牛刀后，周杰伦在这张专辑中开始大展拳脚，不仅于《疗伤烧肉粽》《超跑女神》加入彼时尚未席卷华语市场的 EDM 拍点，更是在《迷魂曲》和《Mine Mine》中再度以 Auto-Tune 强化人声表现力，使之成为巧妙交融国语、台语的有力武器。</p>
<p>尽管《说了再见》《明明就》等情绪大开大合的“周氏”情歌，或《青花瓷》《发如雪》等标志性中国风作品在这张专辑中存在感有所减少，但深厚的古典乐素养和创作上的巧思，让周杰伦继续探索流行与古典的融合：《琴伤》大玩钢琴、电子乐、说唱、美声，呼应专辑“水手”的主题概念，重新解读了柴可夫斯基经典的《六月船歌》，还在间奏中嵌套了莫扎特的《土耳其进行曲》；《水手怕水》更是诙谐混搭爵士钢琴段落与说唱，带给人热闹缤纷的享受。</p>
<p>即便放诸周杰伦整个音乐生涯，《惊叹号》的“玩心”都显得足够大胆。而不断向前看的同时，周杰伦其实也从过往的专辑中萃取新鲜的灵感：《公主病》延续了《阳光宅男》的爽朗词曲；俏皮搞怪的《水手怕水》则让人迅速联想至《牛仔很忙》；《世界未末日》以大气又充满希望感的英式摇滚风一举驱散了早期创作《世界末日》的绝望。</p>
<p>从专辑发行的年份、歌曲数量皆以数字“1”指代“惊叹号”做文章，破天荒以美式漫画风格为专辑封面，再到“船舱它是我的家，大海是我嘘嘘的地方”“烧肉粽，如果你想吃不需要等到端午节”这些充满童趣任性的歌词，我们仿佛能看到不甘循规蹈矩的周杰伦穿着水手服、拿着望远镜，狡黠眨眼的模样。而如今，“变了”的惊呼早已平息，再次细听《惊叹号》收录的十一首歌曲才明白，周杰伦创作生涯的这次掌舵急转并非迷航，而是望见新大陆的一次惊叹和探索。</p>
<h2 id="十二新作-2012-12-28"><a href="#十二新作-2012-12-28" class="headerlink" title="十二新作[2012.12.28]"></a>十二新作[2012.12.28]</h2><p>或许是前作的电音尝试过于大胆且突然，又或是标志性中国风和抒情歌的缺失让熟悉周杰伦的人一时之间难以释怀，《惊叹号》的发行给周杰伦带来了极大的市场争议和评价。而在出道第 12 年的第 12 个月，周杰伦用“12”这一象征“圆满”的数字，推出《十二新作》，既是成全自己和乐迷的一次圆满，也为自己“一年一专”的音乐事业画上一个分号。</p>
<p>为了完成这张充满仪式感的专辑，周杰伦跑去苏格兰，换上一头金发，一身中世纪骑士打扮，在当地完成 MV 的拍摄，并将看到的景象分享给方文山，两人在你来我往的通话中将海鸥、风笛、中世纪城堡写进歌里，完成了专辑中歌曲《明明就》的创作，这首歌正是以苏格兰的凄美景色为引，表现身处地球两端的恋人无法触碰而输给距离的挣扎与无奈。</p>
<p>同样的悲欢离合，从中世纪古堡飘回清朝，《红尘客栈》以古筝与巴乌为辅奏讲述侠客美人故事，周杰伦罕见地在此类作品中以钢琴作为主角，更是继 2006 年《依然范特西》的《千里之外》后再次被选为首波主打的中国风歌曲。专辑中最跳 tone 的讽喻小品《公公偏头痛》，亦是脍炙人口的中西合璧。</p>
<p>吸取《惊叹号》的教训，贯穿前作的电子乐在《十二新作》中迅速收紧，仅在开篇的《四季列车》和《手语》中有所体现，铜管乐器混搭电音声响、人声 Auto-Tune 演唱仿佛是周杰伦有意设的一个幌子，但前者酣畅淋漓的快节奏嘻哈、后者深情婉转的 R&amp;B 抒情，仍保留着典型的周氏内核。而继续往下听，歌迷们期盼已久的“周氏”情歌其实在这张专辑里已然成了不可忽视的主角。尽管承袭他一贯的柔情中板，流畅的钢琴与弦乐让四周空气都满溢着甜蜜和温情，但他也想出办法让人耳目一新：《傻笑》邀来师妹袁咏琳深情对唱，《比较大的大提琴》与南拳妈妈成员杨瑞代、梁心颐合唱，大玩流行乐圈少见的大量爵士乐元素，这是自 2005 年的《珊瑚海》后再次于专辑中加入合唱作品。</p>
<p>除此之外，专辑的填词多半依然交由方文山操刀，但也有两首歌曲交给新生代作词人，展现出截然不同的味道：《爱你没差》由写出耳熟能详的《花海》的词作者黄凌嘉执笔；励志金曲《梦想启动》则由马拉松运动员林义杰填词、国际钢琴巨星郎朗贡献核心钢琴旋律所共谱，这首歌还被棒球手陈伟殷作为伤后复出球赛的进场指定曲，创下美国职棒大联盟史上首度以华语歌曲作为开场曲的纪录。</p>
<p>自这张专辑后，周杰伦放慢了音乐创作的脚步。尽管《十二新作》最终只获得金曲奖入围，在许多人看来或许是当年的金曲遗珠，但“十二新作”之名不只代表这张专辑有十二首全新创作，更是从概念、创作等各方面，在熟悉的杰伦风格中寻找不同以往的新意。</p>
<h2 id="哎呦，不错哦-2014-12-26"><a href="#哎呦，不错哦-2014-12-26" class="headerlink" title="哎呦，不错哦[2014.12.26]"></a>哎呦，不错哦[2014.12.26]</h2><p>周杰伦之所以能成为华语乐坛十多年来的标杆，除了独一无二的个人风格对流行音乐审美的革新之外，另一个重要的原因就是稳定且多产的发片频率。曾经很长一段时间里，他都保持着一年一专的惯例向歌迷致以感谢和诚意，但其中也有破例的时候。2010 年的《跨时代》带着出道十周年的重要意义酝酿两年，而在周杰伦处于人生重要转折期的 2014 年，第 13 张专辑《哎呦，不错哦》也用两年的创作时间，仔仔细细归纳了他生活、事业和人生态度的种种跨越。</p>
<p>除了演艺事业之外，对周杰伦来说人生中最重要的时刻之一莫过于 2014 年与妻子昆凌步入婚姻殿堂的那一天。然而，与浪漫而庄严的婚礼一同进入周杰伦生活中的这张新专辑，却充满了令人意外的轻快生活感。周董招牌口头禅命名的标题给专辑定下了轻松幽默的基调，而那几年闯荡好莱坞和百老汇的经验，令他萌发出创造一个“喜剧演员”的全新音乐人设。首支主打歌《鞋子特大号》吸纳了从喜剧泰斗卓别林身上得到的灵感，以谐仿默片配乐的爵士乐风格搭配周杰伦喜感十足的唱腔，给人以耳目一新的听感。而从《阳光宅男》《公主病》等作品中延续下来的那种朴实而热血的生活激情，也在和好友杨瑞代合作的《我要夏天》中再一次得到激活。两个已过而立之年的大男人，依旧在夏日骄阳般的摇滚节奏中，诠释男孩的热情和幽默。</p>
<p>有别于早期的《简单爱》《晴天》等满眼都是少年热恋和青春往事的爱情歌曲，这张专辑里的《算什么男人》和《听爸爸的话》选择用更内敛的抒情吐露男人内心的情感波澜，“周氏”情歌也随着周杰伦年龄的成长和人生阅历的丰富变得愈发成熟。而原本由女歌手魏如昀在 2013 年方文山执导的同名电影中演唱的主题曲《听见下雨的声音》，在时隔一年后收入了这张专辑的尾声，带着诚意与敬意，周杰伦尝试用他充满力量感的演绎方式，赋予原版中女性那大雨滂沱般的情感新的生命力。</p>
<h2 id="周杰伦的床边故事-2016-06-24"><a href="#周杰伦的床边故事-2016-06-24" class="headerlink" title="周杰伦的床边故事[2016.06.24]"></a>周杰伦的床边故事[2016.06.24]</h2><p>从青涩少年成长为成熟男人，一路走来，周杰伦一直用他最擅长的方式诠释他最珍视的亲情与爱情。而如今已是一家之主的他，又因女儿海瑟薇的降生多了一层父亲身份。从前面对镜头耍酷卖萌，现在他已经无条件地将自己童真烂漫的一面留给女儿。初为人父的心情，从周杰伦的第 14 张专辑《周杰伦的床边故事》的标题就可略知一二。</p>
<p>“女儿是爸爸前世的情人”，这说法虽然俗套，却也足以形容周杰伦的爱女之情。女儿四个月大即兴弹奏的一段旋律，被他当作《前世情人》的动机，编织出一套浪漫幻想：这段旋律来自女儿前世的记忆，而来到这一世后，她依然不忘弹给他听。这份父爱的满足和深情，应证着周杰伦此前从未曾有过的生活状态。而过去在《麦芽糖》等歌曲中展露的天真和童心，来到这一张专辑中也变得格外贴切真实。《床边故事》宛如童趣探险版的《威廉古堡》，在魔幻的氛围中拉开一场暗夜童心大冒险。古典与电子音符华丽并行，书写成一本浓浓周氏风格的另类“床边故事”。</p>
<p>虽已为人父，但有关爱情的想象，却依然没有离开周杰伦的音乐世界。标准的“周氏”甜歌《告白气球》用轻松写意的姿态，挥洒法式浪漫情怀，犹如置身阳光明媚的塞纳河畔。继《珊瑚海》之后，《不该》成为周杰伦另一首大热的男女对唱情歌，抒情的摇滚底蕴搭配琅琅上口的歌词，使之成为后期的“周氏”情歌中颇具传唱度的佳作。</p>
<p>继承曾经《半兽人》的电玩精神，为《英雄联盟》创作的主题曲《英雄》开启了周杰伦另一篇热血篇章，令人感受到周杰伦依旧保有的一颗赤子少年心。由他亲手把控编曲的《土耳其冰淇淋》中同样充分展露着他的玩心，在亚细亚风情的主基调之上，蓝调、爵士、电子乐元素色彩纷呈，每个段落自成一体，透过听觉联动却又形成一种奇妙的和谐。《周杰伦的床边故事》是变与不变的交集，身份和心境转变的同时，周杰伦在音乐上创新探索的精神与活力，却始终如一。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>周杰伦</tag>
        <tag>黑胶</tag>
      </tags>
  </entry>
  <entry>
    <title>立冬</title>
    <url>/zh-CN/922aa34a3c34/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立冬</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/922aa34a3c34/202011070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立冬</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 12 Pro Max（A14，2020年）和 iPhone 12 mini（A14，2020年）</title>
    <url>/zh-CN/0745e9b09803/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/0745e9b09803/202011130001.png" class="" title="iPhone 12 全系列">
</div>

<div id="biaoti">
  <p>iPhone 12 Pro Max</p>
  <p>自我再飞跃。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0745e9b09803/202011130002.png" class="" title="iPhone 12 Pro Max（A14，2020年）">
</div>

<div id="biaoti">
  <p>iPhone 12 mini</p>
  <p>升维大提速。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0745e9b09803/202011130003.png" class="" title="iPhone 12 mini（A14，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/a6fe6e2c94a4/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/a6fe6e2c94a4/202011110001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a6fe6e2c94a4/202011110002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a6fe6e2c94a4/202011110003.png" class="" title="MacBook Air 13 英寸（M1，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a6fe6e2c94a4/202011110004.png" class="" title="MacBook Pro 13 英寸（M1，2020年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a6fe6e2c94a4/202011110005.png" class="" title="Mac mini（M1，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>31岁生日快乐</title>
    <url>/zh-CN/8acba439516e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>生日快乐</p>
</div>

<div style="text-align:center;">
  <a href="/anniversary/">
    <img src="/zh-CN/8acba439516e/202011150001.svg" class="" title="纪念日">
  </a>
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Air 13 英寸（M1，2020年）、MacBook Pro 13 英寸（M1，2020年）和 Mac mini（M1，2020年）</title>
    <url>/zh-CN/9fdddcb07933/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/9fdddcb07933/202011180001.png" class="" title="Mac">
</div>

<div id="biaoti">
  <p>MacBook Air</p>
  <p>实力，来得轻巧。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9fdddcb07933/202011180002.png" class="" title="MacBook Air 13 英寸（M1，2020年）">
</div>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>一 Pro 到位。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9fdddcb07933/202011180003.png" class="" title="MacBook Pro 13 英寸（M1，2020年）">
</div>

<div id="biaoti">
  <p>Mac mini</p>
  <p>平添内力，更霸气。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9fdddcb07933/202011180004.png" class="" title="Mac mini（M1，2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>小雪</title>
    <url>/zh-CN/b44c75fa8786/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b44c75fa8786/202011220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小雪</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift folklore the long pond studio sessions（from the Disney+ special）[deluxe edition]</title>
    <url>/zh-CN/8ac0af8cb0f2/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>据上张专辑《Lover》推出仅 11 个月后，我们惊喜地迎来 Taylor Swift 未经宣发便上线的又一全长录音室专辑《folklore》。这 11 个月看似短暂，期间发生的种种，尤其是全球疫情的蔓延，却让人感慨良多，回想起来恍若隔世。Taylor 在居家隔离期间，与 The National 的吉他手 Aaron Dessner，以及 Taylor 的长期音乐伙伴 Jack Antonoff 进行合作。他们共同打造了一张与前作大相径庭的低保真卧室流行专辑，带来一场值得深思回味的沉浸式听觉体验。</p>
<p>《the 1》以一句“我最近过的还好 &#x2F; 正在着手新鲜事（I’m doing good &#x2F; I’m on some new shit）”开场，你若以为这是她在汇报居家隔离的动态，或是交代最近满溢的敏感思绪，那也无可厚非。但事实上，Swift 近期将能量全盘倾注在歌曲创作上，它们化作一篇篇短篇小说和人物速写。其中既有普鲁斯特式的意识流闪回（《cardigan》有 Lana Del Rey 的影子），也描摹为社会所背弃的寡妇形象（《the last great american dynasty》），与 Bon Iver 合作的深沉二重唱《exile》则描绘了一段注定走向毁灭的爱情。这张专辑肌理丰富，充满想象。她在《seven》中唱道：“你长长的辫子像一枚神秘的图案 &#x2F; 对你的爱直至月球和土星亦不分离（Your braids like a pattern&#x2F;Love you to the moon and to Saturn）。”这是在讲述一则两位朋友策划一场逃亡的童话：“爱会像民谣被传唱下去一般 &#x2F; 生生不息（Passed down like folk songs &#x2F; the love lasts so long）。”这位优秀的唱作人，即便时刻生活在公众视线下，亦能挖掘出如此丰富的生活素材，这只能说明，Taylor Swift 的确在隔离期间找到了属于自己的灵感。此次发布的《long pond studio sessions》豪华限定版包含《folklore》整张专辑每首歌曲的现场版本，Aaron Dessner、Jack Antonoff、Bon Iver 主唱 Justin Vernon 共同参与表演。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>大雪</title>
    <url>/zh-CN/0707a3890785/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0707a3890785/202012070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大雪</tag>
      </tags>
  </entry>
  <entry>
    <title>HomePod mini（2020年）</title>
    <url>/zh-CN/cb19daafbd99/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>HomePod mini</p>
  <p>小宇宙爆发。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/cb19daafbd99/202012110001.png" class="" title="HomePod mini（2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>HomePod</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift evermore（deluxe version）</title>
    <url>/zh-CN/8f36bdaeb925/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>在全球陷入瘫痪的疫情期间，出人意料地推出足以重新定义音乐生涯的专辑，无疑叫人钦佩；但在短短五个月后就又做了一次同样的事，Taylor Swift 借此举大胆展现出的自信心与专注力，可以说是令人自惭形秽。和《folklore》一样，Taylor Swift 与 Aaron Dessner、Jack Antonoff 与 Justin Vernon 合作完成了《evermore》。在充分利用家庭录音室舒适氛围的情况下，他们写出更为坦诚的歌词，采用更加简单的编曲，使得歌曲既轻松温馨，又有层次丰富的叙事。</p>
<p>新专辑的嘉宾阵容更加强大：HAIM 出现在《no body, no crime》里，Este Haim 似乎成了一场小镇谋杀案的核心人物；Dessner 的乐队队友在《coney island》中出场，他们没有偏离专辑的整体节奏，反而顺利地将自己代入歌曲的情绪。（更何况，如果把打击乐贯穿始终的《long story short》放进过去十年间任何一张 The National 的专辑，都不会显得违和。）此外，《’tis the damn season》是一首讲述“回家过节”的哀怨情歌，触动了我们这一年的纷乱心绪。如果说《folklore》让大部分人惊叹的点在于 Swift 在特殊时期解锁了新风格，那么这张《evermore》唯一真正令人意外的其实是它发行的时机。而且，大家因《folklore》而建立起的期待并未落空，因为《evermore》延续了上一张专辑的魅力。《evermore》并非特殊情况催生的新奇作品，而是 Taylor Swift 碰巧会做、而且做得很好的一件事。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Max（2020年）</title>
    <url>/zh-CN/53a15ba8b74e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>AirPods Max</p>
  <p>将音质提升到新境界。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/53a15ba8b74e/202012150001.png" class="" title="AirPods Max（2020年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇女侠1984</title>
    <url>/zh-CN/44015c468560/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　当危机降临时，她是力大无穷、魅力四射的神奇女侠，当岁月静好之际，她又是集知性和美丽于一身的博物馆员，她就是神奇女侠戴安娜·普林斯（盖尔·加朵 Gal Gadot 饰）。戴安娜和同事们偶然发现一个神奇的水晶，据说水晶能够帮助他们实现一个愿望。半信半疑的戴安娜默默许愿，谁曾想因故去世的男友竟然真得回还人间。眼见如此人间奇迹，戴安娜貌不惊人的同事芭芭拉·密涅瓦（克里斯汀·韦格 Kristen Wiig 饰）也许下变美的愿望，谁知却化身力大无穷的豹女。</p>
<p>　　然而，更大危机紧随私欲之后……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/zh-CN/15b79b50a19a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>冬至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/15b79b50a19a/202012210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>冬至</tag>
      </tags>
  </entry>
  <entry>
    <title>舞力全开</title>
    <url>/zh-CN/4f9cd846a90d/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/zh-CN/9b982f965373/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元旦快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9b982f965373/202101010001.png" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>小寒</title>
    <url>/zh-CN/4a7062c8ba09/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小寒</p>
</div>

<div style="text-align:center;">
  
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小寒</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Pro 牛年限量款</title>
    <url>/zh-CN/80787ff9277f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/80787ff9277f/202101070001.png" class="" title="Apple">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/80787ff9277f/202101070002.png" class="" title="AirPods Pro 牛年限量款">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>马力欧网球 王牌</title>
    <url>/zh-CN/b4611f56e52c/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>大寒</title>
    <url>/zh-CN/804da8b16b8f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/804da8b16b8f/202101200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大寒</tag>
      </tags>
  </entry>
  <entry>
    <title>立春</title>
    <url>/zh-CN/6127032f7948/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立春</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6127032f7948/202102030001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立春</tag>
      </tags>
  </entry>
  <entry>
    <title>除夕</title>
    <url>/zh-CN/de7687800f5d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>除夕快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/de7687800f5d/202102110001.png" class="" title="牛年大吉">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>除夕</tag>
      </tags>
  </entry>
  <entry>
    <title>唐人街探案3</title>
    <url>/zh-CN/0088983b8984/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　为了争夺东京新唐人街的开发权，东南亚帮派与日本黑帮组织黑龙会纷争不断。为了避免冲突升级，合作共赢，东南亚商会会长苏察维邀请黑龙会头目渡边胜（三浦友和 饰）谈判。谈判地点设在四面环水的日式茶室，室内只有双方头目而已。谁知谈判开始没多久，室内就传来惨叫声。众人涌入后发现，苏察维被打碎的屏风玻璃杀害，而躺在一旁的渡边胜则满手鲜血。突发意外将双方敌意再度拉至顶点，为了证明清白，渡边通过侦探野田昊（妻木夫聪 饰）找来了秦风（刘昊然 饰）和唐仁（王宝强 饰），试图揭开密实杀人案的真相。</p>
<p>　　危机四伏的东京街头，这三个绝命侦探抽丝剥茧发现了令人难以置信的事实……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>雨水</title>
    <url>/zh-CN/258265ef5192/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>雨水</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/258265ef5192/202102180001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>雨水</tag>
      </tags>
  </entry>
  <entry>
    <title>元宵节</title>
    <url>/zh-CN/a219135f340f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元宵节快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a219135f340f/202102260001.jpg" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元宵节</tag>
      </tags>
  </entry>
  <entry>
    <title>惊蛰</title>
    <url>/zh-CN/65af671c6583/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>惊蛰</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/65af671c6583/202103050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>惊蛰</tag>
      </tags>
  </entry>
  <entry>
    <title>阿凡达</title>
    <url>/zh-CN/ca6518d813f5/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　战斗中负伤而下身瘫痪的前海军战士杰克·萨利（萨姆·沃辛顿 Sam Worthington 饰）决定替死去的同胞哥哥来到潘多拉星操纵格蕾丝博士（西格妮·韦弗 Sigourney Weaver 饰）用人类基因与当地纳美部族基因结合创造出的 “阿凡达” 混血生物。杰克的目的是打入纳美部落，外交说服他们自愿离开世代居住的家园，从而SecFor公司可砍伐殆尽该地区的原始森林，开采地下昂贵的“不可得”矿。在探索潘多拉星的过程中，杰克遇到了纳美部落的公主娜蒂瑞（佐伊·索尔达娜 Zoe Saldana 饰），向她学习了纳美人的生存技能与对待自然的态度。与此同时，SecFor公司的经理和军方代表上校迈尔斯（史蒂芬·朗 Stephen Lang 饰）逐渐丧失耐心，决定诉诸武力驱赶纳美人……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>春分</title>
    <url>/zh-CN/341380836ef5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>春分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/341380836ef5/202103200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>春分</tag>
      </tags>
  </entry>
  <entry>
    <title>哥斯拉大战金刚</title>
    <url>/zh-CN/c7398107665f/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　这两位宛如神衹一般强大的对手于一场壮观的战争中相遇，彼时世界命运正悬于一线。为了找到真正的家园，金刚与他的保护者们踏上了一次艰难的旅程。与他们一道前行的还有一个年轻的孤儿女孩——吉雅，这个女孩与金刚之间存在着一种独特而强大的紧密联系。但意想不到的是，他们在前行的航道上与愤怒的哥斯拉狭路相逢，也由此在全球引起了一系列破坏。一股无形的力量造成了这两只巨兽之间的巨大冲突，深藏在地心深处的奥秘也由此揭开。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>清明</title>
    <url>/zh-CN/d32fe502d949/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>清明</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d32fe502d949/202104040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>清明</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift Fearless（Taylor&#39;s Version）</title>
    <url>/zh-CN/03127ce1811e/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>2019 年，Taylor Swift 与之前所属的唱片公司 Big Machine 陷入母带版权纠纷，由此她决定重新录制前六张专辑，以重掌对旧作的控制权，而打头阵的就是于 2008 年发行的第二张创作专辑《Fearless》。Taylor Swift 凭借此张专辑在乡村流行音乐领域取得巨大成功，拿下第 52 届格莱美“年度专辑”和“最佳乡村专辑”奖，并创下当时最年轻得奖者纪录。而今，她再次与《folklore》《evermore》 的制作人 Aaron Dessner、Jack Antonoff 携手，用成熟、坚定的歌声诠释二十岁的勇往直前。专辑加入旧版未收录的六首新歌，Taylor Swift 心中的《Fearless》完整版本终于得以问世。</p>
<p>《Fearless (Taylor’s Version)》在最大程度保留旧版原貌的基础上，无论是专辑制作上的把控，还是 Taylor Swift 嗓音的表现力，都更具力量感。将同名曲《Fearless》提到专辑开篇，某种程度上体现了 Taylor Swift 抛开纷扰旧事，一往无前的无悔无惧。班卓琴的演奏却轻易拨开了我们的怀旧思绪，大热单曲《Love Story》和《You Belong With Me》，让关于青涩爱恋的回忆又一次变得清晰而鲜活。六首此前未公开过的作品被命名为“From The Vault”系列，同样创作于 Swift 的青春时期：Maren Morris 为《You All Over Me》贡献美妙和声，澳洲民谣一哥 Keith Urban 则与 Swift 合唱《That’s When》，《Mr. Perfectly Fine》极尽优美的旋律和 Swift 标志性的过门后副歌转调，将时光的指针悄悄拨回 13 年前。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>谷雨</title>
    <url>/zh-CN/25d2a40b3a75/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>谷雨</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25d2a40b3a75/202104200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>谷雨</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/6aa7df628148/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>踏春而来</p>
</div>

<div id="biaoti">
  <p>一点开眼</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6aa7df628148/202104210001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6aa7df628148/202104210002.png" class="" title="iMac 24 英寸（M1，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6aa7df628148/202104210003.png" class="" title="iPad Pro（M1，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6aa7df628148/202104210004.png" class="" title="iPhone 12（A14，紫色，2021年）和iPhone 12 mini（A14，紫色，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6aa7df628148/202104210005.png" class="" title="AirTag（2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 12（A14，紫色，2021年）和 iPhone 12 mini（A14，紫色，2021年）</title>
    <url>/zh-CN/d9ab46104602/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/d9ab46104602/202104300001.png" class="" title="iPhone 12 全系列">
</div>

<div id="biaoti">
  <p>iPhone 12 | iPhone 12 mini</p>
  <p>紫色到位。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d9ab46104602/202104300002.png" class="" title="iPhone 12（A14，紫色，2021年）和 iPhone 12 mini（A14，紫色，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>立夏</title>
    <url>/zh-CN/751c67cf5bb3/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立夏</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/751c67cf5bb3/202105050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立夏</tag>
      </tags>
  </entry>
  <entry>
    <title>超级 马力欧派对</title>
    <url>/zh-CN/ebe490600fc8/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>SONY 次世代 PlayStation 上市</title>
    <url>/zh-CN/bb25d802021a/</url>
    <content><![CDATA[<hr>
<h1 id="主机介绍"><a href="#主机介绍" class="headerlink" title="主机介绍"></a>主机介绍</h1><p>PlayStation 5 国行（官方缩写：PS5国行）是索尼互动娱乐于 2021 年 05 月 15 日上市的家用电子游戏机。本机为 PlayStation 4（PS4）的后续机型，在硬件上比前代 PS4 大幅提升，使用 PCIe 4.0 规格的高速定制固态硬盘和 AMD 的定制处理器。PS5 与 Xbox Series X&#x2F;S 游戏机是第九世代游戏机之一。手柄控制器名为 DualSense，使用自适应扳机，支持阻力感应。光盘驱动器版本支持 4K 蓝光播放功能。新的安装方式允许用户仅安装游戏部分内容，如仅安装多人模式；不启动游戏也可以查看可加入的多人游戏服务器和可参与的活动。PS5 采用定制的 AMD 图形处理器，具有光线追踪、4K 分辨率、每秒显示帧数达 120，3D 音效，且可向下兼容 PS4 和 PlayStation VR 的游戏。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><img src="/zh-CN/bb25d802021a/202105150001.png" class="" title="PlayStation 5">

<hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>国行</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
      </tags>
  </entry>
  <entry>
    <title>速度与激情9</title>
    <url>/zh-CN/9c3720ee65a9/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　“唐老大”多姆·托莱多（范·迪塞尔 饰）与莱蒂（米歇尔·罗德里格兹 饰）和他的儿子小布莱恩，过上了远离纷扰的平静生活。然而他们也知道，安宁之下总潜藏着危机。这一次，为了保护他所爱的人，唐老大不得不直面过去。他和伙伴们面临的是一场足以引起世界动荡的阴谋，以及一个前所未遇的一流杀手和高能车手。而这个名叫雅各布（约翰·塞纳 饰）的人，恰巧是多姆遗落在外的亲弟弟。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>小满</title>
    <url>/zh-CN/61ca52967788/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小满</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/61ca52967788/202105210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小满</tag>
      </tags>
  </entry>
  <entry>
    <title>iMac 24 英寸（M1，2021年）</title>
    <url>/zh-CN/76dada2aeda9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iMac</p>
  <p>新开篇</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/76dada2aeda9/202105210001.png" class="" title="iMac 24 英寸（M1，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>寂静之地2</title>
    <url>/zh-CN/41461118404a/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　故事紧承上一部展开。在丈夫为保护家人牺牲后，伊芙琳（艾米莉·布朗特 饰）不得不独自带着孩子们（米莉森·西蒙斯、诺亚·尤佩 饰）面对全新的生存挑战。他们将被迫离开家园，踏上一段未知的旅途。在无声的世界里，除了要躲避“猎声怪物”的捕杀，铺满细沙的道路尽头还暗藏着新的危机。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>芒种</title>
    <url>/zh-CN/a94366ff8714/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>芒种</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a94366ff8714/202106050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>芒种</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 2021 全球开发者大会</title>
    <url>/zh-CN/c498475a65d6/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大看点，眼看就来。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c498475a65d6/202106080001.png" class="" title="Apple 2021 全球开发者大会">
</div>

<div id="biaoti">
  <p>就在眼前</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c498475a65d6/202106080002.png" class="" title="Apple 2021 全球开发者大会">
</div>

<div id="biaoti">
  <p>一点，说好。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c498475a65d6/202106080003.png" class="" title="Apple 2021 全球开发者大会">
</div>

<hr>
]]></content>
      <categories>
        <category>开发者大会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft 次世代 XBOX 上市</title>
    <url>/zh-CN/35108fd9c8b1/</url>
    <content><![CDATA[<hr>
<h1 id="主机介绍"><a href="#主机介绍" class="headerlink" title="主机介绍"></a>主机介绍</h1><p>Xbox Series X 配有特殊定制的 AMD 全新 Zen 2 处理器以及 RDNA 2 架构。凭借高达 12 Teraflops 的GPU 处理能力，Xbox Series X 能够为玩家提供4K 高清逼真、沉浸式游戏体验，并最高支持 8K 分辨率的输出，为玩家带来 2 倍于 Xbox One X，8 倍于初代 Xbox One 的强劲性能。通过实现更高帧率的顶尖技术、更广阔复杂的游戏世界，Xbox Series X 将为玩家带来跨时代的图像处理及性能，以及更好的沉浸式游戏体验。</p>
<p>Xbox Series S同样为玩家带来定义了 Xbox Series X 的新世代处理速度和性能表现。借助与 Xbox Series X 性能相近的 CPU 以及完全一致的 I&#x2F;O 性能表现，Xbox Series S 让开发者可以在 1440P 的分辨率下为玩家带来同样优异的游戏表现。Xbox Series S 的处理能力是 Xbox One 的 4 倍，借助可变速率着色技术（VRS）以及硬件加速的 DirectX 光线追踪技术，Xbox Series S 同样将为玩家带来沉浸、灵动的新世代游戏体验。另外，在 Xbox 快速架构的助力之下，Xbox Series S 512GB 的定制化 SSD 将带来 40 倍于 Xbox One 的 I&#x2F;O 带宽，并带来更快速的游戏加载、更稳定的帧率，以及支持在多个游戏之间切换的快速唤醒功能（Quick Resume）。</p>
<p>Xbox Series S 与 Xbox Series X 最显著的不同在于对分辨率的支持。Xbox Series S 的 GPU 性能是 Xbox One 的 3 倍，支持 1440p 分辨率下以 60 FPS 畅玩游戏，帧率支持最高可达 120 FPS。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><img src="/zh-CN/35108fd9c8b1/202106100001.png" class="" title="Xbox Series X|S">

<hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>国行</tag>
        <tag>Microsoft</tag>
        <tag>XBOX</tag>
      </tags>
  </entry>
  <entry>
    <title>夏至</title>
    <url>/zh-CN/5c95e7ec72fb/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>夏至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c95e7ec72fb/202106210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>夏至</tag>
      </tags>
  </entry>
  <entry>
    <title>小暑</title>
    <url>/zh-CN/ed3af3522ddd/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ed3af3522ddd/202107070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小暑</tag>
      </tags>
  </entry>
  <entry>
    <title>耀西的手工世界</title>
    <url>/zh-CN/fd101784e4d3/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>梁心颐 来者何人n！</title>
    <url>/zh-CN/df3f86ad8e69/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>梁心颐</tag>
        <tag>CD</tag>
      </tags>
  </entry>
  <entry>
    <title>大暑</title>
    <url>/zh-CN/c4784dc2fe91/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c4784dc2fe91/202107220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大暑</tag>
      </tags>
  </entry>
  <entry>
    <title>疯狂兔子：奇遇派对</title>
    <url>/zh-CN/b3b00d2820ae/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>立秋</title>
    <url>/zh-CN/62413645f027/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立秋</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/62413645f027/202108070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立秋</tag>
      </tags>
  </entry>
  <entry>
    <title>麻布仔大冒险</title>
    <url>/zh-CN/99704c6d5289/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>实体</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
        <tag>光盘</tag>
      </tags>
  </entry>
  <entry>
    <title>处暑</title>
    <url>/zh-CN/b6ea35de6be1/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>处暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b6ea35de6be1/202108230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>处暑</tag>
      </tags>
  </entry>
  <entry>
    <title>失控玩家</title>
    <url>/zh-CN/6edb99247070/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　银行出纳员盖（瑞安·雷诺兹 饰）发现自己其实是开放世界电子游戏中的背景角色，于是决定成为英雄，并改写自己的故事。现在，在一个没有限制的世界里，他决心以自己的方式拯救他的世界，以免为时过晚。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>白露</title>
    <url>/zh-CN/e5951e6bf1f3/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>白露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e5951e6bf1f3/202109070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>白露</tag>
      </tags>
  </entry>
  <entry>
    <title>梁心颐 来者何人{}</title>
    <url>/zh-CN/8ea6e09bf0a7/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>梁心颐</tag>
        <tag>CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/e23e144a9aab/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150003.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150004.png" class="" title="iPhone 13 Pro Max（A15，2021年）和 iPhone 13 Pro（A15，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150005.png" class="" title="iPhone 13（A15，2021年）和 iPhone 13 mini（A15，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150006.png" class="" title="Apple Watch Series 7（S7，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150007.png" class="" title="iPad mini（A15，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e23e144a9aab/202109150008.png" class="" title="iPad（A13，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>秋分</title>
    <url>/zh-CN/7581941c4f10/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>秋分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/7581941c4f10/202109230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>秋分</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 13 Pro（A15，2021年）和 iPhone 13（A15，2021年）</title>
    <url>/zh-CN/049d1e8f1997/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/049d1e8f1997/202109240001.png" class="" title="iPhone 13 全系列">
</div>

<div id="biaoti">
  <p>iPhone 13 Pro Max | iPhone 13 Pro</p>
  <p>强得很</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/049d1e8f1997/202109240002.png" class="" title="iPhone 13 Pro Max（A15，2021年）和 iPhone 13 Pro（A15，2021年）">
</div>

<div id="biaoti">
  <p>iPhone 13 | iPhone 13 mini</p>
  <p>解锁超能力</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/049d1e8f1997/202109240003.png" class="" title="iPhone 13（A15，2021年）和 iPhone 13 mini（A15，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>iPad mini（A15，2021年）和 iPad（A13，2021年）</title>
    <url>/zh-CN/1168bb0bea1b/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad mini</p>
  <p>小写的大</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1168bb0bea1b/202109270001.png" class="" title="iPad mini（A15，2021年）">
</div>

<div id="biaoti">
  <p>iPad</p>
  <p>事事玩得转</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1168bb0bea1b/202109270002.png" class="" title="iPad（A13，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title>哆啦A梦 牧场物语</title>
    <url>/zh-CN/52c0d463bcd4/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>寒露</title>
    <url>/zh-CN/a070e7df8591/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>寒露</p>
</div>

<div style="text-align:center;">
  
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>寒露</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Watch Series 7（S7，2021年）</title>
    <url>/zh-CN/133ddec1b6f5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Apple Watch Series 7</p>
  <p>全屏先手</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/133ddec1b6f5/202110150001.png" class="" title="Apple Watch Series 7（S7，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Watch</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/75d8544fed29/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190003.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190004.png" class="" title="MacBook Pro（M1 Pro，M1 Max，2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190005.png" class="" title="AirPods（2021年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/75d8544fed29/202110190006.png" class="" title="HomePod mini（多彩，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>沙丘</title>
    <url>/zh-CN/8517d0488f32/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　电影《沙丘》为观众呈现了一段神秘而感人至深的英雄之旅。天赋异禀的少年保罗·厄崔迪被命运指引，为了保卫自己的家族和人民，决心前往浩瀚宇宙间最危险的星球，开启一场惊心动魄的冒险。与此同时，各路势力为了抢夺这颗星球上一种能够释放人类最大潜力的珍贵资源而纷纷加入战场。最终，唯有那些能够战胜内心恐惧的人才能生存下去。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>霜降</title>
    <url>/zh-CN/d0a2fd762c95/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>霜降</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d0a2fd762c95/202110230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>霜降</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro（M1 Pro，M1 Max，2021年）</title>
    <url>/zh-CN/08a36308ab84/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>强者的强</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/08a36308ab84/202110260001.png" class="" title="MacBook Pro（M1 Pro，M1 Max，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>007：无暇赴死</title>
    <url>/zh-CN/0d771aaad8bf/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　世界局势波诡云谲，再度出山的邦德（丹尼尔·克雷格 饰）面临有史以来空前的危机，传奇特工007的故事在本片中达到高潮。新老角色集结亮相，蕾雅·赛杜回归，二度饰演邦女郎玛德琳。系列最恐怖反派萨芬（拉米·马雷克 饰）重磅登场，毫不留情地展示了自己狠辣的一面，不仅揭开了玛德琳身上隐藏的秘密，还酝酿着危及数百万人性命的阴谋，幽灵党的身影也似乎再次浮出水面。半路杀出的新00号特工（拉什纳·林奇 饰）与神秘女子（安娜·德·阿玛斯 饰）看似与邦德同阵作战，但其真实目的依然成谜。关乎邦德生死的新仇旧怨接踵而至，暗潮汹涌之下他能否拯救世界？</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>立冬</title>
    <url>/zh-CN/254481de13a9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立冬</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/254481de13a9/202111070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立冬</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift Red（Taylor&#39;s Version）[+ A Message From Taylor]</title>
    <url>/zh-CN/4ce1ef088d17/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>或许每个人都可能在二十多岁经历一段充满矛盾的情感生活，对于 Taylor Swift 来说，那是一种红色般炙热、鲜活的青春记忆。她曾把复杂的情感体验浇灌在第四张创作专辑《Red》中——有迷茫也有冲动，有孤独但也自由，折磨、找回自我和甜蜜并存。这是一张令人伤感，但同时也充溢着不羁情绪的专辑，从舞台摇滚、英伦摇滚、流行舞曲到 Dubstep，异彩纷呈的风格中傲然绽放着生命力，让 Taylor 一举突破乡村乐的框架，走进更开阔的音乐天地。时隔九年，这张《Red》继《Fearless》之后，被 Taylor 选为重新录制系列的第二张专辑。</p>
<p>我们在《We Are Never Ever Getting Back Together》能听到游刃有余的演唱，让原曲那份青春分手宣言多了淡然和成熟。《All Too Well》曾经以细腻歌词、动人叙事获得共鸣，在重制版本中则让被粉丝期待许久的十分钟版本问世，保留滋养她的乡村乐元素同时，呈现了更完整的故事。这次，不仅 Taylor 本人重新录唱，Ed Sheeran 也一起合作了曲目《Everything Has Changed》和收录的未曝光作品《Run》。在这张作品发行前，Taylor 曾在社交媒体分享：“在音乐和歌词上，《Red》像是一个心碎的人。”而重录不仅是音乐上的一种新生，也是多年后再次进入这些情绪，以新姿态回抚当年碎落的心。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>32岁生日快乐</title>
    <url>/zh-CN/fb893564d7e7/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>生日快乐</p>
</div>

<div style="text-align:center;">
  <a href="/anniversary/">
    <img src="/zh-CN/fb893564d7e7/202111150001.svg" class="" title="纪念日">
  </a>
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>小雪</title>
    <url>/zh-CN/b48ab01111f2/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b48ab01111f2/202111220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小雪</tag>
      </tags>
  </entry>
  <entry>
    <title>大雪</title>
    <url>/zh-CN/3c2d26305f34/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/3c2d26305f34/202112070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大雪</tag>
      </tags>
  </entry>
  <entry>
    <title>HomePod mini（多彩，2021年）</title>
    <url>/zh-CN/ba6c33631c3e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>HomePod mini</p>
  <p>给你点颜色听听</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ba6c33631c3e/202112160001.png" class="" title="HomePod mini（多彩，2021年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>HomePod</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/zh-CN/2a76f7bdcb22/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>冬至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2a76f7bdcb22/202112210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>冬至</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/zh-CN/d608fc129257/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元旦快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d608fc129257/202201010001.png" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Pro 虎年限量款</title>
    <url>/zh-CN/3b22efa0d7a9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/3b22efa0d7a9/202201040001.png" class="" title="Apple">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/3b22efa0d7a9/202201040002.png" class="" title="AirPods Pro 虎年限量款">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>小寒</title>
    <url>/zh-CN/525855ccdfa8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/525855ccdfa8/202201050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小寒</tag>
      </tags>
  </entry>
  <entry>
    <title>大寒</title>
    <url>/zh-CN/98b89008919d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/98b89008919d/202201200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大寒</tag>
      </tags>
  </entry>
  <entry>
    <title>除夕</title>
    <url>/zh-CN/e8de4aae5fc5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>除夕快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e8de4aae5fc5/202201310001.png" class="" title="虎年大吉">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>除夕</tag>
      </tags>
  </entry>
  <entry>
    <title>立春</title>
    <url>/zh-CN/ff2605a22b87/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立春</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ff2605a22b87/202202040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立春</tag>
      </tags>
  </entry>
  <entry>
    <title>元宵节</title>
    <url>/zh-CN/fe3b83c404ce/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元宵节快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/fe3b83c404ce/202202150001.jpg" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元宵节</tag>
      </tags>
  </entry>
  <entry>
    <title>雨水</title>
    <url>/zh-CN/2754a7d161fd/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>雨水</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2754a7d161fd/202202190001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>雨水</tag>
      </tags>
  </entry>
  <entry>
    <title>马力欧疯狂兔子：王国之战</title>
    <url>/zh-CN/1d02b9d3b405/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>惊蛰</title>
    <url>/zh-CN/ec4857c46c4e/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>惊蛰</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ec4857c46c4e/202203050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>惊蛰</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/25756b923d69/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>高能传送</p>
</div>

<div id="biaoti">
  <p>传送门</p>
  <p>两点开启</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090002.png" class="" title="Mac Studio（M1 Max，M1 Ultra，2022年）和 Studio Display（2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090003.png" class="" title="iPad Air（M1，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090004.png" class="" title="iPhone SE（A15，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090005.png" class="" title="iPhone 13 Pro Max（A15，苍岭绿，2022年）和 iPhone 13 Pro（A15，苍岭绿，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/25756b923d69/202203090006.png" class="" title="iPhone 13（A15，苍岭绿，2022年）和 iPhone 13 mini（A15，苍岭绿，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 13 Pro（A15，苍岭绿，2022年）、iPhone 13（A15，苍岭绿，2022年）和 iPhone SE（A15，2022年）</title>
    <url>/zh-CN/378d27599a02/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPhone 13 Pro Max | iPhone 13 Pro</p>
  <p>强得很</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/378d27599a02/202203180001.png" class="" title="iPhone 13 Pro Max（A15，苍岭绿，2022年）和 iPhone 13 Pro（A15，苍岭绿，2022年）">
</div>

<div id="biaoti">
  <p>iPhone 13 | iPhone 13 mini</p>
  <p>解锁超能力</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/378d27599a02/202203180002.png" class="" title="iPhone 13（A15，苍岭绿，2022年）和 iPhone 13 mini（A15，苍岭绿，2022年）">
</div>

<div id="biaoti">
  <p>iPhone SE</p>
  <p>重磅实力，</p>
  <p>轻松入手。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/378d27599a02/202203180003.png" class="" title="iPhone SE（A15，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>春分</title>
    <url>/zh-CN/2289cda8a8f5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>春分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2289cda8a8f5/202203200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>春分</tag>
      </tags>
  </entry>
  <entry>
    <title>iPad Air（M1，2022年）</title>
    <url>/zh-CN/0c94bc236de1/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad Air</p>
  <p>轻，靓，重量级。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0c94bc236de1/202203210001.png" class="" title="iPad Air（M1，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Studio（M1 Max，M1 Ultra，2022年）和 Studio Display（2022年）</title>
    <url>/zh-CN/944ce6edf027/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Mac Studio | Studio Display</p>
  <p>欢迎登陆</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/944ce6edf027/202203230001.png" class="" title="Mac Studio（M1 Max，M1 Ultra，2022年）和 Studio Display（2022年）">
</div>

<div id="biaoti">
  <p>Mac Studio</p>
  <p>造梦引擎</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/944ce6edf027/202203230002.png" class="" title="Mac Studio（M1 Max，M1 Ultra，2022年）">
</div>

<div id="biaoti">
  <p>Studio Display</p>
  <p>眼界全开</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/944ce6edf027/202203230003.png" class="" title="Studio Display（2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
        <tag>Display</tag>
      </tags>
  </entry>
  <entry>
    <title>清明</title>
    <url>/zh-CN/442386e42b67/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>清明</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/442386e42b67/202204050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>清明</tag>
      </tags>
  </entry>
  <entry>
    <title>谷雨</title>
    <url>/zh-CN/2b6c9b564cd4/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>谷雨</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2b6c9b564cd4/202204200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>谷雨</tag>
      </tags>
  </entry>
  <entry>
    <title>立夏</title>
    <url>/zh-CN/c9ba9c64a795/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立夏</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c9ba9c64a795/202205050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立夏</tag>
      </tags>
  </entry>
  <entry>
    <title>小满</title>
    <url>/zh-CN/c099b233a1ee/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小满</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c099b233a1ee/202205210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小满</tag>
      </tags>
  </entry>
  <entry>
    <title>芒种</title>
    <url>/zh-CN/1c84b1cc764f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>芒种</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1c84b1cc764f/202206060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>芒种</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 2022 全球开发者大会</title>
    <url>/zh-CN/e98d17284046/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070001.png" class="" title="Apple 2022 全球开发者大会">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070002.png" class="" title="Apple 2022 全球开发者大会">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070003.png" class="" title="Apple 2022 全球开发者大会">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070004.png" class="" title="Apple 2022 全球开发者大会">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070005.png" class="" title="MacBook Air（M2，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e98d17284046/202206070006.png" class="" title="MacBook Pro 13 英寸（M2，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>开发者大会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>夏至</title>
    <url>/zh-CN/5712be0b7e13/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>夏至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5712be0b7e13/202206210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>夏至</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 13 英寸（M2，2022年）</title>
    <url>/zh-CN/f3ae6b0ad31d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>超机动，硬实力。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f3ae6b0ad31d/202206240001.png" class="" title="MacBook Pro 13 英寸（M2，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>小暑</title>
    <url>/zh-CN/c3571fbfb1e5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c3571fbfb1e5/202207070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小暑</tag>
      </tags>
  </entry>
  <entry>
    <title>周杰伦 最伟大的作品</title>
    <url>/zh-CN/0ed3b75282e5/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>在 1920 年代巴黎的莎玛丽丹百货公司里，一架老式钢琴奏出《Secret》的旋律（电影《不能说的秘密》插曲），一场穿越时空的旅行由此开启。多位当代绘画、文学艺术大师在杰伦的魔术桥段中逐一登场，……睽违六年，这位华语乐坛的超级明星，用这支 MV 宣告了第十五张专辑《最伟大的作品》的诞生。</p>
<p>专辑主题单曲《最伟大的作品》通过词曲和 MV 唤醒了大众对古典乐与艺术永恒的致敬，而杰伦个人风格鲜明的律动和说唱，也让歌迷得以“重温”《夜的第七章》《夜曲》等汲取古典乐元素的流行旧作。MV 中，他和郎朗“斗琴”的段落，对曾自导自演的电影《不能说的秘密》做出了有趣回应。这首曲子在几年前早有构想，拍好 MV 之后才有了相应歌词，为了能全面体现复古，杰伦更是跑到巴黎歌剧院录制了人声。</p>
<p>在新专辑中，杰伦延续了情歌创作分量，如民谣色彩的《等你下课》，流行摇滚的《错过的烟火》，以及 R&amp;B 风格的《倒影》，如同一张“周氏情歌”歌单的增补，续写出青春爱恋的种种滋味。而在整体的音乐上，这张专辑并没有呼应或试图改写当下潮流，做出曲风上的标新立异，但曾经引领乐坛的“周杰伦语言”，依然有腔调并我行我素：《还在流浪》回溯《上海一九四三》，适当的 Auto-tune 和《跨时代》手法类似，方文山在 R&amp;B 结合东方意境的《红颜如霜》以梨园名剧《凤求凰》作背景写词，和杰伦完成了久违的“中国风”新作。</p>
<p>这张被期待多年的作品终于没有再“鸽”大家，在今年如期发行，在单曲速食时代，周杰伦的音乐制作团队仍然打造出多支明丽的 MV，希望帮大家扫去疫情下的阴霾。他还为歌迷埋下不少彩蛋：轻松幽默的《粉色海洋》有儿子 Romeo 的“登场”，五月天阿信合作的《说好不哭》，MV 也呼应到《晴天》《不能说的秘密》的一些经典镜头。</p>
<p>这次专辑发布，难免也让不少老歌迷感叹 20 年时间已匆匆过。2000 年代初，周杰伦以颠覆者的姿态闯入华语乐坛，打开了无数唱作人想象力的大门。之后他在唱片公司、电竞、潮牌等不同领域游走的同时，仍在不断推出新专辑，完成自我强调或迭代。今天，在短视频社交平台，新世代歌迷还能不自觉地爱上这位划时代歌手许多年前写下的歌。当“千禧年”已成为一代人遥远的记忆，《最伟大的作品》也无需再颠覆时代，它是周杰伦对自己音乐动机的流畅呈现——无论喜欢与否，它依然很“周杰伦”。</p>
<p>新专发布之际，周杰伦应邀与 Apple Music 分享了关于创作的故事，以及他对于当下华语乐坛的一些看法。</p>
<p>距上一次发片有六年了，是你生涯里最长的发片间距，有什么感想？<br>“这几年其实陆续都有单曲发表，在《Mojito》单曲发了之后，就想说接下来应该要出专辑了，这张《最伟大的作品》专辑也把之前只有数位发行的几首单曲收录进去，希望歌迷朋友喜欢。”</p>
<p>专辑中有各种经典的“周杰伦元素”，哪些歌最代表你现在的创作心境？<br>“我童年的记忆里，妈妈一边作画，我一边弹钢琴的画面是我小时候的美好回忆，还记得妈妈和我讲述了许多艺术家的故事，原来妈妈对我在艺术方面的影响从小就开始了！把绘画、文学这些艺术跟音乐结合在一起，是我近来很想创作的主题，《最伟大的作品》这首歌还有 MV 其实是大概 5 年前就有的构想，透过穿越时空和以前的艺术家相遇…这样不是很 cool 吗？”</p>
<p>跟阿信合作《说好不哭》后你们的交流与舞台合作也变得频繁，目前还有没有和更多艺人合作的计划？<br>“我喜欢给歌迷惊喜，就像和阿信的合作，从配唱、制作、到日本拍 MV，都是保密到家的，我记得当时我在 IG 预告要推出新歌，阿信还假装帮我加油，果然最后让大家都相当惊喜！反正就好玩！我很少跟不同唱片公司的人合作，之前有费玉清，当然未来很多事都说不定的。”</p>
<p>你掀起过中国风热潮，但近年中国风的创作相对减少，这张专辑收录了《红颜如霜》，你现在对中国风有什么新想法吗？<br>“还记得很多年前，要发《11月的萧邦》那张专辑时，当时很多人跟着很喜欢写中国风的歌曲，那我就想说这张就不要放进东方元素的歌吧！但是方文山跟我极力建议，甚至把《发如雪》的歌词都写好了，我转念一想，还是应该坚持自我风格，希望是自己影响别人，而不要被别人所影响！所以我们一直作自己想作的音乐。”</p>
<p>很多人说你在家庭美满和事业成功的当下，少了一点挣扎和矛盾，怎么看待这样的说法呢？<br>“创作未必都是音乐人自身的经历或故事，有时候常常会从身边友人的故事做一些灵感的延伸，像我和弹头一起写的《不爱我就拉倒》表达的是男生心里很难过，但遇到没有办法扭转的感情还是帅气面对。文山写词的《说好不哭》写的是一首关于’成全’的情歌，为了成全男生的梦想，女生微笑放手。所以创作里还是有很多不同故事的。”</p>
<p>2000 年代的周杰伦可以说是“破坏性”创新，带来说唱、中国风、周氏情歌等新鲜元素。到了 2010 年代延续“周杰伦特色”的同时，你也有新的尝试，如电子化的《跨时代》《惊叹号》，你会怎么形容 2020 年代的自己呢？<br>“其实自己并不觉得自己创作上有什么时期上的归类，或者说并不会去做一个分野，一直以来都还蛮坚持自己的音乐风格的，一路走来当然还是会加进一些新的元素，透过音乐本身到视觉的呈现，都希望与乐迷们分享。”</p>
<p>短视频平台的兴起，改变了写歌生态，很多创作人追求简短、洗脑，这与你经历过的写作环境很不同，对此有什么看法？<br>“最近我也有用自己的新歌来制作短视频，畊宏也有用我的歌曲去带动大家对运动的喜爱，不管是用完整的歌曲再去做精华的展现，或者是一开始就为了短视频而做的音乐，都是音乐人的创作心血。所以也许出发点不同，但都是‘创作’，我们都允以尊重。”</p>
<p>每次推出新专辑，免不了有很多歌迷会拿你以前的作品来做比较，甚至会说还是旧歌好听，你自己是怎么看待的？<br>“很多人喜欢老歌，有一种韵味在，毕竟加了当时听歌时的情感，经过岁月的累积，就像穿越、瞬间回到过去，所以不管写什么新歌，都敌不过以前听过的旧歌。我有个想法是，现在的新歌是写给你小孩听的，世世代代，不管是新歌好，还是旧歌好，我写的歌都好。”</p>
<p>《粉色海洋》这首歌有 Romeo 的 OS，给粉丝很大的惊喜！为什么想到收录他的声音？<br>“我想前奏有他的开头会很好玩！我就叫他多讲一些，再剪接。他的笑声也是很自然的。”</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>周杰伦</tag>
        <tag>黑胶</tag>
        <tag>CD</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Air 13 英寸（M2，2022年）</title>
    <url>/zh-CN/38241dcfd889/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Air</p>
  <p>别看轻，别轻看。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/38241dcfd889/202207150001.png" class="" title="MacBook Air 13 英寸（M2，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>大暑</title>
    <url>/zh-CN/755f5a282a01/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/755f5a282a01/202207230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大暑</tag>
      </tags>
  </entry>
  <entry>
    <title>立秋</title>
    <url>/zh-CN/e928fb7a887a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立秋</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e928fb7a887a/202208070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立秋</tag>
      </tags>
  </entry>
  <entry>
    <title>处暑</title>
    <url>/zh-CN/4976640695a0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>处暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/4976640695a0/202208230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>处暑</tag>
      </tags>
  </entry>
  <entry>
    <title>白露</title>
    <url>/zh-CN/50501afc6ee0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>白露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/50501afc6ee0/202209070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>白露</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/5c6677a45b3c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080003.png" class="" title="iPhone 14 Pro Max（A16，2022年）和 iPhone 14 Pro（A16，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080004.png" class="" title="iPhone 14 Plus（A15，2022年）和 iPhone 14（A15，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080005.png" class="" title="AirPods Pro（2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080006.png" class="" title="Apple Watch Ultra（S8，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080007.png" class="" title="Apple Watch Series 8（S8，2022年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/5c6677a45b3c/202209080008.png" class="" title="Apple Watch SE（S8，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 14 Pro（A16，2022年）和 iPhone 14（A15，2022年）</title>
    <url>/zh-CN/a15ffa511574/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPhone 14 Pro Max | iPhone 14 Pro</p>
  <p>强力出圈</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a15ffa511574/202209160001.png" class="" title="iPhone 14 Pro Max（A16，2022年）和 iPhone 14 Pro（A16，2022年）">
</div>

<div id="biaoti">
  <p>iPhone 14</p>
  <p>玩大玩超大</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a15ffa511574/202209160002.png" class="" title="iPhone 14（A15，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Watch Series 8（S8，2022年）和 Apple Watch SE（S8，2022年）</title>
    <url>/zh-CN/d253e82178f5/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Apple Watch Series 8</p>
  <p>健康的一大步</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d253e82178f5/202209190001.png" class="" title="Apple Watch Series 8（S8，2022年）">
</div>

<div id="biaoti">
  <p>Apple Watch SE</p>
  <p>超值超有料</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d253e82178f5/202209190002.png" class="" title="Apple Watch SE（S8，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Watch</tag>
      </tags>
  </entry>
  <entry>
    <title>秋分</title>
    <url>/zh-CN/9d8d9a3da959/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>秋分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9d8d9a3da959/202209230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>秋分</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Pro（2022年）</title>
    <url>/zh-CN/ca336cae4ada/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>AirPods Pro</p>
  <p>重塑新声</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ca336cae4ada/202209230001.png" class="" title="AirPods Pro（2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Watch Ultra（S8，2022年）</title>
    <url>/zh-CN/b685932a611a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Apple Watch Ultra</p>
  <p>越野越心驰</p>
</div>

<div style="text-align:center;">
  
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Watch</tag>
      </tags>
  </entry>
  <entry>
    <title>马力欧卡丁车8 豪华版 新增赛道通行证</title>
    <url>/zh-CN/6937a3b26841/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>暗影火炬城</title>
    <url>/zh-CN/42cc0660bc83/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>实体</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
        <tag>光盘</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 14 Plus（A15，2022年）</title>
    <url>/zh-CN/4b35bb2dcad0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/4b35bb2dcad0/202210070001.png" class="" title="iPhone 14 全系列">
</div>

<div id="biaoti">
  <p>iPhone 14 Plus</p>
  <p>玩的超大</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/4b35bb2dcad0/202210070002.png" class="" title="iPhone 14 Plus（A15，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>寒露</title>
    <url>/zh-CN/78b75a612655/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>寒露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/78b75a612655/202210080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>寒露</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift Midnights（The Til Dawn Edition）</title>
    <url>/zh-CN/75e0489954e3/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>《Midnights》加长版新增三首歌曲，通过空间音频聆听。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>霜降</title>
    <url>/zh-CN/f9c9de496a2f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>霜降</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f9c9de496a2f/202210230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>霜降</tag>
      </tags>
  </entry>
  <entry>
    <title>iPad Pro（M2，2022年）和 iPad（A14，2022年）</title>
    <url>/zh-CN/28da358b5b75/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPad Pro</p>
  <p>由 M2 强势驱动</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/28da358b5b75/202210260001.png" class="" title="iPad Pro（M2，2022年）">
</div>

<div id="biaoti">
  <p>iPad Pro</p>
  <p>由 M2 强势驱动</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/28da358b5b75/202210260002.png" class="" title="iPad（A14，2022年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title>立冬</title>
    <url>/zh-CN/0d29c3a1584c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立冬</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0d29c3a1584c/202211070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立冬</tag>
      </tags>
  </entry>
  <entry>
    <title>33岁生日快乐</title>
    <url>/zh-CN/8f62366d9586/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>生日快乐</p>
</div>

<div style="text-align:center;">
  <a href="/anniversary/">
    <img src="/zh-CN/8f62366d9586/202211150001.svg" class="" title="纪念日">
  </a>
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>小雪</title>
    <url>/zh-CN/2e7e584da713/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2e7e584da713/202211220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小雪</tag>
      </tags>
  </entry>
  <entry>
    <title>大雪</title>
    <url>/zh-CN/b2ead9bdaa9a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/b2ead9bdaa9a/202212070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大雪</tag>
      </tags>
  </entry>
  <entry>
    <title>阿凡达：水之道</title>
    <url>/zh-CN/240d6c0ae009/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　影片设定在《阿凡达》的剧情落幕十余年后，讲述了萨利一家（杰克、奈蒂莉和孩子们）的故事：危机未曾消散，一家人拼尽全力彼此守护、奋力求生，并历经艰险磨难。</p>
<p>　　杰克和奈蒂莉组建了家庭，他们的孩子也逐渐成长，为这个家庭带来了许多欢乐。然而危机未曾消散，萨利一家拼尽全力彼此守护、奋力求生，最终来到潘多拉星球临海的岛礁族寻求庇护。岛礁族首领特诺瓦里与罗娜尔为萨利一家提供了庇护所，这个部族的成员都是天生的潜水好手，也和海洋中的各种生物建立了密切联系。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/zh-CN/ecf57f3bc74b/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>冬至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ecf57f3bc74b/202212220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>冬至</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/zh-CN/e369a584c73c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元旦快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e369a584c73c/202301010001.png" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>小寒</title>
    <url>/zh-CN/2f79f99f12e6/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2f79f99f12e6/202301050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小寒</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Pro 兔年限量款</title>
    <url>/zh-CN/44209dc0ff14/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/44209dc0ff14/202301060001.png" class="" title="Apple">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/44209dc0ff14/202301060002.png" class="" title="AirPods Pro 兔年限量款">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>大寒</title>
    <url>/zh-CN/dda3c75c02b9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/dda3c75c02b9/202301200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大寒</tag>
      </tags>
  </entry>
  <entry>
    <title>除夕</title>
    <url>/zh-CN/257783e267a9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>除夕快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/257783e267a9/202301210001.png" class="" title="兔年大吉">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>除夕</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro（M2 Pro，M2 Max，2023年）</title>
    <url>/zh-CN/92c12610404b/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>行走的突破力</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/92c12610404b/202302030001.png" class="" title="MacBook Pro（M2 Pro，M2 Max，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>立春</title>
    <url>/zh-CN/cee5d57e9a5a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立春</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/cee5d57e9a5a/202302040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立春</tag>
      </tags>
  </entry>
  <entry>
    <title>HomePod（2023年）</title>
    <url>/zh-CN/40720b10eed0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>HomePod</p>
  <p>声声有天地</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/40720b10eed0/202302040001.png" class="" title="HomePod（2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>HomePod</tag>
      </tags>
  </entry>
  <entry>
    <title>元宵节</title>
    <url>/zh-CN/fb75f64c9487/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元宵节快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/fb75f64c9487/202302050001.jpg" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元宵节</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini（M2，M2 Pro，2023年）</title>
    <url>/zh-CN/150776840846/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Mac mini</p>
  <p>涨内力，添迅猛。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/150776840846/202302060001.png" class="" title="Mac mini（M2，M2 Pro，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>黑豹2</title>
    <url>/zh-CN/cd5a956d6e1d/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　曾经肩负种族繁盛使命的一代明君“黑豹”特查拉国王猝然离世，当人民还沉浸在悲伤之中时，拉曼达女王（安吉拉·贝塞特 Angela Bassett 饰）和特查拉年轻的苏睿（利蒂希娅·赖特 Letitia Wright 饰）不得不肩负起千斤重担，为了瓦坎达的存续而不断努力。与此同时，生活在大洋深处的亚特兰蒂斯一族宁静的生活被打破，而这一切源于贪婪的人类对振金的无限渴求。愤怒的亚特兰蒂斯王子纳摩（特诺切·韦尔塔 Tenoch Huerta 饰）将矛头指向了瓦坎达。新的危机扑面而来，针对瓦坎达的阴谋也旋即展开。</p>
<p>　　陆地与海洋、现代与古文明的战争一触即发，无人能免……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>蚁人与黄蜂女：量子狂潮</title>
    <url>/zh-CN/5c507b306568/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　在与灭霸的终极决战结束后，“蚁人”斯科特·朗（保罗·路德 Paul Rudd 饰）和“黄蜂女”霍普·凡·戴恩（伊万杰琳·莉莉 Evangeline Lilly 饰）一家迎来了分外难得的平静生活，当然两个人作为救世主也得到周遭人的喜爱和敬仰。可是短暂的安逸之后，新的危机突然袭来。斯科特的女儿凯茜（凯瑟琳·纽 顿 Kathryn Newton 饰）一次失误操作，将父母以及外公外婆重新带回量子世界。在那个光怪陆离的世界里，珍妮特（米歇尔·菲佛 Michelle Pfeiffer）与老友重逢，斯科特等也结识新的朋友。与此同时，他们发现曾在量子世界得到珍妮特帮助的征服者康（乔纳森·梅杰斯 Jonathan Majors 饰）已经建立起一个强大的帝国。</p>
<p>　　而这个号称宇宙最强存在的反派，正意图逃离这个禁缚他许久的量子世界……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>雨水</title>
    <url>/zh-CN/fe9d2aa0ca49/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>雨水</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/fe9d2aa0ca49/202302190001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>雨水</tag>
      </tags>
  </entry>
  <entry>
    <title>惊蛰</title>
    <url>/zh-CN/1357008c12ac/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>惊蛰</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1357008c12ac/202303060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>惊蛰</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 14 Plus（A15，明黄，2023年）和 iPhone 14（A15，明黄，2023年）</title>
    <url>/zh-CN/4b23784b0d56/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iPhone 14 Plus | iPhone 14</p>
  <p>一抹明黄新入列。</p>
</div>

<div style="text-align:center;">
  
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>雷霆沙赞！众神之怒</title>
    <url>/zh-CN/042b95a210ca/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　比利·巴特森和其他孩子们虽然获得了超凡的神力和成人的外表，但仍处在青春期的他们还在学习如何平衡内心与外在的不同。但是当阿特拉斯的女儿——复仇三女神来到地球，寻找很久以前被偷走的神力时，比利·巴特森和家人们将为了守护他们的超能力、生命以及整个世界的命运而展开一场激战。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>春分</title>
    <url>/zh-CN/f16c580852da/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>春分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f16c580852da/202303210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>春分</tag>
      </tags>
  </entry>
  <entry>
    <title>龙与地下城：侠盗荣耀</title>
    <url>/zh-CN/72b4dd9faff1/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　艾德金（克里斯·派恩 Chris Pine 饰）是一名吟游诗人，在一次盗宝行动中，他的贪婪导致了妻子的死亡。之后，野蛮人霍尔盖（米歇尔·罗德里格兹 Michelle Rodriguez 饰）出现在了颓废的艾德金身边，和他共同抚养女儿琪拉（克洛伊·科尔曼 Chloe Coleman 饰）。</p>
<p>　　琪拉长大之后，艾德金、霍尔盖带着琪拉和她的舅舅福奇（休·格兰特 Hugh Grant 饰）等人组成了一支盗宝团队，哪知道在一次行动之中失手了，最终，艾德金和霍尔盖锒铛入狱。一晃眼多年过去，艾德金和霍尔盖联手越狱，并且决定夺回他们当年未得手的宝物，为了达成目的，他们还吸纳了菜鸟术士西蒙（贾斯蒂斯·史密斯 Justice Smith 饰）和德鲁伊女孩多立克（索菲娅·莉莉丝 Sophia Lillis 饰）。就在艾德金一行人离宝物越来越近之际，当年带着琪拉逃跑的福奇，他的真面目也渐渐的展露了出来。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>清明</title>
    <url>/zh-CN/70cecb228caa/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>清明</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/70cecb228caa/202304050001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>清明</tag>
      </tags>
  </entry>
  <entry>
    <title>超级马力欧兄弟大电影</title>
    <url>/zh-CN/a0e7b3af8243/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　马力欧（克里斯·帕拉特 Chris Pratt 配音）和路易吉（查理·戴 Charlie Day 饰）是生活在布鲁克林的两名水管工，他们刚刚成立了自己的小公司，但很显然，他们的家人并不完全支持兄弟两人的这份事业。某日，在工作中，马力欧和路易吉被水管吸入到了一个光怪陆离的世界之中，两人在旅途中被迫分开，马力欧来到了由碧姬公主（安雅·泰勒-乔伊 Anya Taylor-Joy 配音）统治的蘑菇王国，而路易吉则不幸的被传送到了由酷霸王（杰克·布莱克 Jack Black 配音）统治的库巴王国。</p>
<p>　　此时，酷霸王正准备大举进攻蘑菇国，掳走公主并和她结婚，在这个节骨眼上，马力欧的出现带给了碧姬公主希望，她带着马力欧来到了丛林王国，请求那里的国王和王子（塞斯·罗根 Seth Aaron Rogen 饰）的支援。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>潘玮柏 808</title>
    <url>/zh-CN/192bb31c33e0/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Apple Music</tag>
        <tag>潘玮柏</tag>
      </tags>
  </entry>
  <entry>
    <title>阿凡达：水之道</title>
    <url>/zh-CN/26cc5e745a46/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　这一天，身材高大，对篮球有着无限执着的赤木刚宪（三宅健太 配音）、从高一起就担任球队主力的超级新星流川枫（神尾晋一郎 配音）、初中时代曾获得MVP荣誉，在高中时代重新拾起了对篮球的热情的三井寿（笠间淳 配音）、身材矮小却拥有着惊人的速度和高超的运球技巧的宫城良田（仲村宗悟 配音），以及高中时代才开始接触篮球，却拥有着强大的爆发力和无限潜力的樱木花道（木村昴 配音），湘北篮球队的这五人终于站上了全国大赛的赛场，他们所要面对的，是日本最强球队山王工业。</p>
<p>　　和激烈的篮球赛同时叙述的，是宫城良田的一生，他从哥哥那里继承了对篮球的激情和信念，却一直都活在优秀的哥哥的阴影之下。该动画电影由漫画《灌篮高手》的原作者井上雄彦亲自操刀，为所有人的青春画下浓墨重彩的句点。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>谷雨</title>
    <url>/zh-CN/2eb7f6a31a08/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>谷雨</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/2eb7f6a31a08/202304200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>谷雨</tag>
      </tags>
  </entry>
  <entry>
    <title>银河护卫队3</title>
    <url>/zh-CN/17b1b23e5a34/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　历经磨难与考验，银河护卫队总算在虚无之地暂时安顿下来。可就在某一天，不速之客亚当术士（威尔·保尔特 Will Poulter 饰）的闯入不仅打破了这里的安宁与祥和，更将一场生死危机带到这群好朋友中间。战斗中，火箭浣熊（布莱德利·库珀 Bradley Cooper 配音）身负重伤，奄奄一息。为了拯救好友的生命，星爵（克里斯·帕拉特 Chris Pratt 饰）和星云（凯伦·吉兰 Karen Gillan 饰）、毁灭者（戴夫·巴蒂斯塔 Dave Bautista 饰）、螳螂女（庞·克莱门捷夫 Pom Klementieff 饰）、格鲁特（范·迪塞尔 Vin Diesel 配音）卡魔拉（佐伊·索尔达娜 Zoe Saldana 饰）前往创造了火箭的奥果公司寻找起死回生的办法。</p>
<p>　　然而在那个诡异的世界，他们意外发现了火箭浣熊不为人知的悲惨过往……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>立夏</title>
    <url>/zh-CN/919333424693/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立夏</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/919333424693/202305060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立夏</tag>
      </tags>
  </entry>
  <entry>
    <title>速度与激情10</title>
    <url>/zh-CN/4b4aae8c3474/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　在完成了无数任务，克服了各种不可能的困难之后，唐老大（范·迪塞尔 Vin Diesel 饰）和他的家族以智慧、勇气和速度过五关斩六将，打败了一路上的所有敌人。如今，他们面对的是一名危险至极的对手：这个从过往阴影中浮出水面的具有致命威胁的人物，誓要报偿血海深仇，决心破坏这个家族，彻底摧毁唐老大所热爱的一切及其至亲至爱之人。</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>小满</title>
    <url>/zh-CN/4f0fa9eccecc/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小满</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/4f0fa9eccecc/202305210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小满</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 2023 全球开发者大会</title>
    <url>/zh-CN/1572e1d905a0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060001.png" class="" title="Apple 2023 全球开发者大会">
</div>

<div id="biaoti">
  <p>飞码来报</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060002.png" class="" title="Apple 2023 全球开发者大会">
</div>

<div id="biaoti">
  <p>码出新宇宙</p>
</div>

<div id="biaoti">
  <p>快码加鞭，一点到。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060003.png" class="" title="Apple 2023 全球开发者大会">
</div>

<div id="biaoti">
  <p>快码加鞭，一点到。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060004.png" class="" title="Apple 2023 全球开发者大会">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060005.png" class="" title="MacBook Air 15 英寸（M2，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060006.png" class="" title="Mac Studio（M2 Max，M2 Ultra，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1572e1d905a0/202306060007.png" class="" title="Mac Pro（M2 Ultra，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>开发者大会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>芒种</title>
    <url>/zh-CN/ec4aa3299640/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>芒种</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ec4aa3299640/202306060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>芒种</tag>
      </tags>
  </entry>
  <entry>
    <title>变形金刚：超能勇士崛起</title>
    <url>/zh-CN/1ac8a4fcec1a/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　1994年，美国纽约。退役军人诺亚·迪亚兹（安东尼·拉莫斯 Anthony Ramos 饰）为了给弟弟治病而四处求职，却不断碰壁，情急之下他铤而走险，打算偷车销赃赚钱。谁曾想第一单就偷了变成汽车形态的博派战士幻影（皮特·戴维森 Pete Davidson 配音），随即卷入宇宙层级的大战争中。原来宇宙中游弋着被称为灭世邪神的恐怖之王宇宙大帝（科尔曼·多明戈 Colman Domingo 配音），它靠不断吞噬其他能源富足的星球补充能量，为此急需要能够折叠空间的“超曲速钥匙”来满足贪欲。此前数千年，被宇宙大帝灭亡家园的擎天圣（朗·普尔曼 Ron Perlman 配音）带着钥匙逃到地球，而他们的踪迹终于被宇宙大帝及其爪牙天灾（彼特·丁拉基 Peter Dinklage 配音）发现。</p>
<p>　　于是，地球人、汽车人、巨无霸联合起来，与来犯的强敌展开对抗……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Air 15 英寸（M2，2023年）</title>
    <url>/zh-CN/0c2349b3c450/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Air</p>
  <p>巨给力，</p>
  <p>巨纤薄。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/0c2349b3c450/202306130001.png" class="" title="MacBook Air 15 英寸（M2，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Studio（M2 Max，M2 Ultra，2023年）和 Mac Pro（M2 Ultra，2023年）</title>
    <url>/zh-CN/c9b9ab2ccbc2/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Mac Studio</p>
  <p>动力动真格</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c9b9ab2ccbc2/202306150001.png" class="" title="Mac Studio（M2 Max，M2 Ultra，2023年）">
</div>

<div id="biaoti">
  <p>Mac Pro</p>
  <p>由 Apple 芯片重塑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c9b9ab2ccbc2/202306150002.png" class="" title="Mac Pro（M2 Ultra，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>闪电侠</title>
    <url>/zh-CN/cdf9d101e2db/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　自从成为正义联盟中的一员，闪电侠巴里（埃兹拉·米勒 Ezra Miller 饰）便成为一个日夜忙碌的超级英雄。可是虽然他已经具备了拯救世人的非凡能力，却依旧对自己既定的命运束手无策。父亲弑妻案（朗·里维斯顿 Ron Livingston 饰）复审在即，关键证据又无法有效 佐证。由于之前对战荒原狼时曾短暂超越光速穿越时空，巴里不顾蝙蝠侠（迈克尔·基顿 Michael Keaton 饰）的劝阻，一路穿越到母亲遇害的那一天。他原本以为通过不起眼的小动作能够拯救母亲，却不曾想宇宙因为这个意外转折而发生蝴蝶效应。当巴里回到自己变成闪电侠的前夕，他发现父母健康快乐的生活，而海王、钢骨、戴安娜等超级战士似乎缺席了这个时代。</p>
<p>　　更糟糕的是，追杀超人的佐德将军（迈克尔·珊农 Michael Shannon 饰）降临地球，他将在毫无阻碍的情况下毁灭世界……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>夏至</title>
    <url>/zh-CN/9da1a4624b9a/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>夏至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/9da1a4624b9a/202306210001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>夏至</tag>
      </tags>
  </entry>
  <entry>
    <title>神都不良探</title>
    <url>/zh-CN/61e8f1bed470/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>实体</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
        <tag>光盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift Speak Now（Taylor&#39;s Version）</title>
    <url>/zh-CN/a0ffebd2e3c5/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>“你知道，现实生活总是很有意思的。”Taylor Swift 在 2010 年专辑《Speak Now》的唱片内页里写道。《Speak Now》是她的第三张专辑，也是她多年后为了收回母带所有权而选择重录的第三部作品。“有时候你得保持沉默，有时候你得等待机会。但如果你已经明白自己的感受、清楚地知道自己需要表达什么，你肯定能感觉到时机的来临。”</p>
<p>Swift 独自包揽了专辑《Speak Now》的歌曲创作，成稿于巡演期间。彼时她刚过 20 岁，还在摸索如何从成年人的视角与艺术家的身份出发，找到自己的音乐风格。这一次录制新版专辑时，Swift 选择忠于原版专辑，也忠于年轻时的自己。她与 Fall Out Boy 和 Paramore 主唱 Hayley Williams 分别合作了“From the Vault”系列曲目《Electric Touch》《Castles Crumbling》，向这两组影响自己早期创作的音乐人致敬。虽然她将新版专辑的制作人从纳什维尔的 Nathan Chapman 换成了近期经常合作的 Jack Antonoff 和 Aaron Dessner，但编曲继承了温暖清澈的风格，而且比原版更加质朴，亦兼具她日后杂糅多元曲风的流行视野。如今，我们都知道 2012 年的《Red》对 Swift 来说意味着什么，但回顾《Speak Now》的歌曲，我们其实已经可以预见她日后的发展。</p>
<p>《Speak Now》的美妙之处在于用简洁的歌曲道出复杂的情感。Swift 诚实地展现了自己脆弱的一面，她同时也充满力量（《Mean》）；她依然天真，但也知道什么时候该负起责任（《Dear John》）；她明智地承认错误（《Back to December》），也葆有发现他人闪光点的一面（《Innocent》）；当然，她渴望成长和独立（《Speak Now》），但她独自搬进新公寓时仍然会哭泣——不仅是因为想念儿时的家，也是因为知道自己永远无法再回到那个时候了（《Never Grow Up》）。</p>
<p>这张专辑曲风大气，同时也有许多值得玩味的细节。比如在流行朋克风的《Better Than Revenge》当中，她写道情敌觉得她疯了，因为 Swift 喜欢用她的名字押韵。Swift 作品中这种大与小、简明与晦涩的平衡，让她在众多当代流行创作人中脱颖而出，成为初涉成人生活的同龄人们厘清复杂情感的指路明灯。</p>
<p>当然，能与她产生共鸣的不仅是懵懂少年。Swift 之所以特别，就是因为她本能地知道所有人都会经历她所写的伤痛。在专辑《Fearless》的内页里，她表明自己相信白马王子以及永远幸福的童话能够带给自己的力量；而在《Speak Now》里，大部分的“白马王子”徒有其表，她也终于明白，真正让人永远幸福的是爱过这些人之后，你所获得的智慧与坚韧。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>小暑</title>
    <url>/zh-CN/a6419bb0b148/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a6419bb0b148/202307070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小暑</tag>
      </tags>
  </entry>
  <entry>
    <title>大暑</title>
    <url>/zh-CN/1b61cb0dd118/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/1b61cb0dd118/202307230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大暑</tag>
      </tags>
  </entry>
  <entry>
    <title>妖怪手表4强化之章</title>
    <url>/zh-CN/5bc00ef20f83/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>立秋</title>
    <url>/zh-CN/8f5a374dfe0d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立秋</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/8f5a374dfe0d/202308080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立秋</tag>
      </tags>
  </entry>
  <entry>
    <title>处暑</title>
    <url>/zh-CN/ad4140f4637d/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>处暑</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ad4140f4637d/202308230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>处暑</tag>
      </tags>
  </entry>
  <entry>
    <title>奥本海默</title>
    <url>/zh-CN/1355d39bdeef/</url>
    <content><![CDATA[<hr>
<h1 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h1><p>　　当我们为权力金钱焦虑、兴奋与愤怒时，却根本想象不到“他们”在谈论着怎样更重要的事情。</p>
<p>　　随着战争阴云笼罩世界上空，各国紧锣密鼓抓紧军事竞赛。为了抢占先机，美国陆军中将莱斯利·格罗夫斯（马特·达蒙 Matt Damon 饰）找到量子力学与核物理学领域的扛鼎人物罗伯特·奥本海默（基里安·墨菲 Cillian Murphy 饰），力荐其担任曼哈顿计划的首席科学家以及洛斯阿拉莫斯国家实验室的总负责人。经过两年争分夺秒的研发，硕大的蘑菇云终于在荒原的上空腾起，也宣告着绞肉机一般的二战即将落下帷幕。奥本海默有如将火种带到人间的普罗米修斯，可是对人性的参悟和对未来的担忧迫使他走向与政府相悖的道路。更可悲的是，凡人钟情的物欲也将一世天才裹挟至炼狱之中，永世燃烧……</p>
<hr>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>IMAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft 次世代 XBOX（黑色）上市</title>
    <url>/zh-CN/72897b5724f7/</url>
    <content><![CDATA[<hr>
<h1 id="主机介绍"><a href="#主机介绍" class="headerlink" title="主机介绍"></a>主机介绍</h1><p>这款 Xbox Series S 磨砂黑除了颜色的变化外，还升级了存储，由原来的 512GB 提升至 1TB，与 Xbox Series X 是一样的。</p>
<p>Xbox Series S 搭载了台积电 7nm 工艺制造的 AMD 定制芯片，采用了 8 核心 16 线程的 Zen 2 架构 CPU，频率为 3.6 GHz，以及采用了 RDNA 2 架构的 GPU，CU 数量分别为 20 个，频率为 1.565 GHz，对应的 GDDR6 内存为 10GB，搭载的 PCIe 4.0 SSD 容量为 512GB 或 1TB，支持 HDMI 2.1 输出。作为次时代家用游戏机，Xbox Series S 支持众多新特性，包括硬件级加速光线追踪、DirectML 机器学习、VRS 可变速率着色、可变刷新率、向后兼容性等。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><img src="/zh-CN/72897b5724f7/202309010001.png" class="" title="Xbox Series X|S">

<hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>国行</tag>
        <tag>Microsoft</tag>
        <tag>XBOX</tag>
      </tags>
  </entry>
  <entry>
    <title>白露</title>
    <url>/zh-CN/40da7810c11f/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>白露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/40da7810c11f/202309080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>白露</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/c98c2227e90c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130003.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130004.png" class="" title="iPhone 15 Pro Max（A17 Pro，2023年）和 iPhone 15 Pro（A17 Pro，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130005.png" class="" title="iPhone 15 Plus（A16，2023年）和 iPhone 15（A16，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130006.png" class="" title="Apple Watch Series 9（S9，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/c98c2227e90c/202309130007.png" class="" title="Apple Watch Ultra 2（S9，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone 15 Pro（A17 Pro，2023年）和 iPhone 15（A16，2023年）</title>
    <url>/zh-CN/14cc67d3fef8/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/14cc67d3fef8/202309220001.png" class="" title="iPhone 15 全系列">
</div>

<div id="biaoti">
  <p>iPhone 15 Pro Max | iPhone 15 Pro</p>
  <p>钛金属</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/14cc67d3fef8/202309220002.png" class="" title="iPhone 15 Pro Max（A17 Pro，2023年）和 iPhone 15 Pro（A17 Pro，2023年）">
</div>

<div id="biaoti">
  <p>iPhone 15 Plus | iPhone 15</p>
  <p>开新的，超开心。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/14cc67d3fef8/202309220003.png" class="" title="iPhone 15 Plus（A16，2023年）和 iPhone 15（A16，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>秋分</title>
    <url>/zh-CN/f029169ea5af/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>秋分</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/f029169ea5af/202309230001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>秋分</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Watch Ultra 2（S9，2023年）和 Apple Watch Series 9（S9，2023年）</title>
    <url>/zh-CN/226154f3f057/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>Apple Watch Ultra 2</p>
  <p>野出新维度</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/226154f3f057/202309250001.png" class="" title="Apple Watch Ultra 2（S9，2023年）">
</div>

<div id="biaoti">
  <p>Apple Watch Series 9</p>
  <p>智能加成，</p>
  <p>加亮加实力。</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/226154f3f057/202309250002.png" class="" title="Apple Watch Series 9（S9，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Watch</tag>
      </tags>
  </entry>
  <entry>
    <title>寒露</title>
    <url>/zh-CN/be8f694470f6/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>寒露</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/be8f694470f6/202310080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>寒露</tag>
      </tags>
  </entry>
  <entry>
    <title>霜降</title>
    <url>/zh-CN/6e140f0f7331/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>霜降</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/6e140f0f7331/202310240001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>霜降</tag>
      </tags>
  </entry>
  <entry>
    <title>Taylor Swift 1989（Taylor&#39;s Version）[Deluxe]</title>
    <url>/zh-CN/c51b004bda3e/</url>
    <content><![CDATA[<hr>
<h1 id="专辑介绍"><a href="#专辑介绍" class="headerlink" title="专辑介绍"></a>专辑介绍</h1><p>《1989 (Taylor’s Version)》终于快要问世时，Taylor Swift 提到，在她为夺回版权精心重录的所有专辑中，这一张有着特别的意义。“从各个层面上来说，《1989》改变了我的人生。”她在社交媒体上写道，“说实话，这是我最喜欢的重录专辑，因为这里面的 5 首‘From The Vault’（未发行版）歌曲是真的好听，我简直不敢相信当初它们竟然未被收录进专辑。”</p>
<p>从唱着“我不必假装喜欢迷幻摇滚&#x2F;假装喜欢和那群满脑子要事的大人物一起&#x2F;待在豪华游艇上”（I don’t have to pretend I like acid rock&#x2F;Or that I’d like to be on a mega-yacht&#x2F;With important men who think important thoughts）的《Now That We Don’t Talk》，到《Say Don’t Go》和《Is It Over Now?》，我们可以真切体会到，Swift 在创作这 5 首歌曲时不仅专注、犀利，而且是在考虑新的受众这件事的。它们不仅完全值得入选最初的专辑，巩固 Taylor 身为“创作者”的角色，而且在这些从前被视为无关紧要，实则华丽精致的蒙太奇式作品里，Swift 表现得如此游刃有余，如同一位流行乐老匠人。</p>
<p>距离原版专辑诞生已过将近十年，Swift 如今已是一举一动都能影响流行文化动向的巨星。而回首 2014 年，我们似乎很容易忽略，当时的 Swift 正迎来（或者说是“筹划”）自己生活和事业的转折点，野心勃勃地把刚满 24 岁的自己一步步塑造成我们今天熟悉的超级巨星。在 2010 年的《Speak Now》和 2012 年的《Red》里，她已经开始调整专辑中乡村乐和流行乐的比重，并在后一张专辑里和瑞典超级制作人 Max Martin 与 Shellback 搭档。到了《1989》，她也不再去特地思考“比重”了，想做什么就做什么，在流行音乐的道路上一往无前。她不仅拥抱了强劲节拍和华丽制作，更在专辑中欣然注入了轻松活泼的感觉。</p>
<p>《1989》不只埋藏着 Swift 转型的野心。如果说《Speak Now》和 2008 年的《Fearless》内含莎翁戏剧般的张力，那么《1989》的 Swift 就是张扬的、自信的，她大口呼吸着自由的空气（《Style》），也尽情狂想（《Wildest Dreams》），年轻时的她还做不到如此从容。《Welcome to New York》是鎏金的欲望叙事，她决心在这座潜藏无尽可能性的城市里让自己重获生机——“灯光如此明亮，但从未让我失明”（The lights are so bright&#x2F;But they never blind me,me）。Swift 借这首歌向大家宣布，她至少目前要挥别纳什维尔和乡村乐，也脱离了它们为她的形象和风格带来的桎梏。Swift 迈步的姿态昂首挺胸——《Shake It Off》里的她对过去的恩怨一笑置之，心态成熟而自在；甚至在《Blank Space》里，她调侃起自己来了，要知道这几乎曾是个“不可说”的话题啊。</p>
<p>《1989》与 Shania Twain 的《Come On Over》、Bob Dylan 的《Bringing It All Back Home》类似，也是艺人故意跟众人期待反着来，最终仍然获得成功的范例。正如标题所示，出生在 80 年代末的 Swift 并不是听着 80 年代的合成器风格流行乐长大的，不过在 Martin、Shellback、Ryan Tedder 和后来的好搭档 Jack Antonoff 的帮助下，80 年代风格在这张专辑里还是处处可循。正如她在早期专辑里颠覆了乡村乐的传统和定式，Swift 没有把充满怀旧气息的《1989》用来回顾过去，而是以之为起点，大步向前。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>Taylor Swift</tag>
        <tag>Apple Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 特别活动</title>
    <url>/zh-CN/a42c6e69a462/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/a42c6e69a462/202310310001.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a42c6e69a462/202310310002.png" class="" title="特别活动">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a42c6e69a462/202310310003.png" class="" title="MacBook Pro（M3，M3 Pro，M3 Max，2023年）">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/a42c6e69a462/202310310004.png" class="" title="iMac 24 英寸（M3，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>发布会</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Apple Event</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro（M3，M3 Pro，M3 Max，2023年）</title>
    <url>/zh-CN/cd05740540ae/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>MacBook Pro</p>
  <p>狠角色，很绝色。</p>
</div>

<div style="text-align:center;">
  
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>立冬</title>
    <url>/zh-CN/7ced53955af4/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立冬</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/7ced53955af4/202311080001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立冬</tag>
      </tags>
  </entry>
  <entry>
    <title>iMac 24 英寸（M3，2023年）</title>
    <url>/zh-CN/4156dbfa0445/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>iMac</p>
  <p>超能力暴涨</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/4156dbfa0445/202311080001.png" class="" title="iMac 24 英寸（M3，2023年）">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>34岁生日快乐</title>
    <url>/zh-CN/7843c5508c23/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>生日快乐</p>
</div>

<div style="text-align:center;">
  <a href="/anniversary/">
    <img src="/zh-CN/7843c5508c23/202311150001.svg" class="" title="纪念日">
  </a>
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>小雪</title>
    <url>/zh-CN/e27580628c9b/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/e27580628c9b/202311220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小雪</tag>
      </tags>
  </entry>
  <entry>
    <title>SONY 次世代 PlayStation（轻薄版）上市</title>
    <url>/zh-CN/b5b44f2ba419/</url>
    <content><![CDATA[<hr>
<h1 id="主机介绍"><a href="#主机介绍" class="headerlink" title="主机介绍"></a>主机介绍</h1><p>与前机型相比，PlayStation 5（轻薄版）体积减少了30% 以上，重量也分别减轻了18% 和24%。主机盖分成四片独立面板，顶部采用亮面外观，底部则仍保持雾面设计。如购买PlayStation 5（轻薄版）数字版，可在日后加购专用超高清蓝光光驱。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><img src="/zh-CN/b5b44f2ba419/202312010001.png" class="" title="PlayStation 5（轻薄版）">

<hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>国行</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
      </tags>
  </entry>
  <entry>
    <title>有氧拳击2拳力舞动</title>
    <url>/zh-CN/e2e1ce6f0d2f/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>大雪</title>
    <url>/zh-CN/72df4cbe56ee/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大雪</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/72df4cbe56ee/202312070001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大雪</tag>
      </tags>
  </entry>
  <entry>
    <title>灵活脑学校</title>
    <url>/zh-CN/20ea00df21c1/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>Nintendo</tag>
        <tag>Switch</tag>
        <tag>实体</tag>
        <tag>卡带</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/zh-CN/657ef2df3431/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>冬至</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/657ef2df3431/202312220001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>冬至</tag>
      </tags>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/zh-CN/871903fbb6c0/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>元旦快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/871903fbb6c0/202401010001.png" class="" title="纪念日">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>小寒</title>
    <url>/zh-CN/d210a6f59098/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>小寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/d210a6f59098/202401060001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>小寒</tag>
      </tags>
  </entry>
  <entry>
    <title>拳皇15</title>
    <url>/zh-CN/256236e70a64/</url>
    <content><![CDATA[<hr>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="正面"><a href="#正面" class="headerlink" title="正面"></a>正面</h2><h2 id="侧面"><a href="#侧面" class="headerlink" title="侧面"></a>侧面</h2><h2 id="背面"><a href="#背面" class="headerlink" title="背面"></a>背面</h2><hr>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>主机</tag>
        <tag>实体</tag>
        <tag>SONY</tag>
        <tag>PlayStation</tag>
        <tag>光盘</tag>
      </tags>
  </entry>
  <entry>
    <title>大寒</title>
    <url>/zh-CN/db3708133acc/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>大寒</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/db3708133acc/202401200001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>大寒</tag>
      </tags>
  </entry>
  <entry>
    <title>AirPods Pro 龙年限量款</title>
    <url>/zh-CN/98c067d90a0c/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div style="text-align:center;">
  <img src="/zh-CN/98c067d90a0c/202401220001.png" class="" title="Apple">
</div>

<div style="text-align:center;">
  <img src="/zh-CN/98c067d90a0c/202401220002.png" class="" title="AirPods Pro 龙年限量款">
</div>

<hr>
]]></content>
      <categories>
        <category>电子产品</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>AirPods</tag>
      </tags>
  </entry>
  <entry>
    <title>立春</title>
    <url>/zh-CN/cf1616a458e7/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>立春</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/cf1616a458e7/202402040001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>立春</tag>
      </tags>
  </entry>
  <entry>
    <title>除夕</title>
    <url>/zh-CN/ab6f79b7a3ac/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>除夕快乐</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/ab6f79b7a3ac/202402090001.png" class="" title="龙年大吉">
</div>

<hr>
]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>除夕</tag>
      </tags>
  </entry>
  <entry>
    <title>雨水</title>
    <url>/zh-CN/8c033faee8a9/</url>
    <content><![CDATA[<hr>
<style>
  #biaoti {
    text-align: center;
    padding: 20px;
    font-size: 48px;
  }
</style>

<div id="biaoti">
  <p>雨水</p>
</div>

<div style="text-align:center;">
  <img src="/zh-CN/8c033faee8a9/202402190001.webp" class="" title="节气">
</div>

<hr>
]]></content>
      <categories>
        <category>节气</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>雨水</tag>
      </tags>
  </entry>
</search>
